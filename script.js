let properties = [];
let filteredProperties = []; // البيانات المفلترة الحالية للتصدير
let currentView = 'cards';
let currentCountry = null;
let currentProperty = null;
let filterStatus = null;

// متغيرات الفلاتر النشطة
let activeFilters = {
    city: '',
    property: '',
    status: '',
    contractType: '',
    propertyType: '',
    dateFilter: '',
    startDate: '',
    endDate: '',
    nearExpiry: false,
    monthFilter: '',
    multiProperty: [],
    owner: ''
};

// ===== ACTIVE FILTERS MANAGEMENT SYSTEM =====
// نظام إدارة الفلاتر النشطة

// تحديث عرض الفلاتر النشطة
function updateActiveFiltersDisplay() {
    console.log('🔄 تحديث عرض الفلاتر النشطة...');

    // إعادة تعيين حالة أزرار مسح الفلاتر أولاً
    resetClearFiltersButtonsState();

    const desktopList = document.getElementById('activeFiltersList');
    const mobileList = document.getElementById('activeFiltersListMobile');
    const desktopClearBtn = document.getElementById('clearAllFiltersBtn');
    const mobileClearBtn = document.getElementById('clearAllFiltersBtnMobile');
    const desktopContainer = document.getElementById('activeFiltersDesktop');
    const mobileFilterBtn = document.getElementById('mobileFiltersBtn');
    const mobileFilterCount = document.getElementById('mobileFilterCount');
    const noFiltersMessage = document.getElementById('noFiltersMessage');

    console.log('📋 العناصر الموجودة:', {
        desktopList: !!desktopList,
        mobileList: !!mobileList,
        desktopContainer: !!desktopContainer,
        mobileFilterBtn: !!mobileFilterBtn
    });

    // مسح القوائم الحالية
    if (desktopList) desktopList.innerHTML = '';
    if (mobileList) mobileList.innerHTML = '';

    const filters = [];

    // جمع الفلاتر النشطة
    if (currentCountry && currentCountry !== 'الكل' && currentCountry !== null) {
        filters.push({
            type: 'city',
            label: `المدينة: ${currentCountry}`,
            value: currentCountry
        });
    }

    if (currentProperty && currentProperty !== 'الكل' && currentProperty !== null) {
        filters.push({
            type: 'property',
            label: `العقار: ${currentProperty}`,
            value: currentProperty
        });
    }

    if (filterStatus && filterStatus !== 'الكل' && filterStatus !== null) {
        const statusLabels = {
            'فعال': 'فعال',
            'منتهي': 'منتهي',
            'فارغ': 'فارغ',
            'على وشك الانتهاء': 'على وشك الانتهاء'
        };
        filters.push({
            type: 'status',
            label: `الحالة: ${statusLabels[filterStatus] || filterStatus}`,
            value: filterStatus
        });
    }

    // إضافة فلتر نوع العقار (المباني/الأراضي)
    if (currentPropertyTypeFilter && currentPropertyTypeFilter !== null) {
        const typeLabels = {
            'buildings': 'المباني',
            'lands': 'الأراضي'
        };
        filters.push({
            type: 'propertyTypeFilter',
            label: `النوع: ${typeLabels[currentPropertyTypeFilter] || currentPropertyTypeFilter}`,
            value: currentPropertyTypeFilter
        });
    }

    // إضافة فلاتر أخرى حسب الحاجة
    if (activeFilters.contractType) {
        filters.push({
            type: 'contractType',
            label: `نوع العقد: ${activeFilters.contractType}`,
            value: activeFilters.contractType
        });
    }

    if (activeFilters.propertyType) {
        filters.push({
            type: 'propertyType',
            label: `نوع العقار: ${activeFilters.propertyType}`,
            value: activeFilters.propertyType
        });
    }

    if (activeFilters.dateFilter) {
        filters.push({
            type: 'dateFilter',
            label: `فلتر التاريخ: ${activeFilters.dateFilter}`,
            value: activeFilters.dateFilter
        });
    }

    if (activeFilters.monthFilter) {
        filters.push({
            type: 'monthFilter',
            label: `الشهر: ${activeFilters.monthFilter}`,
            value: activeFilters.monthFilter
        });
    }

    if (activeFilters.multiProperty && activeFilters.multiProperty.length > 0) {
        filters.push({
            type: 'multiProperty',
            label: `عقارات متعددة (${activeFilters.multiProperty.length})`,
            value: activeFilters.multiProperty
        });
    }

    if (activeFilters.owner) {
        filters.push({
            type: 'owner',
            label: `المالك: ${activeFilters.owner}`,
            value: activeFilters.owner
        });
    }

    // عرض الفلاتر
    const hasFilters = filters.length > 0;

    console.log('🏷️ الفلاتر المجمعة:', filters);
    console.log('📊 عدد الفلاتر:', filters.length);

    if (hasFilters) {
        filters.forEach(filter => {
            const desktopTag = createFilterTag(filter);
            const mobileTag = createFilterTag(filter);
            if (desktopList) desktopList.appendChild(desktopTag);
            if (mobileList) mobileList.appendChild(mobileTag);
        });

        // إظهار أزرار مسح الكل
        if (desktopClearBtn) {
            desktopClearBtn.style.display = 'inline-flex';
            desktopClearBtn.style.visibility = 'visible';
            desktopClearBtn.style.opacity = '1';
        }
        if (mobileClearBtn) {
            mobileClearBtn.style.display = 'block';
            mobileClearBtn.style.visibility = 'visible';
            mobileClearBtn.style.opacity = '1';
        }

        // إظهار الحاويات
        if (desktopContainer) {
            desktopContainer.style.display = 'block';
            desktopContainer.style.visibility = 'visible';
            desktopContainer.style.opacity = '1';
        }

        // التأكد من إظهار جميع أزرار مسح الفلاتر في الصفحة
        const allClearButtons = document.querySelectorAll('.clear-all-filters-btn');
        allClearButtons.forEach(btn => {
            btn.style.display = 'flex';
            btn.style.visibility = 'visible';
            btn.style.opacity = '1';
        });

        // إظهار زر الفلاتر للهاتف
        if (mobileFilterBtn) {
            mobileFilterBtn.classList.add('has-filters');
            if (mobileFilterCount) {
                mobileFilterCount.textContent = filters.length;
                mobileFilterCount.style.display = 'flex';
            }
        }

        // إخفاء رسالة "لا توجد فلاتر"
        if (noFiltersMessage) noFiltersMessage.style.display = 'none';

    } else {
        // إخفاء أزرار مسح الكل
        if (desktopClearBtn) desktopClearBtn.style.display = 'none';
        if (mobileClearBtn) mobileClearBtn.style.display = 'none';

        // إخفاء الحاويات
        if (desktopContainer) desktopContainer.style.display = 'none';

        // إخفاء زر الفلاتر للهاتف
        if (mobileFilterBtn) {
            mobileFilterBtn.classList.remove('has-filters');
            if (mobileFilterCount) mobileFilterCount.style.display = 'none';
        }

        // إظهار رسالة "لا توجد فلاتر"
        if (noFiltersMessage) noFiltersMessage.style.display = 'block';
    }

    // تحديث حالة جميع أزرار الفلاتر
    updateAllFilterButtonsState();

    // ضمان إظهار أزرار مسح الفلاتر في جميع الأماكن
    ensureClearButtonsVisibility();
}

// دالة لضمان إظهار أزرار مسح الفلاتر في جميع الأماكن
function ensureClearButtonsVisibility() {
    console.log('🔍 فحص وضمان إظهار أزرار مسح الفلاتر...');

    // البحث عن جميع أزرار مسح الفلاتر
    const clearButtons = document.querySelectorAll('.clear-all-filters-btn');
    const hasActiveFilters = document.querySelectorAll('.active-filter-tag').length > 0;

    console.log(`📊 عدد أزرار مسح الفلاتر الموجودة: ${clearButtons.length}`);
    console.log(`🏷️ هناك فلاتر نشطة: ${hasActiveFilters}`);

    if (hasActiveFilters) {
        clearButtons.forEach((btn, index) => {
            btn.style.display = 'flex';
            btn.style.visibility = 'visible';
            btn.style.opacity = '1';
            console.log(`✅ تم إظهار زر مسح الفلاتر رقم ${index + 1}`);
        });

        // إنشاء أزرار مسح الفلاتر المفقودة
        createMissingClearButtons();
    } else {
        clearButtons.forEach((btn, index) => {
            btn.style.display = 'none';
            console.log(`❌ تم إخفاء زر مسح الفلاتر رقم ${index + 1} (لا توجد فلاتر نشطة)`);
        });
    }
}

// دالة لإنشاء أزرار مسح الفلاتر المفقودة
function createMissingClearButtons() {
    console.log('🔧 فحص الأزرار المفقودة...');

    // إعادة تعيين حالة الأزرار الموجودة أولاً
    resetClearFiltersButtonsState();

    // فحص زر الشاشات الكبيرة
    const desktopContainer = document.getElementById('activeFiltersDesktop');
    if (desktopContainer && !desktopContainer.querySelector('.clear-all-filters-btn')) {
        const clearBtn = document.createElement('button');
        clearBtn.className = 'clear-all-filters-btn';
        clearBtn.id = 'clearAllFiltersBtn';
        clearBtn.onclick = function() { clearAllFiltersWithLoading(this); };
        clearBtn.innerHTML = `
            <i class="fas fa-times-circle"></i>
            <span>مسح جميع الفلاتر</span>
        `;
        desktopContainer.appendChild(clearBtn);
        console.log('✅ تم إنشاء زر مسح الفلاتر للشاشات الكبيرة مع loading');
    }

    // فحص زر الإحصائيات (مشترك لجميع المستخدمين)
    const statisticsContainer = document.getElementById('statisticsActiveFilters');
    if (statisticsContainer && !statisticsContainer.querySelector('.clear-all-filters-btn')) {
        const clearBtn = document.createElement('button');
        clearBtn.className = 'clear-all-filters-btn';
        clearBtn.onclick = function() { clearAllFiltersWithLoading(this); };
        clearBtn.innerHTML = `
            <i class="fas fa-times-circle"></i>
            <span>مسح جميع الفلاتر</span>
        `;
        statisticsContainer.appendChild(clearBtn);
        console.log('✅ تم إنشاء زر مسح الفلاتر في قائمة الإحصائيات');
    }

    // فحص زر الشاشات الصغيرة (الجوالات)
    const mobileContainer = document.getElementById('activeFiltersListMobile');
    if (mobileContainer && !mobileContainer.querySelector('.clear-all-filters-btn')) {
        const clearBtn = document.createElement('button');
        clearBtn.className = 'clear-all-filters-btn mobile-clear-btn';
        clearBtn.onclick = function() { clearAllFiltersWithLoading(this); };
        clearBtn.innerHTML = `
            <i class="fas fa-times-circle"></i>
            <span>مسح جميع الفلاتر</span>
        `;
        mobileContainer.appendChild(clearBtn);
        console.log('✅ تم إنشاء زر مسح الفلاتر للشاشات الصغيرة');
    }

    // فحص زر نافذة الفلاتر المحمولة
    const mobileFiltersModal = document.querySelector('.mobile-filters-modal .modal-body');
    if (mobileFiltersModal && !mobileFiltersModal.querySelector('.clear-all-filters-btn')) {
        const clearBtn = document.createElement('button');
        clearBtn.className = 'clear-all-filters-btn mobile-clear-btn';
        clearBtn.onclick = function() { clearAllFiltersWithLoading(this); };
        clearBtn.innerHTML = `
            <i class="fas fa-times-circle"></i>
            <span>مسح جميع الفلاتر</span>
        `;
        mobileFiltersModal.appendChild(clearBtn);
        console.log('✅ تم إنشاء زر مسح الفلاتر في نافذة الفلاتر المحمولة');
    }
}

// إنشاء تاغ فلتر
function createFilterTag(filter) {
    const tag = document.createElement('span');
    tag.className = 'active-filter-tag';
    tag.innerHTML = `
        ${filter.label}
        <i class="fas fa-times"></i>
    `;

    tag.onclick = () => removeFilterWithLoading(filter.type, filter.value, tag);

    return tag;
}

// إزالة فلتر مع مؤشر التحميل
function removeFilterWithLoading(type, value, tagElement) {
    console.log(`🗑️ إزالة فلتر مع loading: ${type} = ${value}`);

    // إظهار مؤشر التحميل على التاغ المحدد
    if (tagElement) {
        // حفظ المحتوى الأصلي
        tagElement.dataset.originalContent = tagElement.innerHTML;

        // إضافة كلاس التحميل وتحديث المحتوى
        tagElement.classList.add('loading');
        tagElement.innerHTML = `
            <i class="fas fa-spinner fa-spin" style="margin-left: 5px;"></i>
            جاري الإزالة...
        `;
    }

    // إظهار مؤشر التحميل على جميع أزرار مسح الفلاتر
    showClearFiltersLoading(true);

    // إضافة كلاس التحميل لجميع حاويات الفلاتر النشطة
    const filterContainers = document.querySelectorAll('.active-filters-list, #activeFiltersList, #activeFiltersListMobile');
    filterContainers.forEach(container => {
        container.classList.add('active-filters-loading');
    });

    // تعطيل جميع تاجات الفلاتر النشطة الأخرى
    const allFilterTags = document.querySelectorAll('.active-filter-tag');
    allFilterTags.forEach(tag => {
        if (tag !== tagElement) {
            tag.style.opacity = '0.5';
            tag.style.pointerEvents = 'none';
        }
    });

    // تنفيذ إزالة الفلتر مع تأخير بصري
    setTimeout(() => {
        removeFilter(type, value);

        // إظهار إشعار نجاح صغير
        showMiniIconNotification('🗑️', '#28a745', 1500);

        // إخفاء مؤشر التحميل بعد اكتمال العملية
        setTimeout(() => {
            showClearFiltersLoading(false);

            // إزالة كلاس التحميل من حاويات الفلاتر
            filterContainers.forEach(container => {
                container.classList.remove('active-filters-loading');
            });

            // إعادة تفعيل جميع تاجات الفلاتر المتبقية
            const remainingFilterTags = document.querySelectorAll('.active-filter-tag');
            remainingFilterTags.forEach(tag => {
                tag.classList.remove('loading');
                tag.style.opacity = '1';
                tag.style.pointerEvents = 'auto';
                tag.style.cursor = 'pointer';
            });
        }, 300);
    }, 600); // تأخير 600ms للتأثير البصري
}

// دالة مساعدة لإظهار رسالة نجاح إزالة الفلتر
function showFilterRemovalSuccess(filterType, filterValue) {
    let message = '';
    switch (filterType) {
        case 'city':
            message = `تم إزالة فلتر المدينة: ${filterValue}`;
            break;
        case 'property':
            message = `تم إزالة فلتر العقار: ${filterValue}`;
            break;
        case 'status':
            message = `تم إزالة فلتر الحالة: ${filterValue}`;
            break;
        case 'contractType':
            message = `تم إزالة فلتر نوع العقد: ${filterValue}`;
            break;
        case 'propertyType':
            message = `تم إزالة فلتر نوع العقار: ${filterValue}`;
            break;
        case 'dateFilter':
            message = `تم إزالة فلتر التاريخ`;
            break;
        case 'monthFilter':
            message = `تم إزالة فلتر الشهر`;
            break;
        case 'multiProperty':
            message = `تم إزالة فلتر العقارات المتعددة`;
            break;
        case 'owner':
            message = `تم إزالة فلتر المالك: ${filterValue}`;
            break;
        default:
            message = `تم إزالة الفلتر: ${filterValue}`;
    }

    console.log(`✅ ${message}`);
    // يمكن إضافة إشعار مرئي هنا إذا أردت
}

// إزالة فلتر محدد مع الحفاظ على التسلسل الهرمي
function removeFilter(type, value) {
    console.log(`🗑️ إزالة فلتر: ${type} = ${value}`);

    switch (type) {
        case 'city':
            // إزالة فلتر المدينة: تفعيل "الكل" برمجياً
            console.log('🏙️ إزالة فلتر المدينة وتفعيل "الكل"...');

            // إعادة تعيين المتغيرات
            currentCountry = null;

            // إذا كان هناك فلتر عقار نشط، قم بإزالته أيضاً لأنه يعتمد على المدينة
            if (currentProperty && currentProperty !== 'الكل') {
                currentProperty = null;
                updatePropertyButtonsState();
            }

            // تفعيل زر "الكل" برمجياً وتحديث العرض
            activateAllCitiesFilter();

            // تحديث العرض فوراً
            renderData();

            console.log('✅ تم تفعيل "الكل" بنجاح');
            break;

        case 'property':
            // إزالة فلتر العقار: إظهار جميع عقارات المدينة المحددة
            console.log('🏢 إزالة فلتر العقار وإظهار جميع عقارات المدينة...');

            currentProperty = null;

            // تفعيل "جميع العقارات" في المدينة المحددة (وليس جميع العقارات)
            activateAllPropertiesInCurrentCity();

            // تحديث العرض فوراً
            renderData();

            console.log('✅ تم إظهار جميع عقارات المدينة المحددة');
            break;

        case 'status':
            // إزالة فلتر الحالة: العودة إلى جميع الحالات
            filterStatus = null;
            updateStatusButtonsState();
            break;

        case 'contractType':
            // إزالة فلتر نوع العقد
            activeFilters.contractType = '';
            contractTypeFilter = null; // إعادة تعيين المتغير الأصلي أيضاً
            updateContractTypeButtonsState();
            break;

        case 'propertyType':
            // إزالة فلتر نوع العقار
            activeFilters.propertyType = '';
            propertyTypeFilter = null; // إعادة تعيين المتغير الأصلي أيضاً
            updatePropertyTypeButtonsState();
            break;

        case 'dateFilter':
            // إزالة فلتر التاريخ
            activeFilters.dateFilter = '';
            activeFilters.startDate = '';
            activeFilters.endDate = '';
            updateDateFilterButtonsState();
            break;

        case 'monthFilter':
            // إزالة فلتر الشهر
            activeFilters.monthFilter = '';
            // إعادة تعيين متغيرات الشهر الأصلية أيضاً
            dateFilterType = '';
            dateFilterDay = '';
            dateFilterMonth = '';
            dateFilterYear = '';
            updateMonthFilterButtonsState();
            break;

        case 'multiProperty':
            // إزالة فلتر العقارات المتعددة
            activeFilters.multiProperty = [];
            updateMultiPropertyButtonsState();
            break;

        case 'owner':
            // إزالة فلتر المالك
            activeFilters.owner = '';
            updateOwnerFilterButtonsState();
            break;

        case 'propertyTypeFilter':
            // إزالة فلتر نوع العقار (المباني/الأراضي)
            currentPropertyTypeFilter = null;
            updatePropertyTypeFiltersState();
            // إعادة تحديث قائمة العقارات
            initPropertyList(currentCountry);
            break;
    }

    // إعادة تحميل البيانات مع الفلاتر المتبقية
    renderData();
    updateActiveFiltersDisplay();
    saveAppState();

    // إظهار رسالة نجاح
    showFilterRemovalSuccess(type, value);

    console.log('✅ تم إزالة الفلتر وتحديث العرض');
}

// دوال تحديث حالة الأزرار المرئية للفلاتر
function updateCityButtonsState() {
    const cityButtons = document.querySelectorAll('.country-btn, .city-btn, .city-option');
    cityButtons.forEach(btn => {
        btn.classList.remove('active');
        // إعادة تعيين لون الزر إلى الافتراضي
        btn.style.background = '';
        btn.style.color = '';
    });

    // إذا لم تكن هناك مدينة محددة، تفعيل زر "الكل"
    if (!currentCountry || currentCountry === 'الكل') {
        const allButton = document.querySelector('.country-btn[data-country="الكل"], .city-option:first-child');
        if (allButton) {
            allButton.classList.add('active');
        }
    }
}

// تفعيل فلتر "الكل" برمجياً عند إزالة فلتر المدينة
function activateAllCitiesFilter() {
    console.log('🎯 تفعيل فلتر "الكل" برمجياً...');

    // استخدام دالة selectCountry مباشرة لتفعيل "الكل"
    if (typeof selectCountry === 'function') {
        selectCountry('الكل');
        console.log('✅ تم استدعاء selectCountry("الكل") بنجاح');

        // تحديث الحالة المرئية لأزرار المدن فوراً
        setTimeout(() => {
            updateCityButtonsVisualState();
        }, 50);

    } else {
        console.warn('⚠️ دالة selectCountry غير متاحة، استخدام الطريقة البديلة...');
        fallbackActivateAll();

        // تحديث الحالة المرئية
        setTimeout(() => {
            updateCityButtonsVisualState();
        }, 50);
    }
}

// تحديث الحالة المرئية لأزرار المدن
function updateCityButtonsVisualState() {
    // البحث عن زر "الكل" وتفعيله مرئياً
    const allButtons = [
        document.querySelector('.country-btn[onclick*="selectCountry(\'الكل\'"]'),
        document.querySelector('.country-btn[onclick*="selectCountry(\\\'الكل\\\'"]'),
        document.querySelector('.country-btn[data-country="الكل"]'),
        ...Array.from(document.querySelectorAll('.country-btn, .city-btn, .city-option')).filter(btn =>
            btn.textContent.trim() === 'الكل' ||
            btn.textContent.includes('الكل')
        )
    ].filter(btn => btn);

    if (allButtons.length > 0) {
        const allButton = allButtons[0];

        // إزالة التفعيل من جميع أزرار المدن
        document.querySelectorAll('.country-btn, .city-btn, .city-option').forEach(btn => {
            btn.classList.remove('active');
            btn.style.background = '';
            btn.style.color = '';
        });

        // تفعيل زر "الكل" مرئياً
        allButton.classList.add('active');
        allButton.style.background = '#007bff';
        allButton.style.color = 'white';

        console.log('✅ تم تفعيل زر "الكل" مرئياً');
    }
}

// طريقة بديلة لتفعيل "الكل" في حالة عدم وجود دالة selectCountry
function fallbackActivateAll() {
    console.log('🔄 استخدام الطريقة البديلة لتفعيل "الكل"...');

    // إعادة تعيين المتغيرات
    currentCountry = null;

    // تحديث العرض
    renderData();
    updateCityButtonsState();
}

// تفعيل فلتر "جميع العقارات" برمجياً عند إزالة فلتر العقار
function activateAllPropertiesFilter() {
    console.log('🏢 تفعيل فلتر "جميع العقارات" برمجياً...');

    // البحث عن دالة selectProperty إذا كانت متاحة
    if (typeof selectProperty === 'function') {
        selectProperty('الكل');
        console.log('✅ تم استدعاء selectProperty("الكل") بنجاح');
    } else {
        console.log('⚠️ دالة selectProperty غير متاحة، استخدام الطريقة البديلة...');
        fallbackActivateAllProperties();
    }

    // تحديث الحالة المرئية لأزرار العقارات
    setTimeout(() => {
        updatePropertyButtonsVisualState();
    }, 50);
}

// تحديث الحالة المرئية لأزرار العقارات
function updatePropertyButtonsVisualState() {
    // البحث عن زر "الكل" في العقارات وتفعيله مرئياً
    const allPropertyButtons = [
        document.querySelector('.property-btn[onclick*="selectProperty(\'الكل\'"]'),
        document.querySelector('.property-btn[onclick*="selectProperty(\\\'الكل\\\'"]'),
        document.querySelector('.property-btn[data-property="الكل"]'),
        document.querySelector('.property-option:first-child'),
        ...Array.from(document.querySelectorAll('.property-btn, .property-option')).filter(btn =>
            btn.textContent.trim() === 'الكل' ||
            btn.textContent.includes('الكل') ||
            btn.textContent.includes('جميع')
        )
    ].filter(btn => btn);

    if (allPropertyButtons.length > 0) {
        const allButton = allPropertyButtons[0];

        // إزالة التفعيل من جميع أزرار العقارات
        document.querySelectorAll('.property-btn, .property-option').forEach(btn => {
            btn.classList.remove('active');
            btn.style.background = '';
            btn.style.color = '';
        });

        // تفعيل زر "الكل" مرئياً
        allButton.classList.add('active');
        allButton.style.background = '#007bff';
        allButton.style.color = 'white';

        console.log('✅ تم تفعيل زر "جميع العقارات" مرئياً');
    }
}

// طريقة بديلة لتفعيل "جميع العقارات"
function fallbackActivateAllProperties() {
    console.log('🔄 استخدام الطريقة البديلة لتفعيل "جميع العقارات"...');

    // إعادة تعيين متغير العقار
    currentProperty = null;

    // تحديث العرض
    renderData();
    updatePropertyButtonsState();
}

// تفعيل جميع العقارات في المدينة المحددة (وليس جميع العقارات)
function activateAllPropertiesInCurrentCity() {
    console.log('🏙️ تفعيل جميع عقارات المدينة المحددة...');
    console.log(`📍 المدينة الحالية: ${currentCountry || 'الكل'}`);

    // حفظ المدينة المحددة قبل إعادة تعيين العقار
    const savedCity = currentCountry;

    // إعادة تعيين فلتر العقار فقط مباشرة (بدون استدعاء selectProperty)
    currentProperty = null;

    // التأكد من أن المدينة لم تتغير
    currentCountry = savedCity;

    // تحديث قائمة العقارات للمدينة المحددة
    if (typeof initPropertyList === 'function') {
        initPropertyList(currentCountry);
        console.log(`✅ تم تحديث قائمة العقارات للمدينة: ${currentCountry || 'الكل'}`);
    }

    // تحديث العرض
    renderData();

    // تحديث الحالة المرئية لأزرار العقارات
    setTimeout(() => {
        updatePropertyButtonsVisualStateInCity();
        // تحديث عرض الفلاتر النشطة
        updateActiveFiltersDisplay();
        // تحديث حالة أزرار الفلاتر
        updateAllFilterButtonsState();
    }, 50);

    console.log(`✅ تم إظهار جميع عقارات المدينة: ${currentCountry || 'الكل'}`);
}

// تحديث الحالة المرئية لأزرار العقارات مع الحفاظ على المدينة
function updatePropertyButtonsVisualStateInCity() {
    console.log('🎨 تحديث الحالة المرئية لأزرار العقارات في المدينة المحددة...');

    // البحث عن زر "الكل" في العقارات وتفعيله مرئياً
    const allPropertyButtons = [
        document.querySelector('.property-btn[onclick*="selectProperty(\'الكل\'"]'),
        document.querySelector('.property-btn[onclick*="selectProperty(\\\'الكل\\\'"]'),
        document.querySelector('.property-btn[data-property="الكل"]'),
        document.querySelector('.property-option:first-child'),
        ...Array.from(document.querySelectorAll('.property-btn, .property-option')).filter(btn =>
            btn.textContent.trim() === 'الكل' ||
            btn.textContent.includes('الكل') ||
            btn.textContent.includes('جميع')
        )
    ].filter(btn => btn);

    if (allPropertyButtons.length > 0) {
        const allButton = allPropertyButtons[0];

        // إزالة التفعيل من جميع أزرار العقارات
        document.querySelectorAll('.property-btn, .property-option').forEach(btn => {
            btn.classList.remove('active');
            btn.style.background = '';
            btn.style.color = '';
        });

        // تفعيل زر "الكل" مرئياً
        allButton.classList.add('active');
        allButton.style.background = '#007bff';
        allButton.style.color = 'white';

        console.log('✅ تم تفعيل زر "جميع العقارات" مرئياً مع الحفاظ على المدينة');
    }

    // التأكد من أن فلتر المدينة لا يزال نشطاً
    if (currentCountry && currentCountry !== 'الكل') {
        console.log(`🏙️ الحفاظ على فلتر المدينة: ${currentCountry}`);
        updateCityButtonsState();
    }
}

// طريقة بديلة لتفعيل جميع العقارات في المدينة
function fallbackActivateAllPropertiesInCity() {
    console.log('🔄 استخدام الطريقة البديلة لتفعيل جميع عقارات المدينة...');

    // حفظ المدينة المحددة
    const savedCity = currentCountry;

    // إعادة تعيين متغير العقار فقط (الحفاظ على المدينة)
    currentProperty = null;

    // التأكد من أن المدينة لم تتغير
    currentCountry = savedCity;

    // تحديث قائمة العقارات للمدينة المحددة
    if (typeof initPropertyList === 'function') {
        initPropertyList(currentCountry);
    }

    // تحديث العرض
    renderData();
    updatePropertyButtonsState();

    console.log(`🏙️ تم الحفاظ على فلتر المدينة: ${currentCountry || 'الكل'}`);
    console.log(`🏢 تم إعادة تعيين فلتر العقار إلى: ${currentProperty || 'الكل'}`);
}



function updatePropertyButtonsState() {
    const propertyButtons = document.querySelectorAll('.property-btn, .property-option');
    propertyButtons.forEach(btn => {
        btn.classList.remove('active');
        // إعادة تعيين لون الزر إلى الافتراضي
        btn.style.background = '';
        btn.style.color = '';
    });

    // إذا لم يكن هناك عقار محدد، تفعيل زر "الكل"
    if (!currentProperty || currentProperty === 'الكل') {
        const allButton = document.querySelector('.property-btn[data-property="الكل"], .property-option:first-child');
        if (allButton) {
            allButton.classList.add('active');
        }
    }
}

function updateStatusButtonsState() {
    const statusButtons = document.querySelectorAll('.status-filter button, .status-btn');
    statusButtons.forEach(btn => {
        btn.classList.remove('active');
        // إعادة تعيين لون الزر إلى الافتراضي (أزرق للنشط)
        if (filterStatus && btn.textContent.includes(filterStatus)) {
            btn.style.background = '#007bff';
            btn.style.color = 'white';
        } else {
            btn.style.background = '';
            btn.style.color = '';
        }
    });
}

function updateContractTypeButtonsState() {
    const contractButtons = document.querySelectorAll('.contract-type-btn, #contractTypeFilterBtn');
    contractButtons.forEach(btn => {
        if (activeFilters.contractType) {
            btn.style.background = '#007bff';
            btn.style.color = 'white';
        } else {
            btn.style.background = '';
            btn.style.color = '';
        }
    });
}

function updatePropertyTypeButtonsState() {
    const propertyTypeButtons = document.querySelectorAll('.property-type-btn, #propertyTypeFilterBtn');
    propertyTypeButtons.forEach(btn => {
        if (activeFilters.propertyType) {
            btn.style.background = '#28a745';
            btn.style.color = 'white';
        } else {
            btn.style.background = '';
            btn.style.color = '';
        }
    });
}

function updateDateFilterButtonsState() {
    const dateButtons = document.querySelectorAll('.date-filter-btn, #dateFilterBtn');
    dateButtons.forEach(btn => {
        if (activeFilters.dateFilter || activeFilters.startDate || activeFilters.endDate) {
            btn.style.background = '#007bff';
            btn.style.color = 'white';
        } else {
            btn.style.background = '';
            btn.style.color = '';
        }
    });
}

function updateMonthFilterButtonsState() {
    const monthButtons = document.querySelectorAll('.month-filter-btn, #monthFilterBtn');
    monthButtons.forEach(btn => {
        if (activeFilters.monthFilter) {
            btn.style.background = '#007bff';
            btn.style.color = 'white';
        } else {
            btn.style.background = '';
            btn.style.color = '';
        }
    });
}

function updateMultiPropertyButtonsState() {
    const multiButtons = document.querySelectorAll('.multi-property-btn, #multiPropertyFilterBtn');
    multiButtons.forEach(btn => {
        if (activeFilters.multiProperty && activeFilters.multiProperty.length > 0) {
            btn.style.background = '#007bff';
            btn.style.color = 'white';
        } else {
            btn.style.background = '';
            btn.style.color = '';
        }
    });
}

function updateOwnerFilterButtonsState() {
    const ownerButtons = document.querySelectorAll('.owner-filter-btn, #ownerFilterBtn, #mobile-owner-filter-btn');
    ownerButtons.forEach(btn => {
        if (activeFilters.owner) {
            btn.style.background = '#007bff';
            btn.style.color = 'white';
        } else {
            btn.style.background = '';
            btn.style.color = '';
        }
    });
}

// دالة شاملة لتحديث جميع حالات أزرار الفلاتر
function updateAllFilterButtonsState() {
    console.log('🎨 تحديث حالة جميع أزرار الفلاتر...');

    updateCityButtonsState();
    updatePropertyButtonsState();
    updateStatusButtonsState();
    updateContractTypeButtonsState();
    updateDateFilterButtonsState();
    updateMonthFilterButtonsState();
    updateMultiPropertyButtonsState();
    updateOwnerFilterButtonsState();

    // تحديث أزرار إضافية قد تكون موجودة
    updateGenericFilterButtons();
}

// تحديث الأزرار العامة للفلاتر
function updateGenericFilterButtons() {
    // البحث عن جميع أزرار الفلاتر في الواجهة
    const filterButtons = document.querySelectorAll(`
        .filter-btn,
        .header-main-btn,
        .export-btn,
        [id*="Filter"],
        [class*="filter"],
        [onclick*="filter"],
        [onclick*="Filter"]
    `);

    filterButtons.forEach(btn => {
        const btnText = btn.textContent.toLowerCase();
        const btnId = btn.id.toLowerCase();
        const btnClass = btn.className.toLowerCase();

        let isActive = false;

        // فحص إذا كان الزر مرتبط بفلتر نشط
        if (btnText.includes('مدينة') || btnText.includes('city') || btnId.includes('city')) {
            isActive = currentCountry && currentCountry !== 'الكل';
        } else if (btnText.includes('عقار') || btnText.includes('property') || btnId.includes('property')) {
            isActive = currentProperty && currentProperty !== 'الكل';
        } else if (btnText.includes('حالة') || btnText.includes('status') || btnId.includes('status')) {
            isActive = filterStatus && filterStatus !== 'الكل';
        } else if (btnText.includes('عقد') || btnText.includes('contract') || btnId.includes('contract')) {
            isActive = activeFilters.contractType && activeFilters.contractType !== '';
        } else if (btnText.includes('نوع العقار') || btnText.includes('property-type') || btnId.includes('property-type')) {
            isActive = activeFilters.propertyType && activeFilters.propertyType !== '';
        } else if (btnText.includes('تاريخ') || btnText.includes('date') || btnId.includes('date')) {
            isActive = activeFilters.dateFilter || activeFilters.startDate || activeFilters.endDate;
        } else if (btnText.includes('شهر') || btnText.includes('month') || btnId.includes('month')) {
            isActive = activeFilters.monthFilter && activeFilters.monthFilter !== '';
        } else if (btnText.includes('مالك') || btnText.includes('owner') || btnId.includes('owner')) {
            isActive = activeFilters.owner && activeFilters.owner !== '';
        }

        // تطبيق التصميم المناسب
        if (isActive) {
            btn.style.background = '#007bff';
            btn.style.color = 'white';
            btn.style.borderColor = '#007bff';
        } else {
            // إعادة تعيين إلى التصميم الافتراضي
            btn.style.background = '';
            btn.style.color = '';
            btn.style.borderColor = '';
        }
    });
}

// مسح جميع الفلاتر
function clearAllFilters() {
    console.log('🗑️ مسح جميع الفلاتر...');

    // فحص صلاحيات المستخدم
    console.log('🔍 فحص صلاحيات المستخدم...');
    console.log('👤 المستخدم الحالي:', currentUser);
    console.log('📋 بيانات المستخدمين متوفرة:', !!users);

    if (currentUser && users[currentUser]) {
        console.log('✅ المستخدم موجود في النظام');
        console.log('📋 صلاحيات المستخدم:', users[currentUser].permissions);

        const hasPermission = users[currentUser].permissions.clearFilters;
        console.log(`🔍 فحص صلاحية مسح الفلاتر للمستخدم ${currentUser}: ${hasPermission ? 'مسموح' : 'ممنوع'}`);

        if (!hasPermission) {
            console.log('❌ المستخدم لا يملك صلاحية مسح الفلاتر');
            showNoPermissionMessage('عذراً، لا تملك صلاحية مسح الفلاتر');
            return;
        }

        console.log('✅ المستخدم لديه صلاحية مسح الفلاتر - المتابعة...');
    } else {
        console.log('⚠️ لا يوجد مستخدم مسجل دخول أو المستخدم غير موجود');
        if (!currentUser) {
            console.log('❌ currentUser is null/undefined');
        }
        if (!users[currentUser]) {
            console.log('❌ المستخدم غير موجود في قاعدة البيانات');
        }
    }

    // إظهار أيقونة التحميل على أزرار مسح الفلاتر
    showClearFiltersLoading(true);

    // إعادة تعيين جميع المتغيرات
    currentCountry = null;
    currentProperty = null;
    filterStatus = null;
    currentPropertyTypeFilter = null; // إضافة مسح فلتر المباني/الأراضي

    // إعادة تعيين الفلاتر النشطة
    activeFilters = {
        city: '',
        property: '',
        status: '',
        contractType: '',
        propertyType: '',
        dateFilter: '',
        startDate: '',
        endDate: '',
        nearExpiry: false,
        monthFilter: '',
        multiProperty: [],
        owner: ''
    };

    // إلغاء الفلاتر النشطة فقط (كأننا نقرنا عليها مرة أخرى)
    console.log('🔄 إلغاء الفلاتر النشطة...');

    // إلغاء فلتر الحالة إذا كان نشطاً
    if (filterStatus && filterStatus !== 'الكل') {
        console.log(`🔄 إلغاء فلتر الحالة: ${filterStatus}`);
        if (typeof toggleStatusFilter === 'function') {
            toggleStatusFilter(filterStatus);
        }
    }

    // إلغاء فلتر نوع العقار إذا كان نشطاً
    if (propertyTypeFilter && propertyTypeFilter !== 'الكل') {
        console.log(`🔄 إلغاء فلتر نوع العقار: ${propertyTypeFilter}`);
        if (typeof togglePropertyTypeFilter === 'function') {
            togglePropertyTypeFilter(propertyTypeFilter);
        }
    }

    // إلغاء فلتر نوع العقد إذا كان نشطاً
    if (contractTypeFilter && contractTypeFilter !== 'الكل') {
        console.log(`🔄 إلغاء فلتر نوع العقد: ${contractTypeFilter}`);
        if (typeof toggleContractTypeFilter === 'function') {
            toggleContractTypeFilter(contractTypeFilter);
        }
    }

    // إلغاء فلتر المالك إذا كان نشطاً
    if (activeFilters.owner && activeFilters.owner !== '' && activeFilters.owner !== 'الكل') {
        console.log(`🔄 إلغاء فلتر المالك: ${activeFilters.owner}`);
        if (typeof toggleOwnerFilter === 'function') {
            toggleOwnerFilter(activeFilters.owner);
        }
    }

    // إلغاء فلتر المباني/الأراضي إذا كان نشطاً
    if (currentPropertyTypeFilter && currentPropertyTypeFilter !== null) {
        console.log(`🔄 إلغاء فلتر نوع العقار (المباني/الأراضي): ${currentPropertyTypeFilter}`);
        // تحديث حالة أزرار المباني/الأراضي
        if (typeof updatePropertyTypeFiltersState === 'function') {
            updatePropertyTypeFiltersState();
        }
        // إعادة تحديث قائمة العقارات
        if (typeof initPropertyList === 'function') {
            initPropertyList(currentCountry);
        }
    }

    // إعادة تعيين واجهة المستخدم
    const countryButtons = document.querySelectorAll('.country-btn, .city-btn');
    countryButtons.forEach(btn => btn.classList.remove('active'));

    const propertyButtons = document.querySelectorAll('.property-btn');
    propertyButtons.forEach(btn => btn.classList.remove('active'));

    // إعادة تعيين أزرار الفلاتر الأخرى
    const filterButtons = document.querySelectorAll('.filter-btn, .status-btn');
    filterButtons.forEach(btn => btn.classList.remove('active'));

    // إعادة تعيين أزرار المباني والأراضي بشكل مباشر
    const buildingsBtn = document.querySelector('.property-filter-btn.buildings-filter');
    const landsBtn = document.querySelector('.property-filter-btn.lands-filter');
    if (buildingsBtn) {
        buildingsBtn.classList.remove('active');
        console.log('🏢 تم إزالة تنشيط زر المباني مباشرة');
    }
    if (landsBtn) {
        landsBtn.classList.remove('active');
        console.log('🏔️ تم إزالة تنشيط زر الأراضي مباشرة');
    }

    // إعادة تحميل البيانات وتحديث العرض
    if (typeof renderData === 'function') {
        renderData();
    } else {
        displayProperties(properties);
    }

    // تحديث عرض الفلاتر النشطة
    updateActiveFiltersDisplay();

    // ضمان إظهار أزرار مسح الفلاتر
    setTimeout(() => {
        ensureClearButtonsVisibility();
    }, 100);

    // تحديث الإحصائيات
    if (typeof updateTotalStats === 'function') {
        updateTotalStats();
    }

    // حفظ الحالة الجديدة
    saveAppState();

    // مسح الفلاتر من HTML
    const desktopList = document.getElementById('activeFiltersList');
    const mobileList = document.getElementById('activeFiltersListMobile');
    if (desktopList) desktopList.innerHTML = '';
    if (mobileList) mobileList.innerHTML = '';

    // إخفاء أزرار مسح الكل
    const clearBtns = document.querySelectorAll('.clear-all-filters-btn');
    clearBtns.forEach(btn => btn.style.display = 'none');

    // إخفاء زر الفلاتر للهاتف
    const mobileFilterBtn = document.getElementById('mobileFiltersBtn');
    if (mobileFilterBtn) {
        mobileFilterBtn.classList.remove('has-filters');
    }

    console.log('تم مسح جميع الفلاتر');

    // تحديث عرض اسم العقار في الجوالات
    updateMobilePropertyName();

    // تحديث إضافي بعد تأخير قصير لضمان تحديث جميع العناصر
    setTimeout(() => {
        if (typeof renderData === 'function') {
            renderData();
        }
        if (typeof updateTotals === 'function') {
            updateTotals();
        }
        updateActiveFiltersDisplay();

        // تحديث حالة أزرار المباني/الأراضي للتأكد من إزالة التنشيط البصري
        if (typeof updatePropertyTypeFiltersState === 'function') {
            updatePropertyTypeFiltersState();
        }

        // إخفاء أيقونة التحميل بعد اكتمال العمليات
        setTimeout(() => {
            showClearFiltersLoading(false);
        }, 300);
    }, 100);

    // إظهار أيقونة صغيرة بدلاً من الإشعار النصي
    showMiniIconNotification('🗑️', '#28a745', 2000);
}

// إظهار/إخفاء أيقونة التحميل على أزرار مسح الفلاتر
function showClearFiltersLoading(show) {
    const clearButtons = document.querySelectorAll('.clear-all-filters-btn');

    clearButtons.forEach(btn => {
        if (show) {
            // حفظ النص الأصلي
            if (!btn.dataset.originalText) {
                btn.dataset.originalText = btn.innerHTML;
            }

            // إظهار أيقونة التحميل
            btn.innerHTML = `
                <i class="fas fa-spinner fa-spin" style="margin-left: 8px;"></i>
                جاري المسح...
            `;
            btn.disabled = true;
            btn.style.opacity = '0.7';
        } else {
            // إعادة النص الأصلي
            if (btn.dataset.originalText) {
                btn.innerHTML = btn.dataset.originalText;
            } else {
                // إذا لم يكن النص الأصلي محفوظاً، استخدم النص الافتراضي
                btn.innerHTML = `
                    <i class="fas fa-times-circle"></i>
                    <span>مسح جميع الفلاتر</span>
                `;
            }
            btn.disabled = false;
            btn.style.opacity = '1';
            btn.classList.remove('loading');
            btn.style.transform = 'scale(1)';
        }
    });
}

// دالة إعادة تعيين حالة أزرار مسح الفلاتر
function resetClearFiltersButtonsState() {
    console.log('🔄 إعادة تعيين حالة أزرار مسح الفلاتر...');

    const clearButtons = document.querySelectorAll('.clear-all-filters-btn');
    clearButtons.forEach(btn => {
        // إزالة حالة التحميل
        btn.disabled = false;
        btn.style.opacity = '1';
        btn.classList.remove('loading');
        btn.style.transform = 'scale(1)';

        // إعادة النص الأصلي إذا كان في حالة تحميل
        if (btn.innerHTML.includes('جاري المسح') || btn.innerHTML.includes('fa-spinner')) {
            btn.innerHTML = `
                <i class="fas fa-times-circle"></i>
                <span>مسح جميع الفلاتر</span>
            `;
        }

        // مسح البيانات المحفوظة
        delete btn.dataset.originalText;
    });

    console.log('✅ تم إعادة تعيين حالة أزرار مسح الفلاتر');
}

// إظهار/إخفاء مؤشر تحميل الملفات
function showDownloadProgress(fileName, show) {
    const progressId = `download-progress-${fileName.replace(/[^a-zA-Z0-9]/g, '_')}`;

    if (show) {
        // إنشاء مؤشر التحميل
        const progressDiv = document.createElement('div');
        progressDiv.id = progressId;
        progressDiv.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #17a2b8;
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            z-index: 10000;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            display: flex;
            align-items: center;
            gap: 10px;
            max-width: 300px;
        `;

        progressDiv.innerHTML = `
            <i class="fas fa-spinner fa-spin"></i>
            <span>جاري تحميل: ${fileName.length > 20 ? fileName.substring(0, 20) + '...' : fileName}</span>
        `;

        document.body.appendChild(progressDiv);

        // إضافة تأثير الظهور
        setTimeout(() => {
            progressDiv.style.transform = 'translateX(0)';
            progressDiv.style.opacity = '1';
        }, 100);

    } else {
        // إزالة مؤشر التحميل
        const progressDiv = document.getElementById(progressId);
        if (progressDiv) {
            progressDiv.style.transform = 'translateX(100%)';
            progressDiv.style.opacity = '0';
            setTimeout(() => {
                if (progressDiv.parentNode) {
                    progressDiv.parentNode.removeChild(progressDiv);
                }
            }, 300);
        }
    }
}

// إظهار إشعار مؤقت
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? '#28a745' : '#007bff'};
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 500;
        z-index: 10000;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        animation: slideIn 0.3s ease-out;
    `;
    notification.textContent = message;

    // إضافة CSS للأنيميشن
    if (!document.getElementById('notification-styles')) {
        const style = document.createElement('style');
        style.id = 'notification-styles';
        style.textContent = `
            @keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes slideOut {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;
        document.head.appendChild(style);
    }

    document.body.appendChild(notification);

    // إزالة الإشعار بعد 3 ثوان
    setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease-in';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// إظهار أيقونة صغيرة بحجم 5px
function showMiniIconNotification(icon, color, duration = 2000) {
    // إزالة الأيقونات الموجودة
    const existingIcons = document.querySelectorAll('.mini-icon-notification-5px');
    existingIcons.forEach(existingIcon => existingIcon.remove());

    // إنشاء الأيقونة الصغيرة
    const iconElement = document.createElement('div');
    iconElement.className = 'mini-icon-notification-5px';
    iconElement.textContent = icon;

    // تطبيق الأنماط
    iconElement.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        width: 5px;
        height: 5px;
        background: ${color};
        border-radius: 50%;
        z-index: 10000;
        font-size: 3px;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 1px 3px rgba(0,0,0,0.3);
        animation: miniIconPulse5px 0.5s ease-out;
        transition: all 0.3s ease;
        pointer-events: none;
    `;

    // إضافة CSS للأنيميشن إذا لم يكن موجوداً
    if (!document.getElementById('mini-icon-5px-styles')) {
        const style = document.createElement('style');
        style.id = 'mini-icon-5px-styles';
        style.textContent = `
            @keyframes miniIconPulse5px {
                0% {
                    transform: scale(0);
                    opacity: 0;
                }
                50% {
                    transform: scale(1.5);
                    opacity: 1;
                }
                100% {
                    transform: scale(1);
                    opacity: 1;
                }
            }

            .mini-icon-notification-5px {
                position: fixed;
                top: 20px;
                right: 20px;
                width: 5px;
                height: 5px;
                border-radius: 50%;
                z-index: 10000;
                font-size: 3px;
                color: white;
                display: flex;
                align-items: center;
                justify-content: center;
                box-shadow: 0 1px 3px rgba(0,0,0,0.3);
                transition: all 0.3s ease;
                pointer-events: none;
            }

            /* للجوال - تكبير قليل */
            @media (max-width: 768px) {
                .mini-icon-notification-5px {
                    width: 6px;
                    height: 6px;
                    font-size: 4px;
                    top: 15px;
                    right: 15px;
                }
            }
        `;
        document.head.appendChild(style);
    }

    document.body.appendChild(iconElement);

    // إزالة الأيقونة بعد المدة المحددة
    setTimeout(() => {
        iconElement.style.opacity = '0';
        iconElement.style.transform = 'scale(0)';
        setTimeout(() => {
            if (iconElement.parentNode) {
                iconElement.parentNode.removeChild(iconElement);
            }
        }, 300);
    }, duration);
}

// دوال التحكم في نافذة الفلاتر للهاتف
function toggleMobileFilters() {
    const modal = document.getElementById('mobileFiltersModal');
    if (modal) {
        if (modal.classList.contains('active')) {
            closeMobileFilters();
        } else {
            openMobileFilters();
        }
    }
}

function openMobileFilters() {
    const modal = document.getElementById('mobileFiltersModal');
    if (modal) {
        modal.classList.add('active');
        document.body.style.overflow = 'hidden'; // منع التمرير في الخلفية

        // تحديث محتوى النافذة
        updateActiveFiltersDisplay();

        console.log('📱 فتح نافذة الفلاتر للهاتف');
    }
}

function closeMobileFilters() {
    const modal = document.getElementById('mobileFiltersModal');
    if (modal) {
        modal.classList.remove('active');
        document.body.style.overflow = ''; // استعادة التمرير

        console.log('📱 إغلاق نافذة الفلاتر للهاتف');
    }
}



// ===== STATE MANAGEMENT SYSTEM =====
// نظام إدارة الحالة للحفاظ على حالة التطبيق بعد إعادة التحميل

// مفاتيح تخزين حالة التطبيق
const STATE_STORAGE_KEY = 'alsenidi_app_state';
const SESSION_MARKER_KEY = 'alsenidi_session_active';
const LAST_VISIT_KEY = 'alsenidi_last_visit';

// إنشاء معرف جلسة فريد
function generateSessionId() {
    return 'session_' + Date.now() + '_' + Math.random().toString(36).substring(2, 11);
}

// التحقق من نوع الزيارة (جديدة أم إعادة تحميل)
function isPageReload() {
    const currentSessionId = sessionStorage.getItem(SESSION_MARKER_KEY);
    const lastVisit = localStorage.getItem(LAST_VISIT_KEY);
    const now = Date.now();

    // إذا لم يكن هناك معرف جلسة، فهذه زيارة جديدة
    if (!currentSessionId) {
        return false;
    }

    // إذا كانت الزيارة الأخيرة منذ أكثر من 30 دقيقة، اعتبرها زيارة جديدة
    if (lastVisit && (now - parseInt(lastVisit)) > 30 * 60 * 1000) {
        return false;
    }

    return true;
}

// تسجيل بداية الجلسة
function markSessionStart() {
    const sessionId = generateSessionId();
    sessionStorage.setItem(SESSION_MARKER_KEY, sessionId);
    localStorage.setItem(LAST_VISIT_KEY, Date.now().toString());
    console.log('🆕 بداية جلسة جديدة:', sessionId);
}

// ===== نظام حفظ حالة التصفح (State Persistence) =====

// مفاتيح التخزين (تحديث المفاتيح الموجودة)
// const STATE_STORAGE_KEY = 'realEstateAppState'; // تم تعريفه مسبقاً
const FILTERS_STORAGE_KEY = 'realEstateFilters';
const SCROLL_STORAGE_KEY = 'realEstateScrollPosition';

// حفظ حالة التطبيق الشاملة في localStorage
function saveAppState() {
    try {
        const state = {
            // الحالة الأساسية
            currentView: currentView,
            currentCountry: currentCountry,
            currentProperty: currentProperty,
            filterStatus: filterStatus,
            currentPropertyTypeFilter: currentPropertyTypeFilter,

            // الفلاتر النشطة
            activeFilters: {
                city: currentCountry,
                property: currentProperty,
                status: filterStatus,
                contractType: typeof contractTypeFilter !== 'undefined' ? contractTypeFilter : null
            },

            // حالة الواجهة
            sidebarVisible: document.getElementById('sidebar')?.style.display !== 'none',

            // نصوص البحث
            searchValues: {
                global: document.getElementById('globalSearch')?.value || '',
                property: document.getElementById('propertySearch')?.value || ''
            },

            // موضع التمرير
            scrollPosition: {
                x: window.scrollX || window.pageXOffset || 0,
                y: window.scrollY || window.pageYOffset || 0
            },

            // معلومات الجلسة
            timestamp: Date.now(),
            sessionId: getSessionId(),
            version: '2.0',

            // حالة النوافذ والواجهة
            openModal: document.querySelector('.modal.show') ? true : false,
            isManagementMode: (typeof window.isManagementMode !== 'undefined') ? window.isManagementMode : false,

            // تحديث وقت آخر زيارة
            lastVisit: Date.now()
        };

        localStorage.setItem(STATE_STORAGE_KEY, JSON.stringify(state));
        console.log('💾 تم حفظ حالة التطبيق:', state);

        // حفظ إضافي للفلاتر فقط (للاستعادة السريعة)
        saveFiltersState();

    } catch (error) {
        console.warn('⚠️ فشل في حفظ حالة التطبيق:', error);
    }
}

// حفظ حالة الفلاتر فقط (للاستعادة السريعة)
function saveFiltersState() {
    try {
        const filtersState = {
            currentCountry: currentCountry,
            currentProperty: currentProperty,
            filterStatus: filterStatus,
            currentPropertyTypeFilter: currentPropertyTypeFilter,
            contractType: typeof contractTypeFilter !== 'undefined' ? contractTypeFilter : null,
            timestamp: Date.now()
        };

        localStorage.setItem(FILTERS_STORAGE_KEY, JSON.stringify(filtersState));
        console.log('🔍 تم حفظ حالة الفلاتر:', filtersState);
    } catch (error) {
        console.error('❌ خطأ في حفظ حالة الفلاتر:', error);
    }
}

// حفظ موضع التمرير
function saveScrollPosition() {
    try {
        const scrollState = {
            x: window.scrollX || window.pageXOffset || 0,
            y: window.scrollY || window.pageYOffset || 0,
            timestamp: Date.now()
        };

        localStorage.setItem(SCROLL_STORAGE_KEY, JSON.stringify(scrollState));
        console.log('📜 تم حفظ موضع التمرير:', scrollState);
    } catch (error) {
        console.error('❌ خطأ في حفظ موضع التمرير:', error);
    }
}

// الحصول على معرف الجلسة
function getSessionId() {
    let sessionId = sessionStorage.getItem('sessionId');
    if (!sessionId) {
        sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substring(2, 11);
        sessionStorage.setItem('sessionId', sessionId);
    }
    return sessionId;
}

// مسح مربع البحث
function clearSearchInput() {
    const searchInput = document.getElementById('globalSearch');
    if (searchInput) {
        searchInput.value = '';
        console.log('🔍 تم مسح مربع البحث');
    }
}

// استعادة حالة التطبيق من localStorage مع التمييز بين الزيارة الجديدة وإعادة التحميل
function restoreAppState() {
    try {
        // التحقق من نوع الزيارة
        const isReload = isPageReload();

        console.log(`🔍 نوع الزيارة: ${isReload ? 'إعادة تحميل' : 'زيارة جديدة'}`);

        // إذا كانت زيارة جديدة، لا تستعيد الحالة وابدأ بـ "الكل"
        if (!isReload) {
            console.log('🆕 زيارة جديدة - البدء بعرض "الكل"');
            markSessionStart();

            // إعادة تعيين جميع الفلاتر إلى القيم الافتراضية
            currentView = 'cards';
            currentCountry = null;
            currentProperty = null;
            filterStatus = null;

            // مسح مربع البحث
            clearSearchInput();

            // مسح أي حالة محفوظة قديمة
            localStorage.removeItem(STATE_STORAGE_KEY);

            return false;
        }

        // إذا كانت إعادة تحميل، مسح مربع البحث والعودة إلى "الكل"
        console.log('🔄 إعادة تحميل - مسح مربع البحث والعودة إلى "الكل"');
        clearSearchInput();

        // عند إعادة التحميل، العودة إلى "الكل" بدلاً من استعادة الحالة
        console.log('🏠 إعادة تحميل - العودة إلى عرض جميع المدن');

        // إعادة تعيين جميع الفلاتر إلى القيم الافتراضية
        currentView = 'cards';
        currentCountry = null;
        currentProperty = null;
        filterStatus = null;
        currentPropertyTypeFilter = null;

        // مسح أي حالة محفوظة
        localStorage.removeItem(STATE_STORAGE_KEY);
        markSessionStart();

        return false;
    } catch (error) {
        console.warn('⚠️ فشل في استعادة حالة التطبيق:', error);
        localStorage.removeItem(STATE_STORAGE_KEY);
        return false;
    }
}

// تطبيق الحالة المستعادة على الواجهة
function applyRestoredState(state) {
    console.log('🎯 تطبيق الحالة المستعادة على الواجهة...');

    try {
        // 1. استعادة طريقة العرض
        if (state.currentView && state.currentView !== currentView) {
            toggleView(state.currentView);
            console.log('📱 تم استعادة طريقة العرض:', state.currentView);
        }

        // 2. استعادة المدينة المختارة
        if (state.currentCountry) {
            console.log('🏙️ استعادة المدينة:', state.currentCountry);

            // تحديث أزرار المدن أولاً
            if (typeof initCountryButtons === 'function') {
                initCountryButtons();
            }

            // تطبيق فلتر المدينة
            setTimeout(() => {
                if (typeof selectCountry === 'function') {
                    selectCountry(state.currentCountry);
                } else {
                    // طريقة بديلة
                    currentCountry = state.currentCountry;
                    updateCityButtonsState();
                }
            }, 50);
        }

        // 3. استعادة العقار المختار
        if (state.currentProperty) {
            console.log('🏢 استعادة العقار:', state.currentProperty);

            setTimeout(() => {
                // تحديث قائمة العقارات للمدينة المحددة
                if (typeof initPropertyList === 'function') {
                    initPropertyList(state.currentCountry);
                }

                // تطبيق فلتر العقار
                setTimeout(() => {
                    if (typeof selectProperty === 'function') {
                        selectProperty(state.currentProperty);
                    } else {
                        // طريقة بديلة
                        currentProperty = state.currentProperty;
                        updatePropertyButtonsState();
                    }
                }, 100);
            }, 150);
        }

        // 4. استعادة فلتر الحالة
        if (state.filterStatus) {
            console.log('📊 استعادة فلتر الحالة:', state.filterStatus);

            setTimeout(() => {
                if (typeof setStatusFilter === 'function') {
                    setStatusFilter(state.filterStatus);
                } else {
                    // طريقة بديلة
                    filterStatus = state.filterStatus;
                }
            }, 200);
        }

        // 5. استعادة نصوص البحث (إذا كانت محفوظة)
        if (state.searchValues) {
            setTimeout(() => {
                const globalSearch = document.getElementById('globalSearch');
                const propertySearch = document.getElementById('propertySearch');

                if (globalSearch && state.searchValues.global) {
                    globalSearch.value = state.searchValues.global;
                }

                if (propertySearch && state.searchValues.property) {
                    propertySearch.value = state.searchValues.property;
                }
            }, 250);
        }

        // 6. استعادة موضع التمرير
        if (state.scrollPosition) {
            setTimeout(() => {
                restoreScrollPosition(state.scrollPosition);
            }, 500);
        }

        // 7. تحديث العرض النهائي
        setTimeout(() => {
            if (typeof renderData === 'function') {
                renderData();
            }

            // تحديث عرض الفلاتر النشطة
            if (typeof updateActiveFiltersDisplay === 'function') {
                updateActiveFiltersDisplay();
            }

            console.log('✅ تم تطبيق الحالة المستعادة بنجاح');
        }, 300);

    } catch (error) {
        console.error('❌ خطأ في تطبيق الحالة المستعادة:', error);
    }
}

// استعادة موضع التمرير
function restoreScrollPosition(scrollPosition) {
    try {
        if (scrollPosition && (scrollPosition.x || scrollPosition.y)) {
            window.scrollTo(scrollPosition.x || 0, scrollPosition.y || 0);
            console.log('📜 تم استعادة موضع التمرير:', scrollPosition);
        }
    } catch (error) {
        console.error('❌ خطأ في استعادة موضع التمرير:', error);
    }
}

// مسح حالة التطبيق المحفوظة
function clearAppState() {
    localStorage.removeItem(STATE_STORAGE_KEY);
    localStorage.removeItem(FILTERS_STORAGE_KEY);
    localStorage.removeItem(SCROLL_STORAGE_KEY);
    console.log('🗑️ تم مسح حالة التطبيق المحفوظة');
}

// حفظ الحالة تلقائياً عند تغيير المتغيرات المهمة
function autoSaveState() {
    // حفظ الحالة كل 2 ثانية إذا تغير شيء
    let lastSavedState = '';

    setInterval(() => {
        const currentState = JSON.stringify({
            currentView,
            currentCountry,
            currentProperty,
            filterStatus
        });

        if (currentState !== lastSavedState) {
            saveAppState();
            lastSavedState = currentState;
        }
    }, 2000);
}

// إعداد معالجات الأحداث لحفظ الحالة
function setupStateEventHandlers() {
    console.log('🔧 إعداد معالجات أحداث حفظ الحالة...');

    // حفظ الحالة عند إغلاق الصفحة أو تبديل التبويبات
    window.addEventListener('beforeunload', () => {
        console.log('💾 حفظ الحالة قبل إغلاق الصفحة...');
        saveAppState();
        saveScrollPosition();
    });

    // حفظ الحالة عند إخفاء الصفحة (تبديل التبويبات)
    document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
            console.log('👁️ حفظ الحالة عند إخفاء الصفحة...');
            saveAppState();
            saveScrollPosition();
        }
    });

    // حفظ الحالة عند تغيير حجم النافذة
    window.addEventListener('resize', () => {
        setTimeout(() => {
            saveAppState();
        }, 500);
    });

    // حفظ موضع التمرير عند التمرير
    let scrollTimeout;
    window.addEventListener('scroll', () => {
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
            saveScrollPosition();
        }, 300);
    });

    // حفظ الحالة عند تغيير نصوص البحث
    setTimeout(() => {
        const globalSearch = document.getElementById('globalSearch');
        const propertySearch = document.getElementById('propertySearch');

        if (globalSearch) {
            globalSearch.addEventListener('input', () => {
                setTimeout(saveAppState, 1000); // تأخير لتجنب الحفظ المفرط
            });
        }

        if (propertySearch) {
            propertySearch.addEventListener('input', () => {
                setTimeout(saveAppState, 1000);
            });
        }
    }, 1000);

    console.log('✅ تم إعداد معالجات أحداث حفظ الحالة');
}

// ===== تحديث وظائف الفلاتر لحفظ الحالة تلقائياً =====

// تحديث وظيفة selectCountry لحفظ الحالة
const originalSelectCountry = selectCountry;
selectCountry = function(country) {
    console.log('🏙️ تحديث المدينة وحفظ الحالة:', country);

    // استدعاء الوظيفة الأصلية
    const result = originalSelectCountry.call(this, country);

    // حفظ الحالة بعد التحديث
    setTimeout(() => {
        saveAppState();
    }, 100);

    return result;
};

// تحديث وظيفة selectProperty لحفظ الحالة
const originalSelectProperty = selectProperty;
selectProperty = function(propertyName) {
    console.log('🏢 تحديث العقار وحفظ الحالة:', propertyName);

    // استدعاء الوظيفة الأصلية
    const result = originalSelectProperty.call(this, propertyName);

    // حفظ الحالة بعد التحديث
    setTimeout(() => {
        saveAppState();
    }, 100);

    return result;
};

// تهيئة نظام حفظ حالة التصفح
function initializeStatePersistence() {
    console.log('🔧 تهيئة نظام حفظ حالة التصفح...');

    // إعداد معالجات الأحداث
    setupStateEventHandlers();

    // بدء الحفظ التلقائي
    autoSaveState();

    // استعادة الحالة عند التحميل
    const restoredState = restoreAppState();

    if (restoredState) {
        console.log('✅ تم استعادة حالة التصفح بنجاح');
        return true;
    } else {
        console.log('🆕 بدء جلسة جديدة');
        return false;
    }
}

// إضافة مستمعات الأحداث لحفظ الحالة
function addStateEventListeners() {
    // حفظ الحالة عند إغلاق الصفحة أو إعادة التحميل
    window.addEventListener('beforeunload', function() {
        saveAppState();
        console.log('💾 تم حفظ الحالة قبل إغلاق الصفحة');
    });

    // حفظ الحالة عند إخفاء الصفحة (تبديل التبويبات)
    document.addEventListener('visibilitychange', function() {
        if (document.hidden) {
            saveAppState();
            console.log('💾 تم حفظ الحالة عند إخفاء الصفحة');
        }
    });

    // لا نحفظ حالة البحث - سيتم مسحها عند إعادة التحميل
    // const globalSearch = document.getElementById('globalSearch');
    // const propertySearch = document.getElementById('propertySearch');
    // تم إزالة مستمعات أحداث البحث لمنع حفظ قيم البحث

    // حفظ الحالة عند تغيير حجم النافذة (للشريط الجانبي)
    window.addEventListener('resize', function() {
        clearTimeout(window.resizeSaveTimeout);
        window.resizeSaveTimeout = setTimeout(() => {
            saveAppState();
        }, 500);
    });

    console.log('✅ تم إضافة مستمعات أحداث حفظ الحالة');
}

// حفظ تلقائي للحالة كل فترة
function autoSaveState() {
    // حفظ الحالة كل 30 ثانية
    setInterval(() => {
        console.log('⏰ حفظ تلقائي للحالة...');
        saveAppState();
    }, 30000);

    console.log('⏰ تم تفعيل الحفظ التلقائي للحالة (كل 30 ثانية)');
}

// مراقب لإضافة زر تسجيل الخروج تلقائياً
function setupLogoutButtonObserver() {
    // مراقب DOM للتأكد من إضافة زر تسجيل الخروج
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.type === 'childList') {
                // التحقق من وجود header وعدم وجود زر تسجيل الخروج
                const header = document.querySelector('.header-section.header-actions');
                const logoutBtn = document.getElementById('logoutBtn');

                if (header && !logoutBtn && currentUser && currentUser !== 'guest') {
                    console.log('🔍 مراقب DOM: إضافة زر تسجيل الخروج');
                    setTimeout(() => {
                        addLogoutButton();
                        updateMobileUserSection();
                    }, 100);
                }
            }
        });
    });

    // بدء مراقبة التغييرات في DOM
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });

    console.log('👁️ تم تفعيل مراقب زر تسجيل الخروج');
}

// مراقب لتطبيق قيود الوصول على الأزرار الإدارية للمستخدم محدود الصلاحية
function setupAdminButtonsObserver() {
    if (!currentUser || !users[currentUser] || users[currentUser].role !== 'limited') {
        return; // لا حاجة للمراقب إذا لم يكن المستخدم محدود الصلاحية
    }

    console.log('👁️ تفعيل مراقب قيود الوصول للأزرار الإدارية...');

    // مراقب DOM لتطبيق قيود الوصول على الأزرار الجديدة
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.type === 'childList') {
                // تطبيق قيود على الأزرار الجديدة
                setTimeout(() => {
                    restrictAdminButtonsForLimitedUser();
                }, 100);
            }
        });
    });

    // بدء مراقبة التغييرات في DOM
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });

    console.log('✅ تم تفعيل مراقب قيود الوصول للأزرار الإدارية');
}

// دالة لتطبيق قيود الوصول على الأزرار الإدارية (بدلاً من إخفائها)
function hideAdminButtonsForLimitedUser() {
    // هذه الدالة تم استبدالها بـ restrictAdminButtonsForLimitedUser
    // لكن نحتفظ بها للتوافق مع الاستدعاءات الموجودة
    if (!currentUser || !users[currentUser] || users[currentUser].role !== 'limited') {
        return;
    }

    console.log('🔄 تحويل إلى دالة تقييد الوصول...');
    restrictAdminButtonsForLimitedUser();
}

// دالة عامة لتطبيق قيود الوصول على الأزرار للمستخدم محدود الصلاحية
window.fixLimitedUserButtons = function() {
    console.log('🚨 تطبيق قيود الوصول على الأزرار للمستخدم محدود الصلاحية');

    // التأكد من إضافة الكلاس
    document.body.classList.add('limited-user');
    console.log('✅ تم إضافة كلاس limited-user');

    // تطبيق قيود الوصول بدلاً من الإخفاء
    restrictAdminButtonsForLimitedUser();

    // تفعيل المراقب
    setupAdminButtonsObserver();

    console.log('🎉 تم تطبيق قيود الوصول بنجاح!');
    console.log('💡 الأزرار الآن ظاهرة لكن محمية - ستظهر رسالة عدم الصلاحية عند النقر');
};

// مسح الحالة مع التأكيد
function clearAppStateWithConfirmation() {
    const confirmed = confirm('هل تريد إعادة تعيين حالة التطبيق؟\n\nسيؤدي هذا إلى:\n• إعادة تعيين المدينة المختارة\n• إعادة تعيين العقار المختار\n• إعادة تعيين الفلاتر\n• إعادة تعيين طريقة العرض\n• مسح نصوص البحث');

    if (confirmed) {
        clearAppState();

        // إعادة تعيين المتغيرات للقيم الافتراضية
        currentView = 'cards';
        currentCountry = null;
        currentProperty = null;
        filterStatus = null;

        // مسح نصوص البحث
        clearAllSearchFields();

        // إعادة تهيئة التطبيق
        setTimeout(() => {
            initCountryButtons();
            initPropertyList();
            renderData();

            // إظهار رسالة نجاح
            alert('✅ تم إعادة تعيين حالة التطبيق بنجاح!');
        }, 100);

        console.log('🔄 تم إعادة تعيين حالة التطبيق');
    }
}

// دالة مسح جميع حقول البحث (محسنة)
function clearAllSearchFields() {
    console.log('🔍 مسح جميع حقول البحث...');

    // مسح البحث العام
    const globalSearch = document.getElementById('globalSearch');
    if (globalSearch) {
        globalSearch.value = '';
        globalSearch.style.borderColor = '';
        globalSearch.classList.remove('searching', 'success', 'error');
        console.log('✅ تم مسح البحث العام');
    }

    // مسح بحث العقارات
    const propertySearch = document.getElementById('propertySearch');
    if (propertySearch) {
        propertySearch.value = '';
        propertySearch.style.borderColor = '';
        propertySearch.classList.remove('searching', 'success', 'error');
        console.log('✅ تم مسح بحث العقارات');
    }

    // مسح بحث سجلات التتبع
    const trackingSearch = document.getElementById('trackingSearch');
    if (trackingSearch) {
        trackingSearch.value = '';
        trackingSearch.style.borderColor = '';
        trackingSearch.classList.remove('searching', 'success', 'error');
        console.log('✅ تم مسح بحث سجلات التتبع');
    }

    // مسح جميع حقول البحث في المرفقات
    const attachmentSearches = document.querySelectorAll('#attachmentsSearch, #cardAttachmentsSearch');
    attachmentSearches.forEach(input => {
        if (input) {
            input.value = '';
            input.style.borderColor = '';
            input.classList.remove('searching', 'success', 'error');
        }
    });

    // مسح أي حقول بحث أخرى في النوافذ المنبثقة
    const allSearchInputs = document.querySelectorAll('input[type="text"][placeholder*="بحث"], input[type="search"], input[id*="search"], input[id*="Search"]');
    allSearchInputs.forEach(input => {
        if (input && input.id !== 'globalSearch' && input.id !== 'propertySearch') {
            input.value = '';
            input.style.borderColor = '';
            input.classList.remove('searching', 'success', 'error');
        }
    });

    // إخفاء جميع أزرار المسح والإلغاء
    const clearButtons = document.querySelectorAll('.clear-btn, .cancel-btn, .global-cancel-btn, .property-clear-btn');
    clearButtons.forEach(btn => {
        if (btn && btn.style) {
            btn.style.display = 'none';
        }
    });

    // إخفاء مؤشرات البحث
    const searchLoadingIndicators = document.querySelectorAll('#searchLoadingIndicator, .search-loading, .search-indicator');
    searchLoadingIndicators.forEach(indicator => {
        if (indicator && indicator.style) {
            indicator.style.display = 'none';
        }
    });

    console.log('✅ تم مسح جميع حقول البحث وإعادة تعيين حالتها');
}

// إعادة تعيين حالة التطبيق العامة
function resetAppState() {
    try {
        console.log('🔄 إعادة تعيين حالة التطبيق العامة...');

        // إعادة تعيين متغيرات الحالة العامة
        if (typeof currentView !== 'undefined') {
            currentView = 'properties'; // العودة للعرض الافتراضي
        }

        if (typeof currentSection !== 'undefined') {
            currentSection = 'main';
        }

        if (typeof isFilterActive !== 'undefined') {
            isFilterActive = false;
        }

        if (typeof lastSearchTerm !== 'undefined') {
            lastSearchTerm = '';
        }

        // إعادة تعيين حالة الصفحات
        if (typeof currentPage !== 'undefined') {
            currentPage = 1;
        }

        if (typeof itemsPerPage !== 'undefined') {
            itemsPerPage = 20; // أو القيمة الافتراضية
        }

        // إعادة تعيين حالة التحديد
        if (typeof selectedItems !== 'undefined') {
            selectedItems = [];
        }

        if (typeof selectedProperties !== 'undefined') {
            selectedProperties = [];
        }

        // إعادة تعيين حالة النوافذ المنبثقة
        if (typeof activeModal !== 'undefined') {
            activeModal = null;
        }

        // إعادة تعيين حالة التحميل
        if (typeof isLoading !== 'undefined') {
            isLoading = false;
        }

        // إعادة تعيين حالة الأخطاء
        if (typeof lastError !== 'undefined') {
            lastError = null;
        }

        // إعادة تعيين localStorage للحالة المؤقتة
        try {
            localStorage.removeItem('tempSearchState');
            localStorage.removeItem('tempFilterState');
            localStorage.removeItem('lastSearchResults');
        } catch (e) {
            console.warn('تحذير: لا يمكن مسح localStorage:', e);
        }

        // إعادة تعيين sessionStorage للحالة المؤقتة
        try {
            sessionStorage.removeItem('currentSearchTerm');
            sessionStorage.removeItem('activeFilters');
            sessionStorage.removeItem('searchResults');
        } catch (e) {
            console.warn('تحذير: لا يمكن مسح sessionStorage:', e);
        }

        console.log('✅ تم إعادة تعيين حالة التطبيق العامة');

    } catch (error) {
        console.error('❌ خطأ في إعادة تعيين حالة التطبيق:', error);
    }
}

// إعادة عرض جميع البيانات بعد إعادة التعيين
function forceShowAllData() {
    try {
        console.log('🔄 إجبار عرض جميع البيانات...');

        // إعادة تعيين حالة البحث بالكامل
        if (typeof searchState !== 'undefined') {
            searchState.global = '';
            searchState.property = '';
            searchState.isSearchActive = false;
        }

        // إعادة تعيين جميع الفلاتر
        if (typeof currentCountry !== 'undefined') {
            currentCountry = null;
        }
        if (typeof currentProperty !== 'undefined') {
            currentProperty = null;
        }
        if (typeof filterStatus !== 'undefined') {
            filterStatus = null;
        }

        // تنفيذ renderData مع ضمان عدم وجود فلاتر
        if (typeof renderData === 'function') {
            console.log('📊 تنفيذ renderData لعرض جميع البيانات...');

            // التأكد من أن البحث العام فارغ قبل renderData
            const globalSearchInput = document.getElementById('globalSearch');
            if (globalSearchInput) {
                globalSearchInput.value = '';
            }

            renderData();
        }

        // تحديث الإحصائيات
        if (typeof updateTotalStats === 'function') {
            updateTotalStats();
        }

        // تحديث عدادات البيانات
        if (typeof updateDataCounts === 'function') {
            updateDataCounts();
        }

        // إعادة تهيئة الواجهة
        if (typeof initCountryButtons === 'function') {
            initCountryButtons();
        }

        if (typeof initPropertyList === 'function') {
            initPropertyList();
        }

        console.log('✅ تم إجبار عرض جميع البيانات بنجاح');

    } catch (error) {
        console.error('❌ خطأ في إجبار عرض جميع البيانات:', error);
    }
}

// دالة مساعدة للتحقق من وجود البيانات
function ensurePropertiesLoaded(functionName = 'unknown') {
    if (!properties || !Array.isArray(properties)) {
        console.error(`❌ مصفوفة properties غير موجودة في ${functionName}:`, properties);
        // تم إزالة رسالة الخطأ حسب طلب المستخدم
        return false;
    }
    return true;
}

// دالة مساعدة لفلترة الحقول المخفية
function shouldHideField(fieldName) {
    const hiddenFields = [
        'Column1',
        'supabase_id',
        'created_at',
        'updated_at',
        'قيمة  الايجار ',
        'id',
        'raw_data'
    ];
    return hiddenFields.includes(fieldName);
}

// ==================== شاشة التحميل البلورية ====================

// إظهار شاشة التحميل البلورية
function showCrystalLoading() {
    console.log('🔮 إظهار شاشة التحميل');

    // التحقق من وجود شاشة تحميل موجودة بالفعل
    const existingOverlay = document.getElementById('crystalLoadingOverlay');
    if (existingOverlay) {
        console.log('⚠️ شاشة التحميل موجودة بالفعل');
        return;
    }

    // فحص نوع المستخدم لتحديد نوع الشاشة
    const isLimitedUser = currentUser && users[currentUser] && users[currentUser].role === 'limited';

    console.log('🔍 فحص نوع المستخدم في showCrystalLoading:', {
        currentUser: currentUser,
        userExists: users[currentUser] ? true : false,
        userRole: users[currentUser] ? users[currentUser].role : 'غير موجود',
        isLimitedUser: isLimitedUser
    });

    // إنشاء عنصر شاشة التحميل
    const loadingOverlay = document.createElement('div');
    loadingOverlay.id = 'crystalLoadingOverlay';

    if (isLimitedUser) {
        // شاشة تحميل بسيطة وهادئة للمستخدم المحدود
        loadingOverlay.className = 'limited-user-loading-overlay';
        loadingOverlay.innerHTML = `
            <div class="limited-loading-container">
                <div class="limited-loading-content">
                    <div class="limited-loading-icon">
                        <div class="limited-spinner"></div>
                    </div>
                    <h3 class="limited-loading-title">جاري تحميل المحتوى</h3>
                    <div class="limited-progress-text" id="limitedProgressText">0%</div>
                </div>
            </div>
        `;
        console.log('👤 تم إنشاء شاشة تحميل بسيطة للمستخدم المحدود');
    } else {
        // شاشة التحميل البسيطة والهادئة للمستخدمين الآخرين
        loadingOverlay.className = 'simple-loading-overlay';
        loadingOverlay.innerHTML = `
            <div class="simple-loading-container">
                <div class="simple-loading-content">
                    <div class="simple-loading-icon">
                        <div class="simple-spinner"></div>
                    </div>
                    <h3 class="simple-loading-title">جاري تحميل المحتوى</h3>
                    <div class="simple-progress-text" id="simpleProgressText">0%</div>
                </div>
            </div>
        `;
        console.log('👑 تم إنشاء شاشة التحميل البسيطة والهادئة');
    }

    // إضافة الشاشة إلى الصفحة
    document.body.appendChild(loadingOverlay);

    // بدء تحديث النسبة المئوية
    if (isLimitedUser) {
        startLimitedUserProgressAnimation();
    } else {
        startCalmProgressAnimation();
    }

    // إظهار زر "ابدأ" بعد اكتمال التحميل
    setTimeout(() => {
        if (isLimitedUser) {
            // للمستخدم المحدود: إظهار زر ابدأ بعد 3 ثوانٍ
            const startButton = document.getElementById('limitedStartButton');
            if (startButton) {
                startButton.style.display = 'block';
                startButton.style.animation = 'limitedFadeIn 0.5s ease-out';
                console.log('🎯 تم إظهار زر "ابدأ" للمستخدم المحدود');
            }
        } else {
            // للمستخدمين العاديين: إظهار زر ابدأ بعد 5 ثوانٍ
            const startButton = document.getElementById('startButton');
            if (startButton) {
                startButton.style.display = 'block';
                startButton.style.animation = 'fadeInUp 0.5s ease-out';
                console.log('🎯 تم إظهار زر "ابدأ" للمستخدم العادي');
            }
        }
    }, isLimitedUser ? 3000 : 5000);
}

// دالة تحديث النسبة المئوية الهادئة للمستخدمين العاديين
function startCalmProgressAnimation() {
    const progressText = document.getElementById('simpleProgressText');

    if (!progressText) return;

    let progress = 0;
    const updateInterval = 200; // تحديث كل 200ms (أبطأ وأهدأ)
    const increment = 3; // زيادة ثابتة 3% في كل مرة

    const interval = setInterval(() => {
        progress += increment;

        if (progress >= 100) {
            progress = 100;
            clearInterval(interval);

            // إخفاء الشاشة تلقائياً بعد ثانية واحدة
            setTimeout(() => {
                hideCrystalLoading();
            }, 1000);
        }

        progressText.textContent = Math.round(progress) + '%';
    }, updateInterval);
}

// دالة تحديث النسبة المئوية الهادئة للمستخدم المحدود
function startLimitedUserProgressAnimation() {
    const progressText = document.getElementById('limitedProgressText');

    if (!progressText) return;

    let progress = 0;
    const updateInterval = 150; // تحديث كل 150ms (أبطأ وأهدأ)
    const totalDuration = 5000; // 5 ثوان
    const progressIncrement = (100 / (totalDuration / updateInterval)); // حساب الزيادة

    console.log('🔄 بدء تحديث النسبة المئوية للمستخدم المحدود');

    const interval = setInterval(() => {
        progress += progressIncrement;

        if (progress >= 100) {
            progress = 100;
            clearInterval(interval);
            console.log('✅ اكتمل التحميل للمستخدم المحدود');

            // إخفاء الشاشة تلقائياً بعد ثانية واحدة
            setTimeout(() => {
                hideCrystalLoading();
            }, 1000);
        }

        progressText.textContent = Math.round(progress) + '%';
    }, updateInterval);
}

// إخفاء شاشة التحميل البلورية
function hideCrystalLoading() {
    console.log('🔮 إخفاء شاشة التحميل البلورية');

    const loadingOverlay = document.getElementById('crystalLoadingOverlay');
    if (loadingOverlay) {
        loadingOverlay.classList.add('fade-out');

        // إزالة العنصر بعد انتهاء الانتقال
        setTimeout(() => {
            if (loadingOverlay.parentNode) {
                loadingOverlay.parentNode.removeChild(loadingOverlay);
            }
        }, 800);
    }
}

// ==================== نهاية شاشة التحميل البلورية ====================
let contractTypeFilter = null;
let multiFilterSelectedCity = null;
let multiFilterSelectedProperties = [];
let isReverseOrder = true; // ترتيب عكسي افتراضياً (الأحدث أولاً)
// متغيرات عامة للفلتر
let dateFilterType = '';
let dateFilterDay = '';
let dateFilterMonth = '';
let dateFilterYear = '';
let attachments = {}; // مرفقات العقارات العامة
let cardAttachments = {}; // مرفقات البطاقات المنفصلة

// تهيئة المتغير العام للمرفقات
if (!window.attachments) {
    window.attachments = {};
}

// تحديث المتغير العام من localStorage
try {
    const storedAttachments = JSON.parse(localStorage.getItem('propertyAttachments') || '{}');
    const storedLegacyAttachments = JSON.parse(localStorage.getItem('attachments') || '{}');

    // دمج المرفقات من مصادر مختلفة
    window.attachments = { ...storedLegacyAttachments, ...storedAttachments };
    attachments = window.attachments;

    console.log(`📎 تم تحميل ${Object.keys(window.attachments).length} مجموعة مرفقات من localStorage`);
} catch (error) {
    console.warn('⚠️ خطأ في تحميل المرفقات من localStorage:', error);
    window.attachments = {};
    attachments = {};
}
let isManagementMode = false; // متغير لتتبع وضع الإدارة
let currentCalculationYear = new Date().getFullYear(); // السنة الحالية للحساب (2025)
let selectedCityFilter = 'all'; // المدينة المختارة للتصفية في صفحة الإدارة
let areHeaderButtonsVisible = true; // متغير لتتبع حالة إظهار/إخفاء أزرار الهيدر
let propertyManagement = {
    properties: [],
    units: []
};

// ===== دوال مساعدة للتعامل مع أعمدة المالك =====

// دالة مساعدة للحصول على قيمة المالك من أي من العمودين
function getOwnerValue(property) {
    return property.owner_name || property.owner || null;
}

// دالة مساعدة لتحديث أعمدة المالك (كلاهما)
function setOwnerValue(propertyData, ownerValue) {
    propertyData.owner = ownerValue;
    propertyData.owner_name = ownerValue;
    return propertyData;
}

// دالة مساعدة للحصول على قيمة السجل العقاري من أي من العمودين
function getRegistryValue(property) {
    return property.registry_number || property.real_estate_registry || null;
}

// دالة مساعدة لتحديث أعمدة السجل العقاري (كلاهما)
function setRegistryValue(propertyData, registryValue) {
    propertyData.registry_number = registryValue;
    propertyData.real_estate_registry = registryValue;
    return propertyData;
}

// دالة مساعدة للحصول على قيمة الإيجار من العمود الأساسي فقط
function getRentValue(property) {
    return property.rent_value || null;
}

// دالة مساعدة لتحديث عمود الإيجار الأساسي فقط
function setRentValue(propertyData, rentValue) {
    propertyData.rent_value = rentValue;
    return propertyData;
}

// دالة مساعدة للحصول على قيمة السجل العقاري من أي من العمودين
function getRegistryValue(property) {
    return property.registry_number || property.real_estate_registry || null;
}

// دالة مساعدة لتحديث أعمدة السجل العقاري (كلاهما)
function setRegistryValue(propertyData, registryValue) {
    propertyData.registry_number = registryValue;
    propertyData.real_estate_registry = registryValue;
    return propertyData;
}

// إعدادات المطور للإشعارات التفصيلية
let developerMode = localStorage.getItem('developerMode') === 'true' || false;

// ===== نظام إدارة العقارات والمدن بدون وحدات افتراضية =====

// مصفوفة منفصلة لحفظ معلومات العقارات الأساسية
let propertyDefinitions = JSON.parse(localStorage.getItem('propertyDefinitions') || '[]');

// مصفوفة منفصلة لحفظ المدن المضافة
let cityDefinitions = JSON.parse(localStorage.getItem('cityDefinitions') || '[]');

// وظيفة ذكية للإشعارات - تظهر فقط الإشعارات المهمة
function smartToast(message, type = 'info', force = false) {
    // الإشعارات المهمة التي تظهر دائماً
    const importantTypes = ['error', 'warning'];
    const importantKeywords = ['خطأ', 'فشل', 'مشكلة', 'تحذير', 'حذف', 'نجح الحفظ', 'تم الحفظ'];

    // إظهار الإشعار إذا كان:
    // 1. مفروض إظهاره (force = true)
    // 2. من النوع المهم (خطأ أو تحذير)
    // 3. يحتوي على كلمات مهمة
    // 4. وضع المطور مفعل
    const shouldShow = force ||
                      importantTypes.includes(type) ||
                      importantKeywords.some(keyword => message.includes(keyword)) ||
                      developerMode;

    if (shouldShow) {
        showToast(message, type);
    } else {
        // إرسال للكونسول بدلاً من الإشعار
        console.log(`📢 ${type.toUpperCase()}: ${message}`);
    }
}

// تبديل وضع المطور
function toggleDeveloperMode() {
    developerMode = !developerMode;
    localStorage.setItem('developerMode', developerMode.toString());
    updateDeveloperModeButton();

    if (developerMode) {
        showToast('تم تفعيل وضع المطور - ستظهر جميع الإشعارات التفصيلية', 'success');
        console.log('🔧 تم تفعيل وضع المطور - ستظهر جميع الإشعارات التفصيلية');
    } else {
        showToast('تم إلغاء وضع المطور - ستظهر الإشعارات المهمة فقط', 'info');
        console.log('🔧 تم إلغاء وضع المطور - ستظهر الإشعارات المهمة فقط');
    }
}

// تحديث حالة زر وضع المطور
function updateDeveloperModeButton() {
    const btn = document.getElementById('developerModeBtn');
    const text = document.getElementById('developerModeText');

    if (!btn || !text) return;

    if (developerMode) {
        btn.style.background = 'linear-gradient(to left, #28a745, #20c997)';
        text.textContent = 'وضع المطور (مفعل)';
    } else {
        btn.style.background = 'linear-gradient(to left, #6f42c1, #5a2d91)';
        text.textContent = 'وضع المطور';
    }
}

// تحميل البيانات عند تحميل الصفحة
document.addEventListener('DOMContentLoaded', function() {
    // إظهار شاشة التحميل البلورية
    console.log('🔮 إظهار شاشة التحميل البلورية');

    // التحقق من وجود مستخدم محفوظ لتحديد نوع الشاشة
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
        try {
            const userData = JSON.parse(savedUser);
            currentUser = userData.username;

            // فحص نوع المستخدم
            const isLimitedUser = userData.role === 'limited' ||
                                (users[userData.username] && users[userData.username].role === 'limited');

            console.log(`👤 نوع المستخدم: ${isLimitedUser ? 'محدود' : 'عادي'}`);
        } catch (error) {
            console.warn('خطأ في قراءة بيانات المستخدم:', error);
        }
    }

    // إظهار شاشة التحميل البلورية
    showCrystalLoading();

    // مسح حقول البحث عند تحميل الصفحة
    setTimeout(() => {
        clearAllSearchFields();
    }, 100);

    // تهيئة القائمة المنسدلة للجوال
    initMobileMenu();

    // تحديث حالة زر وضع المطور
    updateDeveloperModeButton();

    // ===== تهيئة نظام إدارة الحالة =====
    console.log('🔧 تهيئة نظام إدارة الحالة...');
    setupStateEventHandlers();
    autoSaveState();

    // ===== استعادة حالة التطبيق =====
    console.log('🔄 محاولة استعادة حالة التطبيق...');
    const restoredState = restoreAppState();

    // تحديث عرض الفلاتر النشطة بعد استعادة الحالة
    setTimeout(() => {
        updateActiveFiltersDisplay();
        updateAllFilterButtonsState();
    }, 500);

    // ===== إضافة زر تسجيل الخروج مبكراً =====
    setTimeout(() => {
        if (currentUser && currentUser !== 'guest') {
            console.log('🔑 إضافة زر تسجيل الخروج مبكراً من DOMContentLoaded');
            addLogoutButton();
            updateMobileUserSection();
        }
    }, 100);

    // استعادة البيانات من localStorage إذا كانت متوفرة
    restoreDataFromLocalStorage();

    // Initialize data loading (Supabase or JSON fallback)
    console.log('🚀 بدء تحميل البيانات...');

    // فحص البيانات للتأكد من الحفظ الدائم
    setTimeout(() => {
        verifyDataPersistence();

        // ===== تطبيق الحالة المستعادة بعد تحميل البيانات =====
        if (restoredState) {
            setTimeout(() => {
                applyRestoredState(restoredState);
            }, 1000);
        }

        // تحديث عرض اسم العقار في الجوالات بعد تحميل البيانات
        setTimeout(() => {
            updateMobilePropertyName();
        }, 1200);

        // استدعاء إضافي للاختبار
        setTimeout(() => {
            console.log('🧪 اختبار مباشر لدالة عرض اسم العقار');
            updateMobilePropertyName();
        }, 2000);

        // استدعاء إضافي كل 3 ثوان للاختبار
        setInterval(() => {
            if (currentProperty && currentProperty !== 'الكل') {
                updateMobilePropertyName();
            }
        }, 3000);

        // بدء نظام الحفظ التلقائي للحالة
        autoSaveState();

        // إضافة مستمعات الأحداث لحفظ الحالة
        addStateEventListeners();

        // تفعيل مراقب زر تسجيل الخروج
        setupLogoutButtonObserver();

        // استدعاء نهائي للتأكد من إضافة زر تسجيل الخروج
        setTimeout(() => {
            if (currentUser && currentUser !== 'guest' && !document.getElementById('logoutBtn')) {
                console.log('🔑 استدعاء نهائي لإضافة زر تسجيل الخروج');
                addLogoutButton();
                updateMobileUserSection();
            }

            // تطبيق نهائي لقيود الوصول للأزرار للمستخدم محدود الصلاحية
            if (currentUser && users[currentUser] && users[currentUser].role === 'limited') {
                console.log('🔒 تطبيق نهائي لقيود الوصول للأزرار الإدارية');
                restrictAdminButtonsForLimitedUser();
                setupAdminButtonsObserver();
            }
        }, 2000);
    }, 1000);

    initializeDataLoading()
        .then(() => {
            console.log(`✅ تم تحميل ${properties ? properties.length : 0} عقار`);

            // إصلاح التواريخ المحفوظة بشكل خاطئ
            fixCorruptedDates();

            // اختبار معالجة التواريخ
            testDateHandling();

            // إعادة حساب الإجماليات الفارغة
            recalculateAllTotals();

            initializeApp();

            // تهيئة أزرار الهيدر
            setTimeout(() => {
                initializeHeaderButtons();
            }, 100);

            // Initialize Supabase attachments system
            initializeAttachmentsSystem();

            // تحديث عرض اسم العقار في الجوالات
            setTimeout(() => {
                updateMobilePropertyName();
            }, 500);

            console.log('🎉 تم تهيئة التطبيق بنجاح');
            console.log('💰 ميزة الإجمالي الدائم مفعلة: المبلغ المكتوب يدوياً لن يتم تغييره أبداً');
            console.log('⚡ التحديث الفوري مفعل: الإجمالي يظهر فوراً بدون reload');
            console.log('🎨 تم تمييز اسم المستأجر بتصميم متجاوب (أصغر في الحاسوب + أكبر في الهاتف)');
            console.log('🗑️ تم حذف وصف الإجمالي المزعج');
            console.log('🧪 لاختبار الميزة: testPermanentTotal() أو testInstantUpdate()');
        })
        .catch(error => {
            console.error('❌ خطأ في تحميل البيانات:', error);

            // Fallback to JSON if everything fails
            console.log('🔄 محاولة تحميل البيانات من JSON...');
            fetch('data.json')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log(`✅ تم تحميل ${data.length} عقار من JSON`);
                    properties = data;
                    recalculateAllTotals();
                    initializeApp();
                    setTimeout(() => {
                        initializeHeaderButtons();
                    }, 100);
                })
                .catch(jsonError => {
                    console.error('❌ خطأ في تحميل البيانات من JSON:', jsonError);

                    // إنشاء بيانات تجريبية إذا فشل كل شيء
                    console.log('🔧 إنشاء بيانات تجريبية...');
                    createSampleData();
                    initializeApp();
                });
        });
});

// إنشاء بيانات تجريبية في حالة فشل تحميل البيانات
function createSampleData() {
    console.log('🔧 إنشاء بيانات تجريبية للاختبار...');

    properties = [
        {
            'رقم  الوحدة ': 'SAMPLE_001',
            'المدينة': 'الرياض',
            'اسم العقار': 'عقار تجريبي 1',
            'اسم المستأجر': 'مستأجر تجريبي 1',
            'رقم العقد': 'CONTRACT_001',
            'قيمة  الايجار ': '50000',
            'المساحة': '150',
            'تاريخ البداية': '01/01/2024',
            'تاريخ النهاية': '31/12/2024',
            'الاجمالى': '57500',
            'نوع العقد': 'ضريبي',
            'عدد الاقساط': 3,
            'تاريخ القسط الاول': '01/01/2024',
            'مبلغ القسط الاول': 19166.67,
            'تاريخ القسط الثاني': '01/05/2024',
            'مبلغ القسط الثاني': 19166.67,
            'تاريخ القسط الثالث': '01/09/2024',
            'مبلغ القسط الثالث': 19166.66,
            'رقم الصك': '123456789',
            'مساحةالصك': '500',
            'السجل العيني ': 'REG-001-2024'
        },
        {
            'رقم  الوحدة ': 'SAMPLE_002',
            'المدينة': 'جدة',
            'اسم العقار': 'عقار تجريبي 2',
            'اسم المستأجر': 'مستأجر تجريبي 2',
            'رقم العقد': 'CONTRACT_002',
            'قيمة  الايجار ': '40000',
            'المساحة': '120',
            'تاريخ البداية': '01/02/2024',
            'تاريخ النهاية': '31/01/2025',
            'الاجمالى': '46000',
            'نوع العقد': 'ضريبي',
            'عدد الاقساط': 2,
            'تاريخ القسط الاول': '01/02/2024',
            'مبلغ القسط الاول': 23000,
            'تاريخ القسط الثاني': '01/08/2024',
            'مبلغ القسط الثاني': 23000,
            'رقم الصك': '987654321',
            'مساحةالصك': '300',
            'السجل العيني ': 'REG-002-2024'
        },
        {
            'رقم  الوحدة ': 'SAMPLE_003',
            'المدينة': 'الدمام',
            'اسم العقار': 'عقار تجريبي 3',
            'اسم المستأجر': 'مستأجر تجريبي 3',
            'رقم العقد': 'CONTRACT_003',
            'قيمة  الايجار ': '60000',
            'المساحة': '200',
            'تاريخ البداية': '01/03/2024',
            'تاريخ النهاية': '28/02/2025',
            'الاجمالى': '60000',
            'نوع العقد': 'سكني',
            'عدد الاقساط': 4,
            'تاريخ القسط الاول': '01/03/2024',
            'مبلغ القسط الاول': 15000,
            'تاريخ القسط الثاني': '01/06/2024',
            'مبلغ القسط الثاني': 15000,
            'تاريخ القسط الثالث': '01/09/2024',
            'مبلغ القسط الثالث': 15000,
            'تاريخ القسط الرابع': '01/12/2024',
            'مبلغ القسط الرابع': 15000,
            'رقم الصك': '456789123',
            'مساحةالصك': '800',
            'السجل العيني ': 'REG-003-2024'
        }
    ];

    console.log(`✅ تم إنشاء ${properties.length} عقار تجريبي`);
}

// تحديث الإحصائيات العامة
function updateTotalStats() {
    console.log('🔄 تحديث الإحصائيات...');

    if (!properties || properties.length === 0) {
        console.warn('⚠️ لا توجد بيانات لحساب الإحصائيات');
        return;
    }

    // تحديث إحصائيات الشاشة الكبيرة
    renderTotals(properties);

    // تحديث إحصائيات الشاشة الصغيرة
    renderMobileTotals(properties);

    console.log('✅ تم تحديث الإحصائيات');
}

// تهيئة أزرار المدن
function initializeCityButtons() {
    console.log('🔄 تهيئة أزرار المدن...');
    initCountryButtons();
}

// تهيئة البحث
function initializeSearch() {
    console.log('🔄 تهيئة البحث...');
    initGlobalSearch();
    initPropertySearch();
}

// تهيئة التصفية
function initializeFilters() {
    console.log('🔄 تهيئة التصفية...');
    initStatusFilter();
    initDateFilter();
}

// تهيئة القائمة المنسدلة للجوال
function initMobileMenu() {
    const mobileMenuBtn = document.getElementById('mobileMenuBtn');
    const mobileMenu = document.getElementById('mobileMenu');
    const mobileMenuClose = document.getElementById('mobileMenuClose');
    const menuOverlay = document.getElementById('menuOverlay');
    
    // فتح القائمة
    mobileMenuBtn.addEventListener('click', function() {
        mobileMenu.classList.add('active');
        menuOverlay.classList.add('active');
        document.body.style.overflow = 'hidden';

        // إخفاء الإحصائيات عند فتح القائمة
        const totalContainer = document.getElementById('totalContainer');
        if (totalContainer) {
            totalContainer.style.display = 'none';
            console.log('📊 تم إخفاء الإحصائيات عند فتح القائمة المحمولة');
        }

        // تنظيف القائمة من الترقيم والفراغات القديمة فقط
        cleanMenuOnly();
    });
    
    // إغلاق القائمة
    mobileMenuClose.addEventListener('click', function() {
        mobileMenu.classList.remove('active');
        menuOverlay.classList.remove('active');
        document.body.style.overflow = '';

        // إظهار الإحصائيات عند إغلاق القائمة
        const totalContainer = document.getElementById('totalContainer');
        if (totalContainer) {
            totalContainer.style.display = '';
            console.log('📊 تم إظهار الإحصائيات عند إغلاق القائمة المحمولة');
        }
    });
    
    // إغلاق القائمة عند النقر على الخلفية
    menuOverlay.addEventListener('click', function() {
        mobileMenu.classList.remove('active');
        menuOverlay.classList.remove('active');
        document.body.style.overflow = '';

        // إظهار الإحصائيات عند إغلاق القائمة
        const totalContainer = document.getElementById('totalContainer');
        if (totalContainer) {
            totalContainer.style.display = '';
            console.log('📊 تم إظهار الإحصائيات عند إغلاق القائمة (خلفية)');
        }
    });
    
    // أزرار القائمة المنسدلة
    document.getElementById('mobile-country-btn').addEventListener('click', function() {
        showCountrySelection();
        mobileMenu.classList.remove('active');
        menuOverlay.classList.remove('active');
        document.body.style.overflow = '';
    });
    
    document.getElementById('mobile-property-btn').addEventListener('click', function() {
        // إظهار الـ sidebar بالعقارات
        toggleSidebar();
        mobileMenu.classList.remove('active');
        menuOverlay.classList.remove('active');
        document.body.style.overflow = '';
    });
    
    document.getElementById('mobile-filter-btn').addEventListener('click', function() {
        showStatusFilter();
        mobileMenu.classList.remove('active');
        menuOverlay.classList.remove('active');
        document.body.style.overflow = '';
    });
    
    document.getElementById('mobile-view-btn').addEventListener('click', function() {
        showViewToggle();
        mobileMenu.classList.remove('active');
        menuOverlay.classList.remove('active');
        document.body.style.overflow = '';
    });
    
    document.getElementById('mobile-contract-type-btn').addEventListener('click', function() {
        document.getElementById('mobileMenu').classList.remove('active');
        document.getElementById('menuOverlay').classList.remove('active');
        document.body.style.overflow = '';
        document.getElementById('contractTypeFilterBtn').click();
    });

    document.getElementById('mobile-property-type-btn').addEventListener('click', function() {
        document.getElementById('mobileMenu').classList.remove('active');
        document.getElementById('menuOverlay').classList.remove('active');
        document.body.style.overflow = '';
        showPropertyTypeFilter();
    });
    
    document.getElementById('mobile-date-filter-btn').addEventListener('click', function() {
  showMonthFilterModal();
  document.getElementById('mobileMenu').classList.remove('active');
  document.getElementById('menuOverlay').classList.remove('active');
  document.body.style.overflow = '';
});

    document.getElementById('mobile-property-manager-btn').addEventListener('click', function() {
        showPropertyManager();
        document.getElementById('mobileMenu').classList.remove('active');
        document.getElementById('menuOverlay').classList.remove('active');
        document.body.style.overflow = '';
    });

    // زر فلتر المالك في الجوال
    document.getElementById('mobile-owner-filter-btn').addEventListener('click', function() {
        showOwnerFilter();
        document.getElementById('mobileMenu').classList.remove('active');
        document.getElementById('menuOverlay').classList.remove('active');
        document.body.style.overflow = '';
    });

    // زر طباعة إحصائيات العقارات في الجوال
    document.getElementById('mobile-property-statistics-print-btn').addEventListener('click', function() {
        showPropertyStatisticsPrintModal();
        document.getElementById('mobileMenu').classList.remove('active');
        document.getElementById('menuOverlay').classList.remove('active');
        document.body.style.overflow = '';
    });
}

// عرض اختيار المدينة
function showCountrySelection() {
    const countries = getUniqueCountries();
    let html = `<div class="modal-overlay" style="display:flex; z-index: 10000;">
        <div class="modal-box cities-modal" style="max-width: 500px; max-height: 80vh; position: relative;">
            <h3 style="display: flex; align-items: center; gap: 10px; margin-bottom: 20px;">
                <i class="fas fa-map-marker-alt" style="color: #28a745;"></i>
                اختر المدينة
                <span class="badge" style="background: #28a745; color: white; padding: 4px 8px; border-radius: 12px; font-size: 0.8rem;">${countries.length}</span>
            </h3>
            <div class="country-selection" style="max-height: 400px; overflow-y: auto; border: 1px solid #e9ecef; border-radius: 8px; padding: 15px; display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">`;

    countries.forEach(country => {
        const isActive = currentCountry === country;
        const activeClass = isActive ? 'active' : '';
        const activeStyle = isActive ? 'background: #28a745; color: white;' : '';

        html += `
            <button onclick="selectCountry('${country}'); closeCitiesModal();"
                    class="country-btn ${activeClass}"
                    style="width: 100%; padding: 12px; margin: 4px 0; border-radius: 8px; cursor: pointer;
                           transition: all 0.3s ease; border: 1px solid #e9ecef; ${activeStyle}
                           display: flex; align-items: center; justify-content: space-between; background: ${isActive ? '#28a745' : 'white'}; min-height: 50px;">
                <span style="font-weight: 700; font-size: 1.3rem;">${country}</span>
                ${isActive ? '<i class="fas fa-check" style="color: white;"></i>' : '<i class="fas fa-map-marker-alt" style="color: #28a745;"></i>'}
            </button>
        `;
    });

    html += `
            </div>
            <div class="modal-actions" style="margin-top: 20px; display: flex; gap: 10px;">
                <button onclick="closeCitiesModal();" class="modal-action-btn close-btn cities-close-btn" id="citiesCloseBtn"
                        style="flex: 1; background: linear-gradient(135deg, #6c757d, #495057); color: white; border: none; padding: 12px 20px; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; justify-content: center; gap: 8px;">
                    <i class="fas fa-times"></i> إغلاق
                </button>
            </div>
        </div>
    </div>`;

    document.body.insertAdjacentHTML('beforeend', html);

    // إضافة حدث إغلاق للمودال
    setTimeout(() => {
        const modalOverlay = document.querySelector('.modal-overlay:last-child');
        if (modalOverlay) {
            modalOverlay.addEventListener('click', function(e) {
                if (e.target === this) {
                    console.log('🔴 تم النقر خارج نافذة المدن - إغلاق');
                    closeCitiesModal();
                }
            });
            console.log('✅ تم ربط الإغلاق عند النقر خارج نافذة المدن');
        }
    }, 100);
}

// دالة إغلاق نافذة المدن
function closeCitiesModal() {
    console.log('🔴 إغلاق نافذة المدن...');
    const modal = document.querySelector('.cities-modal');
    if (modal) {
        const modalOverlay = modal.closest('.modal-overlay');
        if (modalOverlay) {
            modalOverlay.remove();
            console.log('✅ تم إغلاق نافذة المدن');
        }
    }
    if (closeBtn) {
        closeBtn.style.padding = '15px';
        closeBtn.style.margin = '-15px';
    }
}

// عرض فلتر الحالة
function showStatusFilter() {
    // أضف "الفارغ" إلى قائمة الحالات
    const statuses = ['فعال', 'منتهى', 'على وشك', 'فارغ'];
    let html = `<div class="modal-overlay" style="display:flex; z-index: 10000;">
        <div class="modal-box status-filter-modal" style="max-width: 500px; max-height: 80vh; position: relative;">
            <h3 style="display: flex; align-items: center; gap: 10px; margin-bottom: 20px;">
                <i class="fas fa-filter" style="color: #ffc107;"></i>
                فلتر الحالة
                <span class="badge" style="background: #ffc107; color: #212529; padding: 4px 8px; border-radius: 12px; font-size: 0.8rem;">${statuses.length + 1}</span>
            </h3>
            <div class="status-filter" style="max-height: 400px; overflow-y: auto; border: 1px solid #e9ecef; border-radius: 8px; padding: 10px;">`;

    // إضافة خيار "الكل"
    const isAllActive = filterStatus === null;
    html += `
        <button onclick="if(filterStatus) { toggleStatusFilter(filterStatus); } closeStatusFilterModal();"
                class="status-btn ${isAllActive ? 'active' : ''}"
                style="width: 100%; padding: 12px; margin: 8px 0; border-radius: 8px; cursor: pointer;
                       transition: all 0.3s ease; border: 1px solid #e9ecef;
                       background: ${isAllActive ? '#ffc107' : 'white'}; color: ${isAllActive ? '#212529' : '#495057'};
                       display: flex; align-items: center; justify-content: space-between;">
            <span style="font-weight: 500;">الكل</span>
            ${isAllActive ? '<i class="fas fa-check" style="color: #212529;"></i>' : '<i class="fas fa-list" style="color: #ffc107;"></i>'}
        </button>
    `;

    // إضافة باقي الحالات
    statuses.forEach(status => {
        const isActive = filterStatus === status;
        const statusColors = {
            'فعال': '#28a745',
            'منتهى': '#dc3545',
            'على وشك': '#fd7e14',
            'فارغ': '#6c757d'
        };
        const statusColor = statusColors[status] || '#007bff';

        html += `
            <button onclick="toggleStatusFilter('${status}'); closeStatusFilterModal();"
                    class="status-btn ${isActive ? 'active' : ''}"
                    style="width: 100%; padding: 12px; margin: 8px 0; border-radius: 8px; cursor: pointer;
                           transition: all 0.3s ease; border: 1px solid #e9ecef;
                           background: ${isActive ? statusColor : 'white'}; color: ${isActive ? 'white' : '#495057'};
                           display: flex; align-items: center; justify-content: space-between;">
                <span style="font-weight: 500;">${status}</span>
                ${isActive ? '<i class="fas fa-check" style="color: white;"></i>' : `<i class="fas fa-circle" style="color: ${statusColor};"></i>`}
            </button>
        `;
    });

    html += `
            </div>
            <div class="modal-actions" style="margin-top: 20px; display: flex; gap: 10px;">
                <button onclick="closeStatusFilterModal();" class="modal-action-btn close-btn status-filter-close-btn" id="statusFilterCloseBtn"
                        style="flex: 1; background: linear-gradient(135deg, #6c757d, #495057); color: white; border: none; padding: 12px 20px; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; justify-content: center; gap: 8px;">
                    <i class="fas fa-times"></i> إغلاق
                </button>
            </div>
        </div>
    </div>`;

    document.body.insertAdjacentHTML('beforeend', html);

    // إضافة حدث إغلاق للمودال
    setTimeout(() => {
        const modalOverlay = document.querySelector('.modal-overlay:last-child');
        if (modalOverlay) {
            modalOverlay.addEventListener('click', function(e) {
                if (e.target === this) {
                    console.log('🔴 تم النقر خارج نافذة فلتر الحالة - إغلاق');
                    closeStatusFilterModal();
                }
            });
            console.log('✅ تم ربط الإغلاق عند النقر خارج نافذة فلتر الحالة');
        }
    }, 100);
}

// دالة إغلاق نافذة فلتر الحالة
function closeStatusFilterModal() {
    console.log('🔴 إغلاق نافذة فلتر الحالة...');
    const modal = document.querySelector('.status-filter-modal');
    if (modal) {
        const modalOverlay = modal.closest('.modal-overlay');
        if (modalOverlay) {
            modalOverlay.remove();
            console.log('✅ تم إغلاق نافذة فلتر الحالة');
        }
    }
    
    // توسيع منطقة إغلاق النافذة حول X
    const closeBtn = document.querySelector('.modal-overlay:last-child .close-modal');
    if (closeBtn) {
        closeBtn.style.padding = '15px';
        closeBtn.style.margin = '-15px';
    }
}

// عرض تبديل طريقة العرض
function showViewToggle() {
    let html = `<div class="modal-overlay" style="display:flex; z-index: 10000;">
        <div class="modal-box view-toggle-modal" style="max-width: 400px; max-height: 80vh; position: relative;">
            <h3 style="display: flex; align-items: center; gap: 10px; margin-bottom: 20px;">
                <i class="fas fa-eye" style="color: #6f42c1;"></i>
                طريقة العرض
                <span class="badge" style="background: #6f42c1; color: white; padding: 4px 8px; border-radius: 12px; font-size: 0.8rem;">2</span>
            </h3>
            <div class="view-selection" style="max-height: 300px; overflow-y: auto; border: 1px solid #e9ecef; border-radius: 8px; padding: 10px;">`;

    // خيار الجدول
    const isTableActive = currentView === 'table';
    html += `
        <button onclick="toggleView('table'); closeViewToggleModal();"
                class="view-btn ${isTableActive ? 'active' : ''}"
                style="width: 100%; padding: 15px; margin: 8px 0; border-radius: 8px; cursor: pointer;
                       transition: all 0.3s ease; border: 1px solid #e9ecef;
                       background: ${isTableActive ? '#6f42c1' : 'white'}; color: ${isTableActive ? 'white' : '#495057'};
                       display: flex; align-items: center; justify-content: space-between;">
            <div style="display: flex; align-items: center; gap: 10px;">
                <i class="fas fa-table" style="color: ${isTableActive ? 'white' : '#6f42c1'};"></i>
                <span style="font-weight: 500;">جدول</span>
            </div>
            ${isTableActive ? '<i class="fas fa-check" style="color: white;"></i>' : ''}
        </button>
    `;

    // خيار البطاقات
    const isCardsActive = currentView === 'cards';
    html += `
        <button onclick="toggleView('cards'); closeViewToggleModal();"
                class="view-btn ${isCardsActive ? 'active' : ''}"
                style="width: 100%; padding: 15px; margin: 8px 0; border-radius: 8px; cursor: pointer;
                       transition: all 0.3s ease; border: 1px solid #e9ecef;
                       background: ${isCardsActive ? '#6f42c1' : 'white'}; color: ${isCardsActive ? 'white' : '#495057'};
                       display: flex; align-items: center; justify-content: space-between;">
            <div style="display: flex; align-items: center; gap: 10px;">
                <i class="fas fa-th-large" style="color: ${isCardsActive ? 'white' : '#6f42c1'};"></i>
                <span style="font-weight: 500;">بطاقات</span>
            </div>
            ${isCardsActive ? '<i class="fas fa-check" style="color: white;"></i>' : ''}
        </button>
    `;

    html += `
            </div>
            <div class="modal-actions" style="margin-top: 20px; display: flex; gap: 10px;">
                <button onclick="closeViewToggleModal();" class="modal-action-btn close-btn view-toggle-close-btn" id="viewToggleCloseBtn"
                        style="flex: 1; background: linear-gradient(135deg, #6c757d, #495057); color: white; border: none; padding: 12px 20px; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; justify-content: center; gap: 8px;">
                    <i class="fas fa-times"></i> إغلاق
                </button>
            </div>
        </div>
    </div>`;

    document.body.insertAdjacentHTML('beforeend', html);

    // إضافة حدث إغلاق للمودال
    setTimeout(() => {
        const modalOverlay = document.querySelector('.modal-overlay:last-child');
        if (modalOverlay) {
            modalOverlay.addEventListener('click', function(e) {
                if (e.target === this) {
                    console.log('🔴 تم النقر خارج نافذة طريقة العرض - إغلاق');
                    closeViewToggleModal();
                }
            });
            console.log('✅ تم ربط الإغلاق عند النقر خارج نافذة طريقة العرض');
        }
    }, 100);
}

// دالة إغلاق نافذة طريقة العرض
function closeViewToggleModal() {
    console.log('🔴 إغلاق نافذة طريقة العرض...');
    const modal = document.querySelector('.view-toggle-modal');
    if (modal) {
        const modalOverlay = modal.closest('.modal-overlay');
        if (modalOverlay) {
            modalOverlay.remove();
            console.log('✅ تم إغلاق نافذة طريقة العرض');
        }
    }
    if (closeBtn) {
        closeBtn.style.padding = '15px';
        closeBtn.style.margin = '-15px';
    }
}

// تهيئة التطبيق
function initializeApp() {
    console.log('🚀 بدء تهيئة التطبيق...');

    // 🔧 إضافة: تحميل المدن المحفوظة أولاً
    if (typeof loadSavedCities === 'function') {
        loadSavedCities();
    }

    // تحميل إعداد الترتيب
    loadSortOrderSetting();

    // التحقق من وجود البيانات
    if (!properties || properties.length === 0) {
        console.warn('⚠️ لا توجد بيانات للعرض في initializeApp');

        // محاولة تحميل البيانات من localStorage
        const localData = localStorage.getItem('properties');
        if (localData) {
            try {
                properties = JSON.parse(localData);
                console.log(`✅ تم تحميل ${properties.length} عقار من localStorage`);
            } catch (e) {
                console.error('❌ خطأ في تحليل بيانات localStorage:', e);
                properties = [];
            }
        }

        // إذا لم تكن هناك بيانات، إنشاء بيانات تجريبية
        if (!properties || properties.length === 0) {
            console.log('🔧 إنشاء بيانات تجريبية...');
            createSampleData();
        }
    }

    console.log(`📊 عدد العقارات المتاحة: ${properties ? properties.length : 0}`);

    // معالجة الحالات الفارغة تلقائياً
    properties.forEach(property => {
        // إذا كان اسم المستأجر أو المالك فارغ، اجعل الحالتين فارغتين
        if (!property['اسم المستأجر'] || !property['المالك']) {
            property['الحالة النهائية'] = '';
            property['الحالة الجديدة'] = '';
            property['isInstallmentEnded'] = false;
            return;
        }

        // إذا كانت الحالة النهائية أو الجديدة فارغة
        if (!property['الحالة النهائية'] || !property['الحالة الجديدة']) {
            const today = new Date();
            
            // تحقق من وجود تاريخ نهاية القسط
            const installmentEndDateStr = property['تاريخ نهاية القسطالثاني'];
            const endDateStr = property['تاريخ النهاية'];
            
            // إذا لم يكن هناك تاريخ نهاية، اجعل الحالة فارغة
            if (!endDateStr && !installmentEndDateStr) {
                property['الحالة النهائية'] = '';
                property['الحالة الجديدة'] = '';
                property['isInstallmentEnded'] = false;
                return;
            }
            
            // حساب الحالة بناءً على تاريخ نهاية القسطإذا كان موجوداً
            if (installmentEndDateStr) {
                // دعم الصيغ dd/mm/yyyy أو dd-mm-yyyy
                const installmentParts = installmentEndDateStr.split(/[\/\-]/);
                if (installmentParts.length === 3) {
                    // تحويل تاريخ نهاية القسطإلى كائن تاريخ
                    let installmentDay, installmentMonth, installmentYear;
                    
                    // تحقق من صيغة التاريخ (قد يكون yyyy-mm-dd أو dd/mm/yyyy)
                    if (installmentEndDateStr.includes('-') && !isNaN(installmentEndDateStr.split('-')[0]) && installmentEndDateStr.split('-')[0].length === 4) {
                        // صيغة yyyy-mm-dd
                        [installmentYear, installmentMonth, installmentDay] = installmentParts.map(Number);
                    } else {
                        // صيغة dd/mm/yyyy أو dd-mm-yyyy
                        [installmentDay, installmentMonth, installmentYear] = installmentParts.map(Number);
                    }
                    
                    const installmentEndDate = new Date(installmentYear, installmentMonth - 1, installmentDay);
                    
                    // حساب الفرق بالأيام بين تاريخ اليوم وتاريخ نهاية القسط
                    const installmentDiffDays = Math.floor((installmentEndDate - today) / (1000 * 60 * 60 * 24));
                    
                    // تحقق من وجود تاريخ نهاية العقد
                    let contractEndDate = null;
                    if (endDateStr) {
                        const contractParts = endDateStr.split(/[\/\-]/);
                        if (contractParts.length === 3) {
                            const [contractDay, contractMonth, contractYear] = contractParts.map(Number);
                            contractEndDate = new Date(contractYear, contractMonth - 1, contractDay);
                        }
                    }
                    
                    // إذا كان تاريخ نهاية القسطقبل تاريخ نهاية العقد أو لم يكن هناك تاريخ نهاية للعقد
                    if (!contractEndDate || installmentEndDate < contractEndDate) {
                        // حساب الحالة بناءً على تاريخ نهاية القسط
                        if (installmentDiffDays < 0) {
                            // إذا انتهى تاريخ القسط الثاني والعقد لا يزال فعالاً
                            if (!contractEndDate || contractEndDate > today) {
                                property['الحالة النهائية'] = 'فعال';
                                property['الحالة الجديدة'] = 'الأقساط منتهية والعقد فعال';
                                property['isInstallmentEnded'] = true;
                                return;
                            } else {
                                property['الحالة النهائية'] = 'منتهى';
                                property['الحالة الجديدة'] = `القسط منتهي منذ ${Math.abs(installmentDiffDays)} يوم وانتهى العقد`;
                                property['isInstallmentEnded'] = false;
                                return;
                            }
                        } else if (installmentDiffDays <= 60) {
                            property['الحالة النهائية'] = 'على وشك';
                            property['الحالة الجديدة'] = `القسط سينتهي بعد ${installmentDiffDays} يوم`;
                            property['isInstallmentEnded'] = false;
                            return;
                        }
                    }
                }
            }
            
            // إذا لم يكن هناك تاريخ نهاية قسط أو كان تاريخ نهاية العقد قبل تاريخ نهاية القسط
            // استخدم تاريخ نهاية العقد
            if (endDateStr) {
                // دعم الصيغ dd/mm/yyyy أو dd-mm-yyyy
                const parts = endDateStr.split(/[\/\-]/);
                if (parts.length !== 3) {
                    property['الحالة النهائية'] = '';
                    property['الحالة الجديدة'] = '';
                    property['isInstallmentEnded'] = false;
                    return;
                }
                // ترتيب اليوم والشهر والسنة حسب الصيغة
                const [day, month, year] = parts.map(Number);
                const endDate = new Date(year, month - 1, day);

                // حساب الفرق بالأيام
                const diffDays = Math.floor((endDate - today) / (1000 * 60 * 60 * 24));
                // قبل النهاية بشهرين = 60 يوم
                if (diffDays < 0) {
                    property['الحالة النهائية'] = 'منتهى';
                    property['الحالة الجديدة'] = `منتهي منذ ${Math.abs(diffDays)} يوم`;
                    property['isInstallmentEnded'] = false;
                } else if (diffDays <= 60) {
                    property['الحالة النهائية'] = 'على وشك';
                    property['الحالة الجديدة'] = `سينتهي بعد ${diffDays} يوم`;
                    property['isInstallmentEnded'] = false;
                } else {
                    property['الحالة النهائية'] = 'فعال';
                    property['الحالة الجديدة'] = 'فعال';
                    property['isInstallmentEnded'] = false;
                }
            }
        }
    });

    // تهيئة أزرار المدينةان
    initCountryButtons();
    
    // تهيئة قائمة العقارات
    initPropertyList();
    
    // تهيئة فلتر الحالة
    initStatusFilter();
    
    // تهيئة البحث العام
    initGlobalSearch();
    
    // تهيئة البحث التلقائي في العقارات
    initAutoPropertySearch();

    // تهيئة فلتر التاريخ
    initDateFilter();

    // تهيئة أزرار البحث المحسن
    initializeEnhancedSearch();

    // ضمان تطبيق التحسينات
    ensureSearchEnhancements();

    // عرض البيانات الأولية
    renderData();

    // تحديث الإحصائيات
    updateTotalStats();

    // تهيئة الـ sidebar
    initializeSidebar();

    // تحديث نص أزرار التصدير
    updateExportButtonsText();

    console.log('✅ تم تهيئة التطبيق بنجاح');

    // إضافة زر إخفاء السايدبار
    const sidebar = document.getElementById('sidebar');
    const hideBtn = document.querySelector('.hide-sidebar-btn');
    if (!hideBtn) {
        const btn = document.createElement('button');
        btn.className = 'hide-sidebar-btn';
        btn.textContent = 'إخفاء القائمة';
        btn.onclick = function() {
            toggleSidebar();
        };
        sidebar.appendChild(btn);
    }

    // إضافة زر تسجيل الخروج إذا كان المستخدم مسجل دخول
    setTimeout(() => {
        if (currentUser && currentUser !== 'guest') {
            console.log('🔑 إضافة زر تسجيل الخروج من initializeApp');
            addLogoutButton();
            updateMobileUserSection();
        }
    }, 100);

    // استدعاء إضافي للتأكد من إضافة زر تسجيل الخروج
    setTimeout(() => {
        if (currentUser && currentUser !== 'guest' && !document.getElementById('logoutBtn')) {
            console.log('🔑 استدعاء إضافي لإضافة زر تسجيل الخروج');
            addLogoutButton();
            updateMobileUserSection();
        }

        // تطبيق قيود الوصول للأزرار للمستخدم محدود الصلاحية
        if (currentUser && users[currentUser] && users[currentUser].role === 'limited') {
            console.log('🔒 تطبيق قيود الوصول للأزرار الإدارية');
            restrictAdminButtonsForLimitedUser();
        }
    }, 1000);

    // تم إزالة شاشة التحميل البلورية من هنا حسب طلب المستخدم
}

// الحصول على المدن الفريدة (محسن ليشمل المدن المعرفة)
function getUniqueCountries() {
    const countries = new Set();

    // إضافة المدن من العقارات الموجودة
    properties.forEach(property => {
        if (property.المدينة) {
            countries.add(property.المدينة);
        }
    });

    // إضافة المدن المعرفة (المضافة يدوياً)
    cityDefinitions.forEach(city => {
        countries.add(city);
    });

    return ['الكل', ...Array.from(countries).sort()];
}

// الحصول على العقارات الفريدة (محسن ليشمل العقارات المعرفة)
function getUniqueProperties() {
    const uniqueProperties = new Set();

    // إضافة العقارات من الوحدات الموجودة
    properties.forEach(property => {
        if (property['اسم العقار']) {
            uniqueProperties.add(property['اسم العقار']);
        }
    });

    // إضافة العقارات المعرفة (المضافة يدوياً)
    propertyDefinitions.forEach(propDef => {
        uniqueProperties.add(propDef.name);
    });

    return Array.from(uniqueProperties).sort();
}

// تهيئة أزرار المدينةان
function initCountryButtons() {
    const countries = getUniqueCountries();
    const container = document.getElementById('countryButtons');
    if (!container) {
        console.warn('⚠️ عنصر countryButtons غير موجود');
        return;
    }
    container.innerHTML = '';
    
    countries.forEach(country => {
        const button = document.createElement('button');
        button.textContent = country;
        button.onclick = () => selectCountry(country === 'الكل' ? null : country);
        if ((currentCountry === null && country === 'الكل') || currentCountry === country) {
            button.classList.add('active');
        }
        container.appendChild(button);
    });
}

// متغير لحفظ ترتيب العقارات الثابت
let fixedPropertyOrder = JSON.parse(localStorage.getItem('fixedPropertyOrder')) || [];

// متغير لحفظ فلتر نوع العقار الحالي
let currentPropertyTypeFilter = null; // null = الكل، 'buildings' = المباني، 'lands' = الأراضي

// تهيئة قائمة العقارات مع ترتيب ثابت
function initPropertyList(selectedCountry = null) {
    // ✅ الحصول على العقارات من مصدرين: properties و propertyDefinitions
    const allPropertyNames = new Set();

    // 1. إضافة العقارات من الوحدات الموجودة (properties)
    let filteredProperties = properties;
    if (selectedCountry) {
        filteredProperties = properties.filter(property => property.المدينة === selectedCountry);
    }
    filteredProperties.forEach(property => {
        if (property['اسم العقار'] && property['اسم العقار'].trim() !== '') {
            allPropertyNames.add(property['اسم العقار']);
        }
    });

    // 2. إضافة العقارات من التعريفات (propertyDefinitions) ✅
    let filteredDefinitions = propertyDefinitions || [];
    if (selectedCountry) {
        filteredDefinitions = propertyDefinitions.filter(propDef => propDef.city === selectedCountry);
    }
    filteredDefinitions.forEach(propDef => {
        if (propDef.name && propDef.name.trim() !== '') {
            allPropertyNames.add(propDef.name);
        }
    });

    // تحويل إلى مصفوفة
    const propertyNames = Array.from(allPropertyNames);

    console.log(`📋 عرض العقارات للمدينة "${selectedCountry || 'الكل'}": ${propertyNames.length} عقار`);
    console.log('📊 مصادر العقارات:', {
        fromProperties: filteredProperties.length,
        fromDefinitions: filteredDefinitions.length,
        total: propertyNames.length
    });

    // تطبيق الترتيب الثابت للعقارات
    const sortedPropertyNames = applySortedPropertyOrder(propertyNames, selectedCountry);

    // تحديث قائمة العقارات في الـ sidebar
    const container = document.getElementById('propertyList');
    if (!container) {
        console.warn('⚠️ عنصر propertyList غير موجود');
        return;
    }
    container.innerHTML = '';

    // تحديث حالة فلاتر نوع العقار
    updatePropertyTypeFiltersState();

    // تطبيق فلتر نوع العقار إذا كان نشطاً (مع مراعاة المدينة المحددة)
    let displayedPropertyNames = sortedPropertyNames;
    if (currentPropertyTypeFilter) {
        displayedPropertyNames = filterPropertiesByTypeLogic(sortedPropertyNames, currentPropertyTypeFilter, selectedCountry);
        console.log(`🏗️ فلترة ${currentPropertyTypeFilter === 'buildings' ? 'المباني' : 'الأراضي'} في ${selectedCountry || 'جميع المدن'}: ${displayedPropertyNames.length} عقار`);
    }

    displayedPropertyNames.forEach(propertyName => {
        // تجاهل الأسماء الفارغة أو غير المعرفة
        if (!propertyName || propertyName.trim() === '') return;
        const div = document.createElement('div');
        div.textContent = propertyName;
        div.onclick = () => selectProperty(propertyName);
        if (currentProperty === propertyName) {
            div.classList.add('active');
        }
        // إضافة تأثير حركي للظهور
        div.style.animation = 'slideIn 0.3s ease-out forwards';
        container.appendChild(div);
    });

    // إضافة رسالة إذا لم تكن هناك عقارات
    if (displayedPropertyNames.filter(name => name && name.trim() !== '').length === 0) {
        const noProperties = document.createElement('div');
        noProperties.className = 'no-properties';
        const filterText = currentPropertyTypeFilter === 'buildings' ? 'المباني' :
                          currentPropertyTypeFilter === 'lands' ? 'الأراضي' : 'العقارات';
        noProperties.textContent = `لا توجد ${filterText} في هذه المدينة`;
        noProperties.style.textAlign = 'center';
        noProperties.style.padding = '1rem';
        noProperties.style.color = '#666';
        container.appendChild(noProperties);
    }
}

// دالة للتحقق من نوع العقار المحدد
function getSelectedPropertyType() {
    if (!currentProperty) return null;

    // البحث عن العقار في البيانات
    const propertyData = properties.find(p => p['اسم العقار'] === currentProperty);
    if (propertyData) {
        return propertyData['نوع العقار'];
    }

    // البحث في تعريفات العقارات
    const propDef = propertyDefinitions?.find(def => def.name === currentProperty);
    if (propDef) {
        return propDef.type;
    }

    return null;
}

// دالة للتحقق من تطابق العقار مع فلتر النوع
function isPropertyCompatibleWithTypeFilter(propertyType, filterType) {
    if (!propertyType) return true; // إذا لم نعرف النوع، نعتبره متوافق

    const isLandType = propertyType === 'أرض';

    if (filterType === 'lands') {
        return isLandType;
    } else if (filterType === 'buildings') {
        return !isLandType;
    }

    return true;
}

// دالة فلترة العقارات حسب النوع
function filterPropertiesByType(filterType) {
    console.log(`🏗️ تطبيق فلتر نوع العقار: ${filterType}`);

    // التحقق من تطابق العقار المحدد مع الفلتر الجديد
    if (currentProperty) {
        const selectedPropertyType = getSelectedPropertyType();
        const isCompatible = isPropertyCompatibleWithTypeFilter(selectedPropertyType, filterType);

        if (!isCompatible) {
            console.log(`⚠️ العقار المحدد "${currentProperty}" من نوع "${selectedPropertyType}" غير متوافق مع فلتر ${filterType === 'buildings' ? 'المباني' : 'الأراضي'}`);
            console.log(`🔄 إزالة فلتر العقار تلقائياً...`);
            currentProperty = null;
        }
    }

    // تحديث الفلتر الحالي (دائماً تطبيق الفلتر المطلوب)
    currentPropertyTypeFilter = filterType;
    console.log(`✅ تم تطبيق فلتر: ${filterType === 'buildings' ? 'المباني' : 'الأراضي'}`);

    // إذا كان نفس الفلتر، أعد تطبيقه (لا نلغيه)
    if (currentPropertyTypeFilter === filterType) {
        console.log(`🔄 إعادة تطبيق فلتر ${filterType === 'buildings' ? 'المباني' : 'الأراضي'}`);
    }

    // إعادة تحديث قائمة العقارات
    initPropertyList(currentCountry);

    // تحديث حالة الأزرار
    updatePropertyTypeFiltersState();

    // إعادة عرض البيانات
    renderData();

    // تحديث عرض الفلاتر النشطة
    updateActiveFiltersDisplay();

    // تحديث عرض اسم العقار في الجوالات (في حالة تم إزالة العقار)
    updateMobilePropertyName();

    // حفظ الحالة
    saveAppState();
}

// دالة منطق فلترة العقارات حسب النوع (مع مراعاة المدينة)
function filterPropertiesByTypeLogic(propertyNames, filterType, selectedCountry = null) {
    if (!filterType) return propertyNames;

    const filteredProperties = [];

    propertyNames.forEach(propertyName => {
        // البحث عن العقار في البيانات لمعرفة نوعه (مع مراعاة المدينة)
        let propertyData = properties.find(p => {
            const matchesName = p['اسم العقار'] === propertyName;
            const matchesCity = selectedCountry ? p.المدينة === selectedCountry : true;
            return matchesName && matchesCity;
        });

        if (propertyData) {
            const propertyType = propertyData['نوع العقار'];
            // تحديث: "حوش" أصبح يُعتبر من المباني وليس من الأراضي
            const isLandType = propertyType === 'أرض';

            if (filterType === 'lands' && isLandType) {
                filteredProperties.push(propertyName);
            } else if (filterType === 'buildings' && !isLandType) {
                filteredProperties.push(propertyName);
            }
        } else {
            // إذا لم نجد البيانات، نتحقق من propertyDefinitions (مع مراعاة المدينة)
            const propDef = propertyDefinitions?.find(def => {
                const matchesName = def.name === propertyName;
                const matchesCity = selectedCountry ? def.city === selectedCountry : true;
                return matchesName && matchesCity;
            });

            if (propDef) {
                const propertyType = propDef.type;
                // تحديث: "حوش" أصبح يُعتبر من المباني وليس من الأراضي
                const isLandType = propertyType === 'أرض';

                if (filterType === 'lands' && isLandType) {
                    filteredProperties.push(propertyName);
                } else if (filterType === 'buildings' && !isLandType) {
                    filteredProperties.push(propertyName);
                }
            } else {
                // إذا لم نجد معلومات النوع، نعتبره مبنى افتراضياً (فقط إذا كان في المدينة الصحيحة)
                if (filterType === 'buildings') {
                    filteredProperties.push(propertyName);
                }
            }
        }
    });

    console.log(`📊 فلترة ${filterType}: ${filteredProperties.length} من أصل ${propertyNames.length} عقار`);
    return filteredProperties;
}

// دالة فلترة العقارات في الشاشات الصغيرة
function filterMobilePropertiesByType(filterType) {
    console.log(`📱 تطبيق فلتر نوع العقار في الموبايل: ${filterType}`);

    // تحديث الفلتر الحالي (دائماً تطبيق الفلتر المطلوب)
    currentPropertyTypeFilter = filterType;
    console.log(`✅ تم تطبيق فلتر: ${filterType === 'buildings' ? 'المباني' : 'الأراضي'}`);

    // إذا كان نفس الفلتر، أعد تطبيقه (لا نلغيه)
    if (currentPropertyTypeFilter === filterType) {
        console.log(`🔄 إعادة تطبيق فلتر ${filterType === 'buildings' ? 'المباني' : 'الأراضي'} في الموبايل`);
    }

    // إعادة إنشاء النافذة مع الفلتر الجديد
    showMobilePropertiesModal();

    // تحديث قائمة العقارات الجانبية أيضاً
    initPropertyList(currentCountry);
}

// دالة إعادة تعيين فلتر نوع العقار
function resetPropertyTypeFilter() {
    currentPropertyTypeFilter = null;
    console.log('🔄 تم إعادة تعيين فلتر نوع العقار');
}

// دالة اختبار لإجبار إظهار فلاتر نوع العقار
function forceShowPropertyTypeFilters() {
    console.log('🔧 إجبار إظهار فلاتر نوع العقار...');

    const container = document.getElementById('propertyList');
    if (!container) {
        console.error('❌ عنصر propertyList غير موجود');
        return;
    }

    // البحث عن الفلاتر الموجودة
    let existingFilters = container.querySelector('.property-type-filters');
    if (existingFilters) {
        console.log('🔍 تم العثور على فلاتر موجودة، سيتم إزالتها وإعادة إنشاؤها');
        existingFilters.remove();
    }

    // إنشاء الفلاتر من جديد
    const filtersContainer = document.createElement('div');
    filtersContainer.className = 'property-type-filters';
    filtersContainer.style.cssText = `
        display: flex !important;
        gap: 8px !important;
        margin-bottom: 15px !important;
        padding: 0 10px !important;
        width: 100% !important;
        box-sizing: border-box !important;
        background: #f8f9fa !important;
        border-radius: 8px !important;
        padding: 10px !important;
    `;

    // زر المباني
    const buildingsBtn = document.createElement('button');
    buildingsBtn.innerHTML = '<i class="fas fa-building"></i> المباني';
    buildingsBtn.className = `property-filter-btn buildings-filter ${currentPropertyTypeFilter === 'buildings' ? 'active' : ''}`;
    buildingsBtn.onclick = () => filterPropertiesByType('buildings');

    // زر الأراضي
    const landsBtn = document.createElement('button');
    landsBtn.innerHTML = '<i class="fas fa-mountain"></i> الأراضي';
    landsBtn.className = `property-filter-btn lands-filter ${currentPropertyTypeFilter === 'lands' ? 'active' : ''}`;
    landsBtn.onclick = () => filterPropertiesByType('lands');

    // زر عرض الكل (لإلغاء الفلتر)
    const allBtn = document.createElement('button');
    allBtn.innerHTML = '<i class="fas fa-list"></i> الكل';
    allBtn.className = `property-filter-btn all-filter ${!currentPropertyTypeFilter ? 'active' : ''}`;
    allBtn.onclick = () => {
        currentPropertyTypeFilter = null;
        console.log('🔄 تم إلغاء فلتر نوع العقار - عرض جميع العقارات');
        initPropertyList(currentCountry);
        updatePropertyTypeFiltersState();
        renderData();
    };

    filtersContainer.appendChild(allBtn);
    filtersContainer.appendChild(buildingsBtn);
    filtersContainer.appendChild(landsBtn);

    // إضافة الفلاتر في بداية الحاوية
    container.insertBefore(filtersContainer, container.firstChild);

    console.log('✅ تم إجبار إظهار فلاتر نوع العقار');
}

// استدعاء الدالة تلقائياً عند تحميل الصفحة
if (typeof window !== 'undefined') {
    window.forceShowPropertyTypeFilters = forceShowPropertyTypeFilters;
}

// دالة تحديث حالة فلاتر نوع العقار
function updatePropertyTypeFiltersState() {
    console.log('🔄 تحديث حالة فلاتر نوع العقار...');

    // البحث عن أزرار الفلاتر
    const buildingsBtn = document.querySelector('.property-filter-btn.buildings-filter');
    const landsBtn = document.querySelector('.property-filter-btn.lands-filter');

    if (buildingsBtn) {
        // تحديث زر المباني
        const isActive = currentPropertyTypeFilter === 'buildings';
        if (isActive) {
            buildingsBtn.classList.add('active');
        } else {
            buildingsBtn.classList.remove('active');
        }
        console.log('🏢 تم تحديث زر المباني:', isActive ? 'نشط' : 'غير نشط');
    } else {
        console.warn('⚠️ زر المباني غير موجود');
    }

    if (landsBtn) {
        // تحديث زر الأراضي
        const isActive = currentPropertyTypeFilter === 'lands';
        if (isActive) {
            landsBtn.classList.add('active');
        } else {
            landsBtn.classList.remove('active');
        }
        console.log('🏔️ تم تحديث زر الأراضي:', isActive ? 'نشط' : 'غير نشط');
    } else {
        console.warn('⚠️ زر الأراضي غير موجود');
    }

    console.log('✅ تم تحديث حالة فلاتر نوع العقار');
}

// دالة تطبيق الترتيب الثابت للعقارات
function applySortedPropertyOrder(propertyNames, selectedCountry = null) {
    // إنشاء مفتاح فريد للمدينة (أو "الكل" للعرض العام)
    const cityKey = selectedCountry || 'الكل';

    // التأكد من وجود ترتيب محفوظ لهذه المدينة
    if (!fixedPropertyOrder[cityKey]) {
        fixedPropertyOrder[cityKey] = [];
    }

    const savedOrder = fixedPropertyOrder[cityKey];
    const newProperties = [];
    const sortedProperties = [];

    // فصل العقارات الجديدة عن الموجودة
    propertyNames.forEach(propertyName => {
        if (propertyName && propertyName.trim() !== '') {
            if (savedOrder.includes(propertyName)) {
                // عقار موجود في الترتيب المحفوظ
                sortedProperties.push(propertyName);
            } else {
                // عقار جديد
                newProperties.push(propertyName);
            }
        }
    });

    // ترتيب العقارات الموجودة حسب الترتيب المحفوظ
    sortedProperties.sort((a, b) => {
        const indexA = savedOrder.indexOf(a);
        const indexB = savedOrder.indexOf(b);
        return indexA - indexB;
    });

    // ترتيب العقارات الجديدة أبجدياً
    newProperties.sort();

    // دمج القوائم: العقارات المرتبة أولاً، ثم الجديدة
    const finalOrder = [...sortedProperties, ...newProperties];

    // تحديث الترتيب المحفوظ
    fixedPropertyOrder[cityKey] = finalOrder;
    localStorage.setItem('fixedPropertyOrder', JSON.stringify(fixedPropertyOrder));

    console.log(`📋 ترتيب العقارات لمدينة "${cityKey}":`, finalOrder);

    return finalOrder;
}

// دالة إعادة ترتيب العقارات يدوياً
function reorderProperties(cityKey, newOrder) {
    if (!fixedPropertyOrder[cityKey]) {
        fixedPropertyOrder[cityKey] = [];
    }

    fixedPropertyOrder[cityKey] = newOrder;
    localStorage.setItem('fixedPropertyOrder', JSON.stringify(fixedPropertyOrder));

    // إعادة تحديث قائمة العقارات
    initPropertyList(cityKey === 'الكل' ? null : cityKey);

    console.log(`✅ تم تحديث ترتيب العقارات لمدينة "${cityKey}"`);
}

// دالة إعادة تعيين ترتيب العقارات
function resetPropertyOrder(cityKey = null) {
    if (cityKey) {
        // إعادة تعيين مدينة محددة
        delete fixedPropertyOrder[cityKey];
    } else {
        // إعادة تعيين جميع المدن
        fixedPropertyOrder = {};
    }

    localStorage.setItem('fixedPropertyOrder', JSON.stringify(fixedPropertyOrder));

    // إعادة تحديث قائمة العقارات
    initPropertyList(currentCountry);

    console.log(`🔄 تم إعادة تعيين ترتيب العقارات${cityKey ? ` لمدينة "${cityKey}"` : ' لجميع المدن'}`);
}

// دالة عرض نافذة إدارة ترتيب العقارات
function showPropertyOrderManager() {
    const cityKey = currentCountry || 'الكل';
    const currentOrder = fixedPropertyOrder[cityKey] || [];

    // ✅ الحصول على جميع العقارات في المدينة الحالية من مصدرين
    const allPropertyNames = new Set();

    // 1. من الوحدات الموجودة (properties)
    let filteredProperties = properties;
    if (currentCountry) {
        filteredProperties = properties.filter(property => property.المدينة === currentCountry);
    }
    filteredProperties.forEach(property => {
        if (property['اسم العقار'] && property['اسم العقار'].trim() !== '') {
            allPropertyNames.add(property['اسم العقار']);
        }
    });

    // 2. من التعريفات (propertyDefinitions) ✅
    let filteredDefinitions = propertyDefinitions || [];
    if (currentCountry) {
        filteredDefinitions = propertyDefinitions.filter(propDef => propDef.city === currentCountry);
    }
    filteredDefinitions.forEach(propDef => {
        if (propDef.name && propDef.name.trim() !== '') {
            allPropertyNames.add(propDef.name);
        }
    });

    const allProperties = Array.from(allPropertyNames);

    let html = `
    <div class="modal-overlay" style="display:flex;">
        <div class="modal-box" style="max-width: 600px;">
            <button class="close-modal" onclick="closeModal()">×</button>
            <h3><i class="fas fa-sort"></i> إدارة ترتيب العقارات</h3>
            <p style="color: #666; margin-bottom: 20px;">
                <i class="fas fa-info-circle"></i>
                اسحب العقارات لإعادة ترتيبها. الترتيب سيبقى ثابتاً حتى لو تم تحديث البيانات.
            </p>

            <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
                <strong>المدينة الحالية:</strong> ${cityKey}
                <br><strong>عدد العقارات:</strong> ${allProperties.length}
            </div>

            <div id="sortablePropertyList" style="max-height: 400px; overflow-y: auto; border: 1px solid #ddd; border-radius: 8px; padding: 10px;">
    `;

    // عرض العقارات بالترتيب الحالي
    const displayOrder = currentOrder.length > 0 ? currentOrder : allProperties.sort();
    displayOrder.forEach((propertyName, index) => {
        if (propertyName && propertyName.trim() !== '') {
            html += `
                <div class="sortable-property-item" data-property="${propertyName}" style="
                    background: white;
                    border: 1px solid #e9ecef;
                    border-radius: 6px;
                    padding: 12px;
                    margin: 8px 0;
                    cursor: move;
                    display: flex;
                    align-items: center;
                    justify-content: space-between;
                    transition: all 0.2s ease;
                ">
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <i class="fas fa-grip-vertical" style="color: #6c757d;"></i>
                        <span style="font-weight: 500;">${index + 1}.</span>
                        <span>${propertyName}</span>
                    </div>
                    <i class="fas fa-building" style="color: #007bff;"></i>
                </div>
            `;
        }
    });

    html += `
            </div>

            <div class="modal-actions" style="margin-top: 20px; display: flex; gap: 10px;">
                <button onclick="savePropertyOrder()" class="modal-action-btn print-btn" style="flex: 1;">
                    <i class="fas fa-save"></i> حفظ الترتيب
                </button>
                <button onclick="resetPropertyOrder('${cityKey}')" class="modal-action-btn" style="flex: 1; background: #ffc107;">
                    <i class="fas fa-undo"></i> إعادة تعيين
                </button>
                <button onclick="closeModal()" class="modal-action-btn close-btn" style="flex: 1;">
                    <i class="fas fa-times"></i> إلغاء
                </button>
            </div>
        </div>
    </div>
    `;

    document.body.insertAdjacentHTML('beforeend', html);

    // تفعيل السحب والإفلات
    enablePropertySorting();
}

// تفعيل السحب والإفلات للعقارات
function enablePropertySorting() {
    const container = document.getElementById('sortablePropertyList');
    const items = container.querySelectorAll('.sortable-property-item');

    let draggedElement = null;

    items.forEach(item => {
        item.draggable = true;

        item.addEventListener('dragstart', function(e) {
            draggedElement = this;
            this.style.opacity = '0.5';
            e.dataTransfer.effectAllowed = 'move';
        });

        item.addEventListener('dragend', function(e) {
            this.style.opacity = '1';
            draggedElement = null;
        });

        item.addEventListener('dragover', function(e) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
            this.style.borderColor = '#007bff';
            this.style.backgroundColor = '#f8f9ff';
        });

        item.addEventListener('dragleave', function(e) {
            this.style.borderColor = '#e9ecef';
            this.style.backgroundColor = 'white';
        });

        item.addEventListener('drop', function(e) {
            e.preventDefault();
            this.style.borderColor = '#e9ecef';
            this.style.backgroundColor = 'white';

            if (draggedElement && draggedElement !== this) {
                // تحديد موقع الإدراج
                const rect = this.getBoundingClientRect();
                const midpoint = rect.top + rect.height / 2;

                if (e.clientY < midpoint) {
                    // إدراج قبل العنصر الحالي
                    container.insertBefore(draggedElement, this);
                } else {
                    // إدراج بعد العنصر الحالي
                    container.insertBefore(draggedElement, this.nextSibling);
                }

                // تحديث أرقام الترتيب
                updatePropertyOrderNumbers();
            }
        });
    });
}

// تحديث أرقام الترتيب في النافذة
function updatePropertyOrderNumbers() {
    const items = document.querySelectorAll('.sortable-property-item');
    items.forEach((item, index) => {
        const numberSpan = item.querySelector('span');
        numberSpan.textContent = `${index + 1}.`;
    });
}

// حفظ الترتيب الجديد
function savePropertyOrder() {
    const cityKey = currentCountry || 'الكل';
    const items = document.querySelectorAll('.sortable-property-item');
    const newOrder = Array.from(items).map(item => item.dataset.property);

    // حفظ الترتيب الجديد
    reorderProperties(cityKey, newOrder);

    // إغلاق النافذة
    closeModal();

    // عرض رسالة تأكيد
    showSuccessMessage(`تم حفظ ترتيب العقارات لمدينة "${cityKey}" بنجاح!`);
}

// دالة عرض رسالة النجاح
function showSuccessMessage(message) {
    const successDiv = document.createElement('div');
    successDiv.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
        padding: 15px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 16px rgba(40, 167, 69, 0.3);
        z-index: 10000;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 10px;
        animation: slideInRight 0.3s ease-out;
    `;

    successDiv.innerHTML = `
        <i class="fas fa-check-circle"></i>
        ${message}
    `;

    document.body.appendChild(successDiv);

    // إزالة الرسالة بعد 3 ثوان
    setTimeout(() => {
        successDiv.style.animation = 'slideOutRight 0.3s ease-in';
        setTimeout(() => {
            if (successDiv.parentNode) {
                successDiv.parentNode.removeChild(successDiv);
            }
        }, 300);
    }, 3000);
}

// تهيئة فلتر الحالة
function initStatusFilter() {
    const container = document.getElementById('headerFilters');
    container.innerHTML = '';
    
    const button = document.createElement('button');
    button.innerHTML = '<i class="fas fa-filter"></i> فلتر الحالة';
    button.onclick = showStatusFilter;
    container.appendChild(button);
}

// متغيرات البحث المحسن
let searchState = {
    global: '',
    property: '',
    isSearchActive: false
};

// تطبيع النص العربي للبحث المتقدم
function normalizeArabicText(text) {
    if (!text) return '';
    return text
        .replace(/أ|إ|آ/g, 'ا')
        .replace(/ة/g, 'ه')
        .replace(/ي/g, 'ى')
        .replace(/\s+/g, ' ')
        .trim()
        .toLowerCase();
}

// دالة للبحث في الحالة المحسوبة والبيانات المخزنة
function searchInPropertyData(property, searchTerm) {
    // استخدام النظام المتقدم إذا كان متاحاً
    if (typeof advancedSearchInProperty === 'function') {
        return advancedSearchInProperty(property, searchTerm);
    }

    // النظام القديم كبديل
    const normalizedSearchTerm = normalizeArabicText(searchTerm);

    // البحث الخاص: إذا كان المصطلح "متعدد"، ابحث عن الوحدات المتعددة
    if (normalizedSearchTerm === 'متعدد') {
        // البحث عن الوحدات التي لها نفس رقم العقد ونفس اسم العقار (الوحدات المربوطة)
        const contractNumber = property['رقم العقد'];
        const propertyName = property['اسم العقار'];

        if (contractNumber && propertyName && typeof properties !== 'undefined') {
            // عد الوحدات التي لها نفس رقم العقد ونفس اسم العقار
            const relatedUnits = properties.filter(p =>
                p['رقم العقد'] === contractNumber &&
                p['اسم العقار'] === propertyName
            );

            // إذا كان هناك أكثر من وحدة واحدة، فهذه وحدات متعددة
            if (relatedUnits.length > 1) {
                console.log(`🔍 وجد وحدات متعددة: ${relatedUnits.length} وحدات في العقد ${contractNumber}`);
                return true;
            }
        }
    }

    // البحث في البيانات المخزنة
    const foundInData = Object.values(property).some(value => {
        if (!value) return false;
        const normalizedValue = normalizeArabicText(value.toString());
        return normalizedValue.includes(normalizedSearchTerm);
    });

    if (foundInData) return true;

    // البحث في الحالة المحسوبة
    const status = calculateStatus(property);
    const statusSearchText = `${status.final} ${status.display}`;
    const normalizedStatusText = normalizeArabicText(statusSearchText);

    if (normalizedStatusText.includes(normalizedSearchTerm)) {
        console.log(`🔍 وجد في الحالة المحسوبة: "${searchTerm}" في "${statusSearchText}"`);
        return true;
    }

    // البحث المرن للتواريخ
    if (isDateSearchTerm(normalizedSearchTerm)) {
        return Object.values(property).some(value => {
            if (!value) return false;
            const normalizedValue = normalizeArabicText(value.toString());
            return matchesDateFlexibly(normalizedValue, normalizedSearchTerm);
        });
    }

    return false;
}

// دالة اختبار البحث في السجل العيني
function testRegistrySearchInScript() {
    console.log('🧪 اختبار البحث في السجل العيني من script.js...');

    if (!window.allData || window.allData.length === 0) {
        console.log('❌ لا توجد بيانات للاختبار');
        return;
    }

    // البحث عن عقارات تحتوي على السجل العيني
    const propertiesWithRegistry = window.allData.filter(p =>
        p['السجل العيني '] && p['السجل العيني '].toString().trim() !== ''
    );

    console.log(`📊 عدد العقارات التي تحتوي على السجل العيني: ${propertiesWithRegistry.length}`);

    if (propertiesWithRegistry.length > 0) {
        const firstRegistry = propertiesWithRegistry[0]['السجل العيني '].toString().trim();
        console.log(`🔍 اختبار البحث برقم السجل العيني: "${firstRegistry}"`);

        // محاكاة البحث
        document.getElementById('globalSearch').value = firstRegistry;
        performGlobalSearch();

        console.log('✅ تم تنفيذ البحث - تحقق من النتائج في الواجهة');
    } else {
        console.log('⚠️ لا توجد عقارات تحتوي على السجل العيني');
    }
}

// دالة لعرض أمثلة البحث الجديدة
function showNewSearchExamples() {
    console.log(`
🔍 أمثلة البحث الجديدة:

📋 البحث الهرمي (استخدم //):
   الرياض//شمس//ضريبي//فعال
   ضريبي//الرياض//منتهي+فارغ

🔗 البحث المتعدد OR (استخدم +):
   فعال+وشك
   منتهي+فارغ
   نشط+ساري+فعال

💡 أمثلة مختلطة:
   الرياض//نشط+فارغ (الرياض ثم النشطة أو الفارغة)
   سكني//الرياض//منتهي+فارغ (سكني في الرياض ثم المنتهية أو الفارغة)

📝 ملاحظة: تم تغيير الرموز:
   - /// أصبح //
   - // أصبح +
    `);
}

// دالة اختبار سريعة للبحث الجديد
function testNewSearchSyntax() {
    console.log('🧪 اختبار صيغة البحث الجديدة...');

    if (!window.allData || window.allData.length === 0) {
        console.log('❌ لا توجد بيانات للاختبار');
        return;
    }

    const testQueries = [
        'فعال+وشك',
        'الرياض//فعال',
        'منتهي+فارغ'
    ];

    testQueries.forEach(query => {
        console.log(`\n🔍 اختبار: "${query}"`);
        document.getElementById('globalSearch').value = query;
        performGlobalSearch();
        console.log(`✅ تم تنفيذ البحث`);
    });

    console.log('\n📊 تحقق من النتائج في الواجهة');
}

// دالة اختبار المرادفات الجديدة
function testPropertyTypeSynonyms() {
    console.log('🧪 اختبار مرادفات أنواع العقارات...');

    if (!window.allData || window.allData.length === 0) {
        console.log('❌ لا توجد بيانات للاختبار');
        return;
    }

    const synonymTests = [
        // اختبار المرادفات
        { original: 'محل', synonyms: ['المحلات', 'محلات'] },
        { original: 'مستودع', synonyms: ['مستودعات', 'المستودعات'] },
        { original: 'استراحة', synonyms: ['استراحة', 'استراحه'] },
        { original: 'شقة', synonyms: ['الشقق', 'شقق'] },
        { original: 'مصنع', synonyms: ['مصانع', 'المصانع'] },
        { original: 'فلة', synonyms: ['الفلل', 'فلل', 'فيلا', 'فيلات'] },
        { original: 'عمارة', synonyms: ['العمائر', 'عمائر'] },
        { original: 'معرض', synonyms: ['معارض', 'المعارض'] },
        { original: 'مكتب', synonyms: ['المكاتب', 'مكاتب'] },
        { original: 'ورشة', synonyms: ['ورشه', 'الورش', 'ورش'] },
        { original: 'مزرعة', synonyms: ['مزرعه', 'المزارع', 'مزارع'] },
        { original: 'منتهي', synonyms: ['المنتهي'] }
    ];

    console.log('🔍 اختبار البحث بالمرادفات:');

    synonymTests.forEach(test => {
        console.log(`\n📋 اختبار "${test.original}" ومرادفاتها:`);

        // البحث بالكلمة الأصلية
        document.getElementById('globalSearch').value = test.original;
        performGlobalSearch();
        console.log(`   ✅ تم البحث بـ "${test.original}"`);

        // البحث بالمرادفات
        test.synonyms.forEach(synonym => {
            document.getElementById('globalSearch').value = synonym;
            performGlobalSearch();
            console.log(`   ✅ تم البحث بـ "${synonym}"`);
        });
    });

    console.log('\n📝 ملاحظة: يجب أن تحصل على نفس النتائج عند البحث بالكلمة الأصلية أو مرادفاتها');
    console.log('📊 تحقق من النتائج في الواجهة');
}

// دالة اختبار مؤشر التحميل
function testSearchLoadingIndicator() {
    console.log('🧪 اختبار مؤشر التحميل...');

    const searchInput = document.getElementById('globalSearch');
    if (!searchInput) {
        console.log('❌ حقل البحث غير موجود');
        return;
    }

    console.log('🔄 اختبار إظهار المؤشر...');
    showSearchLoadingIndicator();

    setTimeout(() => {
        console.log('✅ اختبار إخفاء المؤشر...');
        hideSearchLoadingIndicator();
        console.log('📝 تم اختبار المؤشر بنجاح');
    }, 2000);

    console.log('⏱️ سيتم إخفاء المؤشر خلال ثانيتين...');
}

// دالة اختبار البحث مع المؤشر
function testSearchWithLoadingIndicator() {
    console.log('🧪 اختبار البحث مع مؤشر التحميل...');

    if (!window.allData || window.allData.length === 0) {
        console.log('❌ لا توجد بيانات للاختبار');
        return;
    }

    const testQueries = ['فعال', 'الرياض//فعال', 'منتهي+فارغ'];
    let currentIndex = 0;

    function runNextTest() {
        if (currentIndex >= testQueries.length) {
            console.log('✅ تم الانتهاء من جميع اختبارات البحث مع المؤشر');
            return;
        }

        const query = testQueries[currentIndex];
        console.log(`\n🔍 اختبار ${currentIndex + 1}: "${query}"`);

        // تعيين النص في حقل البحث
        const searchInput = document.getElementById('globalSearch');
        if (searchInput) {
            searchInput.value = query;

            // تنفيذ البحث (سيظهر المؤشر تلقائياً)
            performGlobalSearch();

            // الانتقال للاختبار التالي بعد 3 ثوان
            setTimeout(() => {
                currentIndex++;
                runNextTest();
            }, 3000);
        }
    }

    runNextTest();
    console.log('📝 راقب المؤشر أثناء تنفيذ الاختبارات...');
}

// دالة لعرض معلومات مؤشر التحميل
function showLoadingIndicatorInfo() {
    console.log(`
🔄 معلومات مؤشر التحميل:

📍 الموقع: داخل حقل البحث العام (على اليمين)
🎨 التصميم: أيقونة دائرية دوارة باللون الأزرق
⚡ التفعيل: يظهر تلقائياً عند بدء البحث
🎯 الإخفاء: يختفي تلقائياً عند انتهاء البحث

🧪 دوال الاختبار المتاحة:
   • testSearchLoadingIndicator() - اختبار المؤشر فقط
   • testSearchWithLoadingIndicator() - اختبار البحث مع المؤشر
   • showSearchLoadingIndicator() - إظهار المؤشر يدوياً
   • hideSearchLoadingIndicator() - إخفاء المؤشر يدوياً

💡 الميزات:
   ✅ يعمل مع البحث العادي والمتقدم
   ✅ متجاوب مع الشاشات الصغيرة
   ✅ لا يتداخل مع النص المكتوب
   ✅ تأثير دوران سلس
   ✅ يظهر/يختفي تلقائياً
    `);
}

// دالة لعرض جميع المرادفات المتاحة
function showAllSynonyms() {
    console.log(`
🔍 دليل المرادفات المتاحة في البحث:

📊 حالات العقود:
   • فعال: نشط، ساري، الحالي، على وشك، وشك
   • منتهي: المنتهي، انتهى، مكتمل
   • فارغ: شاغر، خالي، متاح

🏢 أنواع العقارات:
   • محل: المحلات، محلات
   • مستودع: مستودعات، المستودعات
   • شقة: الشقق، شقق
   • مصنع: مصانع، المصانع
   • فلة: الفلل، فلل، فيلا، فيلات، الفيلات
   • عمارة: العمائر، عمائر
   • معرض: معارض، المعارض
   • مكتب: المكاتب، مكاتب
   • ورشة: ورشه، الورش، ورش
   • مزرعة: مزرعه، المزارع، مزارع

🏷️ أنواع العقود:
   • ضريبي: ضريبية، مع ضريبة، بضريبة
   • سكني: سكنية، سكن
   • راكض: غير محدد، لم يحدد بعد

💡 مثال: يمكنك البحث عن "محل" أو "المحلات" أو "محلات" وستحصل على نفس النتائج
    `);
}

// تهيئة البحث العام المحسن مع التخطيط الأفقي
function initGlobalSearch() {
    const searchInput = document.getElementById('globalSearch');
    if (!searchInput) return;

    // تحديث النص التوضيحي حسب حجم الشاشة
    updateSearchPlaceholder();

    // إضافة مستمع لتغيير حجم الشاشة
    window.addEventListener('resize', updateSearchPlaceholder);

    // إزالة البحث التلقائي القديم
    searchInput.removeEventListener('input', renderData);

    // إضافة مستمع للضغط على Enter
    searchInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            performGlobalSearch();
        }
    });

    // إضافة مستمع لمراقبة مسح النص يدوياً
    searchInput.addEventListener('input', function(e) {
        const currentValue = e.target.value.trim();

        // إذا تم مسح النص يدوياً وكان هناك بحث نشط
        if (currentValue === '' && searchState.isSearchActive) {
            console.log('🔄 تم اكتشاف مسح النص يدوياً - مسح البحث فقط مع الاحتفاظ بالفلاتر');
            clearGlobalSearchOnly();
        }
    });

    // التأكد من ربط الأحداث بالأزرار الموجودة في HTML
    const searchBtn = document.querySelector('.global-search-btn');
    const cancelBtn = document.querySelector('.global-cancel-btn');

    if (searchBtn && !searchBtn.hasAttribute('data-initialized')) {
        searchBtn.addEventListener('click', performGlobalSearch);
        searchBtn.setAttribute('data-initialized', 'true');
    }

    if (cancelBtn && !cancelBtn.hasAttribute('data-initialized')) {
        cancelBtn.addEventListener('click', cancelGlobalSearchWithLoading);
        cancelBtn.setAttribute('data-initialized', 'true');
    }

    console.log('✅ تم تهيئة البحث العام المحسن مع التخطيط الأفقي ومراقبة المسح اليدوي');
}

// تحديث النص التوضيحي حسب حجم الشاشة
function updateSearchPlaceholder() {
    const searchInput = document.getElementById('globalSearch');
    if (!searchInput) return;

    const isMobile = window.innerWidth <= 768;

    if (isMobile) {
        // نص مختصر للهواتف
        searchInput.placeholder = "بحث... (// هرمي، + متعدد)";
    } else {
        // نص مختصر للشاشات الكبيرة أيضاً ليظهر كاملاً
        searchInput.placeholder = "بحث في البيانات... (// هرمي، + متعدد)";
    }
}

// ===== ATTACHMENTS SEARCH FUNCTIONS =====

// Initialize attachments search functionality
function initAttachmentsSearch(propertyKey) {
    const searchInput = document.getElementById(`attachmentsSearch_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
    const clearBtn = document.querySelector(`.attachments-clear-btn[onclick*="${propertyKey}"]`);

    if (!searchInput) return;

    // Add input event listener for showing/hiding clear button
    searchInput.addEventListener('input', function(e) {
        const currentValue = e.target.value.trim();

        if (clearBtn) {
            clearBtn.style.display = currentValue ? 'flex' : 'none';
        }

        // Auto-search as user types (with debounce)
        clearTimeout(window.attachmentsSearchTimeout);
        window.attachmentsSearchTimeout = setTimeout(() => {
            performAttachmentsSearch(propertyKey);
        }, 300);
    });

    // Add Enter key support
    searchInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            performAttachmentsSearch(propertyKey);
        }
    });

    console.log(`✅ تم تهيئة البحث في المرفقات: ${propertyKey}`);
}

// Perform attachments search
function performAttachmentsSearch(propertyKey) {
    const searchInput = document.getElementById(`attachmentsSearch_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
    const attachmentsList = document.getElementById(`propertyAttachmentsList_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);

    if (!searchInput || !attachmentsList) return;

    const searchTerm = searchInput.value.trim().toLowerCase();
    const attachmentItems = attachmentsList.querySelectorAll('.attachment-item');

    console.log(`🔍 البحث في المرفقات: "${searchTerm}"`);

    let visibleCount = 0;

    attachmentItems.forEach(item => {
        const fileName = item.querySelector('.attachment-name')?.textContent?.toLowerCase() || '';
        const fileNotes = item.querySelector('.file-notes')?.title?.toLowerCase() || '';
        const isVisible = !searchTerm || fileName.includes(searchTerm) || fileNotes.includes(searchTerm);

        item.style.display = isVisible ? 'flex' : 'none';
        if (isVisible) visibleCount++;
    });

    // Show search results summary
    showAttachmentsSearchResults(attachmentsList, searchTerm, visibleCount, attachmentItems.length);
}

// Clear attachments search with loading state
function clearAttachmentsSearchWithLoading(propertyKey) {
    console.log(`🧹 مسح البحث في المرفقات: ${propertyKey}`);

    const searchInput = document.getElementById(`attachmentsSearch_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
    const clearButton = document.querySelector(`.attachments-clear-btn[onclick*="${propertyKey}"]`);

    if (!searchInput || !clearButton) return;

    // Show loading state
    clearButton.disabled = true;
    const originalContent = clearButton.innerHTML;
    clearButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span class="btn-text">جاري المسح...</span>';

    setTimeout(() => {
        try {
            // Clear search
            searchInput.value = '';
            clearButton.style.display = 'none';

            // Show all attachments
            performAttachmentsSearch(propertyKey);

            console.log('✅ تم مسح البحث في المرفقات');
        } catch (error) {
            console.error('❌ خطأ في مسح البحث:', error);
        } finally {
            // Restore button
            clearButton.disabled = false;
            clearButton.innerHTML = originalContent;
        }
    }, 200);
}

// Show search results summary
function showAttachmentsSearchResults(container, searchTerm, visibleCount, totalCount) {
    // Remove existing summary
    const existingSummary = container.querySelector('.search-results-summary');
    if (existingSummary) {
        existingSummary.remove();
    }

    if (searchTerm) {
        const summary = document.createElement('div');
        summary.className = 'search-results-summary';
        summary.style.cssText = `
            padding: 10px;
            background: #e3f2fd;
            border: 1px solid #2196f3;
            border-radius: 6px;
            margin-bottom: 10px;
            text-align: center;
            color: #1976d2;
            font-size: 14px;
        `;
        summary.innerHTML = `
            <i class="fas fa-search"></i>
            نتائج البحث عن "<strong>${searchTerm}</strong>": ${visibleCount} من ${totalCount} مرفق
        `;

        container.insertBefore(summary, container.firstChild);
    }
}

// ===== CARD ATTACHMENTS SEARCH FUNCTIONS =====

// Initialize card attachments search functionality
function initCardAttachmentsSearch(cardKey) {
    const searchInput = document.getElementById(`cardAttachmentsSearch_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
    const clearBtn = document.querySelector(`.attachments-clear-btn[onclick*="${cardKey}"]`);

    if (!searchInput) return;

    // Add input event listener for showing/hiding clear button
    searchInput.addEventListener('input', function(e) {
        const currentValue = e.target.value.trim();

        if (clearBtn) {
            clearBtn.style.display = currentValue ? 'flex' : 'none';
        }

        // Auto-search as user types (with debounce)
        clearTimeout(window.cardAttachmentsSearchTimeout);
        window.cardAttachmentsSearchTimeout = setTimeout(() => {
            performCardAttachmentsSearch(cardKey);
        }, 300);
    });

    // Add Enter key support
    searchInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            performCardAttachmentsSearch(cardKey);
        }
    });

    console.log(`✅ تم تهيئة البحث في مرفقات البطاقة: ${cardKey}`);
}

// Perform card attachments search
function performCardAttachmentsSearch(cardKey) {
    const searchInput = document.getElementById(`cardAttachmentsSearch_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
    const attachmentsList = document.getElementById(`cardAttachmentsList_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}`);

    if (!searchInput || !attachmentsList) return;

    const searchTerm = searchInput.value.trim().toLowerCase();
    const attachmentItems = attachmentsList.querySelectorAll('.attachment-item');

    console.log(`🔍 البحث في مرفقات البطاقة: "${searchTerm}"`);

    let visibleCount = 0;

    attachmentItems.forEach(item => {
        const fileName = item.querySelector('.attachment-name')?.textContent?.toLowerCase() || '';
        const fileNotes = item.querySelector('.file-notes')?.title?.toLowerCase() || '';
        const isVisible = !searchTerm || fileName.includes(searchTerm) || fileNotes.includes(searchTerm);

        item.style.display = isVisible ? 'flex' : 'none';
        if (isVisible) visibleCount++;
    });

    // Show search results summary
    showAttachmentsSearchResults(attachmentsList, searchTerm, visibleCount, attachmentItems.length);
}

// Clear card attachments search with loading state
function clearCardAttachmentsSearchWithLoading(cardKey) {
    console.log(`🧹 مسح البحث في مرفقات البطاقة: ${cardKey}`);

    const searchInput = document.getElementById(`cardAttachmentsSearch_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
    const clearButton = document.querySelector(`.attachments-clear-btn[onclick*="${cardKey}"]`);

    if (!searchInput || !clearButton) return;

    // Show loading state
    clearButton.disabled = true;
    const originalContent = clearButton.innerHTML;
    clearButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span class="btn-text">جاري المسح...</span>';

    setTimeout(() => {
        try {
            // Clear search
            searchInput.value = '';
            clearButton.style.display = 'none';

            // Show all attachments
            performCardAttachmentsSearch(cardKey);

            console.log('✅ تم مسح البحث في مرفقات البطاقة');
        } catch (error) {
            console.error('❌ خطأ في مسح البحث:', error);
        } finally {
            // Restore button
            clearButton.disabled = false;
            clearButton.innerHTML = originalContent;
        }
    }, 200);
}

// إضافة أزرار البحث والمسح (محدثة للتخطيط الجديد)
function addSearchButtons(inputId) {
    const searchInput = document.getElementById(inputId);
    if (!searchInput) return;

    // للبحث العام، الأزرار موجودة بالفعل في HTML
    if (inputId === 'globalSearch') {
        console.log('✅ أزرار البحث العام موجودة في HTML');
        return;
    }

    // للبحث في العقارات، لا نحتاج أزرار - البحث تلقائي
    if (inputId === 'propertySearch') {
        console.log('✅ البحث في العقارات تلقائي - لا حاجة لأزرار');
        return;
    }
}

// دوال إدارة مؤشر التحميل
function showSearchLoadingIndicator() {
    const indicator = document.getElementById('searchLoadingIndicator');
    if (indicator) {
        indicator.style.display = 'block';
    }
}

function hideSearchLoadingIndicator() {
    const indicator = document.getElementById('searchLoadingIndicator');
    if (indicator) {
        indicator.style.display = 'none';
    }
}

// قاموس كلمات الحالة المشترك
const STATUS_KEYWORDS = {
    'فعال': ['فعال'],
    'نشط_عام': ['نشط', 'ساري', 'سارى', 'جاري', 'جارى', 'الحالي', 'الحالى'], // هذه تعطي فعال + على وشك
    'على وشك': ['على وشك', 'علي وشك', 'وشك'],
    'منتهى': ['منتهي', 'منتهى', 'انتهى', 'انتهي', 'مكتمل', 'مكتملة'],
    'فارغ': ['فارغ', 'فارغة', 'شاغر', 'شاغرة', 'خالي', 'خالية', 'متاح', 'متاحة']
};

// قاموس كلمات نوع العقار
const PROPERTY_TYPE_KEYWORDS = {
    'lands': ['ارض', 'أرض', 'اراضي', 'أراضي', 'اراضى', 'أراضى', 'الأراضي', 'الاراضي'],
    'buildings': ['مباني', 'مبانى', 'المباني', 'المبانى', 'مبنى', 'مبني', 'بناء', 'ابنية', 'أبنية']
};

// متغير لتتبع ما إذا كان فلتر الحالة تم تطبيقه من البحث
let statusFilterAppliedFromSearch = false;

// متغير لتتبع ما إذا كان فلتر نوع العقار تم تطبيقه من البحث
let propertyTypeFilterAppliedFromSearch = false;

// دالة للكشف عن كلمة الحالة من النص
function detectStatusKeyword(searchTerm) {
    if (!searchTerm || searchTerm.trim() === '') return null;

    const normalizedTerm = normalizeArabicTextAdvanced ? normalizeArabicTextAdvanced(searchTerm.trim()) : searchTerm.trim().toLowerCase();

    // البحث عن تطابق مع كلمات الحالة
    for (const [status, keywords] of Object.entries(STATUS_KEYWORDS)) {
        for (const keyword of keywords) {
            const normalizedKeyword = normalizeArabicTextAdvanced ? normalizeArabicTextAdvanced(keyword) : keyword.toLowerCase();
            if (normalizedTerm === normalizedKeyword) {
                return status;
            }
        }
    }

    return null;
}

// دالة للكشف عن كلمة نوع العقار من النص
function detectPropertyTypeKeyword(searchTerm) {
    if (!searchTerm || searchTerm.trim() === '') return null;

    const normalizedTerm = normalizeArabicTextAdvanced ? normalizeArabicTextAdvanced(searchTerm.trim()) : searchTerm.trim().toLowerCase();

    // البحث عن تطابق مع كلمات نوع العقار
    for (const [propertyType, keywords] of Object.entries(PROPERTY_TYPE_KEYWORDS)) {
        for (const keyword of keywords) {
            const normalizedKeyword = normalizeArabicTextAdvanced ? normalizeArabicTextAdvanced(keyword) : keyword.toLowerCase();
            if (normalizedTerm === normalizedKeyword) {
                return propertyType;
            }
        }
    }

    return null;
}

// دالة لتطبيق بحث نشط عام (فعال + على وشك) باستخدام البحث المتقدم
function applyActiveGeneralSearch(originalSearchTerm) {
    console.log('🎯 تطبيق بحث نشط عام (فعال + على وشك) باستخدام البحث المتقدم');

    // تسجيل أن البحث تم تطبيقه من كلمة حالة
    statusFilterAppliedFromSearch = true;

    // حفظ النص الأصلي في حالة البحث (ما يظهر للمستخدم)
    // لكن استخدام البحث المتقدم داخلياً
    searchState.global = originalSearchTerm || 'نشط';
    searchState.isSearchActive = true;
    searchState.internalAdvancedSearch = 'فعال + على وشك'; // البحث الداخلي المتقدم

    // مسح أي فلاتر حالة موجودة لأننا نستخدم البحث
    filterStatus = '';

    // تطبيق البحث
    renderData();

    // تحديث عرض الفلاتر النشطة
    updateActiveFiltersDisplay();

    // تحديث حالة أزرار الفلاتر
    updateAllFilterButtonsState();

    // تحديث أزرار الحالة في الواجهة (لا نحدد حالة معينة لأنها بحث مركب)
    updateStatusButtonsState('');

    // حفظ الحالة
    saveAppState();
}

// دالة للكشف عن كلمات نوع العقار وتطبيق الفلتر المناسب
function detectAndApplyPropertyTypeFilter(searchTerm, clearSearchField = false) {
    const detectedPropertyType = detectPropertyTypeKeyword(searchTerm);

    if (detectedPropertyType) {
        console.log(`🏗️ تم اكتشاف كلمة نوع عقار: "${searchTerm}" → تطبيق فلتر "${detectedPropertyType}"`);

        // تسجيل أن فلتر نوع العقار تم تطبيقه من البحث
        propertyTypeFilterAppliedFromSearch = true;

        // تطبيق فلتر نوع العقار
        filterPropertiesByType(detectedPropertyType);

        // إظهار رسالة توضيحية
        const searchInput = document.getElementById('globalSearch');
        if (searchInput && typeof showSearchIndicator === 'function') {
            const filterName = detectedPropertyType === 'lands' ? 'الأراضي' : 'المباني';
            showSearchIndicator(searchInput, `تم تطبيق فلتر نوع العقار: ${filterName} (احذف النص لإلغاء الفلتر)`, 'success');
        }

        // الاحتفاظ بالنص في حقل البحث (لا نمسحه تلقائياً)
        // المستخدم يمكنه حذف النص بنفسه لإلغاء الفلتر
        if (searchInput) {
            searchState.global = searchTerm; // الاحتفاظ بالنص في الحالة
            searchState.isSearchActive = true; // البحث نشط
        }

        return true; // تم تطبيق فلتر نوع العقار
    }

    return false; // لم يتم العثور على كلمة نوع عقار
}

// دالة للكشف عن كلمات الحالة وتطبيق الفلتر المناسب
function detectAndApplyStatusFilter(searchTerm, clearSearchField = true) {
    const detectedStatus = detectStatusKeyword(searchTerm);

    if (detectedStatus) {
        console.log(`🎯 تم اكتشاف كلمة حالة: "${searchTerm}" → تطبيق فلتر "${detectedStatus}"`);

        // تسجيل أن فلتر الحالة تم تطبيقه من البحث
        statusFilterAppliedFromSearch = true;

        // تطبيق البحث أو الفلتر المناسب
        if (detectedStatus === 'نشط_عام') {
            // استخدام البحث المتقدم للحصول على نتائج شاملة
            // لكن الاحتفاظ بالنص الأصلي في حقل البحث
            applyActiveGeneralSearch(searchTerm);
        } else {
            setStatusFilter(detectedStatus, true);
        }

        // إظهار رسالة توضيحية
        const searchInput = document.getElementById('globalSearch');
        if (searchInput && typeof showSearchIndicator === 'function') {
            if (detectedStatus === 'نشط_عام') {

            } else {
                showSearchIndicator(searchInput, `تم تطبيق فلتر الحالة: ${detectedStatus} (يمكنك حذف النص لإلغاء الفلتر)`, 'success');
            }
        }

        return true; // تم تطبيق فلتر الحالة
    }

    return false; // لم يتم العثور على كلمة حالة
}

// تنفيذ البحث العام
function performGlobalSearch() {
    const searchInput = document.getElementById('globalSearch');
    if (!searchInput) return;

    const searchTerm = searchInput.value.trim();
    console.log('🔍 تنفيذ البحث العام:', searchTerm);

    // إظهار مؤشر التحميل
    showSearchLoadingIndicator();

    // إظهار زر الإلغاء إذا كان هناك بحث نشط
    const cancelBtn = document.querySelector('.global-cancel-btn');
    if (cancelBtn) {
        cancelBtn.style.display = searchTerm ? 'flex' : 'none';
        // التأكد من أن الزر في حالته الطبيعية
        cancelBtn.disabled = false;
        cancelBtn.innerHTML = '<i class="fas fa-times"></i><span class="btn-text">إلغاء</span>';
    }

    // تنفيذ البحث مع تأخير قصير لإظهار المؤشر
    setTimeout(() => {
        try {
            // أولاً: محاولة اكتشاف وتطبيق فلتر الحالة
            const statusFilterApplied = detectAndApplyStatusFilter(searchTerm);

            // ثانياً: إذا لم يتم تطبيق فلتر حالة، محاولة اكتشاف وتطبيق فلتر نوع العقار
            const propertyTypeFilterApplied = !statusFilterApplied ? detectAndApplyPropertyTypeFilter(searchTerm) : false;

            if (statusFilterApplied || propertyTypeFilterApplied) {
                // إذا تم تطبيق أي فلتر، فقد تم التعامل مع البحث بالفعل
                // لا نحتاج لفعل شيء هنا
            } else {
                // إذا لم يتم تطبيق أي فلتر، تنفيذ البحث العادي
                searchState.global = searchTerm;
                searchState.isSearchActive = searchTerm.length > 0;

                renderData();

                // إظهار رسالة نجاح البحث
                if (searchTerm) {
                    const searchTerms = searchTerm.split('//').map(term => term.trim()).filter(term => term.length > 0);
                    const isMultiSearch = searchTerms.length > 1;

                    if (typeof showSearchIndicator === 'function') {
                        if (isMultiSearch) {
                            showSearchIndicator(searchInput, `تم البحث عن ${searchTerms.length} مصطلحات مختلفة`, 'success');
                        } else {
                            showSearchIndicator(searchInput, `تم العثور على النتائج`, 'success');
                        }
                    }
                }
            }

            // إخفاء مؤشر التحميل بعد انتهاء البحث
            hideSearchLoadingIndicator();

        } catch (error) {
            console.error('❌ خطأ في البحث:', error);
            hideSearchLoadingIndicator();
        }
    }, 100); // تأخير قصير لإظهار المؤشر
}

// مسح البحث العام مع إعادة تعيين جميع الفلاتر
function clearGlobalSearch() {
    console.log('🧹 مسح البحث العام وإعادة تعيين جميع الفلاتر...');

    const searchInput = document.getElementById('globalSearch');
    const cancelButton = document.querySelector('.global-cancel-btn');

    // إخفاء مؤشر التحميل
    hideSearchLoadingIndicator();

    // مسح حقل البحث
    if (searchInput) {
        searchInput.value = '';
    }

    // إخفاء زر الإلغاء
    if (cancelButton) {
        cancelButton.style.display = 'none';
    }

    // مسح حالة البحث العام
    searchState.global = '';
    searchState.isSearchActive = false;
    searchState.internalAdvancedSearch = ''; // مسح البحث الداخلي المتقدم

    // إعادة تعيين متغير تتبع فلتر الحالة من البحث
    statusFilterAppliedFromSearch = false;

    // إعادة تعيين جميع متغيرات الفلاتر
    currentCountry = null;
    currentProperty = null;
    filterStatus = null;

    // إعادة تعيين جميع الفلاتر النشطة
    activeFilters = {
        city: '',
        property: '',
        status: '',
        contractType: '',
        propertyType: '',
        dateFilter: '',
        startDate: '',
        endDate: '',
        nearExpiry: false,
        monthFilter: '',
        multiProperty: [],
        owner: ''
    };

    // إعادة تعيين واجهة المستخدم - إزالة جميع الأزرار النشطة
    const countryButtons = document.querySelectorAll('.country-btn, .city-btn');
    countryButtons.forEach(btn => btn.classList.remove('active'));

    const propertyButtons = document.querySelectorAll('.property-btn');
    propertyButtons.forEach(btn => btn.classList.remove('active'));

    const filterButtons = document.querySelectorAll('.filter-btn, .status-btn');
    filterButtons.forEach(btn => btn.classList.remove('active'));

    // إعادة تعيين أزرار الحالة في الواجهة
    updateStatusButtonsState('');

    // مسح فلاتر الجداول إذا كانت موجودة
    if (window.tableFilterSystem) {
        const tables = ['trackingLogsTable', 'propertiesTable', 'unitsTable'];
        tables.forEach(tableId => {
            if (document.getElementById(tableId)) {
                window.tableFilterSystem.clearAllFilters(tableId);
                window.tableFilterSystem.clearSearch(tableId);
            }
        });
    }

    // مسح عرض الفلاتر النشطة
    const desktopList = document.getElementById('activeFiltersList');
    const mobileList = document.getElementById('activeFiltersListMobile');
    if (desktopList) desktopList.innerHTML = '';
    if (mobileList) mobileList.innerHTML = '';

    // إخفاء أزرار مسح الكل
    const clearBtns = document.querySelectorAll('.clear-all-filters-btn');
    clearBtns.forEach(btn => btn.style.display = 'none');

    // إخفاء زر الفلاتر للهاتف
    const mobileFilterBtn = document.getElementById('mobileFiltersBtn');
    if (mobileFilterBtn) {
        mobileFilterBtn.classList.remove('has-filters');
    }

    // تحديث عرض اسم العقار في الجوالات
    if (typeof updateMobilePropertyName === 'function') {
        updateMobilePropertyName();
    }

    // إعادة عرض جميع البيانات
    if (typeof renderData === 'function') {
        renderData();
    } else {
        displayProperties(properties);
    }

    // تحديث عرض الفلاتر النشطة
    if (typeof updateActiveFiltersDisplay === 'function') {
        updateActiveFiltersDisplay();
    }

    // تحديث الإحصائيات
    if (typeof updateTotals === 'function') {
        updateTotals();
    }

    // حفظ الحالة الجديدة
    if (typeof saveAppState === 'function') {
        saveAppState();
    }

    // تحديث إضافي بعد تأخير قصير لضمان تحديث جميع العناصر
    setTimeout(() => {
        if (typeof renderData === 'function') {
            renderData();
        }
        if (typeof updateTotals === 'function') {
            updateTotals();
        }
        if (typeof updateActiveFiltersDisplay === 'function') {
            updateActiveFiltersDisplay();
        }
    }, 100);

    console.log('✅ تم مسح البحث العام وإعادة تعيين جميع الفلاتر');

    // إظهار مؤشر المسح
    if (searchInput) {
        showSearchIndicator(searchInput, 'تم مسح البحث وإعادة تعيين جميع الفلاتر', 'success');
    }
}

// مسح البحث العام مع حالة التحميل (للزر الخارجي)
function clearGlobalSearchWithLoading() {
    console.log('🧹 مسح البحث العام مع مؤشر التحميل...');

    const searchInput = document.getElementById('globalSearch');
    const cancelButton = document.querySelector('.global-cancel-btn');
    const loadingIndicator = document.getElementById('searchLoadingIndicator');

    if (!searchInput || !cancelButton) return;

    // إظهار مؤشر التحميل وتعطيل الزر
    if (loadingIndicator) {
        loadingIndicator.style.display = 'block';
    }

    // تعطيل الزر وإظهار حالة التحميل
    cancelButton.disabled = true;
    const originalContent = cancelButton.innerHTML;
    cancelButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span class="btn-text">جاري المسح...</span>';

    // تأخير قصير لإظهار التحميل
    setTimeout(() => {
        try {
            // تنفيذ المسح
            clearGlobalSearch();

            // إخفاء زر الإلغاء
            if (cancelButton) {
                cancelButton.style.display = 'none';
            }

            console.log('✅ تم مسح البحث بنجاح');
        } catch (error) {
            console.error('❌ خطأ في مسح البحث:', error);
        } finally {
            // إعادة تفعيل الزر وإخفاء مؤشر التحميل
            cancelButton.disabled = false;
            cancelButton.innerHTML = originalContent;

            if (loadingIndicator) {
                loadingIndicator.style.display = 'none';
            }
        }
    }, 300);
}

// إلغاء البحث العام فقط (مثل حذف النص يدوياً)
function cancelGlobalSearchWithLoading() {
    console.log('🚫 إلغاء البحث العام فقط (مثل المسح اليدوي)...');

    const cancelButton = document.querySelector('.global-cancel-btn');
    const loadingIndicator = document.getElementById('searchLoadingIndicator');

    if (!cancelButton) return;

    // Show loading state
    cancelButton.disabled = true;
    const originalContent = cancelButton.innerHTML;
    cancelButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span class="btn-text">جاري المسح...</span>';

    // Show loading indicator
    if (loadingIndicator) {
        loadingIndicator.style.display = 'block';
    }

    setTimeout(() => {
        try {
            // استخدام نفس الوظيفة المستخدمة للمسح اليدوي
            clearGlobalSearchOnly();

            // عرض رسالة تأكيد
            const searchInput = document.getElementById('globalSearch');
            if (searchInput) {
                showSearchIndicator(searchInput, 'تم مسح البحث - عرض البيانات حسب الفلاتر الحالية', 'success');
            }

            // عرض toast notification
            showToast('تم مسح البحث العام مع الاحتفاظ بالفلاتر الأخرى', 'success');

        } catch (error) {
            console.error('❌ خطأ في إلغاء البحث:', error);
            showToast('حدث خطأ أثناء مسح البحث', 'error');
        } finally {
            // Restore button after delay
            setTimeout(() => {
                cancelButton.disabled = false;
                cancelButton.innerHTML = originalContent;

                // Hide loading indicator
                if (loadingIndicator) {
                    loadingIndicator.style.display = 'none';
                }
            }, 400);
        }
    }, 300);
}

// مسح البحث العام فقط مع الاحتفاظ بالفلاتر (للمسح اليدوي)
function clearGlobalSearchOnly() {
    console.log('🧹 مسح البحث العام فقط مع الاحتفاظ بالفلاتر...');

    const searchInput = document.getElementById('globalSearch');
    const cancelButton = document.querySelector('.global-cancel-btn');

    // إخفاء مؤشر التحميل
    hideSearchLoadingIndicator();

    // مسح حقل البحث
    if (searchInput) {
        searchInput.value = '';
    }

    // إخفاء زر الإلغاء
    if (cancelButton) {
        cancelButton.style.display = 'none';
    }

    // مسح حالة البحث العام فقط
    searchState.global = '';
    searchState.isSearchActive = false;
    searchState.internalAdvancedSearch = ''; // مسح البحث الداخلي المتقدم

    // إذا كان فلتر/بحث الحالة مطبقاً من البحث، قم بمسحه أيضاً
    if (statusFilterAppliedFromSearch) {
        const wasAdvancedSearch = searchState.internalAdvancedSearch === 'فعال + على وشك';
        console.log('🧹 مسح فلتر/بحث الحالة لأنه كان مطبقاً من البحث');

        // مسح الفلتر والبحث
        filterStatus = '';
        statusFilterAppliedFromSearch = false;

        // تحديث أزرار الحالة في الواجهة
        updateStatusButtonsState('');

        // تحديث عرض الفلاتر النشطة
        if (typeof updateActiveFiltersDisplay === 'function') {
            updateActiveFiltersDisplay();
        }

        // إظهار رسالة توضيحية
        if (searchInput && typeof showSearchIndicator === 'function') {
            const searchType = wasAdvancedSearch ? 'البحث المتقدم (فعال + على وشك)' : 'فلتر الحالة';
            showSearchIndicator(searchInput, `تم مسح ${searchType} المطبق من البحث`, 'success');
        }
    }

    // إذا كان فلتر نوع العقار مطبقاً من البحث، قم بمسحه أيضاً
    if (propertyTypeFilterAppliedFromSearch) {
        console.log('🧹 مسح فلتر نوع العقار لأنه كان مطبقاً من البحث');

        // مسح فلتر نوع العقار
        if (typeof resetPropertyTypeFilter === 'function') {
            resetPropertyTypeFilter();
        }
        propertyTypeFilterAppliedFromSearch = false;

        // إظهار رسالة توضيحية
        if (searchInput && typeof showSearchIndicator === 'function') {
            showSearchIndicator(searchInput, `تم مسح فلتر نوع العقار المطبق من البحث`, 'success');
        }
    }

    // تنفيذ renderData لعرض البيانات حسب الفلاتر الموجودة
    setTimeout(() => {
        if (typeof renderData === 'function') {
            renderData();
        }

        console.log('✅ تم مسح البحث العام مع الاحتفاظ بالفلاتر');
    }, 100);
}

// عرض رسالة تأكيد بسيطة لمسح البحث فقط
function showSimpleSearchClearMessage() {
    const searchInput = document.getElementById('globalSearch');

    // عرض الرسالة في مؤشر البحث
    if (searchInput) {
        showSearchIndicator(searchInput, 'تم مسح البحث - عرض البيانات حسب الفلاتر الحالية', 'success');
    }

    // عرض toast notification بسيطة
    showToast('تم مسح البحث العام مع الاحتفاظ بالفلاتر الأخرى', 'success');

    // تسجيل ملخص في وحدة التحكم
    setTimeout(() => {
        console.log('📋 ملخص مسح البحث العام:', {
            '🔍 البحث العام': 'تم المسح ✅',
            '🏙️ فلتر المدن': 'محتفظ بالحالة الحالية ✅',
            '🏢 فلتر العقارات': 'محتفظ بالحالة الحالية ✅',
            '📊 فلتر الحالة': 'محتفظ بالحالة الحالية ✅',
            '📅 فلاتر التاريخ': 'محتفظ بالحالة الحالية ✅',
            '📋 البيانات المعروضة': 'حسب الفلاتر الحالية ✅'
        });

        console.log('🎯 النتيجة: تم مسح البحث فقط مع الاحتفاظ بجميع الفلاتر الأخرى');
    }, 500);
}

// مسح البحث العام تلقائياً عند التنقل (بدون مؤشرات بصرية)
function clearGlobalSearchOnNavigation() {
    const searchInput = document.getElementById('globalSearch');
    if (!searchInput) return;

    // التحقق من وجود بحث نشط
    if (!searchState.global || searchState.global.trim() === '') {
        return; // لا يوجد بحث نشط، لا حاجة للمسح
    }

    console.log('🔄 مسح البحث العام تلقائياً عند التنقل');

    // مسح النص
    searchInput.value = '';

    // مسح حالة البحث
    searchState.global = '';
    searchState.isSearchActive = false;

    // لا نستدعي renderData() هنا لأن دوال التنقل ستستدعيها
    // لا نظهر مؤشرات بصرية لأن هذا مسح تلقائي
}

// البحث التلقائي في العقارات (يحدث أثناء الكتابة)
function performAutoPropertySearch() {
    const searchInput = document.getElementById('propertySearch');
    if (!searchInput) return;

    const searchTerm = searchInput.value.trim();
    console.log('🔍 البحث التلقائي في العقارات:', searchTerm);

    // أولاً: محاولة اكتشاف وتطبيق فلتر الحالة
    const statusFilterApplied = detectAndApplyStatusFilter(searchTerm, false); // لا نمسح حقل البحث في العقارات

    if (statusFilterApplied) {
        // إذا تم تطبيق فلتر حالة، الاحتفاظ بالنص وإظهار جميع العقارات
        // لأن الفلتر سيطبق على مستوى البيانات
        const propertyItems = document.querySelectorAll('#propertyList div:not(.no-properties)');
        propertyItems.forEach(item => {
            item.style.display = '';
        });

        // إظهار رسالة توضيحية
        if (typeof showSearchIndicator === 'function') {
            showSearchIndicator(searchInput, `تم تطبيق فلتر الحالة من البحث (يمكنك حذف النص لإلغاء الفلتر)`, 'success');
        }

        return;
    }

    // إذا لم يتم تطبيق فلتر حالة، تنفيذ البحث العادي
    const searchTermLower = searchTerm.toLowerCase();

    // حفظ حالة البحث
    searchState.property = searchTermLower;

    // إظهار/إخفاء زر المسح
    const clearBtn = document.querySelector('.property-clear-btn');
    if (clearBtn) {
        clearBtn.style.display = searchTerm ? 'flex' : 'none';
    }

    // تطبيق البحث على قائمة العقارات
    const propertyItems = document.querySelectorAll('#propertyList div:not(.no-properties)');
    let visibleCount = 0;

    propertyItems.forEach(item => {
        const propertyName = item.textContent.toLowerCase();
        const isVisible = !searchTermLower || propertyName.includes(searchTermLower);

        item.style.display = isVisible ? '' : 'none';
        if (isVisible) visibleCount++;
    });

    // إظهار رسالة إذا لم توجد نتائج
    updatePropertySearchResults(visibleCount, searchTerm);
}

// مسح البحث في العقارات
function clearPropertySearch() {
    const searchInput = document.getElementById('propertySearch');
    if (!searchInput) return;

    console.log('🧹 مسح البحث في العقارات');

    // مسح النص
    searchInput.value = '';

    // مسح حالة البحث
    searchState.property = '';

    // إخفاء زر المسح
    const clearBtn = document.querySelector('.property-clear-btn');
    if (clearBtn) {
        clearBtn.style.display = 'none';
    }

    // إظهار جميع العقارات
    const propertyItems = document.querySelectorAll('#propertyList div:not(.no-properties)');
    propertyItems.forEach(item => {
        item.style.display = '';
    });

    // إزالة رسائل البحث
    const searchResults = document.querySelector('#propertyList .search-results-message');
    if (searchResults) {
        searchResults.remove();
    }

    // تحديث عداد النتائج (إزالة رسائل البحث)
    updatePropertySearchResults(0, '');

    // إظهار مؤشر المسح
    showSearchIndicator(searchInput, 'تم مسح البحث', 'info');
}

// مسح البحث في العقارات مع حالة التحميل (للزر الخارجي)
function clearPropertySearchWithLoading() {
    console.log('🧹 مسح البحث في العقارات مع مؤشر التحميل...');

    const searchInput = document.getElementById('propertySearch');
    const clearButton = document.querySelector('.property-clear-btn');

    if (!searchInput || !clearButton) return;

    // تعطيل الزر وإظهار حالة التحميل
    clearButton.disabled = true;
    const originalContent = clearButton.innerHTML;
    clearButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';

    // تأخير قصير لإظهار التحميل
    setTimeout(() => {
        try {
            // تنفيذ المسح
            clearPropertySearch();

            console.log('✅ تم مسح البحث في العقارات بنجاح');
        } catch (error) {
            console.error('❌ خطأ في مسح البحث في العقارات:', error);
        } finally {
            // إعادة تفعيل الزر
            clearButton.disabled = false;
            clearButton.innerHTML = originalContent;
        }
    }, 200);
}

// إظهار مؤشر البحث
function showSearchIndicator(inputElement, message, type = 'info') {
    if (!inputElement) return;

    // إزالة المؤشر السابق
    const existingIndicator = inputElement.parentElement.querySelector('.search-indicator');
    if (existingIndicator) {
        existingIndicator.remove();
    }

    // إنشاء مؤشر جديد
    const indicator = document.createElement('div');
    indicator.className = 'search-indicator';
    indicator.textContent = message;

    // تحديد اللون حسب النوع
    let backgroundColor = '#17a2b8'; // info
    if (type === 'success') backgroundColor = '#28a745';
    if (type === 'warning') backgroundColor = '#ffc107';
    if (type === 'error') backgroundColor = '#dc3545';

    indicator.style.cssText = `
        position: absolute;
        top: 100%;
        left: 50%;
        transform: translateX(-50%);
        background: ${backgroundColor};
        color: white;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        white-space: nowrap;
        z-index: 1000;
        margin-top: 2px;
        opacity: 0;
        transition: opacity 0.3s ease;
    `;

    // إضافة المؤشر
    inputElement.parentElement.style.position = 'relative';
    inputElement.parentElement.appendChild(indicator);

    // إظهار المؤشر
    setTimeout(() => {
        indicator.style.opacity = '1';
    }, 10);

    // إخفاء المؤشر بعد 3 ثوان
    setTimeout(() => {
        indicator.style.opacity = '0';
        setTimeout(() => {
            if (indicator.parentElement) {
                indicator.remove();
            }
        }, 300);
    }, 3000);
}

// تحديث نتائج البحث في العقارات
function updatePropertySearchResults(visibleCount, searchTerm) {
    const propertyList = document.getElementById('propertyList');
    if (!propertyList) return;

    // إزالة رسالة النتائج السابقة
    const existingMessage = propertyList.querySelector('.search-results-message');
    if (existingMessage) {
        existingMessage.remove();
    }

    // إضافة رسالة النتائج الجديدة إذا كان هناك بحث نشط
    if (searchTerm) {
        const resultsMessage = document.createElement('div');
        resultsMessage.className = 'search-results-message';
        resultsMessage.style.cssText = `
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            padding: 8px 12px;
            margin: 8px 12px;
            text-align: center;
            font-size: 13px;
            color: #495057;
        `;

        if (visibleCount === 0) {
            resultsMessage.innerHTML = `
                <i class="fas fa-search" style="color: #6c757d; margin-left: 5px;"></i>
                لا توجد نتائج للبحث: "${searchTerm}"
            `;
            resultsMessage.style.color = '#6c757d';
        } else {
            resultsMessage.innerHTML = `
                <i class="fas fa-check-circle" style="color: #28a745; margin-left: 5px;"></i>
                ${visibleCount} نتيجة للبحث: "${searchTerm}"
            `;
            resultsMessage.style.color = '#28a745';
        }

        // إضافة الرسالة في بداية القائمة
        propertyList.insertBefore(resultsMessage, propertyList.firstChild);
    }
}

// استعادة حالة البحث في العقارات
function restorePropertySearchState(searchTerm) {
    const searchInput = document.getElementById('propertySearch');
    if (!searchInput || !searchTerm) return;

    console.log('🔄 استعادة حالة البحث في العقارات:', searchTerm);

    // استعادة النص في حقل البحث
    searchInput.value = searchTerm;

    // تطبيق البحث
    searchState.property = searchTerm;
    performAutoPropertySearch();
}

// تحديث دالة renderData لاستخدام حالة البحث المحفوظة
function getGlobalSearchTerm() {
    // استخدام حالة البحث المحفوظة بدلاً من قراءة القيمة مباشرة
    if (!searchState.isSearchActive) {
        return '';
    }

    // إذا كان هناك بحث داخلي متقدم، استخدمه للبحث الفعلي
    if (searchState.internalAdvancedSearch) {
        return searchState.internalAdvancedSearch;
    }

    // وإلا استخدم البحث العادي
    return searchState.global;
}

// تهيئة نظام البحث المحسن
function initializeEnhancedSearch() {
    console.log('🔍 تهيئة نظام البحث المحسن...');

    // التأكد من إضافة الأزرار للبحث العام
    setTimeout(() => {
        const globalSearchInput = document.getElementById('globalSearch');
        if (globalSearchInput && !globalSearchInput.parentElement.querySelector('.search-buttons-container')) {
            addSearchButtons('globalSearch');
        }
    }, 100);

    // تهيئة البحث التلقائي للعقارات
    setTimeout(() => {
        initAutoPropertySearch();
    }, 200);

    console.log('✅ تم تهيئة نظام البحث المحسن');
}

// دالة لضمان تطبيق التحسينات عند تحميل الصفحة (محدثة للتخطيط الجديد)
function ensureSearchEnhancements() {
    // التحقق من وجود أزرار البحث وإضافتها إذا لم تكن موجودة
    setTimeout(() => {
        const globalSearch = document.getElementById('globalSearch');
        const propertySearch = document.getElementById('propertySearch');

        // للبحث العام، التحقق من الأزرار في HTML
        if (globalSearch) {
            const searchBtn = document.querySelector('.global-search-btn');
            const clearBtn = document.querySelector('.global-clear-btn');

            if (searchBtn && !searchBtn.hasAttribute('data-initialized')) {
                searchBtn.addEventListener('click', performGlobalSearch);
                searchBtn.setAttribute('data-initialized', 'true');
                console.log('🔧 تم ربط زر البحث العام...');
            }

            if (clearBtn && !clearBtn.hasAttribute('data-initialized')) {
                clearBtn.addEventListener('click', clearGlobalSearch);
                clearBtn.setAttribute('data-initialized', 'true');
                console.log('🔧 تم ربط زر مسح البحث العام...');
            }

            // إضافة مستمع Enter إذا لم يكن موجوداً
            if (!globalSearch.hasAttribute('data-enter-initialized')) {
                globalSearch.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        performGlobalSearch();
                    }
                });
                globalSearch.setAttribute('data-enter-initialized', 'true');
            }

            // إضافة مستمع لمراقبة مسح البحث يدوياً
            if (!globalSearch.hasAttribute('data-input-initialized')) {
                globalSearch.addEventListener('input', function(e) {
                    const currentValue = e.target.value.trim();

                    // إذا تم مسح البحث يدوياً وكان فلتر/بحث الحالة مطبقاً من البحث
                    if (currentValue === '' && statusFilterAppliedFromSearch) {
                        const wasAdvancedSearch = searchState.internalAdvancedSearch === 'فعال + على وشك';
                        console.log('🧹 تم مسح البحث يدوياً - مسح فلتر/بحث الحالة المطبق من البحث');

                        // مسح فلتر الحالة والبحث
                        filterStatus = '';
                        statusFilterAppliedFromSearch = false;
                        searchState.internalAdvancedSearch = ''; // مسح البحث الداخلي المتقدم

                        // تحديث أزرار الحالة في الواجهة
                        updateStatusButtonsState('');

                        // تحديث عرض الفلاتر النشطة
                        if (typeof updateActiveFiltersDisplay === 'function') {
                            updateActiveFiltersDisplay();
                        }

                        // إعادة عرض البيانات
                        if (typeof renderData === 'function') {
                            renderData();
                        }

                        // إظهار رسالة توضيحية
                        if (typeof showSearchIndicator === 'function') {
                            const searchType = wasAdvancedSearch ? 'البحث المتقدم (فعال + على وشك)' : 'فلتر الحالة';
                            showSearchIndicator(e.target, `تم مسح ${searchType}`, 'success');
                        }
                    }
                });
                globalSearch.setAttribute('data-input-initialized', 'true');
            }
        }

        // لبحث العقارات، تهيئة البحث التلقائي
        if (propertySearch) {
            console.log('🔧 تهيئة البحث التلقائي للعقارات...');
            initAutoPropertySearch();
        }

        console.log('✅ تم ضمان تطبيق تحسينات البحث مع التخطيط الجديد');
    }, 1000);
}

// تهيئة البحث التلقائي في العقارات
function initAutoPropertySearch() {
    const searchInput = document.getElementById('propertySearch');
    if (!searchInput) {
        console.warn('⚠️ لم يتم العثور على عنصر البحث في العقارات');
        return;
    }

    // التحقق من أن البحث التلقائي لم يتم تهيئته مسبقاً
    if (searchInput.hasAttribute('data-auto-search-initialized')) {
        console.log('✅ البحث التلقائي مهيأ مسبقاً');
        return;
    }

    // إضافة البحث التلقائي أثناء الكتابة
    let searchTimeout;
    searchInput.addEventListener('input', function(e) {
        const currentValue = e.target.value.trim();
        const clearBtn = document.querySelector('.property-clear-btn');

        // إظهار/إخفاء زر المسح بناءً على وجود نص
        if (clearBtn) {
            clearBtn.style.display = currentValue ? 'flex' : 'none';
        }

        // إلغاء البحث السابق إذا كان المستخدم ما زال يكتب
        clearTimeout(searchTimeout);

        // تأخير قصير لتجنب البحث مع كل حرف
        searchTimeout = setTimeout(() => {
            performAutoPropertySearch();
        }, 300); // 300ms تأخير
    });

    // منع إغلاق السايدبار عند التفاعل مع البحث
    searchInput.addEventListener('focus', function(e) {
        e.stopPropagation();
        // إضافة كلاس حماية للسايدبار
        const sidebar = document.querySelector('aside');
        if (sidebar) {
            sidebar.classList.add('search-active');
        }
    });

    searchInput.addEventListener('blur', function() {
        // إزالة كلاس الحماية بعد تأخير قصير
        setTimeout(() => {
            const sidebar = document.querySelector('aside');
            if (sidebar) {
                sidebar.classList.remove('search-active');
            }
        }, 300);
    });

    // إضافة مستمع للضغط على Enter (للبحث الفوري)
    searchInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            clearTimeout(searchTimeout); // إلغاء التأخير
            performAutoPropertySearch(); // بحث فوري
        }
    });

    // منع إغلاق السايدبار عند النقر على البحث
    searchInput.addEventListener('click', function(e) {
        e.stopPropagation();
    });

    searchInput.addEventListener('touchstart', function(e) {
        e.stopPropagation();
    });

    // وضع علامة أن البحث التلقائي تم تهيئته
    searchInput.setAttribute('data-auto-search-initialized', 'true');

    console.log('✅ تم تهيئة البحث التلقائي في العقارات');
}

// اختيار بلد
function selectCountry(country) {
    console.log('🏙️ تغيير المدينة إلى:', country);

    // مسح البحث العام تلقائياً عند تغيير المدينة
    clearGlobalSearchOnNavigation();

    // إعادة تعيين فلتر نوع العقار عند تغيير المدينة
    resetPropertyTypeFilter();

    // عند اختيار "الكل" أزل كل الفلاتر
    if (!country || country === 'الكل') {
        currentCountry = null;
        currentProperty = null;
    } else {
        // إذا تم اختيار بلد جديد أزل فلتر العقار
        if (currentCountry !== country) {
            currentCountry = country;
            currentProperty = null;
        } else {
            // إذا تم الضغط على نفس المدينة مرة أخرى أزل فلتر العقار فقط
            currentProperty = null;
        }
    }
    initCountryButtons();
    initPropertyList(currentCountry);
    renderData();

    // تحديث عرض اسم العقار في الجوالات
    updateMobilePropertyName();

    // تحديث فوري إضافي
    setTimeout(() => {
        updateMobilePropertyName();
    }, 100);

    // حفظ الحالة بعد تغيير المدينة
    saveAppState();
}

// إضافة مؤشر العقار المحدد
function addSelectedPropertyIndicator() {
    // إزالة المؤشر السابق إن وجد
    const existingIndicator = document.querySelector('.selected-property-indicator');
    if (existingIndicator) {
        existingIndicator.remove();
    }

    // إذا لم يكن هناك عقار محدد، لا نضيف مؤشر
    if (!currentProperty) {
        return;
    }

    // حساب عدد الوحدات للعقار المحدد
    let filteredCount = 0;
    if (properties && properties.length > 0) {
        let tempFiltered = properties.filter(property => property['اسم العقار'] === currentProperty);
        if (currentCountry) {
            tempFiltered = tempFiltered.filter(property => property.المدينة === currentCountry);
        }
        filteredCount = tempFiltered.length;
    }

    // إنشاء مؤشر العقار المحدد
    const indicator = document.createElement('div');
    indicator.className = 'selected-property-indicator';

    // إضافة رسالة توضيحية إذا كانت النتائج قليلة
    const helpMessage = filteredCount === 0 ?
        '<div class="filter-help">💡 لا توجد وحدات لهذا العقار في المدينة المحددة</div>' :
        filteredCount < 5 ?
        '<div class="filter-help">💡 يتم عرض وحدات عقار محدد فقط</div>' : '';

    indicator.innerHTML = `
        <div class="selected-property-content">
            <div class="selected-property-info">
                <i class="fas fa-building"></i>
                <span>عرض عقار: <strong>${currentProperty}</strong></span>
                ${currentCountry ? `<span class="selected-city">في ${currentCountry}</span>` : ''}
                <span class="units-count">${filteredCount} وحدة</span>
            </div>

        </div>
        ${helpMessage}
    `;

    // إضافة المؤشر قبل المحتوى
    const contentDiv = document.getElementById('content');
    if (contentDiv) {
        contentDiv.parentNode.insertBefore(indicator, contentDiv);
    }
}

// مسح تحديد العقار
function clearPropertySelection() {
    console.log('🔄 مسح تحديد العقار');

    currentProperty = null;

    // تحديث القائمة الجانبية
    initPropertyList(currentCountry);

    // إعادة عرض البيانات
    renderData();

    // حفظ الحالة
    saveAppState();
}

// اختيار عقار مع الحفاظ على حالة البحث
function selectProperty(propertyName) {
    console.log('🏢 اختيار عقار:', propertyName, 'العقار الحالي:', currentProperty);

    // مسح البحث العام تلقائياً عند تغيير العقار
    clearGlobalSearchOnNavigation();

    // حفظ حالة البحث الحالية
    const currentSearchTerm = searchState.property;

    // إذا تم اختيار نفس العقار أزل الفلتر
    if (currentProperty === propertyName) {
        currentProperty = null;
        console.log('🔄 إلغاء اختيار العقار');
    } else {
        currentProperty = propertyName;
        console.log('✅ تم اختيار العقار:', currentProperty);
    }

    // تحديث تمييز العقار في القائمة الجانبية
    // التأكد من أن قائمة العقارات تعكس المدينة الحالية فقط
    console.log(`🔄 تحديث قائمة العقارات للمدينة: ${currentCountry || 'الكل'}`);
    console.log(`📊 الفلاتر الحالية: المدينة=${currentCountry}, العقار=${currentProperty}, النوع=${currentPropertyTypeFilter}`);
    initPropertyList(currentCountry);

    // استعادة حالة البحث بعد تحديث القائمة
    if (currentSearchTerm) {
        setTimeout(() => {
            restorePropertySearchState(currentSearchTerm);
        }, 100);
    }

    renderData();

    // تحديث عرض اسم العقار في الجوالات
    updateMobilePropertyName();

    // تحديث فوري إضافي
    setTimeout(() => {
        updateMobilePropertyName();
    }, 100);

    // إخفاء السايدبار تلقائياً بعد اختيار عقار (فقط على الشاشات الصغيرة)
    const sidebar = document.getElementById('sidebar');
    if (window.innerWidth <= 900) {
        sidebar.classList.remove('active');
    }

    // تحديث عرض الفلاتر النشطة
    updateActiveFiltersDisplay();

    // تحديث حالة أزرار الفلاتر
    updateAllFilterButtonsState();

    // حفظ الحالة بعد تغيير العقار
    saveAppState();
}

// تعيين فلتر الحالة
function setStatusFilter(status, fromSearch = false) {
    console.log(`🔄 تطبيق فلتر الحالة: ${status}`);

    filterStatus = status;

    // إذا لم يتم استدعاؤها من البحث، فهذا يعني أنها تم تطبيقها يدوياً
    if (!fromSearch) {
        statusFilterAppliedFromSearch = false;
    }

    // تحديث activeFilters أيضاً
    activeFilters.status = status || '';

    // تحديث البيانات فوراً
    renderData();

    // تحديث عرض الفلاتر النشطة
    updateActiveFiltersDisplay();

    // تحديث حالة أزرار الفلاتر
    updateAllFilterButtonsState();

    // تحديث أزرار الحالة في الواجهة
    updateStatusButtonsState(status);

    // حفظ الحالة بعد تغيير فلتر الحالة
    saveAppState();

    console.log(`✅ تم تطبيق فلتر الحالة: ${status || 'الكل'}`);
}

// متغير لمنع التداخل في تطبيق فلاتر الحالة
let statusFilterProcessing = false;

// دالة toggle لفلتر الحالة مع منع التداخل
function toggleStatusFilter(status) {
    // منع التداخل
    if (statusFilterProcessing) {
        console.log('⏳ فلتر الحالة قيد المعالجة، تجاهل النقر...');
        return;
    }

    statusFilterProcessing = true;
    console.log(`🔄 Toggle فلتر الحالة: ${status}`);

    try {
        // إذا كان الفلتر نشطاً، قم بإلغائه
        if (filterStatus === status) {
            console.log(`❌ إلغاء فلتر الحالة: ${status}`);
            setStatusFilter(null);
        } else {
            // إذا لم يكن نشطاً، قم بتطبيقه
            console.log(`✅ تطبيق فلتر الحالة: ${status}`);
            setStatusFilter(status);
        }
    } catch (error) {
        console.error('❌ خطأ في toggle فلتر الحالة:', error);
    } finally {
        // إعادة تعيين المتغير بعد تأخير قصير
        setTimeout(() => {
            statusFilterProcessing = false;
        }, 300);
    }
}

// دالة لتحديث حالة أزرار الحالة في الواجهة
function updateStatusButtonsState(activeStatus) {
    // البحث عن جميع أزرار الحالة وتحديث حالتها
    const statusButtons = document.querySelectorAll('.status-btn, .filter-btn[data-status]');

    statusButtons.forEach(btn => {
        const btnStatus = btn.getAttribute('data-status') || btn.textContent.trim();

        if (btnStatus === activeStatus) {
            btn.classList.add('active');
        } else {
            btn.classList.remove('active');
        }
    });

    // تحديث أزرار الحالة في القائمة المنسدلة إذا كانت موجودة
    const statusFilterButtons = document.querySelectorAll('.status-filter-modal .status-option');
    statusFilterButtons.forEach(btn => {
        const btnStatus = btn.getAttribute('data-status') || btn.textContent.trim();

        if (btnStatus === activeStatus) {
            btn.classList.add('active');
        } else {
            btn.classList.remove('active');
        }
    });
}

// تبديل طريقة العرض
function toggleView(view) {
    currentView = view;

    const tableBtn = document.getElementById('table-btn');
    const cardsBtn = document.getElementById('cards-btn');

    if (view === 'table') {
        tableBtn.classList.add('active');
        cardsBtn.classList.remove('active');
    } else {
        tableBtn.classList.remove('active');
        cardsBtn.classList.add('active');
    }

    renderData();

    // حفظ الحالة بعد تغيير طريقة العرض
    saveAppState();
}

// تبديل عرض الشريط الجانبي
function toggleSidebar() {
    const sidebar = document.getElementById('sidebar');
    const searchInput = document.getElementById('propertySearch');
    const totalContainer = document.getElementById('totalContainer');

    // في الشاشات الصغيرة فقط
    if (window.innerWidth <= 900) {
        // التحقق من حالة البحث النشط
        if (sidebar.classList.contains('search-active') ||
            (searchInput && document.activeElement === searchInput)) {
            // لا تغلق السايدبار إذا كان البحث نشطاً
            console.log('🔒 منع إغلاق السايدبار - البحث نشط');
            return;
        }

        sidebar.classList.toggle('active');

        // تحسين ارتفاع النافذة للجوالات الصغيرة عند الفتح
        if (sidebar.classList.contains('active') && window.innerWidth <= 480) {
            setTimeout(() => adjustSidebarHeightForMobile(), 100);
        }

        // إخفاء/إظهار الإحصائيات عند تبديل القائمة
        if (totalContainer) {
            if (sidebar.classList.contains('active')) {
                // عند فتح القائمة - إخفاء الإحصائيات
                totalContainer.style.display = 'none';
                console.log('📊 تم إخفاء الإحصائيات عند فتح القائمة');
            } else {
                // عند إغلاق القائمة - إظهار الإحصائيات
                totalContainer.style.display = '';
                console.log('📊 تم إظهار الإحصائيات عند إغلاق القائمة');
            }
        }
    }
    // في الشاشات الكبيرة الـ sidebar دائماً ظاهر
}


// تهيئة الـ sidebar حسب حجم الشاشة
function initializeSidebar() {
    const sidebar = document.getElementById('sidebar');
    const main = document.querySelector('main');
    const footer = document.querySelector('footer');

    if (window.innerWidth > 900) {
        // في الشاشات الكبيرة: الـ sidebar دائماً ظاهر
        sidebar.classList.add('active');

        // تطبيق الأنماط مباشرة للتأكد
        sidebar.style.position = 'fixed';
        sidebar.style.top = '70px';
        sidebar.style.right = '0';
        sidebar.style.width = '280px';
        sidebar.style.height = 'calc(100vh - 70px)';
        sidebar.style.transform = 'translateX(0)';
        sidebar.style.zIndex = '900';
        sidebar.style.backgroundColor = 'white';
        sidebar.style.boxShadow = '0 0 15px rgba(0,0,0,0.2)';
        sidebar.style.overflowY = 'auto';
        sidebar.style.padding = '1rem';

        document.body.classList.add('desktop-layout');

        // التأكد من الهوامش الصحيحة
        if (main) {
            main.style.marginRight = '280px';
            main.style.marginLeft = '20px';
            main.style.width = 'calc(100vw - 320px)';
            main.style.boxSizing = 'border-box';
        }
        if (footer) {
            footer.style.marginRight = '280px';
            footer.style.marginLeft = '20px';
            footer.style.width = 'calc(100vw - 320px)';
            footer.style.boxSizing = 'border-box';
        }
    } else {
        // في الشاشات الصغيرة: الـ sidebar مخفي افتراضياً
        sidebar.classList.remove('active');

        // إعادة تعيين الأنماط للشاشات الصغيرة
        sidebar.style.position = 'fixed';
        sidebar.style.top = '0';
        sidebar.style.right = '0';
        sidebar.style.width = '100%';
        sidebar.style.height = '100vh';
        sidebar.style.transform = 'translateX(100%)';
        sidebar.style.zIndex = '1500';

        document.body.classList.remove('desktop-layout');

        // إزالة الهوامش في الشاشات الصغيرة
        if (main) {
            main.style.marginRight = '0';
            main.style.marginLeft = '0';
            main.style.width = '100%';

            // تحسين padding حسب حجم الشاشة مع هوامش جانبية
            if (window.innerWidth <= 480) {
                main.style.padding = '0.5rem 0.75rem';
            } else if (window.innerWidth <= 360) {
                main.style.padding = '0.5rem 0.75rem';
            } else {
                main.style.padding = '1rem 0.75rem';
            }
        }
        if (footer) {
            footer.style.marginRight = '0';
            footer.style.marginLeft = '0';
            footer.style.width = '100%';
        }
    }
}

// دالة لتحسين ارتفاع النافذة للجوالات الصغيرة
function adjustSidebarHeightForMobile() {
    const sidebar = document.getElementById('sidebar');
    if (!sidebar || !sidebar.classList.contains('active')) return;

    // الحصول على ارتفاع الشاشة الفعلي
    const viewportHeight = window.innerHeight;
    const visualViewportHeight = window.visualViewport ? window.visualViewport.height : viewportHeight;

    // تطبيق الارتفاع الفعلي
    sidebar.style.height = `${Math.min(viewportHeight, visualViewportHeight)}px`;
    sidebar.style.maxHeight = `${Math.min(viewportHeight, visualViewportHeight)}px`;

    // تحديث ارتفاع قائمة العقارات
    const propertyList = sidebar.querySelector('#propertyList');
    if (propertyList) {
        const headerHeight = sidebar.querySelector('.sidebar-header')?.offsetHeight || 60;
        const searchHeight = sidebar.querySelector('.property-search-container')?.offsetHeight || 60;
        const buttonHeight = sidebar.querySelector('.hide-sidebar-btn')?.offsetHeight || 48;

        const availableHeight = Math.min(viewportHeight, visualViewportHeight) - headerHeight - searchHeight - buttonHeight - 20;
        propertyList.style.maxHeight = `${Math.max(200, availableHeight)}px`;
    }

    console.log(`📱 تم تحسين ارتفاع النافذة: ${Math.min(viewportHeight, visualViewportHeight)}px`);
}

// مستمع لتغيير حجم الشاشة
window.addEventListener('resize', function() {
    initializeSidebar();

    // تحسين ارتفاع النافذة للجوالات الصغيرة عند تغيير الحجم
    if (window.innerWidth <= 480) {
        const sidebar = document.getElementById('sidebar');
        if (sidebar && sidebar.classList.contains('active')) {
            setTimeout(() => adjustSidebarHeightForMobile(), 100);
        }
    }

    // تحديث عرض اسم العقار عند تغيير حجم النافذة
    setTimeout(() => {
        updateMobilePropertyName();
    }, 100);
});

// مستمع لتغيير ارتفاع الشاشة (للجوالات التي تخفي شريط العنوان)
if (window.visualViewport) {
    window.visualViewport.addEventListener('resize', function() {
        if (window.innerWidth <= 480) {
            const sidebar = document.getElementById('sidebar');
            if (sidebar && sidebar.classList.contains('active')) {
                setTimeout(() => adjustSidebarHeightForMobile(), 50);
            }
        }
    });
}

// ضمان ظهور أزرار مسح الفلاتر عند تحميل الصفحة
document.addEventListener('DOMContentLoaded', function() {
    console.log('📱 تحميل الصفحة - فحص أزرار مسح الفلاتر...');

    // تأخير قصير للتأكد من تحميل جميع العناصر
    setTimeout(() => {
        ensureClearButtonsVisibility();

        // فحص إضافي للشاشات الصغيرة
        if (window.innerWidth <= 768) {
            const mobileContainer = document.getElementById('activeFiltersListMobile');
            const mobileFiltersModal = document.querySelector('.mobile-filters-modal');

            if (mobileContainer) {
                console.log('📱 فحص حاوية الفلاتر المحمولة...');
                const clearBtn = mobileContainer.querySelector('.clear-all-filters-btn');
                if (clearBtn) {
                    clearBtn.style.display = 'flex';
                    clearBtn.style.visibility = 'visible';
                    clearBtn.style.opacity = '1';
                    console.log('✅ تم ضمان ظهور زر مسح الفلاتر في الشاشات الصغيرة');
                }
            }

            if (mobileFiltersModal) {
                console.log('📱 فحص نافذة الفلاتر المحمولة...');
                const clearBtn = mobileFiltersModal.querySelector('.clear-all-filters-btn');
                if (clearBtn) {
                    clearBtn.style.display = 'flex';
                    clearBtn.style.visibility = 'visible';
                    clearBtn.style.opacity = '1';
                    console.log('✅ تم ضمان ظهور زر مسح الفلاتر في نافذة الفلاتر المحمولة');
                }
            }
        }
    }, 500);
});

// حماية السايدبار من الإغلاق أثناء البحث
document.addEventListener('click', function(e) {
    const sidebar = document.getElementById('sidebar');
    const searchInput = document.getElementById('propertySearch');

    // إذا كان النقر خارج السايدبار وليس على زر التبديل
    if (sidebar && !sidebar.contains(e.target) &&
        !e.target.closest('.toggle-sidebar-btn') &&
        !e.target.closest('#mobile-property-btn') &&
        window.innerWidth <= 900) {

        // التحقق من حالة البحث النشط
        if (sidebar.classList.contains('search-active') ||
            (searchInput && document.activeElement === searchInput)) {
            // لا تغلق السايدبار إذا كان البحث نشطاً
            console.log('🔒 منع إغلاق السايدبار - البحث نشط');
            return;
        }

        // إغلاق السايدبار فقط إذا لم يكن البحث نشطاً
        sidebar.classList.remove('active');
    }
});

// حماية إضافية للبحث من أحداث اللمس
document.addEventListener('touchstart', function(e) {
    const sidebar = document.getElementById('sidebar');
    const searchInput = document.getElementById('propertySearch');

    // إذا كان اللمس على البحث، منع إغلاق السايدبار
    if (searchInput && (e.target === searchInput || searchInput.contains(e.target))) {
        e.stopPropagation();
        if (sidebar) {
            sidebar.classList.add('search-active');
        }
    }
});

// تهيئة فلتر التاريخ
function initDateFilter() {
  // تهيئة قوائم التاريخ
  const yearSelect = document.getElementById('filterYear');
  const monthSelect = document.getElementById('filterMonth');
  const daySelect = document.getElementById('filterDay');
  
  // إضافة السنوات
  for (let year = 2020; year <= 2100; year++) {
    const option = document.createElement('option');
    option.value = year;
    option.textContent = year;
    yearSelect.appendChild(option);
  }
  
  // إضافة الأشهر
  const months = [
    'يناير', 'فبراير', 'مارس', 'إبريل', 'مايو', 'يونيو',
    'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'
  ];
  months.forEach((month, index) => {
    const option = document.createElement('option');
    option.value = index + 1;
    option.textContent = month;
    monthSelect.appendChild(option);
  });
  
  // إضافة الأيام
  for (let day = 1; day <= 31; day++) {
    const option = document.createElement('option');
    option.value = day;
    option.textContent = day;
    daySelect.appendChild(option);
  }
  
  // إضافة مستمعي الأحداث
  document.querySelector('.apply-filter-btn').addEventListener('click', applyDateFilter);
  document.querySelector('.clear-filter-btn').addEventListener('click', clearDateFilter);
  
  // إضافة حدث تغيير نوع التاريخ
  document.getElementById('filterType').addEventListener('change', updateDateFilterOptions);
}

// تحديث خيارات فلتر التاريخ
function updateDateFilterOptions() {
  dateFilterType = document.getElementById('filterType').value;
  renderData();
}

// تطبيق فلتر التاريخ
function applyDateFilter() {
  dateFilterType = document.getElementById('filterType').value;
  dateFilterDay = document.getElementById('filterDay').value;
  dateFilterMonth = document.getElementById('filterMonth').value;
  dateFilterYear = document.getElementById('filterYear').value;
  
  renderData();
}

// مسح فلتر التاريخ
function clearDateFilter() {
  dateFilterType = '';
  dateFilterDay = '';
  dateFilterMonth = '';
  dateFilterYear = '';
  
  document.getElementById('filterType').value = '';
  document.getElementById('filterDay').value = '';
  document.getElementById('filterMonth').value = '';
  document.getElementById('filterYear').value = '';
  
  renderData();
}

// تعديل دالة تصفية البيانات
function renderData() {
  // التحقق من وجود البيانات
  if (!properties || properties.length === 0) {
    console.warn('⚠️ لا توجد بيانات للعرض');
    const container = document.getElementById('content');
    if (container) {
      container.innerHTML = `
        <div style="text-align: center; padding: 3rem; color: #666;">
          <i class="fas fa-exclamation-triangle" style="font-size: 3rem; margin-bottom: 1rem; color: #f39c12;"></i>
          <h3>لا توجد بيانات للعرض</h3>
          <p>يرجى التحقق من اتصال الإنترنت أو إعادة تحميل الصفحة</p>
          <button onclick="location.reload()" style="padding: 10px 20px; background: #3498db; color: white; border: none; border-radius: 5px; cursor: pointer; margin-top: 1rem;">
            إعادة تحميل الصفحة
          </button>
        </div>
      `;
    }
    return;
  }

  let filteredData = properties;

  // فلتر التاريخ شامل جميع تواريخ البداية أو النهاية والأقساط
  if (dateFilterType && (dateFilterDay || dateFilterMonth || dateFilterYear)) {
    filteredData = filteredData.filter(property => {
      let datesToCheck = [];

      if (dateFilterType === 'start') {
        // يشمل تاريخ البداية وجميع تواريخ الأقساط
        if (property['تاريخ البداية']) datesToCheck.push(property['تاريخ البداية']);
        // جميع تواريخ الأقساط (يدعم: تاريخ القسط الاول، الثاني، الثالث ... الخ)
        Object.keys(property).forEach(key => {
          if (/^تاريخ القسط( |_)?(الاول|الثاني|الثالث|الرابع|الخامس|السادس|\d+)$/i.test(key) && property[key]) {
            datesToCheck.push(property[key]);
          }
        });
      } else if (dateFilterType === 'end') {
        // يشمل تاريخ النهاية وتاريخ نهاية القسط
        if (property['تاريخ النهاية']) datesToCheck.push(property['تاريخ النهاية']);
        if (property['تاريخ نهاية القسط']) datesToCheck.push(property['تاريخ نهاية القسط']);
      }

      if (datesToCheck.length === 0) return false;

      // إذا أي تاريخ من المجموعة يطابق الفلتر اعتبر العقار مطابق
      return datesToCheck.some(dateStr => {
        const date = parseDate(dateStr);
        if (!date) return false;
        if (dateFilterYear && date.getFullYear() !== parseInt(dateFilterYear)) return false;
        if (dateFilterMonth && (date.getMonth() + 1) !== parseInt(dateFilterMonth)) return false;
        if (dateFilterDay && date.getDate() !== parseInt(dateFilterDay)) return false;
        return true;
      });
    });
  }
  
  // تصفية البيانات حسب المدينة
  if (currentCountry) {
    const beforeCount = filteredData.length;
    filteredData = filteredData.filter(property => property.المدينة === currentCountry);
    console.log(`🏙️ فلترة المدينة "${currentCountry}": ${beforeCount} → ${filteredData.length} وحدة`);
  }

  // تصفية البيانات حسب نوع العقار (مباني/أراضي)
  if (currentPropertyTypeFilter) {
    filteredData = filteredData.filter(property => {
      const propertyType = property['نوع العقار'];
      // تحديث: "حوش" أصبح يُعتبر من المباني وليس من الأراضي
      const isLandType = propertyType === 'أرض';

      if (currentPropertyTypeFilter === 'lands') {
        return isLandType;
      } else if (currentPropertyTypeFilter === 'buildings') {
        return !isLandType;
      }
      return true;
    });
    console.log(`🏗️ تم تطبيق فلتر ${currentPropertyTypeFilter === 'buildings' ? 'المباني' : 'الأراضي'} - النتائج: ${filteredData.length} وحدة`);
  }

  // تصفية البيانات حسب العقار
  if (currentProperty) {
    filteredData = filteredData.filter(property => property['اسم العقار'] === currentProperty);
  }
  
  // تصفية البيانات حسب الحالة
  if (filterStatus) {
    filteredData = filteredData.filter(property => {
      const status = calculateStatus(property);
      return status.final === filterStatus;
    });
  }

  // تصفية البيانات حسب المالك
  if (activeFilters.owner) {
    filteredData = filteredData.filter(property => {
      return property['المالك'] === activeFilters.owner;
    });
  }
  
  // تصفية البيانات حسب البحث العام المتقدم (يدعم البحث الهرمي والمتعدد والمرادفات)
  const searchTerm = getGlobalSearchTerm();
  if (searchTerm && searchTerm.trim()) {
    console.log(`🔍 بدء البحث المتقدم: "${searchTerm}"`);

    // استخدام نظام البحث المتقدم الجديد
    if (typeof performAdvancedSearch === 'function') {
      filteredData = performAdvancedSearch(searchTerm, filteredData);
      console.log(`🎯 نتائج البحث المتقدم النهائية: ${filteredData.length} سجل`);
    } else {
      // النظام القديم كحل احتياطي
      const searchTermLower = searchTerm.toLowerCase();
      const isHierarchicalSearch = searchTermLower.includes('//');
      const isMultiSearch = searchTermLower.includes('+') && !isHierarchicalSearch;

      if (isHierarchicalSearch) {
        // البحث الهرمي (كان ///)
        const searchTerms = searchTermLower.split('//').map(term => normalizeArabicText(term.trim())).filter(term => term.length > 0);
        console.log(`🔍 البحث الهرمي (النظام القديم): ${searchTerms.length} مستويات:`, searchTerms);

        let currentResults = filteredData;
        for (let i = 0; i < searchTerms.length; i++) {
          const term = searchTerms[i];
          console.log(`🔍 المستوى ${i + 1}: البحث عن "${term}" في ${currentResults.length} سجل`);

          currentResults = currentResults.filter(property => {
            return searchInPropertyData(property, term);
          });

          console.log(`📊 نتائج المستوى ${i + 1}: ${currentResults.length} سجل`);

          if (currentResults.length === 0) {
            console.log(`⚠️ لا توجد نتائج في المستوى ${i + 1}، توقف البحث`);
            break;
          }
        }
        filteredData = currentResults;

      } else if (isMultiSearch) {
        // البحث المتعدد (كان //)
        const searchTerms = searchTermLower.split('+').map(term => normalizeArabicText(term.trim())).filter(term => term.length > 0);
        console.log(`🔍 البحث المتعدد (النظام القديم): ${searchTerms.length} مصطلحات:`, searchTerms);

        filteredData = filteredData.filter(property => {
          return searchTerms.some(term => {
            return searchInPropertyData(property, term);
          });
        });

        console.log(`📊 نتائج البحث المتعدد: ${filteredData.length} سجل`);

      } else {
        // البحث العادي
        const normalizedSearchTerm = normalizeArabicText(searchTermLower);
        filteredData = filteredData.filter(property => {
          return searchInPropertyData(property, normalizedSearchTerm);
        });
        console.log(`📊 نتائج البحث العادي: ${filteredData.length} سجل`);
      }
    }
  }
  
  // تصفية البيانات حسب نوع العقد
  if (contractTypeFilter) {
    if (contractTypeFilter === 'راكض') {
      // فلتر "راكض" يعني العقود غير المحددة (ليست سكني ولا ضريبي)
      filteredData = filteredData.filter(property => {
        const contractType = property['نوع العقد'];
        return !contractType || (contractType !== 'سكني' && contractType !== 'ضريبي');
      });
    } else {
      // الفلاتر العادية (سكني أو ضريبي)
      filteredData = filteredData.filter(property => property['نوع العقد'] === contractTypeFilter);
    }
  }

  // تصفية البيانات حسب نوع العقار
  if (propertyTypeFilter) {
    filteredData = filteredData.filter(property => property['نوع العقار'] === propertyTypeFilter);
  }
  
  // حفظ البيانات المفلترة للتصدير
  filteredProperties = [...filteredData];

  // تحديث نص أزرار التصدير
  updateExportButtonsText();

  // إضافة مؤشر العقار المحدد قبل عرض البيانات
  addSelectedPropertyIndicator();

  // عرض الإحصائيات
  renderTotals(filteredData);
  renderMobileTotals(filteredData);
  
  // عرض البيانات حسب طريقة العرض
  if (currentView === 'table') {
    renderTable(filteredData);
  } else {
    renderCards(filteredData);
  }
  
  // تحديث عدادات القائمة المتنقلة
  updateMobileMenuCounts(filteredData);
}

// دالة للتحقق من كون المصطلح تاريخ
function isDateSearchTerm(term) {
  // التحقق من وجود أرقام وشرطة مائلة
  return /\d+\/\d+\/\d+/.test(term) || /\d+\/\d+/.test(term);
}

// دالة للبحث المرن في التواريخ
function matchesDateFlexibly(valueStr, searchTerm) {
  // تنظيف مصطلح البحث
  const cleanSearchTerm = searchTerm.trim();

  // إذا كان البحث يحتوي على تاريخ كامل (يوم/شهر/سنة)
  if (/^\d+\/\d+\/\d+$/.test(cleanSearchTerm)) {
    const searchParts = cleanSearchTerm.split('/');
    const searchDay = parseInt(searchParts[0]);
    const searchMonth = parseInt(searchParts[1]);
    const searchYear = parseInt(searchParts[2]);

    // تكوين صيغ مختلفة للتاريخ للمقارنة
    const dateFormats = [
      `${searchDay}/${searchMonth}/${searchYear}`,           // 1/5/2025
      `${searchDay.toString().padStart(2, '0')}/${searchMonth.toString().padStart(2, '0')}/${searchYear}`, // 01/05/2025
      `${searchDay}/${searchMonth.toString().padStart(2, '0')}/${searchYear}`,  // 1/05/2025
      `${searchDay.toString().padStart(2, '0')}/${searchMonth}/${searchYear}`,  // 01/5/2025
    ];

    return dateFormats.some(format => valueStr.includes(format));
  }

  // إذا كان البحث يحتوي على شهر/سنة فقط
  if (/^\d+\/\d+$/.test(cleanSearchTerm)) {
    const searchParts = cleanSearchTerm.split('/');
    const searchMonth = parseInt(searchParts[0]);
    const searchYear = parseInt(searchParts[1]);

    const monthYearFormats = [
      `/${searchMonth}/${searchYear}`,                        // /5/2025
      `/${searchMonth.toString().padStart(2, '0')}/${searchYear}`, // /05/2025
    ];

    return monthYearFormats.some(format => valueStr.includes(format));
  }

  return false;
}

// تحديث عدادات القائمة المتنقلة
function updateMobileMenuCounts(data) {
    // عدد المدينةان
    const countries = new Set();
    properties.forEach(property => {
        if (property.المدينة) {
            countries.add(property.المدينة);
        }
    });
    document.getElementById('countryCount').textContent = countries.size;
    
    // عدد العقارات
    const uniqueProperties = new Set();
    data.forEach(property => {
        if (property['اسم العقار']) {
            uniqueProperties.add(property['اسم العقار']);
        }
    });
    document.getElementById('propertyCount').textContent = uniqueProperties.size;
    
    // عدد الفلاتر النشطة
    let filterCount = 0;
    if (currentCountry) filterCount++;
    if (currentProperty) filterCount++;
    if (filterStatus) filterCount++;
    document.getElementById('filterCount').textContent = filterCount || '';

    // تحديث عرض الفلاتر النشطة
    updateActiveFiltersDisplay();

    // تحديث حالة أزرار الفلاتر
    updateAllFilterButtonsState();
}

// دالة لحساب إحصائيات فئة معينة (مباني أو أراضي)
function calculateCategoryStats(data, isLandCategory) {
    let totalUnits = 0;
    let emptyUnits = 0;
    let tenants = 0;
    let rentedUnits = 0;
    let commercialUnits = 0; // الوحدات الضريبية
    let residentialUnits = 0; // الوحدات السكنية
    let pendingUnits = 0; // الوحدات الراكضة (غير محددة)

    // تجميع الوحدات الفريدة
    const uniqueUnits = new Set();
    const uniqueContracts = {};

    data.forEach(property => {
        const propertyType = property['نوع العقار'];
        // تحديث: "حوش" أصبح يُعتبر من المباني وليس من الأراضي
        const isLandType = propertyType === 'أرض';

        // تصفية حسب الفئة المطلوبة
        if (isLandCategory !== isLandType) {
            return; // تخطي هذا العقار إذا لم يكن من الفئة المطلوبة
        }

        // حساب عدد الوحدات الفريدة
        const unitKey = `${property['اسم العقار']}_${property['رقم  الوحدة ']}`;
        if (property['رقم  الوحدة '] && property['رقم  الوحدة '].toString().trim() !== '') {
            uniqueUnits.add(unitKey);
        }

        // حساب نوع العقد (ضريبي، سكني، أو راكض)
        const contractType = property['نوع العقد'];
        if (contractType === 'ضريبي') {
            commercialUnits++;
        } else if (contractType === 'سكني') {
            residentialUnits++;
        } else {
            // إذا لم يكن ضريبي أو سكني، فهو راكض (غير محدد)
            pendingUnits++;
        }

        // حساب الوحدات الفارغة
        if (!property['اسم المستأجر'] || property['اسم المستأجر'].toString().trim() === '') {
            emptyUnits++;
            return;
        }

        // حساب المستأجرين (عقود فريدة)
        const contractKey = property['رقم العقد'];
        if (contractKey && contractKey.toString().trim() !== '' && !uniqueContracts[contractKey]) {
            uniqueContracts[contractKey] = true;
            tenants++;
        }
    });

    totalUnits = uniqueUnits.size;
    rentedUnits = totalUnits - emptyUnits;

    return {
        totalUnits,
        emptyUnits,
        tenants,
        rentedUnits,
        commercialUnits,
        residentialUnits,
        pendingUnits
    };
}

// عرض الإحصائيات - مع حساب ذكي للإجمالي
function renderTotals(data) {
    const container = document.getElementById('totalContainer');
    container.innerHTML = '';

    const today = new Date();
    let countEmpty = 0, countExpired = 0, countPending = 0, countActive = 0;
    let totalCommercial = 0, totalResidential = 0;
    let tenantsCount = 0;

    // تجميع العقود الفريدة حسب رقم العقد
    const uniqueContracts = {};
    // تجميع العقود الفريدة لحساب الحالات (عقد واحد = مستأجر واحد)
    const uniqueContractStatuses = {};

    data.forEach(property => {
        // للوحدات الفارغة
        if (!property['اسم المستأجر'] || property['اسم المستأجر'].toString().trim() === '') {
            countEmpty++;
            return;
        }

        // استخدم رقم العقد كمفتاح فريد
        const contractKey = property['رقم العقد'];

        // تأكد من وجود رقم عقد صحيح
        if (!contractKey || contractKey.toString().trim() === '') {
            return;
        }

        // حساب الحالات للعقود الفريدة فقط (عقد واحد = مستأجر واحد)
        if (!uniqueContractStatuses[contractKey]) {
            const status = calculateStatus(property);
            uniqueContractStatuses[contractKey] = status.final;

            if (status.final === 'فعال') {
                countActive++;
            } else if (status.final === 'منتهى') {
                countExpired++;
            } else if (status.final === 'على وشك') {
                countPending++;
            }
        }

        // إذا لم يتم معالجة هذا العقد من قبل
        if (!uniqueContracts[contractKey]) {
            uniqueContracts[contractKey] = true;

            // حساب عدد المستأجرين (جميع العقود بغض النظر عن الحالة)
            tenantsCount++;

            // حساب الإجمالي المالي فقط للعقود النشطة (فعال + على وشك)
            const status = calculateStatus(property);
            if (status.final === 'فعال' || status.final === 'على وشك') {
                const smartTotal = calculateSmartTotal(property);
                const totalAmount = smartTotal.amount;

                if (property['نوع العقد'] === 'ضريبي') {
                    totalCommercial += totalAmount;
                } else {
                    totalResidential += totalAmount;
                }
            }
        }
    });

    // حساب عدد الوحدات الفعلي (بدون تكرار)
    const uniqueUnits = new Set();
    data.forEach(property => {
        const unitKey = `${property['اسم العقار']}_${property['رقم  الوحدة ']}`;
        if (property['رقم  الوحدة '] && property['رقم  الوحدة '].toString().trim() !== '') {
            uniqueUnits.add(unitKey);
        }
    });

    const totalUnits = uniqueUnits.size;
    const activeCount = totalUnits - countEmpty;
    const taxableBase = totalCommercial / 1.15;
    const vat = taxableBase * 0.15;
    const afterTaxCommercial = taxableBase + vat;

    // تشخيص للتحقق من صحة الأرقام
    console.log('📊 تشخيص الإحصائيات:');
    console.log(`   عدد المستأجرين: ${tenantsCount}`);
    console.log(`   الفعال: ${countActive}`);
    console.log(`   على وشك: ${countPending}`);
    console.log(`   المنتهي: ${countExpired}`);
    console.log(`   المجموع: ${countActive + countPending + countExpired}`);
    console.log(`   الفرق: ${tenantsCount - (countActive + countPending + countExpired)}`);

    // إنشاء جدول إحصائيات المباني والأراضي للشاشات الكبيرة
    if (window.innerWidth > 900) {
        console.log('🏗️ إنشاء جدول إحصائيات المباني والأراضي للشاشات الكبيرة');
        console.log('📊 عدد البيانات المرسلة:', data.length);

        // حساب الإحصائيات حسب نوع العقار (مباني vs أراضي)
        const buildingStats = calculateCategoryStats(data, false); // مباني (تشمل حوش الآن)
        const landStats = calculateCategoryStats(data, true); // أراضي (أرض فقط)

        console.log('📊 إحصائيات المباني:', buildingStats);
        console.log('📊 إحصائيات الأراضي:', landStats);
        console.log('📊 إجمالي الوحدات:', buildingStats.totalUnits + landStats.totalUnits);

        // إنشاء جدول إحصائيات المباني والأراضي
        const buildingLandStatsCard = document.createElement('div');
        buildingLandStatsCard.className = 'total-card building-land-stats';
        buildingLandStatsCard.innerHTML = `
            <h3><i class="fas fa-chart-bar"></i> إحصائيات المباني والأراضي</h3>
            <div class="building-land-table-container">
                <table class="building-land-stats-table">
                    <thead>
                        <tr>
                            <th class="metric-header">المؤشر</th>
                            <th class="buildings-header">المباني</th>
                            <th class="lands-header">الأراضي</th>
                            <th class="total-header">الإجمالي</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="metric-label">عدد الوحدات</td>
                            <td class="buildings-value">${buildingStats.totalUnits}</td>
                            <td class="lands-value">${landStats.totalUnits}</td>
                            <td class="total-value">${buildingStats.totalUnits + landStats.totalUnits}</td>
                        </tr>
                        <tr>
                            <td class="metric-label">عدد الفارغة</td>
                            <td class="buildings-value">${buildingStats.emptyUnits}</td>
                            <td class="lands-value">${landStats.emptyUnits}</td>
                            <td class="total-value clickable-empty-units" style="cursor: pointer;">
                                <i class="fas fa-minus-circle" style="color: #28a745; margin-left: 5px;"></i> ${buildingStats.emptyUnits + landStats.emptyUnits}
                            </td>
                        </tr>
                        <tr>
                            <td class="metric-label">عدد المستأجرين</td>
                            <td class="buildings-value">${buildingStats.tenants}</td>
                            <td class="lands-value">${landStats.tenants}</td>
                            <td class="total-value">${buildingStats.tenants + landStats.tenants}</td>
                        </tr>
                        <tr>
                            <td class="metric-label">الوحدات المؤجرة</td>
                            <td class="buildings-value">${buildingStats.rentedUnits}</td>
                            <td class="lands-value">${landStats.rentedUnits}</td>
                            <td class="total-value">${buildingStats.rentedUnits + landStats.rentedUnits}</td>
                        </tr>
                        <tr>
                            <td class="metric-label">الوحدات الضريبية</td>
                            <td class="buildings-value">${buildingStats.commercialUnits}</td>
                            <td class="lands-value">${landStats.commercialUnits}</td>
                            <td class="total-value">${buildingStats.commercialUnits + landStats.commercialUnits}</td>
                        </tr>
                        <tr>
                            <td class="metric-label">الوحدات السكنية</td>
                            <td class="buildings-value">${buildingStats.residentialUnits}</td>
                            <td class="lands-value">${landStats.residentialUnits}</td>
                            <td class="total-value">${buildingStats.residentialUnits + landStats.residentialUnits}</td>
                        </tr>
                        ${(buildingStats.pendingUnits + landStats.pendingUnits) > 0 ? `
                        <tr>
                            <td class="metric-label">الوحدات الراكضة</td>
                            <td class="buildings-value">${buildingStats.pendingUnits}</td>
                            <td class="lands-value">${landStats.pendingUnits}</td>
                            <td class="total-value">${buildingStats.pendingUnits + landStats.pendingUnits}</td>
                        </tr>` : ''}
                    </tbody>
                </table>
            </div>
        `;
        container.appendChild(buildingLandStatsCard);

        // البطاقة الثانية: حالات العقود
        const statusCard = document.createElement('div');
        statusCard.className = 'total-card';
        statusCard.innerHTML = `
            <h3><i class="fas fa-chart-pie"></i> حالات العقود</h3>
            <div style="font-size: 11px; color: #6c757d; margin-bottom: 8px; text-align: center;">
                <i class="fas fa-info-circle"></i> العدد الحالي يشمل: الفعال + على وشك الانتهاء
            </div>
            <div class="stat-grid">
                <div class="stat-item">
                    <div class="stat-value" style="color: #28a745;">${countActive + countPending}</div>
                    <div class="stat-label">الحالي</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" style="color: #28a745;">${countActive}</div>
                    <div class="stat-label">الفعال</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" style="color: #fd7e14;">${countPending}</div>
                    <div class="stat-label">على وشك</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" style="color: #dc3545;">${countExpired}</div>
                    <div class="stat-label">المنتهي</div>
                </div>
            </div>
        `;
        container.appendChild(statusCard);

        // البطاقة الثالثة: الإجماليات المالية
        const financialCard = document.createElement('div');
        financialCard.className = 'total-card';
        financialCard.innerHTML = `
            <h3><i class="fas fa-money-bill-wave"></i> الإجماليات المالية</h3>
            <div style="font-size: 12px; color: #6c757d; margin-bottom: 10px; text-align: center;">
                <i class="fas fa-info-circle"></i> يشمل العقود الفعالة وعلى وشك الانتهاء فقط
            </div>
            <div class="stat-grid">
                <div class="stat-item">
                    <div class="stat-value" style="color: #2a4b9b;">${taxableBase.toLocaleString(undefined, {maximumFractionDigits:2})}</div>
                    <div class="stat-label">تجاري قبل الضريبة</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" style="color: #e46e6d;">${vat.toLocaleString(undefined, {maximumFractionDigits:2})}</div>
                    <div class="stat-label">ضريبة التجاري</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" style="color: #05940e;">${afterTaxCommercial.toLocaleString(undefined, {maximumFractionDigits:2})}</div>
                    <div class="stat-label">تجاري بعد الضريبة</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" style="color: #f59e42;">${totalResidential.toLocaleString(undefined, {maximumFractionDigits:2})}</div>
                    <div class="stat-label">إجمالي سكني</div>
                </div>
            </div>
        `;
        container.appendChild(financialCard);

        // ملاحظة: تم إزالة عرض معلومات الصك من البطاقات لتجنب التكرار
        // معلومات الصك تظهر فقط في قسم الإحصائيات
    } else {
        // للشاشات الصغيرة: استخدم التصميم القديم
        addTotalItem(container, 'عدد الوحدات', totalUnits, 'units-stat');
        addTotalItem(container, 'عدد المستأجرين', tenantsCount, 'tenants-stat');
        addTotalItem(container, 'عدد الوحدات الفارغة', `<i class=\"fas fa-minus-circle\" style=\"color:#28a745; margin-left: .1px;\"></i> ${countEmpty}`, 'empty-stat clickable-empty-units');
        addTotalItem(container, 'نشط (فعال + على وشك)', `<i class=\"fas fa-users\" style=\"color:#28a745;\"></i> ${countActive + countPending}`, 'current-stat');
        addTotalItem(container, 'الفعال', countActive, 'active-stat');
        addTotalItem(container, 'المنتهي', countExpired, 'expired-stat');
        addTotalItem(container, 'على وشك', countPending, 'pending-stat');
        addTotalItem(container, 'إجمالي تجاري قبل الضريبة', `<i class=\"fas fa-cash-register\" style=\"color:#2a4b9b;\"></i> ${taxableBase.toLocaleString(undefined, {maximumFractionDigits:2})} ريال`, 'taxable-base-stat');
        addTotalItem(container, 'ضريبة التجاري', `<i class=\"fas fa-receipt\" style=\"color:#e46e6d;\"></i> ${vat.toLocaleString(undefined, {maximumFractionDigits:2})} ريال`, 'vat-stat');
        addTotalItem(container, 'إجمالي تجاري بعد الضريبة', `<i class=\"fas fa-coins\" style=\"color:#05940e;\"></i> ${afterTaxCommercial.toLocaleString(undefined, {maximumFractionDigits:2})} ريال`, 'after-taxonly-stat');
        addTotalItem(container, 'إجمالي سكني', `<i class=\"fas fa-home\" style=\"color:#f59e42;\"></i> ${totalResidential.toLocaleString(undefined, {maximumFractionDigits:2})} ريال`, 'residential-stat');
    }
    // رقم الصك ومساحة الصك عند تحديد عقار (بدون شرط رقم العقد)
    const uniqueContractsList = {};
    data.forEach(property => {
        // تغيير الشرط: يكفي وجود اسم العقار فقط، لا نحتاج رقم عقد
        if (property['اسم العقار']) {
            // استخدام اسم العقار كمفتاح أساسي، مع رقم العقد إذا وُجد
            const contractKey = property['رقم العقد'] || 'no_contract';
            const key = `${contractKey}_${property['اسم العقار']}`;
            if (!uniqueContractsList[key]) uniqueContractsList[key] = property;
        }
    });
    const uniqueList = Object.values(uniqueContractsList);
    if (currentProperty) {
        const firstDeedNumber = uniqueList.find(p => p['رقم الصك'] && p['رقم الصك'].toString().trim() !== '');
        if (firstDeedNumber && firstDeedNumber['رقم الصك']) {
            addTotalItem(container, 'رقم الصك', `<i class=\"fas fa-file-alt\"></i> ${firstDeedNumber['رقم الصك']}`, 'deed-number-stat');
        }
        const firstDeedArea = uniqueList.find(p => p['مساحةالصك'] && !isNaN(parseFloat(p['مساحةالصك'])));
        if (firstDeedArea && firstDeedArea['مساحةالصك']) {
            addTotalItem(container, 'مساحة الصك', `<i class=\"fas fa-ruler-combined\"></i> ${parseFloat(firstDeedArea['مساحةالصك']).toLocaleString()} م²`, 'deed-area-stat');
        }
        // إضافة السجل العيني
        const firstSijil = uniqueList.find(p => p['السجل العيني '] && p['السجل العيني '].toString().trim() !== '');
        if (firstSijil && firstSijil['السجل العيني ']) {
            addTotalItem(container, 'السجل العيني', `<i class=\"fas fa-book\"></i> ${firstSijil['السجل العيني '].toString().trim()}`, 'deed-area-stat');
        }
    }
}

// تحديث عرض اسم العقار في القائمة الجانبية للجوالات
function updateMobilePropertyName() {
    console.log('🏢 تحديث عرض اسم العقار في القائمة الجانبية - currentProperty:', currentProperty, 'currentCountry:', currentCountry);
    console.log('📱 عرض النافذة:', window.innerWidth);

    // التأكد من أننا في شاشة جوال
    if (window.innerWidth > 900) {
        console.log('📱 ليس في وضع الجوال - إخفاء العنصر');
        const propertyHeaderContainer = document.getElementById('mobilePropertyHeader');
        if (propertyHeaderContainer) {
            propertyHeaderContainer.style.display = 'none';
        }
        return;
    }

    const propertyHeaderContainer = document.getElementById('mobilePropertyHeader');
    const propertyTextElement = document.getElementById('mobilePropertyText');

    if (!propertyHeaderContainer || !propertyTextElement) {
        console.warn('❌ لم يتم العثور على عناصر عرض اسم العقار');
        return;
    }

    // إظهار اسم العقار فقط عند اختيار عقار محدد
    if (currentProperty && currentProperty !== 'الكل' && currentProperty.trim() !== '') {
        // تحديد اسم المدينة
        const cityName = currentCountry && currentCountry !== 'الكل' ? currentCountry : 'جميع المدن';

        // تنسيق النص: "المدينة - العقار"
        const displayText = `${cityName} - ${currentProperty}`;

        console.log('✅ إظهار اسم العقار في القائمة الجانبية:', displayText);
        propertyTextElement.textContent = displayText;
        propertyHeaderContainer.style.display = 'flex';
        propertyHeaderContainer.style.visibility = 'visible';
        propertyHeaderContainer.style.opacity = '1';

        // إضافة تأثير الظهور
        propertyHeaderContainer.style.animation = 'slideInFromTop 0.4s ease-out';

        // تأكيد إضافي للظهور
        setTimeout(() => {
            propertyHeaderContainer.style.display = 'flex';
        }, 50);
    } else {
        console.log('❌ إخفاء اسم العقار - لا يوجد عقار محدد');
        propertyHeaderContainer.style.display = 'none';
        propertyHeaderContainer.style.visibility = 'hidden';
        propertyHeaderContainer.style.opacity = '0';
    }
}



// عرض الإحصائيات للجوال - مع حساب ذكي للإجمالي
function renderMobileTotals(data) {
    // تحديث اسم العقار أولاً
    updateMobilePropertyName();

    const container = document.getElementById('mobileTotals');
    container.innerHTML = '';

    // حساب نفس الإحصائيات كما في الشاشة الكبيرة
    let countEmpty = 0, countExpired = 0, countPending = 0, countActive = 0;
    let totalCommercial = 0, totalResidential = 0;
    let tenantsCount = 0;

    // تجميع العقود الفريدة
    const uniqueContracts = {};
    // تجميع العقود الفريدة لحساب الحالات (عقد واحد = مستأجر واحد)
    const uniqueContractStatuses = {};

    data.forEach(property => {
        if (!property['اسم المستأجر'] || property['اسم المستأجر'].toString().trim() === '') {
            countEmpty++;
            return;
        }

        // استخدم رقم العقد كمفتاح فريد
        const contractKey = property['رقم العقد'];

        // تأكد من وجود رقم عقد صحيح
        if (!contractKey || contractKey.toString().trim() === '') {
            return;
        }

        // حساب الحالات للعقود الفريدة فقط (عقد واحد = مستأجر واحد)
        if (!uniqueContractStatuses[contractKey]) {
            const status = calculateStatus(property);
            uniqueContractStatuses[contractKey] = status.final;

            if (status.final === 'فعال') {
                countActive++;
            } else if (status.final === 'منتهى') {
                countExpired++;
            } else if (status.final === 'على وشك') {
                countPending++;
            }
        }

        if (!uniqueContracts[contractKey]) {
            uniqueContracts[contractKey] = true;
            tenantsCount++;

            // حساب الإجمالي فقط للعقود الفعالة وعلى وشك الانتهاء (استبعاد المنتهية)
            const status = calculateStatus(property);
            if (status.final === 'فعال' || status.final === 'على وشك') {
                const smartTotal = calculateSmartTotal(property);
                const totalAmount = smartTotal.amount;

                if (property['نوع العقد'] === 'ضريبي') {
                    totalCommercial += totalAmount;
                } else {
                    totalResidential += totalAmount;
                }
            }
        }
    });

    // حساب عدد الوحدات الفعلي (بدون تكرار) للموبايل
    const uniqueUnits = new Set();
    data.forEach(property => {
        const unitKey = `${property['اسم العقار']}_${property['رقم  الوحدة ']}`;
        if (property['رقم  الوحدة '] && property['رقم  الوحدة '].toString().trim() !== '') {
            uniqueUnits.add(unitKey);
        }
    });

    const totalUnits = uniqueUnits.size;
    const activeCount = totalUnits - countEmpty;
    const taxableBase = totalCommercial / 1.15;
    const vat = taxableBase * 0.15;
    const afterTaxCommercial = taxableBase + vat;

    // 1. إحصائيات المباني والأراضي (الجزء الأول) - جدول من 4 أعمدة
    console.log('🏗️ إنشاء جدول إحصائيات المباني والأراضي للشاشات الصغيرة');
    console.log('📊 عدد البيانات المرسلة:', data.length);

    // حساب الإحصائيات حسب نوع العقار (مباني vs أراضي)
    const buildingStats = calculateCategoryStats(data, false); // مباني (تشمل حوش الآن)
    const landStats = calculateCategoryStats(data, true); // أراضي (أرض فقط)

    console.log('📊 إحصائيات المباني:', buildingStats);
    console.log('📊 إحصائيات الأراضي:', landStats);
    console.log('📊 إجمالي الوحدات:', buildingStats.totalUnits + landStats.totalUnits);

    // تحديد النص المناسب للعنوان
    let headerText = 'إحصائيات المباني والأراضي';
    if (currentCountry && currentCountry !== 'الكل') {
        if (currentProperty && currentProperty !== 'الكل') {
            headerText = `إحصائيات ${currentProperty} - ${currentCountry}`;
        } else {
            headerText = `إحصائيات ${currentCountry}`;
        }
    } else if (currentProperty && currentProperty !== 'الكل') {
        headerText = `إحصائيات ${currentProperty}`;
    }

    const unitsSection = document.createElement('div');
    unitsSection.className = 'mobile-stats-section units-section';
    unitsSection.innerHTML = `
        <div class="section-header">
            <h3><i class="fas fa-chart-bar"></i> ${headerText}</h3>
        </div>
        <div class="section-content">
            <div class="building-land-table-container">
                <table class="building-land-stats-table mobile-table">
                    <thead>
                        <tr>
                            <th class="metric-header">المؤشر</th>
                            <th class="buildings-header">المباني</th>
                            <th class="lands-header">الأراضي</th>
                            <th class="total-header">الإجمالي</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="metric-label">عدد الوحدات</td>
                            <td class="buildings-value">${buildingStats.totalUnits}</td>
                            <td class="lands-value">${landStats.totalUnits}</td>
                            <td class="total-value">${buildingStats.totalUnits + landStats.totalUnits}</td>
                        </tr>
                        <tr>
                            <td class="metric-label">عدد الفارغة</td>
                            <td class="buildings-value">${buildingStats.emptyUnits}</td>
                            <td class="lands-value">${landStats.emptyUnits}</td>
                            <td class="total-value clickable-empty-units" style="cursor: pointer;">
                                <i class="fas fa-minus-circle" style="color: #28a745; margin-left: 5px;"></i> ${buildingStats.emptyUnits + landStats.emptyUnits}
                            </td>
                        </tr>
                        <tr>
                            <td class="metric-label">عدد المستأجرين</td>
                            <td class="buildings-value">${buildingStats.tenants}</td>
                            <td class="lands-value">${landStats.tenants}</td>
                            <td class="total-value">${buildingStats.tenants + landStats.tenants}</td>
                        </tr>
                        <tr>
                            <td class="metric-label">الوحدات المؤجرة</td>
                            <td class="buildings-value">${buildingStats.rentedUnits}</td>
                            <td class="lands-value">${landStats.rentedUnits}</td>
                            <td class="total-value">${buildingStats.rentedUnits + landStats.rentedUnits}</td>
                        </tr>
                        <tr>
                            <td class="metric-label">الوحدات الضريبية</td>
                            <td class="buildings-value">${buildingStats.commercialUnits}</td>
                            <td class="lands-value">${landStats.commercialUnits}</td>
                            <td class="total-value">${buildingStats.commercialUnits + landStats.commercialUnits}</td>
                        </tr>
                        <tr>
                            <td class="metric-label">الوحدات السكنية</td>
                            <td class="buildings-value">${buildingStats.residentialUnits}</td>
                            <td class="lands-value">${landStats.residentialUnits}</td>
                            <td class="total-value">${buildingStats.residentialUnits + landStats.residentialUnits}</td>
                        </tr>
                        ${(buildingStats.pendingUnits + landStats.pendingUnits) > 0 ? `
                        <tr>
                            <td class="metric-label">الوحدات الراكضة</td>
                            <td class="buildings-value">${buildingStats.pendingUnits}</td>
                            <td class="lands-value">${landStats.pendingUnits}</td>
                            <td class="total-value">${buildingStats.pendingUnits + landStats.pendingUnits}</td>
                        </tr>` : ''}
                    </tbody>
                </table>
            </div>
        </div>
    `;
    container.appendChild(unitsSection);

    // إضافة خط فاصل
    const divider1 = document.createElement('div');
    divider1.className = 'mobile-stats-divider';
    container.appendChild(divider1);

    // 2. إحصائيات العقود (الجزء الثاني) - Grid من عمودين
    let contractsHeaderText = 'إحصائيات العقود';
    if (currentCountry && currentCountry !== 'الكل') {
        if (currentProperty && currentProperty !== 'الكل') {
            contractsHeaderText = `عقود ${currentProperty} - ${currentCountry}`;
        } else {
            contractsHeaderText = `عقود ${currentCountry}`;
        }
    } else if (currentProperty && currentProperty !== 'الكل') {
        contractsHeaderText = `عقود ${currentProperty}`;
    }

    const contractsSection = document.createElement('div');
    contractsSection.className = 'mobile-stats-section contracts-section';
    contractsSection.innerHTML = `
        <div class="section-header">
            <h3><i class="fas fa-file-contract"></i> ${contractsHeaderText}</h3>
        </div>
        <div class="section-content grid-two-columns">
            <div class="total-item current-stat">
                <span class="total-label">نشط (فعال + على وشك)</span>
                <span class="total-value"><i class="fas fa-users" style="color:#28a745;"></i> ${countActive + countPending}</span>
            </div>
            <div class="total-item active-stat">
                <span class="total-label">الفعال</span>
                <span class="total-value">${countActive}</span>
            </div>
            <div class="total-item pending-stat">
                <span class="total-label">على وشك</span>
                <span class="total-value">${countPending}</span>
            </div>
            <div class="total-item expired-stat">
                <span class="total-label">المنتهي</span>
                <span class="total-value">${countExpired}</span>
            </div>
        </div>
    `;
    container.appendChild(contractsSection);

    // إضافة خط فاصل
    const divider2 = document.createElement('div');
    divider2.className = 'mobile-stats-divider';
    container.appendChild(divider2);

    // 3. الإحصائيات المالية (الجزء الثالث) - Grid من عمودين
    let financialHeaderText = 'الإحصائيات المالية';
    if (currentCountry && currentCountry !== 'الكل') {
        if (currentProperty && currentProperty !== 'الكل') {
            financialHeaderText = `الماليات - ${currentProperty} - ${currentCountry}`;
        } else {
            financialHeaderText = `الماليات - ${currentCountry}`;
        }
    } else if (currentProperty && currentProperty !== 'الكل') {
        financialHeaderText = `الماليات - ${currentProperty}`;
    }

    const financialSection = document.createElement('div');
    financialSection.className = 'mobile-stats-section financial-section';
    financialSection.innerHTML = `
        <div class="section-header">
            <h3><i class="fas fa-money-bill-wave"></i> ${financialHeaderText}</h3>
        </div>
        <div class="section-content grid-two-columns">
            <div class="total-item taxable-base-stat">
                <span class="total-label">إجمالي تجاري قبل الضريبة</span>
                <span class="total-value"><i class="fas fa-cash-register" style="color:#2a4b9b;"></i> ${taxableBase.toLocaleString(undefined, {maximumFractionDigits:2})} ريال</span>
            </div>
            <div class="total-item vat-stat">
                <span class="total-label">ضريبة التجاري</span>
                <span class="total-value"><i class="fas fa-receipt" style="color:#e46e6d;"></i> ${vat.toLocaleString(undefined, {maximumFractionDigits:2})} ريال</span>
            </div>
            <div class="total-item after-taxonly-stat">
                <span class="total-label">إجمالي تجاري بعد الضريبة</span>
                <span class="total-value"><i class="fas fa-coins" style="color:#05940e;"></i> ${afterTaxCommercial.toLocaleString(undefined, {maximumFractionDigits:2})} ريال</span>
            </div>
            <div class="total-item residential-stat">
                <span class="total-label">إجمالي سكني</span>
                <span class="total-value"><i class="fas fa-home" style="color:#f59e42;"></i> ${totalResidential.toLocaleString(undefined, {maximumFractionDigits:2})} ريال</span>
            </div>
        </div>
    `;
    container.appendChild(financialSection);

    // إضافة خط فاصل
    const divider3 = document.createElement('div');
    divider3.className = 'mobile-stats-divider';
    container.appendChild(divider3);

    // 4. معلومات الصكوك (الجزء الرابع)
    // إضافة معلومات الصك للشاشات الكبيرة دائماً، وللجوال عند اختيار عقار محدد
    const shouldShowDeedInfo = !isMobileDevice() || currentProperty;

    console.log(`📱 معلومات الصك - الجهاز: ${isMobileDevice() ? 'جوال' : 'شاشة كبيرة'}, العقار المختار: ${currentProperty || 'لا يوجد'}, سيتم العرض: ${shouldShowDeedInfo}`);

    if (shouldShowDeedInfo) {
        // جمع البيانات الفريدة للصكوك (بدون شرط رقم العقد)
        const uniqueContractsList = {};
        data.forEach(property => {
            // تغيير الشرط: يكفي وجود اسم العقار فقط، لا نحتاج رقم عقد
            if (property['اسم العقار']) {
                // استخدام اسم العقار كمفتاح أساسي، مع رقم العقد إذا وُجد
                const contractKey = property['رقم العقد'] || 'no_contract';
                const key = `${contractKey}_${property['اسم العقار']}`;
                if (!uniqueContractsList[key]) uniqueContractsList[key] = property;
            }
        });
        const uniqueList = Object.values(uniqueContractsList);

        // البحث عن معلومات الصك
        const firstDeedNumber = uniqueList.find(p => p['رقم الصك'] && p['رقم الصك'].toString().trim() !== '');
        const firstDeedArea = uniqueList.find(p => p['مساحةالصك'] && !isNaN(parseFloat(p['مساحةالصك'])));
        const firstSijil = uniqueList.find(p => p['السجل العيني '] && p['السجل العيني '].toString().trim() !== '');

        // إنشاء قسم الصكوك فقط إذا وُجدت معلومات
        if (firstDeedNumber || firstDeedArea || firstSijil) {
            const deedsSection = document.createElement('div');
            deedsSection.className = 'mobile-stats-section deeds-section';

            let deedsContent = `
                <div class="section-header">
                    <h3><i class="fas fa-file-alt"></i> معلومات الصكوك</h3>
                </div>
                <div class="section-content grid-two-columns">
            `;

            // إضافة رقم الصك إذا وُجد
            if (firstDeedNumber && firstDeedNumber['رقم الصك']) {
                deedsContent += `
                    <div class="total-item deed-number-stat">
                        <span class="total-label">رقم الصك</span>
                        <span class="total-value"><i class="fas fa-file-contract" style="color:#dc3545;"></i> ${firstDeedNumber['رقم الصك']}</span>
                    </div>
                `;
            }

            // إضافة مساحة الصك إذا وُجدت
            if (firstDeedArea && firstDeedArea['مساحةالصك']) {
                deedsContent += `
                    <div class="total-item deed-area-stat">
                        <span class="total-label">مساحة الصك</span>
                        <span class="total-value"><i class="fas fa-ruler-combined" style="color:#fd7e14;"></i> ${parseFloat(firstDeedArea['مساحةالصك']).toLocaleString()} م²</span>
                    </div>
                `;
            }

            // إضافة السجل العيني إذا وُجد
            if (firstSijil && firstSijil['السجل العيني ']) {
                deedsContent += `
                    <div class="total-item registry-stat">
                        <span class="total-label">السجل العيني</span>
                        <span class="total-value"><i class="fas fa-clipboard-list" style="color:#28a745;"></i> ${firstSijil['السجل العيني '].toString().trim()}</span>
                    </div>
                `;
            }

            deedsContent += `
                </div>
            `;

            deedsSection.innerHTML = deedsContent;
            container.appendChild(deedsSection);
        }
    }

    // ملاحظة: في الجوال، معلومات الصك تظهر فقط عند تحديد عقار محدد
}

// إضافة عنصر إحصائي
function addTotalItem(container, label, value, extraClass = '') {
    const item = document.createElement('div');
    item.className = 'total-item' + (extraClass ? ' ' + extraClass : '');
    item.innerHTML = `<span class="total-label">${label}:</span> <span class="total-value">${value}</span>`;
    container.appendChild(item);
}

// حساب حالة العقار
function parseDate(dateStr) {
    if (!dateStr) return null;

    // تحويل إلى نص وتنظيف
    dateStr = String(dateStr).trim();

    // إزالة أي نص إضافي (مثل النص العربي)
    let datePart = dateStr;

    // إذا كان التاريخ يحتوي على وقت (YYYY-MM-DD HH:MM:SS)، أخذ الجزء الخاص بالتاريخ فقط
    if (dateStr.match(/^\d{4}-\d{1,2}-\d{1,2}\s+\d{1,2}:\d{1,2}:\d{1,2}$/)) {
        datePart = dateStr.split(' ')[0];
    } else {
        // إزالة أي نص إضافي آخر
        datePart = dateStr.split(' ')[0];
        if (datePart.includes('(')) {
            datePart = datePart.split('(')[0].trim();
        }
    }

    let parts = datePart.includes('/') ? datePart.split('/') : datePart.split('-');

    if (parts.length !== 3) return null;

    let day, month, year;

    // إذا كان أول جزء 4 أرقام فهو السنة (YYYY-MM-DD)
    if (parts[0].length === 4) {
        year = parseInt(parts[0]);
        month = parseInt(parts[1]);
        day = parseInt(parts[2]);
    } else {
        // تنسيق DD/MM/YYYY أو DD-MM-YYYY
        day = parseInt(parts[0]);
        month = parseInt(parts[1]);
        year = parseInt(parts[2]);
    }

    // التحقق من صحة التاريخ
    if (isNaN(day) || isNaN(month) || isNaN(year) ||
        day < 1 || day > 31 ||
        month < 1 || month > 12 ||
        year < 1900 || year > 2100) {
        console.warn(`تاريخ غير صحيح في parseDate: ${dateStr}`);
        return null;
    }

    // إنشاء كائن التاريخ مع تجنب timezone issues باستخدام منتصف النهار
    const testDate = new Date(year, month - 1, day, 12, 0, 0);

    // التحقق من أن التاريخ المنشأ يطابق المدخلات (للتأكد من عدم وجود تواريخ مثل 31 فبراير)
    if (testDate.getFullYear() !== year || testDate.getMonth() !== (month - 1) || testDate.getDate() !== day) {
        console.warn(`تاريخ غير صالح في parseDate: ${dateStr}`);
        return null;
    }

    return testDate;
}

function isSameDate(d1, d2) {
    return d1 && d2 &&
        d1.getFullYear() === d2.getFullYear() &&
        d1.getMonth() === d2.getMonth() &&
        d1.getDate() === d2.getDate();
}

function calculateStatus(property) {
    // حساب عدد الأقساط الفعلي من جميع الأقساط الموجودة
    let actualInstallmentCount = 0;
    const propertyName = property['اسم العقار'] || 'غير محدد';

    for (let i = 1; i <= 10; i++) {
        const dateKey = i === 1 ? 'تاريخ القسط الاول' :
                       i === 2 ? 'تاريخ القسط الثاني' :
                       `تاريخ القسط ${getArabicNumber(i)}`;
        const amountKey = i === 1 ? 'مبلغ القسط الاول' :
                         i === 2 ? 'مبلغ القسط الثاني' :
                         `مبلغ القسط ${getArabicNumber(i)}`;

        if (property[dateKey] || property[amountKey]) {
            actualInstallmentCount = i; // نحفظ أعلى رقم قسط موجود
            console.log(`📊 ${propertyName}: وجد قسط رقم ${i} (${dateKey}: ${property[dateKey]}, ${amountKey}: ${property[amountKey]})`);
        }
    }

    // تحديث عدد الأقساط إذا كان هناك أقساط فعلية
    if (actualInstallmentCount > 0) {
        const oldCount = property['عدد الاقساط'];
        property['عدد الاقساط'] = actualInstallmentCount;
        console.log(`✅ ${propertyName}: تم تحديث عدد الأقساط من ${oldCount} إلى ${actualInstallmentCount}`);
    } else {
        console.log(`⚠️ ${propertyName}: لا توجد أقساط`);
    }

    if (!property['اسم المستأجر'] || !property['المالك']) {
        return { final: 'فارغ', display: 'فارغ', isInstallmentEnded: false };
    }

    const today = new Date();

    // أولاً: التحقق من تاريخ نهاية القسط (سواء كان هناك أقساط متبقية أم لا)
    if (property['تاريخ نهاية القسط']) {
        const installmentEndDate = parseDate(property['تاريخ نهاية القسط']);
        if (installmentEndDate) {
            const diffDays = Math.floor((installmentEndDate - today) / (1000 * 60 * 60 * 24));
            const remainingInstallments = property['عدد الاقساط المتبقية'] ? Number(property['عدد الاقساط المتبقية']) : 0;

            if (diffDays < 0) {
                // منتهي - لون موف
                if (remainingInstallments > 0) {
                    return {
                        final: 'منتهى',
                        display: `أقساط منتهية منذ ${Math.abs(diffDays)} يوم <span class="need-more-installments">بحاجة لإضافة باقي الأقساط (${remainingInstallments})</span>`,
                        isInstallmentEnded: true
                    };
                } else {
                    return {
                        final: 'منتهى',
                        display: `أقساط منتهية منذ ${Math.abs(diffDays)} يوم`,
                        isInstallmentEnded: true
                    };
                }
            } else if (diffDays <= 60) {
                // على وشك - تدرج برتقالي/أزرق
                if (remainingInstallments > 0) {
                    return {
                        final: 'على وشك',
                        display: `أقساط على وشك الانتهاء بعد ${diffDays} يوم (متبقي ${remainingInstallments} أقساط)`,
                        isInstallmentEnded: false,
                        isPending: true
                    };
                } else {
                    return {
                        final: 'على وشك',
                        display: `أقساط على وشك الانتهاء بعد ${diffDays} يوم`,
                        isInstallmentEnded: false,
                        isPending: true
                    };
                }
            } else {
                // فعال
                if (remainingInstallments > 0) {
                    return {
                        final: 'فعال',
                        display: `فعال (متبقي ${remainingInstallments} أقساط)`,
                        isInstallmentEnded: false
                    };
                } else {
                    return {
                        final: 'فعال',
                        display: 'فعال',
                        isInstallmentEnded: false
                    };
                }
            }
        }
    }

    // إذا لم يوجد أقساط متبقية أو كانت صفر، استخدم تاريخ النهاية
    if (property['تاريخ النهاية']) {
        const contractDate = parseDate(property['تاريخ النهاية']);
        if (contractDate) {
            const diffDays = Math.floor((contractDate - today) / (1000 * 60 * 60 * 24));
            if (diffDays < 0) {
                return { final: 'منتهى', display: `منتهي منذ ${Math.abs(diffDays)} يوم`, isInstallmentEnded: false };
            } else if (diffDays <= 60) {
                return { final: 'على وشك', display: `سينتهي بعد ${diffDays} يوم`, isInstallmentEnded: false };
            } else {
                return { final: 'فعال', display: 'فعال', isInstallmentEnded: false };
            }
        }
    }

    // استخدام الحالة المخزنة إذا كانت موجودة
    if (property['الحالة النهائية'] && property['الحالة الجديدة']) {
        let isInstallmentEnded = property['isInstallmentEnded'] || false;
        return {
            final: property['الحالة النهائية'],
            display: property['الحالة الجديدة'],
            isInstallmentEnded: isInstallmentEnded
        };
    }

    return { final: '', display: '', isInstallmentEnded: false };
}

// عرض البيانات في جدول
function renderTable(data) {
    const container = document.getElementById('content');
    if (data.length === 0) {
        container.innerHTML = '<div style="text-align: center; padding: 2rem;">لا توجد بيانات</div>';
        return;
    }

    // تجميع البيانات حسب رقم العقد واسم العقار
    const groupedData = {};
    data.forEach(property => {
        const key = `${property['رقم العقد']}_${property['اسم العقار']}`;
        if (!groupedData[key]) {
            groupedData[key] = {
                ...property,
                units: [property['رقم  الوحدة ']],
                meters: [property['رقم حساب الكهرباء']], // إضافة مصفوفة لأرقام العدادات
                totalUnits: 1,
                الاجمالى: property['الاجمالى'],
                totalArea: parseFloat(property['المساحة']) || 0
            };
        } else {
            groupedData[key].units.push(property['رقم  الوحدة ']);
            // إضافة رقم العداد إذا كان موجوداً ولم يكن مكرراً
            if (property['رقم حساب الكهرباء'] && !groupedData[key].meters.includes(property['رقم حساب الكهرباء'])) {
                groupedData[key].meters.push(property['رقم حساب الكهرباء']);
            }
            groupedData[key].totalUnits++;
            groupedData[key].totalArea += parseFloat(property['المساحة']) || 0;
        }
    });

    let html = '<div class="table-container"><table>';
    const orderedFields = [
        'رقم  الوحدة ',
        'اسم العقار',
        'المدينة',
        'رقم الصك',
        'المساحة',
        'الارتفاع',
        'رقم حساب الكهرباء',
        'اسم المستأجر',
        'رقم جوال المستأجر',
        'رقم جوال إضافي',
        'رقم العقد',
        'نوع العقد',
        'تاريخ البداية',
        'تاريخ النهاية',
        'تاريخ نهاية القسط',
        'عدد الاقساط المتبقية', // إضافة هذا السطر
        'المالك',
        'الحالة',
        'الاجمالى'
    ];
    // لاحظ أننا لم نضف 'مساحة الصك' إلى القائمة

    // رؤوس الأعمدة
    html += '<tr>';
    orderedFields.forEach(header => {
        html += `<th>${header}</th>`;
    });
    html += '<th>الإجراءات</th>';
    html += '</tr>';

    // ترتيب العقود حسب اسم العقار أو رقم العقد
    let groupedOrder = Object.keys(groupedData).sort((a, b) => {
        // ترتيب حسب اسم العقار ثم رقم العقد
        const [contractA, nameA] = a.split('_');
        const [contractB, nameB] = b.split('_');
        if (nameA === nameB) {
            return contractA.localeCompare(contractB, 'ar', {numeric: true});
        }
        return nameA.localeCompare(nameB, 'ar', {numeric: true});
    });

    // تطبيق الترتيب العكسي إذا كان مفعلاً
    if (isReverseOrder) {
        groupedOrder = groupedOrder.reverse();
    }

    groupedOrder.forEach(key => {
        const property = groupedData[key];
        // رتب الوحدات داخل البطاقة
        property.units = property.units.filter(Boolean).sort((a, b) => a.localeCompare(b, 'ar', {numeric: true}));
        const status = calculateStatus(property);
        let statusClass = '';
        if (status.isInstallmentEnded) statusClass = 'installment-ended-status';
        else if (status.final === 'فعال') statusClass = 'active-status';
        else if (status.final === 'منتهى') statusClass = 'expired-status';
        else if (status.final === 'على وشك') statusClass = 'pending-status';
        else if (status.final === 'فارغ') statusClass = 'empty-status';

        html += '<tr>';
        orderedFields.forEach(field => {
            if (field === 'رقم  الوحدة ') {
                const unitsDisplay = property.units.filter(Boolean).map(unit => 
                    `<span class="unit-link" onclick="showUnitDetails('${unit}', '${property['اسم العقار']}', '${property['رقم العقد']}')">${unit}</span>`
                ).join(' , ') +
                (property.totalUnits > 1 ? `<span class="units-count"> (${property.totalUnits} وحدات)</span>` : '');
                html += `<td>${unitsDisplay}</td>`;
            } else if (field === 'رقم حساب الكهرباء') {
                const metersDisplay = property.meters.filter(Boolean).map(meter => 
                    `<span class="meter-link" onclick="showMeterDetails('${meter}', '${property['اسم العقار']}', '${property['رقم العقد']}')">${meter}</span>`
                ).join(' , ') +
                (property.meters.length > 1 ? `<span class="meters-count">(${property.meters.length} عدادات)</span>` : '');
                html += `<td>${metersDisplay}</td>`;
            } else if (field === 'المساحة') {
                html += `<td>${property.totalArea ? property.totalArea.toLocaleString() + ' م²' : ''}</td>`;
            } else if (field === 'تاريخ البداية') {
                html += `<td>${formatArabicDate(property[field])}</td>`;
            } else if (field === 'تاريخ النهاية') {
                html += `<td>${formatArabicDate(property[field])}</td>`;
            } else if (field === 'تاريخ نهاية القسط') {
                html += `<td>${formatArabicDate(property[field])}</td>`;
            } else if (field === 'الحالة') {
                html += `<td class="${statusClass}">${status.display || ''}</td>`;
            } else if (field === 'الاجمالى') {
                const totalData = formatTotalWithNote(property);
                if (property['نوع العقد'] === 'ضريبي') {
                    html += `<td onclick="showTaxDetails(${totalData.amount}, '${property['نوع العقد']}')" style="cursor: pointer;">
                        <div class="total-display">
                            <span class="total-amount">${totalData.display}</span>
                            <small class="total-note">${totalData.note}</small>
                        </div>
                        <i class="fas fa-info-circle" style="margin-right: 5px; color: #2a4b9b;"></i>
                    </td>`;
                } else {
                    html += `<td onclick="showTaxDetails(${totalData.amount}, '${property['نوع العقد']}')" style="cursor: pointer;">
                        <div class="total-display">
                            <span class="total-amount">${totalData.display}</span>
                            <small class="total-note">${totalData.note}</small>
                        </div>
                    </td>`;
                }
            } else if (field === 'عدد الاقساط') {
                if (property['عدد الاقساط']) {
                    const status = calculateStatus(property);
                    const installmentClass = status.isInstallmentEnded ? 'installment-ended' :
                                            status.final === 'فعال' ? 'active' :
                                            status.final === 'منتهى' ? 'expired' :
                                            status.final === 'على وشك' ? 'pending' : 'empty';
                    html += `<td>
            <span class="installments-link installment-${installmentClass}" style="color:#2a4b9b;cursor:pointer;font-weight:bold;"
                onclick="showInstallmentsDetails('${property['رقم العقد']}', '${property['اسم العقار']}')">
                ${property['عدد الاقساط']}
            </span>
        </td>`;
                } else {
                    html += `<td></td>`;
                }
            } else if (field === 'عدد الاقساط الكلية') {
                html += `<td>${property['عدد الاقساط الكلية'] || ''}</td>`;
            } else if (field === 'عدد الاقساط المتبقي') {
                const remaining = property['عدد الاقساط الكلية'] && property['عدد الاقساط'] ? 
                    (parseInt(property['عدد الاقساط الكلية']) - parseInt(property['عدد الاقساط'])) : '';
                html += `<td>${remaining}</td>`;
            } else if (field === 'رقم جوال المستأجر' && property[field]) {
                html += `<td><a href="tel:${property[field]}" class="phone-link">${property[field]} <i class="fas fa-phone-alt"></i></a></td>`;
            } else if (field === 'رقم جوال إضافي' && property[field]) {
                html += `<td><a href="tel:${property[field]}" class="phone-link">${property[field]} <i class="fas fa-phone-alt"></i></a></td>`;
            } else if (field === 'موقع العقار' && property[field]) {
                html += `<td><a href="#" onclick="openLocation('${property[field]}'); return false;" class="location-link">الخريطة <i class="fas fa-map-marker-alt"></i></a></td>`;
            } else {
                html += `<td>${property[field] || ''}</td>`;
            }
        });
        
        // أزرار الإجراءات
        html += `<td class="table-actions-cell">
            <div class="table-actions-group">
                <button onclick="showPropertyDetailsByKey(${property['رقم العقد'] ? `'${property['رقم العقد']}', '${property['اسم العقار']}'` : `'', '${property['اسم العقار']}', '${property['رقم  الوحدة '] || ''}'`})" class="table-action-btn">
                    <i class="fas fa-eye"></i> عرض
                </button>
                <button onclick="showPrintOptions(${property['رقم العقد'] ? `'${property['رقم العقد']}', '${property['اسم العقار']}'` : `'', '${property['اسم العقار']}', '${property['رقم  الوحدة '] || ''}'`})" class="table-action-btn">
                    <i class="fas fa-print"></i> طباعة
                </button>
                ${property['موقع العقار'] ? `<button onclick="openLocation('${property['موقع العقار']}')" class="table-action-btn"><i class="fas fa-map-marker-alt"></i> موقع</button>` : ''}
            </div>
            <div class="table-actions-group">
                <button onclick="showCardAttachmentsModal('${property['المدينة']}', '${property['اسم العقار']}', '${property['رقم العقد'] || ''}', '${property['رقم  الوحدة '] || ''}')" class="table-action-btn attachment-btn">
                    <i class="fas fa-paperclip"></i> مرفقات
                </button>
                <button onclick="showCardEditModal('${property['رقم العقد'] || ''}', '${property['اسم العقار']}', '${property['رقم  الوحدة '] || ''}')" class="table-action-btn edit-btn">
                    <i class="fas fa-edit"></i> تحرير
                </button>
            </div>
        </td>`;
        html += '</tr>';
    });

    html += '</table></div>';
    container.innerHTML = html;
}

// عرض البيانات في بطاقات
function renderCards(data) {
    const container = document.getElementById('content');
    if (data.length === 0) {
        container.innerHTML = '<div style="text-align: center; padding: 2rem;">لا توجد بيانات</div>';
        return;
    }

    // إزالة التكرار: كل بطاقة برقم العقد واسم العقار أو رقم الوحدة إذا لم يوجد عقد
    const uniqueMap = new Map();
    data.forEach(property => {
        let key = '';
        if (property['رقم العقد'] && property['اسم العقار']) {
            key = `${property['رقم العقد']}_${property['اسم العقار']}`;
        } else if (property['رقم  الوحدة ']) {
            key = property['رقم  الوحدة '];
        }
        if (key && !uniqueMap.has(key)) {
            uniqueMap.set(key, property);
        }
    });
    const uniqueData = Array.from(uniqueMap.values());

    // ترتيب البطاقات حسب الإعداد المحدد
    const sortedData = isReverseOrder ? uniqueData.reverse() : uniqueData;

    let html = '<div class="cards-container">';
    sortedData.forEach(property => {
        const status = calculateStatus(property);
        let headerClass = '', badgeClass = 'badge-empty', badgeIcon = '', displayStatus = status.display;

        // التحقق من وجود اسم مستأجر بدون تاريخ بداية أو نهاية (حالة سماوية)
        const hasTenantName = property['اسم المستأجر'] && property['اسم المستأجر'].trim() !== '';
        const hasNoStartDate = !property['تاريخ البداية'] || property['تاريخ البداية'].trim() === '';
        const hasNoEndDate = !property['تاريخ النهاية'] || property['تاريخ النهاية'].trim() === '';
        const isSkyBlueCase = hasTenantName && (hasNoStartDate || hasNoEndDate);

        // إضافة حالة جديدة للقسط المنتهي مع استمرار العقد
        if (status.isInstallmentEnded) {
            headerClass = 'installment-ended-status';
            badgeClass = 'installment-ended-badge';
            badgeIcon = '<i class="fas fa-check-circle"></i>';
        } else if (isSkyBlueCase) {
            // حالة جديدة: اسم مستأجر موجود ولكن لا يوجد تاريخ - لون سماوي
            headerClass = 'sky-blue-status';
            badgeClass = 'sky-blue-badge';
            badgeIcon = '<i class="fas fa-user"></i>';
            displayStatus = 'مستأجر بدون تاريخ';
        } else {
            switch(status.final) {
                case 'فعال': headerClass = 'active-status'; badgeClass = 'active-badge'; badgeIcon = '<i class="fas fa-check-circle"></i>'; break;
                case 'منتهى': headerClass = 'expired-status'; badgeClass = 'expired-badge'; badgeIcon = '<i class="fas fa-times-circle"></i>'; break;
                case 'على وشك': headerClass = 'pending-status'; badgeClass = 'pending-badge'; badgeIcon = '<i class="fas fa-exclamation-circle"></i>'; break;
                case 'فارغ': headerClass = 'empty-status'; badgeClass = 'empty-badge'; badgeIcon = '<i class="fas fa-minus-circle"></i>'; break;
            }
        }
        let startColor = '', endColor = '';
        if (status.isInstallmentEnded) {
            startColor = 'background:#f3e5f5;color:#9c27b0;'; // لون موف للقسط المنتهي مع استمرار العقد
            endColor = 'background:#f3e5f5;color:#9c27b0;';
        } else {
            switch(status.final) {
                case 'فعال': startColor = 'background:#e8f7ef;color:#2a4b9b;'; endColor = 'background:#e8f7ef;color:#2a4b9b;'; break;
                case 'منتهى': startColor = 'background:#fbeee6;color:#e74c3c;'; endColor = 'background:#fbeee6;color:#e74c3c;'; break;
                case 'على وشك': startColor = 'background:#fffbe6;color:#f39c12;'; endColor = 'background:#fffbe6;color:#f39c12;'; break;
                default: startColor = 'background:#f6f6f6;color:#333;'; endColor = 'background:#f6f6f6;color:#333;';
            }
        }
        // اجمع كل الوحدات المرتبطة بنفس رقم العقد فقط
        let relatedUnits = [];
        let totalArea = 0;
        if (property['رقم العقد']) {
            const relatedProps = properties.filter(
                p => p['رقم العقد'] === property['رقم العقد']
            );
            relatedUnits = relatedProps.map(p => p['رقم  الوحدة ']).filter(Boolean);
            totalArea = relatedProps.reduce((sum, p) => sum + (parseFloat(p['المساحة']) || 0), 0);
        } else if (property['رقم  الوحدة ']) {
            relatedUnits = [property['رقم  الوحدة ']];
            totalArea = parseFloat(property['المساحة']) || 0;
        }
        relatedUnits = [...new Set(relatedUnits)].sort((a, b) => a.localeCompare(b, 'ar', {numeric: true}));

        // إنشاء معرف فريد للبطاقة
        const cardId = `card_${property['رقم العقد'] || 'no_contract'}_${property['اسم العقار']?.replace(/\s+/g, '_') || 'no_name'}_${Date.now()}`;

        html += `
        <div class="property-card mobile-expandable" id="${cardId}" data-expanded="false" onclick="toggleCardExpansion('${cardId}', event)">
            <div class="card-header ${headerClass}">
                <span>${property['اسم العقار'] || ''}</span>
                <span>${property['نوع العقد'] || ''}</span>
            </div>

            <!-- العرض المضغوط - يظهر في الوضع المطوي فقط -->
            <div class="card-compact-view">
                <div class="compact-row">
                    <span class="compact-label"><i class="fas fa-home"></i> رقم الوحدة:</span>
                    <span class="compact-value">
                        ${relatedUnits.map(unit =>
                            `<span class="unit-link" onclick="event.stopPropagation(); showUnitDetails('${unit}', '${property['اسم العقار']}', '${property['رقم العقد']}')">${unit}</span>`
                        ).join(' , ')}
                        ${relatedUnits.length > 1 ? `<span class="units-count">(${relatedUnits.length} وحدات)</span>` : ''}
                    </span>
                </div>
                <div class="compact-row">
                    <span class="compact-label"><i class="fas fa-user"></i> المستأجر:</span>
                    <span class="compact-value tenant-name-compact">${property['اسم المستأجر'] || 'فارغ'}</span>
                </div>
                <div class="compact-row">
                    <span class="compact-label"><i class="fas fa-info-circle"></i> الحالة:</span>
                    <span class="status-value ${badgeClass} compact-status">
                        ${badgeIcon} ${displayStatus || ''}
                    </span>
                </div>
            </div>

            <!-- التفاصيل الكاملة - تظهر في الوضع الموسع فقط -->
            <div class="card-full-view">
                <div class="card-body">
                <div class="card-row">
                    <span class="card-label">رقم الوحدة:</span>
                    <span class="card-value">
                        ${relatedUnits.map(unit =>
                            `<span class="unit-link" onclick="showUnitDetails('${unit}', '${property['اسم العقار']}', '${property['رقم العقد']}')">${unit}</span>`
                        ).join(' , ')}
                        ${relatedUnits.length > 1 ? `<span class="units-count">(${relatedUnits.length} وحدات)</span>` : ''}
                    </span>
                </div>
                <div class="card-row">
                    <span class="card-label">المساحة:</span>
                    <span class="card-value">${totalArea ? totalArea.toLocaleString() + ' م²' : ''}</span>
                </div>
                ${property['رقم حساب الكهرباء'] ? `
                <div class="card-row electric-meter-row">
                    <span class="card-label"><i class="fas fa-bolt"></i> رقم حساب الكهرباء:</span>
                    <span class="card-value">${property['رقم حساب الكهرباء']}</span>
                </div>` : ''}
                <div class="card-row tenant-name-row">
                    <span class="card-label"><i class="fas fa-user"></i> اسم المستأجر:</span>
                    <span class="card-value tenant-name-value">${property['اسم المستأجر'] || ''}</span>
                </div>
                ${property['رقم جوال المستأجر'] ? `
                <div class="card-row">
                    <span class="card-label"><i class="fas fa-phone"></i> رقم الجوال:</span>
                    <span class="card-value">
                        <a href="tel:${property['رقم جوال المستأجر']}" class="phone-link">
                            ${property['رقم جوال المستأجر']} <i class="fas fa-phone-alt"></i>
                        </a>
                    </span>
                </div>` : ''}
                ${property['رقم جوال إضافي'] ? `
                <div class="card-row">
                    <span class="card-label"><i class="fas fa-phone"></i> رقم جوال إضافي:</span>
                    <span class="card-value">
                        <a href="tel:${property['رقم جوال إضافي']}" class="phone-link">
                            ${property['رقم جوال إضافي']} <i class="fas fa-phone-alt"></i>
                        </a>
                    </span>
                </div>` : ''}
                <div class="card-row">
                    <span class="card-label">المالك:</span>
                    <span class="card-value">${property['المالك'] || ''}</span>
                </div>
                <div class="card-row">
                    <span class="card-label">رقم العقد:</span>
                    <span class="card-value">${property['رقم العقد'] || ''}</span>
                </div>
                ${property['نوع العقار'] ? `
                <div class="card-row property-type-row">
                    <span class="card-label"><i class="fas fa-tag"></i> نوع العقار:</span>
                    <span class="card-value property-type-badge property-type-${property['نوع العقار']?.toLowerCase()?.replace('أ', 'ا')}">${property['نوع العقار']}</span>
                </div>` : ''}
                <div class="card-row">
                    <span class="card-label"><i class="fas fa-sticky-note"></i> 📝 ملاحظات:</span>
                    <span class="card-value" style="color: #dc3545; font-weight: 500;">${property['ملاحظات الوحدة'] || ''}</span>
                </div>
                <div class="card-row">
                    <span class="card-label">تاريخ البداية:</span>
                    <span class="card-value" style="${startColor} padding:4px 8px; border-radius:4px;">
                        ${formatArabicDate(property['تاريخ البداية']) || ''}
                    </span>
                </div>
                <div class="card-row">
                    <span class="card-label">تاريخ النهاية:</span>
                    <span class="card-value" style="${endColor} padding:4px 8px; border-radius:4px;">
                        ${formatArabicDate(property['تاريخ النهاية']) || ''}
                    </span>
                </div>
                <div class="card-row">
                    <span class="card-label">تاريخ نهاية القسط:</span>
                    <span class="card-value" style="${endColor} padding:4px 8px; border-radius:4px;">
                        ${formatArabicDate(property['تاريخ نهاية القسط']) || ''}
                    </span>
                </div>
                <div class="card-row">
                    <span class="card-label">حالة الوحدة:</span>
                    <span class="status-value ${badgeClass} ${
                        status.final === 'على وشك' && property['عدد الاقساط المتبقية'] && Number(property['عدد الاقساط المتبقية']) > 0
                            ? 'pending-gradient'
                            : ''
                    }">
                        ${badgeIcon} ${displayStatus || ''}
                    </span>
                </div>
                <div class="card-row">
                    <span class="card-label">الاجمالى:</span>
                    <span class="card-value">
                        ${(() => {
                            const totalData = formatTotalWithNote(property);
                            return `
                                <div class="total-display-card">
                                    <span class="total-amount">${totalData.display}</span>
                                    <small class="total-note">${totalData.note}</small>
                                </div>
                            `;
                        })()}
                    </span>
                </div>
                ${property['عدد الاقساط'] && property['عدد الاقساط'] > 0 ? `
                <div class="card-row">
                    <span class="card-label">عدد الأقساط:</span>
                    <span class="card-value">
                        <span class="installments-count-badge installment-${status.isInstallmentEnded ? 'installment-ended' : status.final === 'فعال' ? 'active' : status.final === 'منتهى' ? 'expired' : status.final === 'على وشك' ? 'pending' : 'empty'}"
                              onclick="showInstallmentsDetails('${property['رقم العقد']}', '${property['اسم العقار']}')"
                              title="انقر لعرض تفاصيل جميع الأقساط">
                            <i class="fas fa-calendar-check"></i>
                            ${property['عدد الاقساط']} ${property['عدد الاقساط'] === 1 ? 'قسط' : 'أقساط'}
                        </span>
                    </span>
                </div>` : ''}
                ${property['عدد الاقساط المتبقية'] ? `
                <div class="card-row">
                    <span class="card-label">الأقساط المتبقية:</span>
                    <span class="card-value">
                        <span class="remaining-installments ${Number(property['عدد الاقساط المتبقية']) <= 2 ? 'warning' : ''}">
                            <i class="fas fa-clock"></i>
                            ${property['عدد الاقساط المتبقية']} ${Number(property['عدد الاقساط المتبقية']) === 1 ? 'قسط متبقي' : 'أقساط متبقية'}
                        </span>
                    </span>
                </div>` : ''}
                </div>
                <div class="card-footer">
                    <div class="card-actions-row">
                        <button onclick="event.stopPropagation(); showPropertyDetailsByKey(${property['رقم العقد'] ? `'${property['رقم العقد']}', '${property['اسم العقار']}'` : `'', '${property['اسم العقار']}', '${property['رقم  الوحدة '] || ''}'`})">
                            <i class="fas fa-eye"></i> عرض التفاصيل
                        </button>
                        <button onclick="event.stopPropagation(); showPrintOptions(${property['رقم العقد'] ? `'${property['رقم العقد']}', '${property['اسم العقار']}'` : `'', '${property['اسم العقار']}', '${property['رقم  الوحدة '] || ''}'`})">
                            <i class="fas fa-print"></i> طباعة
                        </button>
                        ${property['موقع العقار'] ?
                            `<button onclick="event.stopPropagation(); openLocation('${property['موقع العقار']}')" class="location-btn">
                                <i class="fas fa-map-marker-alt"></i> الموقع
                            </button>` :
                            ''}
                    </div>
                    <div class="card-actions-row">
                        <button onclick="event.stopPropagation(); showCardAttachmentsModal('${property['المدينة']}', '${property['اسم العقار']}', '${property['رقم العقد'] || ''}', '${property['رقم  الوحدة '] || ''}')" class="attachment-btn">
                            <i class="fas fa-paperclip"></i> المرفقات
                        </button>
                        <button onclick="event.stopPropagation(); showCardEditModal('${property['رقم العقد'] || ''}', '${property['اسم العقار']}', '${property['رقم  الوحدة '] || ''}')" class="edit-btn">
                            <i class="fas fa-edit"></i> تحرير
                        </button>
                    </div>
                </div>
            </div>
        </div>`;
    });
    html += '</div>';
    container.innerHTML = html;
}

// فتح موقع العقار
function openLocation(location) {
    // تحقق مما إذا كان الموقع يحتوي على رابط URL
    if (location.startsWith('http://') || location.startsWith('https://')) {
        window.open(location, '_blank');
    } else {
        // إذا لم يكن رابطًا، ابحث عنه في خرائط جوجل
        const googleMapsUrl = `https://www.google.com/maps/search/${encodeURIComponent(location)}`;
        window.open(googleMapsUrl, '_blank');
    }
}

// عرض تفاصيل العقار - نسخة محسنة تعمل في جميع الشاشات
function showPropertyDetails(index) {
    const property = properties[index];
    if (!property) return;

    const status = calculateStatus(property);
    let statusClass = '';
    let badgeIcon = '';

    if (status.isInstallmentEnded) {
        statusClass = 'installment-ended-status';
        badgeIcon = '<i class="fas fa-money-bill-wave"></i>';
    } else if (status.final === 'فعال') {
        statusClass = 'active-status';
        badgeIcon = '<i class="fas fa-check-circle"></i>';
    } else if (status.final === 'منتهى') {
        statusClass = 'expired-status';
        badgeIcon = '<i class="fas fa-times-circle"></i>';
    } else if (status.final === 'على وشك') {
        statusClass = 'pending-status';
        badgeIcon = '<i class="fas fa-exclamation-circle"></i>';
    }

    // تجميع الوحدات والمساحة لنفس العقد
    const contractKey = `${property['رقم العقد']}_${property['اسم العقار']}`;
    const related = properties.filter(
        p => `${p['رقم العقد']}_${p['اسم العقار']}` === contractKey
    );
    const allUnits = related.map(p => p['رقم  الوحدة ']).filter(Boolean);
    const totalArea = related.reduce((sum, p) => sum + (parseFloat(p['المساحة']) || 0), 0);

    // تحديد إذا كانت الشاشة صغيرة
    const isMobile = window.innerWidth <= 768;
    console.log('📱 حجم الشاشة:', window.innerWidth, 'هاتف؟', isMobile);
    console.log('🏢 بيانات العقار:', property['اسم العقار']);

    // إنشاء HTML مع تنسيقات مناسبة للشاشة
    let html = `<div class="modal-overlay" style="
        display: flex;
        z-index: 10000;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        align-items: ${isMobile ? 'flex-start' : 'center'};
        justify-content: center;
        padding: ${isMobile ? '5px' : '20px'};
        box-sizing: border-box;
        overflow-y: auto;
    ">
        <div class="modal-box property-details-modal" style="
            background: white;
            border-radius: 10px;
            max-width: ${isMobile ? 'none' : '600px'};
            width: ${isMobile ? '95%' : '100%'};
            min-height: ${isMobile ? '90vh' : '70vh'};
            max-height: ${isMobile ? '95vh' : '90vh'};
            position: relative;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            overflow: hidden;
            margin-top: ${isMobile ? '10px' : '20px'};
            margin-bottom: ${isMobile ? '10px' : '20px'};
            display: flex;
            flex-direction: column;
        ">`;

    html += `<div style="
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        padding: ${isMobile ? '15px' : '20px'};
        flex-shrink: 0;
    ">
        <h3 style="
            display: flex;
            align-items: center;
            gap: 10px;
            margin: 0;
            font-size: ${isMobile ? '1.1rem' : '1.2rem'};
        ">
            <i class="fas fa-building"></i>
            ${property['اسم العقار'] || 'تفاصيل العقار'}
            <span style="
                background: rgba(255,255,255,0.2);
                padding: 4px 8px;
                border-radius: 12px;
                font-size: 0.8rem;
            ">تفاصيل</span>
        </h3>
    </div>`;

    // بداية قسم التفاصيل
    html += `<div class="property-details" style="
        padding: ${isMobile ? '10px' : '15px'};
        min-height: ${isMobile ? '60vh' : '50vh'};
        max-height: ${isMobile ? '75vh' : '70vh'};
        overflow-y: auto;
        flex: 1;
        background: white;
        display: block !important;
        visibility: visible !important;
        position: relative;
        z-index: 1;
    ">`;

    // رقم الوحدة (جميع الوحدات)
    html += `
    <div style="display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #eee;">
        <span style="font-weight: 600; color: #333;">رقم الوحدة:</span>
        <span style="color: #007bff; font-weight: 500;">${allUnits.join(' , ')}${allUnits.length > 1 ? ` <span style="background: #e3f2fd; padding: 2px 6px; border-radius: 10px; font-size: 0.8rem;">(${allUnits.length} وحدات)</span>` : ''}</span>
    </div>
    <div style="display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #eee;">
        <span style="font-weight: 600; color: #333;">المساحة المجمعة:</span>
        <span style="color: #28a745; font-weight: 500;">${totalArea ? totalArea.toLocaleString() : '0'} م²</span>
    </div>
    `;

    // باقي الحقول (تجاهل الحقول التي تم عرضها بالفعل)
    const excludedFields = ['Column1', 'رقم  الوحدة ', 'المساحة', 'رقم الصك', 'السجل العيني ', 'مساحةالصك', 'الحالة النهائية', 'الحالة الجديدة'];
    Object.entries(property).forEach(([key, value]) => {
        if (excludedFields.includes(key)) return;
        if (!value && value !== 0) return;
        let displayValue = value;
        if (key === 'الاجمالى' && value) {
            displayValue = parseFloat(value).toLocaleString() + ' ريال';
        } else if (key === 'موقع العقار' && value) {
            let url = value;
            if (!url.startsWith('http')) {
                url = `https://www.google.com/maps/search/${encodeURIComponent(url)}`;
            }
            displayValue = `<a href="${url}" target="_blank" class="location-link">الخريطة <i class="fas fa-map-marker-alt"></i></a>`;
        }
        html += `
        <div style="display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #eee;">
            <span style="font-weight: 600; color: #333;">${key}:</span>
            <span style="color: #555; font-weight: 500; text-align: left; max-width: 60%;">${displayValue}</span>
        </div>
        `;
    });

    // إضافة الحالة بشكل مخصص
    let statusColor = '#6c757d';
    if (status.final === 'فعال') statusColor = '#28a745';
    else if (status.final === 'منتهى') statusColor = '#dc3545';
    else if (status.final === 'على وشك') statusColor = '#ffc107';

    html += `
    <div style="display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #eee;">
        <span style="font-weight: 600; color: #333;">الحالة:</span>
        <span style="color: ${statusColor}; font-weight: 600;">${badgeIcon} ${status.display || ''}</span>
    </div>
    `;

    // إضافة المبلغ الخاضع للضريبة وقيمة الضريبة
    if (property['الاجمالى']) {
        if (property['نوع العقد'] === 'ضريبي') {
            const baseAmount = property['الاجمالى'] / 1.15;
            const vatAmount = property['الاجمالى'] - baseAmount;
            html += `
            <div style="display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #eee;">
                <span style="font-weight: 600; color: #333;">المبلغ الخاضع للضريبة:</span>
                <span style="color: #007bff; font-weight: 600;">${parseFloat(baseAmount).toFixed(2).toLocaleString()} ريال</span>
            </div>
            <div style="display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #eee;">
                <span style="font-weight: 600; color: #333;">قيمة الضريبة (15%):</span>
                <span style="color: #ffc107; font-weight: 600;">${parseFloat(vatAmount).toFixed(2).toLocaleString()} ريال</span>
            </div>
            <div style="display: flex; justify-content: space-between; padding: 15px 0; border-bottom: 2px solid #007bff; background: #f8f9fa; margin: 10px -15px; padding-left: 15px; padding-right: 15px;">
                <span style="font-weight: 700; color: #333; font-size: 1.1rem;">الإجمالي شامل الضريبة:</span>
                <span style="color: #007bff; font-weight: 700; font-size: 1.1rem;">
                    ${parseFloat(property['الاجمالى']).toLocaleString()} ريال
                </span>
            </div>`;
        } else {
            html += `
            <div style="display: flex; justify-content: space-between; padding: 15px 0; border-bottom: 2px solid #007bff; background: #f8f9fa; margin: 10px -15px; padding-left: 15px; padding-right: 15px;">
                <span style="font-weight: 700; color: #333; font-size: 1.1rem;">الإجمالي:</span>
                <span style="color: #007bff; font-weight: 700; font-size: 1.1rem;">
                    ${parseFloat(property['الاجمالى']).toLocaleString()} ريال
                </span>
            </div>`;
        }
    }

    // عرض موقع العقار إذا كان متوفراً
    if (property['موقع العقار']) {
        html += `
        <div style="display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #eee;">
            <span style="font-weight: 600; color: #333;">موقع العقار:</span>
            <span style="text-align: left;">
                <a href="#" onclick="openLocation('${property['موقع العقار']}'); return false;"
                   style="color: #28a745; text-decoration: none; font-weight: 600; padding: 5px 10px; background: #e8f5e8; border-radius: 5px; display: inline-block;">
                   فتح الخريطة <i class="fas fa-map-marker-alt"></i></a>
            </span>
        </div>`;
    }

    html += `</div>`;

    // أزرار الإجراءات
    html += `
    <div class="modal-actions" style="
        margin-top: auto;
        padding: ${isMobile ? '10px' : '15px'};
        background: #f8f9fa;
        border-top: 1px solid #dee2e6;
        display: flex;
        gap: 10px;
        flex-shrink: 0;
    ">
        <button onclick="closePropertyDetailsModal();" class="modal-action-btn close-btn property-details-close-btn" id="propertyDetailsCloseBtn"
                style="
                    flex: 1;
                    background: linear-gradient(135deg, #6c757d, #495057);
                    color: white;
                    border: none;
                    padding: ${isMobile ? '10px 15px' : '12px 20px'};
                    border-radius: 8px;
                    font-size: ${isMobile ? '0.9rem' : '1rem'};
                    font-weight: 600;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    gap: 8px;
                ">
            <i class="fas fa-times"></i> إغلاق
        </button>
    </div>
    </div></div>`;

    console.log('📄 إضافة HTML إلى الصفحة...');
    document.body.insertAdjacentHTML('beforeend', html);
    console.log('✅ تم إضافة HTML بنجاح');

    // إضافة حدث إغلاق للمودال
    setTimeout(() => {
        const modalOverlay = document.querySelector('.modal-overlay:last-child');
        const detailsDiv = document.querySelector('.property-details:last-child');

        console.log('🔍 فحص العناصر:');
        console.log('- Modal Overlay:', modalOverlay ? 'موجود' : 'غير موجود');
        console.log('- Details Div:', detailsDiv ? 'موجود' : 'غير موجود');

        if (detailsDiv) {
            console.log('📏 أبعاد قسم التفاصيل:', {
                width: detailsDiv.offsetWidth,
                height: detailsDiv.offsetHeight,
                scrollHeight: detailsDiv.scrollHeight,
                innerHTML: detailsDiv.innerHTML.length + ' حرف'
            });

            // إضافة CSS إضافي للشاشات الصغيرة
            if (isMobile) {
                detailsDiv.style.display = 'block';
                detailsDiv.style.visibility = 'visible';
                detailsDiv.style.minHeight = '60vh';
                detailsDiv.style.maxHeight = '75vh';
                detailsDiv.style.overflowY = 'auto';
                console.log('📱 تم تطبيق تنسيقات الجوال على قسم التفاصيل');
            }
        } else {
            console.error('❌ قسم التفاصيل غير موجود - محاولة إصلاح...');
            // محاولة إعادة إنشاء قسم التفاصيل إذا لم يكن موجوداً
            const modalBox = document.querySelector('.property-details-modal:last-child');
            if (modalBox && !modalBox.querySelector('.property-details')) {
                console.log('🔧 إعادة إنشاء قسم التفاصيل...');
                location.reload(); // إعادة تحميل الصفحة كحل أخير
            }
        }

        if (modalOverlay) {
            modalOverlay.addEventListener('click', function(e) {
                if (e.target === this) {
                    closePropertyDetailsModal();
                }
            });
            console.log('✅ تم ربط أحداث الإغلاق');
        }
    }, 100);
}

// دالة جديدة لعرض الوحدات الفارغة فقط
function renderOnlyEmptyUnits() {
    const emptyUnits = properties.filter(property => !property['اسم المستأجر'] || property['اسم المستأجر'].toString().trim() === '');
    renderTotals(emptyUnits);
    renderMobileTotals(emptyUnits);
    if (currentView === 'table') {
        renderTable(emptyUnits);
    } else {
        renderCards(emptyUnits);
    }
    // تحديث عدادات القائمة المتنقلة
    updateMobileMenuCounts(emptyUnits);
}

// اجلب كل الأشهر والسنوات من تواريخ الأقساط
function getInstallmentMonthsAndYears() {
    const months = new Set();
    const years = new Set();
    properties.forEach(prop => {
        if (!prop['عدد الاقساط']) return;
        for (let i = 1; i <= Number(prop['عدد الاقساط']); i++) {
            let dateStr = prop[`تاريخ القسط ${i === 1 ? 'الاول' : `الثاني`}`] || prop[`تاريخ القسط ${i}`];
            if (!dateStr) continue;
            let datePart = dateStr.split(' ')[0];
            let parts = datePart.includes('/') ? datePart.split('/') : datePart.split('-');
            if (parts.length !== 3) continue;
            let day, month, year;
            // إذا كان أول جزء 4 أرقام فهو السنة
            if (parts[0].length === 4) {
                year = parts[0];
                month = parts[1];
                day = parts[2];
            } else {
                day = parts[0];
                month = parts[1];
                year = parts[2];
            }
            // إزالة الصفر الزائد
            month = parseInt(month, 10);
            const months = [
                '', 'يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو',
                'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'
            ];
            // التاريخ الرقمي + (التاريخ النصي)
            return `${datePart} (${parseInt(day,10)}/${months[month]}/${year})`;
        }
    });
}

// تنسيق التاريخ للهجة العربية - محسن لمنع التواريخ العشوائية
function formatArabicDate(dateStr) {
    if (!dateStr) return '';

    // حفظ التاريخ الأصلي
    const originalDateStr = dateStr;

    // دعم صيغ: yyyy-mm-dd, dd/mm/yyyy, dd-mm-yyyy, yyyy/mm/dd, مع أو بدون وقت
    let datePart = dateStr.split(' ')[0];
    let parts = datePart.includes('/') ? datePart.split('/') : datePart.split('-');

    if (parts.length !== 3) return originalDateStr;

    let day, month, year;

    // إذا كان أول جزء 4 أرقام فهو السنة
    if (parts[0].length === 4) {
        year = parseInt(parts[0]);
        month = parseInt(parts[1]);
        day = parseInt(parts[2]);
    } else {
        day = parseInt(parts[0]);
        month = parseInt(parts[1]);
        year = parseInt(parts[2]);
    }

    // التحقق من صحة التاريخ
    if (isNaN(year) || isNaN(month) || isNaN(day) ||
        year < 1900 || year > 2100 ||
        month < 1 || month > 12 ||
        day < 1 || day > 31) {
        console.warn(`تاريخ غير صحيح في formatArabicDate: ${originalDateStr}`);
        return originalDateStr; // إرجاع التاريخ الأصلي إذا كان غير صحيح
    }

    const months = [
        '', 'يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو',
        'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'
    ];

    // إنشاء التاريخ المنسق بصيغة dd/mm/yyyy
    const formattedDate = `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}/${year}`;

    // التاريخ الرقمي + (التاريخ النصي)
    return `${formattedDate} (${day}/${months[month]}/${year})`;
}

// عرض تفاصيل الأقساط
function showInstallmentsDetails(contractNumber, propertyName) {
    // ابحث عن أول عنصر يطابق رقم العقد واسم العقار
    const prop = properties.find(p => p['رقم العقد'] === contractNumber && p['اسم العقار'] === propertyName);
    if (!prop || !prop['عدد الاقساط']) return;

    // تحديد لون الحالة
    let status = 'default';
    const statusObj = calculateStatus(prop);
       if (statusObj.isInstallmentEnded) {
        status = 'installment-ended';
    } else if (prop['الحالة النهائية']) {
        if (prop['الحالة النهائية'] === 'فعال') status = 'active';
        else if (prop['الحالة النهائية'] === 'منتهى') status = 'expired';
        else if (prop['الحالة النهائية'] === 'على وشك') status = 'pending';
        else if (prop['الحالة النهائية'] === 'فارغ') status = 'empty';
    }

    // حساب جميع الوحدات والمساحة المجمعة لهذا العقد/العقار
    const related = properties.filter(
        p => p['رقم العقد'] === contractNumber && p['اسم العقار'] === propertyName
    );
    const allUnits = related.map(p => p['رقم  الوحدة ']).filter(Boolean);
    const totalArea = related.reduce((sum, p) => sum + (parseFloat(p['المساحة']) || 0), 0);

    let html = '<div class="modal-overlay" style="display:flex;"><div class="modal-box"><button class="close-modal" onclick="closeModal()">×</button>';
    html += `<h3>${property['اسم العقار'] || ''}</h3>`;
    html += '<div class="property-details">';

    // رقم  الوحدة (جميع الوحدات)
    html += `
    <div class="detail-row">
        <span class="detail-label">رقم الوحدة:</span>
        <span class="detail-value">${allUnits.join(' , ')}${allUnits.length > 1 ? ` <span class="units-count">(${allUnits.length} وحدات)</span>` : ''}</span>
    </div>
    <div class="detail-row">
        <span class="detail-label">المساحة المجمعة:</span>
        <span class="detail-value">${totalArea ? totalArea.toLocaleString() : '0'} م²</span>
    </div>
    `;

    // باقي الحقول (تم إزالة معلومات الصك من العرض العام في الجوال)
    const basicInfo = [
        { label: 'رقم العقد', key: 'رقم العقد' },
        { label: 'اسم المستأجر', key: 'اسم المستأجر' },
        { label: 'المالك', key: 'المالك' },
        { label: 'المدينة', key: 'المدينة' },
        { label: 'نوع العقد', key: 'نوع العقد' },
        { label: 'رقم حساب الكهرباء', key: 'رقم حساب الكهرباء' },
        { label: 'الارتفاع', key: 'الارتفاع' }
        // ملاحظة: تم إزالة 'رقم الصك' من العرض العام في الجوال
    ];

    basicInfo.forEach(info => {
        if (property[info.key]) {
            html += `
            <div class="detail-row">
                <span class="detail-label">${info.label}:</span>
                <span class="detail-value">${property[info.key]}</span>
            </div>`;
        }
    });

    // عرض التواريخ
    if (property['تاريخ البداية']) {
        html += `
        <div class="detail-row">
            <span class="detail-label">تاريخ البداية:</span>
            <span class="detail-value" style="color: #2a4b9b;">${property['تاريخ البداية']}</span>
        </div>`;
    }

    if (property['تاريخ النهاية']) {
        html += `
        <div class="detail-row">
            <span class="detail-label">تاريخ النهاية:</span>
            <span class="detail-value" style="color: #2a4b9b;">${property['تاريخ النهاية']}</span>
        </div>`;
    }

    // عرض الحالة
    const propertyStatus = calculateStatus(property);
    let statusClass = '';
    let badgeIcon = '';

    if (propertyStatus.isInstallmentEnded) {
        statusClass = 'installment-ended-status';
        badgeIcon = '<i class="fas fa-money-bill-wave"></i>';
    } else if (propertyStatus.final === 'فعال') {
        statusClass = 'active-status';
        badgeIcon = '<i class="fas fa-check-circle"></i>';
    } else if (propertyStatus.final === 'منتهى') {
        statusClass = 'expired-status';
        badgeIcon = '<i class="fas fa-times-circle"></i>';
    } else if (propertyStatus.final === 'على وشك') {
        statusClass = 'pending-status';
        badgeIcon = '<i class="fas fa-exclamation-circle"></i>';
    }

    html += `
    <div class="detail-row ${statusClass}">
        <span class="detail-label">الحالة:</span>
        <span class="detail-value">${badgeIcon} ${propertyStatus.display || ''}</span>
    </div>`;

    // إضافة المبلغ الخاضع للضريبة وقيمة الضريبة
    if (property['الاجمالى']) {
        if (property['نوع العقد'] === 'ضريبي') {
            const baseAmount = property['الاجمالى'] / 1.15;
            const vatAmount = property['الاجمالى'] - baseAmount;
            html += `
            <div class="detail-row">
                <span class="detail-label">المبلغ الخاضع للضريبة:</span>
                <span class="detail-value">${parseFloat(baseAmount).toFixed(2).toLocaleString()} ريال</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">قيمة الضريبة (15%):</span>
                <span class="detail-value">${parseFloat(vatAmount).toFixed(2).toLocaleString()} ريال</span>
            </div>
            <div class="detail-row" style="font-weight: bold;">
                <span class="detail-label">الإجمالي شامل الضريبة:</span>
                <span class="detail-value" style="color: #2a4b9b;">
                    ${parseFloat(property['الاجمالى']).toLocaleString()} ريال
                </span>
            </div>`;
        } else {
            html += `
            <div class="detail-row">
                <span class="detail-label">الإجمالي:</span>
                <span class="detail-value" style="color: #2a4b9b; font-weight: bold;">
                    ${parseFloat(property['الاجمالى']).toLocaleString()} ريال
                </span>
            </div>`;
        }
    }

    // عرض موقع العقار إذا كان متوفراً
    if (property['موقع العقار']) {
        html += `
        <div class="detail-row">
            <span class="detail-label">موقع العقار:</span>
            <span class="detail-value">
                <a href="#" onclick="openLocation('${property['موقع العقار']}'); return false;" 
                   class="location-link">فتح الخريطة <i class="fas fa-map-marker-alt"></i></a>
            </span>
        </div>`;
    }

    html += `</div>`;

    // أزرار الإجراءات
    html += `
    <div class="modal-actions">
        <button onclick="showPrintOptions('${property['رقم العقد']}', '${property['اسم العقار']}')" 
                class="modal-action-btn print-btn">
            <i class="fas fa-print"></i> طباعة
        </button>`;
            
    if (property['موقع العقار']) {
        html += `
            <button onclick="openLocation('${property['موقع العقار']}')" 
                    class="modal-action-btn location-btn">
                <i class="fas fa-map-marker-alt"></i> فتح الموقع
            </button>`;
    }
    
    html += `
        <button onclick="closeModal()" class="modal-action-btn close-btn">
            <i class="fas fa-times"></i> إغلاق
        </button>
    </div>
    </div></div>`;

    document.body.insertAdjacentHTML('beforeend', html);

    // إضافة مستمع لإغلاق المودال عند النقر خارجه
    document.querySelector('.modal-overlay:last-child').addEventListener('click', function(e) {
        if (e.target === this) closeModal();
    });
}

// نافذة كلمة المرور مع تأثير blur
document.addEventListener('DOMContentLoaded', function() {
    if (!sessionStorage.getItem('auth_ok')) {
        showPasswordModal();
    }
});



function checkPassword() {
    const input = document.getElementById('passwordInput');
    const errorDiv = document.getElementById('passwordError');
    if (input.value === 'sa12345') {
        sessionStorage.setItem('auth_ok', '1');
        document.getElementById('blur-overlay').remove();
        document.body.style.overflow = '';
    } else {
        errorDiv.textContent = 'كلمة المرور غير صحيحة';
        input.value = '';
        input.focus();
    }
}

// إغلاق المودال (التصميم السابق)
function closeModal() {
    // إعادة تفعيل التمرير في الخلفية
    document.body.style.overflow = '';
    document.body.style.position = '';
    document.body.style.width = '';
    document.body.style.height = '';
    document.documentElement.style.overflow = '';

    // حفظ تلقائي قبل الإغلاق إذا كان هناك نموذج تحرير نشط
    const activeForm = document.querySelector('.modal-overlay form');
    if (activeForm && typeof autoSaveInstallmentChanges === 'function') {
        autoSaveInstallmentChanges();
    }

    const modals = document.querySelectorAll('.modal-overlay');
    modals.forEach(modal => {
        modal.remove();
    });
}

// دالة للتحقق من وجود نافذة مفتوحة وإغلاقها أو فتح نافذة جديدة
function toggleModal(modalCheckFunction, modalOpenFunction) {
    // التحقق من وجود نافذة مفتوحة
    const existingModal = document.querySelector('.modal-overlay');

    if (existingModal) {
        // إذا كانت هناك نافذة مفتوحة، أغلقها
        closeModal();
        return false; // تم الإغلاق
    } else {
        // إذا لم تكن هناك نافذة مفتوحة، افتح النافذة الجديدة
        modalOpenFunction();
        return true; // تم الفتح
    }
}

// عرض فلتر الشهر مع آلية التبديل
function showMonthFilterModal() {
  // التحقق من وجود نافذة مفتوحة وإغلاقها إذا كانت موجودة
  const existingModal = document.querySelector('.modal-overlay');
  if (existingModal) {
    closeModal();
    return;
  }

  let html = `<div class="modal-overlay" style="display:flex; z-index: 10000;">
        <div class="modal-box month-filter-modal" style="max-width: 500px; max-height: 80vh; position: relative;">
            <h3 style="display: flex; align-items: center; gap: 10px; margin-bottom: 20px;">
                <i class="fas fa-calendar-alt" style="color: #007bff;"></i>
                فلتر الشهر
                <span class="badge" style="background: #007bff; color: white; padding: 4px 8px; border-radius: 12px; font-size: 0.8rem;">تاريخ</span>
            </h3>
            <div class="date-filter-container" style="max-height: 400px; overflow-y: auto; border: 1px solid #e9ecef; border-radius: 8px; padding: 15px; display: flex; flex-direction: column; gap: 15px;">
                <div style="display: flex; flex-direction: column; gap: 10px;">
                    <label style="font-weight: 600; color: #495057;">نوع التاريخ:</label>
                    <select id="filterTypeModal" class="date-filter-select" style="padding: 10px; border: 1px solid #e9ecef; border-radius: 6px; font-size: 1rem;">
                        <option value="">اختر نوع التاريخ</option>
                        <option value="start">تاريخ البداية</option>
                        <option value="end">تاريخ النهاية</option>
                    </select>
                </div>

                <div style="display: flex; flex-direction: column; gap: 10px;">
                    <label style="font-weight: 600; color: #495057;">اليوم:</label>
                    <select id="filterDayModal" class="date-filter-select" style="padding: 10px; border: 1px solid #e9ecef; border-radius: 6px; font-size: 1rem;">
                        <option value="">اختر اليوم</option>
                        ${Array.from({length: 31}, (_, i) => `<option value="${i+1}">${i+1}</option>`).join('')}
                    </select>
                </div>

                <div style="display: flex; flex-direction: column; gap: 10px;">
                    <label style="font-weight: 600; color: #495057;">الشهر:</label>
                    <select id="filterMonthModal" class="date-filter-select" style="padding: 10px; border: 1px solid #e9ecef; border-radius: 6px; font-size: 1rem;">
                        <option value="">اختر الشهر</option>
                        ${['يناير','فبراير','مارس','إبريل','مايو','يونيو','يوليو','أغسطس','سبتمبر','أكتوبر','نوفمبر','ديسمبر']
                          .map((m,i)=>`<option value="${i+1}">${m}</option>`).join('')}
                    </select>
                </div>

                <div style="display: flex; flex-direction: column; gap: 10px;">
                    <label style="font-weight: 600; color: #495057;">السنة:</label>
                    <select id="filterYearModal" class="date-filter-select" style="padding: 10px; border: 1px solid #e9ecef; border-radius: 6px; font-size: 1rem;">
                        <option value="">اختر السنة</option>
                        ${Array.from({length: 81}, (_, i) => `<option value="${2020+i}">${2020+i}</option>`).join('')}
                    </select>
                </div>

                <div style="display: flex; gap: 10px; justify-content: center; margin-top: 15px;">
                    <button onclick="applyMonthFilterModal()" class="apply-filter-btn" style="flex: 1; background: linear-gradient(135deg, #007bff, #0056b3); color: white; border: none; padding: 12px 20px; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; justify-content: center; gap: 8px;">
                        <i class="fas fa-check"></i> تطبيق
                    </button>
                    <button onclick="clearMonthFilterModal()" class="clear-filter-btn" style="flex: 1; background: linear-gradient(135deg, #dc3545, #c82333); color: white; border: none; padding: 12px 20px; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; justify-content: center; gap: 8px;">
                        <i class="fas fa-times"></i> مسح
                    </button>
                </div>
            </div>
            <div class="modal-actions" style="margin-top: 20px; display: flex; gap: 10px;">
                <button onclick="closeMonthFilterModal();" class="modal-action-btn close-btn month-filter-close-btn" id="monthFilterCloseBtn"
                        style="flex: 1; background: linear-gradient(135deg, #6c757d, #495057); color: white; border: none; padding: 12px 20px; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; justify-content: center; gap: 8px;">
                    <i class="fas fa-times"></i> إغلاق
                </button>
            </div>
        </div>
    </div>`;

  document.body.insertAdjacentHTML('beforeend', html);

  // تعبئة القيم الحالية إذا كانت موجودة
  document.getElementById('filterTypeModal').value = dateFilterType;
  document.getElementById('filterDayModal').value = dateFilterDay;
  document.getElementById('filterMonthModal').value = dateFilterMonth;
  document.getElementById('filterYearModal').value = dateFilterYear;

  // إضافة حدث إغلاق للمودال
  setTimeout(() => {
      const modalOverlay = document.querySelector('.modal-overlay:last-child');
      if (modalOverlay) {
          modalOverlay.addEventListener('click', function(e) {
              if (e.target === this) {
                  console.log('🔴 تم النقر خارج نافذة فلتر الشهر - إغلاق');
                  closeMonthFilterModal();
              }
          });
          console.log('✅ تم ربط الإغلاق عند النقر خارج نافذة فلتر الشهر');
      }
  }, 100);
}

// دالة إغلاق نافذة فلتر الشهر
function closeMonthFilterModal() {
    console.log('🔴 إغلاق نافذة فلتر الشهر...');
    const modal = document.querySelector('.month-filter-modal');
    if (modal) {
        const modalOverlay = modal.closest('.modal-overlay');
        if (modalOverlay) {
            modalOverlay.remove();
            console.log('✅ تم إغلاق نافذة فلتر الشهر');
        }
    }
}

function applyMonthFilterModal() {
  dateFilterType = document.getElementById('filterTypeModal').value;
  dateFilterDay = document.getElementById('filterDayModal').value;
  dateFilterMonth = document.getElementById('filterMonthModal').value;
  dateFilterYear = document.getElementById('filterYearModal').value;

  // تحديث activeFilters للفلاتر النشطة
  if (dateFilterMonth && dateFilterYear) {
    activeFilters.monthFilter = `${dateFilterMonth}/${dateFilterYear}`;
  } else if (dateFilterMonth) {
    activeFilters.monthFilter = `شهر ${dateFilterMonth}`;
  } else if (dateFilterYear) {
    activeFilters.monthFilter = `سنة ${dateFilterYear}`;
  } else {
    activeFilters.monthFilter = '';
  }

  closeMonthFilterModal();
  renderData();

  // تحديث عرض الفلاتر النشطة
  updateActiveFiltersDisplay();

  // تحديث حالة أزرار الفلاتر
  updateAllFilterButtonsState();
}

function clearMonthFilterModal() {
  dateFilterType = '';
  dateFilterDay = '';
  dateFilterMonth = '';
  dateFilterYear = '';

  // مسح فلتر الشهر من activeFilters
  activeFilters.monthFilter = '';

  closeMonthFilterModal();
  renderData();

  // تحديث عرض الفلاتر النشطة
  updateActiveFiltersDisplay();

  // تحديث حالة أزرار الفلاتر
  updateAllFilterButtonsState();
}
// نافذة فلتر نوع العقد مع آلية التبديل
function showContractTypeFilter() {
    // التحقق من وجود نافذة مفتوحة وإغلاقها إذا كانت موجودة
    const existingModal = document.querySelector('.modal-overlay');
    if (existingModal) {
        closeModal();
        return;
    }

    const contractTypes = ['ضريبي', 'سكني', 'راكض'];
    let html = `<div class="modal-overlay" style="display:flex; z-index: 10000;">
        <div class="modal-box contract-type-filter-modal" style="max-width: 500px; max-height: 80vh; position: relative;">
            <h3 style="display: flex; align-items: center; gap: 10px; margin-bottom: 20px;">
                <i class="fas fa-file-contract" style="color: #e83e8c;"></i>
                فلتر نوع العقد
                <span class="badge" style="background: #e83e8c; color: white; padding: 4px 8px; border-radius: 12px; font-size: 0.8rem;">${contractTypes.length + 1}</span>
            </h3>
            <div class="contract-type-filter" style="max-height: 300px; overflow-y: auto; border: 1px solid #e9ecef; border-radius: 8px; padding: 10px;">`;

    // إضافة خيار "الكل"
    const isAllActive = !contractTypeFilter;
    html += `
        <button onclick="if(contractTypeFilter) { toggleContractTypeFilter(contractTypeFilter); } closeContractTypeFilterModal();"
                class="contract-type-btn ${isAllActive ? 'active' : ''}"
                style="width: 100%; padding: 12px; margin: 8px 0; border-radius: 8px; cursor: pointer;
                       transition: all 0.3s ease; border: 1px solid #e9ecef;
                       background: ${isAllActive ? '#e83e8c' : 'white'}; color: ${isAllActive ? 'white' : '#495057'};
                       display: flex; align-items: center; justify-content: space-between;">
            <span style="font-weight: 700; font-size: 1.3rem;">الكل</span>
            ${isAllActive ? '<i class="fas fa-check" style="color: white;"></i>' : '<i class="fas fa-list" style="color: #e83e8c;"></i>'}
        </button>
    `;

    // إضافة باقي أنواع العقود
    contractTypes.forEach(type => {
        const isActive = contractTypeFilter === type;
        html += `
            <button onclick="toggleContractTypeFilter('${type}'); closeContractTypeFilterModal();"
                    class="contract-type-btn ${isActive ? 'active' : ''}"
                    style="width: 100%; padding: 12px; margin: 8px 0; border-radius: 8px; cursor: pointer;
                           transition: all 0.3s ease; border: 1px solid #e9ecef;
                           background: ${isActive ? '#e83e8c' : 'white'}; color: ${isActive ? 'white' : '#495057'};
                           display: flex; align-items: center; justify-content: space-between;">
                <span style="font-weight: 700; font-size: 1.3rem;">${type}</span>
                ${isActive ? '<i class="fas fa-check" style="color: white;"></i>' : '<i class="fas fa-file-contract" style="color: #e83e8c;"></i>'}
            </button>
        `;
    });

    html += `
            </div>
            <div class="modal-actions" style="margin-top: 20px; display: flex; gap: 10px;">
                <button onclick="closeContractTypeFilterModal();" class="modal-action-btn close-btn contract-type-filter-close-btn" id="contractTypeFilterCloseBtn"
                        style="flex: 1; background: linear-gradient(135deg, #6c757d, #495057); color: white; border: none; padding: 12px 20px; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; justify-content: center; gap: 8px;">
                    <i class="fas fa-times"></i> إغلاق
                </button>
            </div>
        </div>
    </div>`;

    document.body.insertAdjacentHTML('beforeend', html);

    // إضافة حدث إغلاق للمودال
    setTimeout(() => {
        const modalOverlay = document.querySelector('.modal-overlay:last-child');
        if (modalOverlay) {
            modalOverlay.addEventListener('click', function(e) {
                if (e.target === this) {
                    console.log('🔴 تم النقر خارج نافذة فلتر نوع العقد - إغلاق');
                    closeContractTypeFilterModal();
                }
            });
            console.log('✅ تم ربط الإغلاق عند النقر خارج نافذة فلتر نوع العقد');
        }
    }, 100);
}

// دالة إغلاق نافذة فلتر نوع العقد
function closeContractTypeFilterModal() {
    console.log('🔴 إغلاق نافذة فلتر نوع العقد...');
    const modal = document.querySelector('.contract-type-filter-modal');
    if (modal) {
        const modalOverlay = modal.closest('.modal-overlay');
        if (modalOverlay) {
            modalOverlay.remove();
            console.log('✅ تم إغلاق نافذة فلتر نوع العقد');
        }
    }
}

// تعيين فلتر نوع العقد
function setContractTypeFilter(type) {
    contractTypeFilter = type;

    // تحديث activeFilters أيضاً للفلاتر النشطة
    activeFilters.contractType = type || '';

    closeContractTypeFilterModal();
    renderData();

    // تحديث عرض الفلاتر النشطة
    updateActiveFiltersDisplay();

    // تحديث حالة أزرار الفلاتر
    updateAllFilterButtonsState();
}

// ربط الزر عند تحميل الصفحة
document.addEventListener('DOMContentLoaded', function() {
    const contractTypeBtn = document.getElementById('contractTypeFilterBtn');
    if (contractTypeBtn) {
        contractTypeBtn.addEventListener('click', showContractTypeFilter);
    }
});
// ...existing code...

// دالة وسيطة لعرض التفاصيل حسب رقم العقد واسم العقار
function showPropertyDetailsByKey(contractNumber, propertyName) {
    // ابحث عن أول عنصر يطابق رقم العقد واسم العقار
    const prop = properties.find(
        p => p['رقم العقد'] == contractNumber && p['اسم العقار'] == propertyName
    );
    if (!prop) return;
    // استخدم دالة عرض التفاصيل الأصلية
    showPropertyDetails(properties.indexOf(prop));
}
// عرض تفاصيل الوحدة عند النقر على رقم الوحدة
function showUnitDetails(unitNumber, propertyName, contractNumber = null) {
    // ابحث عن الوحدة بناءً على رقم الوحدة واسم العقار (ورقم العقد إن وجد)
    let unit = null;
    if (contractNumber) {
        unit = properties.find(
            p => p['رقم  الوحدة '] == unitNumber && p['اسم العقار'] == propertyName && p['رقم العقد'] == contractNumber
        );
    } else {
        unit = properties.find(
            p => p['رقم  الوحدة '] == unitNumber && p['اسم العقار'] == propertyName
        );
    }
    if (!unit) return;

    // نافذة تفاصيل الوحدة (جميع المعلومات المحدثة)
    let html = `<div class="modal-overlay" style="display:flex;">
        <div class="modal-box unit-details-modal">
            <button class="close-modal" onclick="closeModal()">×</button>
            <div class="modal-header">
                <h3><i class="fas fa-home"></i> تفاصيل الوحدة ${unitNumber}</h3>
                <p>${unit['اسم العقار'] || ''} - ${unit['المدينة'] || ''}</p>
            </div>
            <div class="property-details">

                <!-- معلومات العقار الأساسية -->
                <div class="details-section">
                    <h4><i class="fas fa-building"></i> معلومات العقار</h4>
                    <div class="details-grid">`;

    // اسم العقار
    html += `
        <div class="detail-row">
            <span class="detail-label"><i class="fas fa-building"></i> اسم العقار:</span>
            <span class="detail-value">${unit['اسم العقار'] || ''}</span>
        </div>`;

    // المدينة
    html += `
        <div class="detail-row">
            <span class="detail-label"><i class="fas fa-map-marker-alt"></i> المدينة:</span>
            <span class="detail-value">${unit['المدينة'] || ''}</span>
        </div>`;

    // رقم الصك (معلومات العقار المحدثة)
    if (unit['رقم الصك']) {
        html += `
        <div class="detail-row">
            <span class="detail-label"><i class="fas fa-file-contract"></i> رقم الصك:</span>
            <span class="detail-value">${unit['رقم الصك']}</span>
        </div>`;
    }

    // مساحة الصك (معلومات العقار المحدثة)
    if (unit['مساحةالصك']) {
        html += `
        <div class="detail-row">
            <span class="detail-label"><i class="fas fa-ruler-combined"></i> مساحة الصك:</span>
            <span class="detail-value">${parseFloat(unit['مساحةالصك']).toLocaleString()} م²</span>
        </div>`;
    }

    // السجل العيني (معلومات العقار المحدثة)
    if (unit['السجل العيني ']) {
        html += `
        <div class="detail-row">
            <span class="detail-label"><i class="fas fa-clipboard-list"></i> السجل العيني:</span>
            <span class="detail-value">${unit['السجل العيني ']}</span>
        </div>`;
    }

    // المالك (معلومات العقار المحدثة)
    if (unit['المالك']) {
        html += `
        <div class="detail-row">
            <span class="detail-label"><i class="fas fa-user"></i> المالك:</span>
            <span class="detail-value">${unit['المالك']}</span>
        </div>`;
    }

    // موقع العقار (معلومات العقار المحدثة)
    if (unit['موقع العقار']) {
        html += `
        <div class="detail-row">
            <span class="detail-label"><i class="fas fa-location-arrow"></i> موقع العقار:</span>
            <span class="detail-value">
                <a href="https://www.google.com/maps/search/${encodeURIComponent(unit['موقع العقار'])}" target="_blank" class="location-link">
                    ${unit['موقع العقار']} <i class="fas fa-external-link-alt"></i>
                </a>
            </span>
        </div>`;
    }

    html += `
                    </div>
                </div>

                <!-- معلومات الوحدة -->
                <div class="details-section">
                    <h4><i class="fas fa-door-open"></i> معلومات الوحدة</h4>
                    <div class="details-grid">`;

    // رقم الوحدة
    html += `
        <div class="detail-row">
            <span class="detail-label"><i class="fas fa-hashtag"></i> رقم الوحدة:</span>
            <span class="detail-value">${unit['رقم  الوحدة '] || ''}</span>
        </div>`;

    // المساحة
    html += `
        <div class="detail-row">
            <span class="detail-label"><i class="fas fa-expand-arrows-alt"></i> المساحة:</span>
            <span class="detail-value">${unit['المساحة'] ? parseFloat(unit['المساحة']).toLocaleString() + ' م²' : 'غير محدد'}</span>
        </div>`;

    // معلومات المستأجر والعقد
    if (unit['اسم المستأجر'] || unit['رقم العقد']) {
        html += `
                    </div>
                </div>

                <!-- معلومات المستأجر والعقد -->
                <div class="details-section">
                    <h4><i class="fas fa-user-tie"></i> معلومات المستأجر والعقد</h4>
                    <div class="details-grid">`;

        // اسم المستأجر
        if (unit['اسم المستأجر']) {
            html += `
        <div class="detail-row">
            <span class="detail-label"><i class="fas fa-user"></i> اسم المستأجر:</span>
            <span class="detail-value">${unit['اسم المستأجر']}</span>
        </div>`;
        }

        // رقم جوال المستأجر
        if (unit['رقم جوال المستأجر']) {
            html += `
        <div class="detail-row">
            <span class="detail-label"><i class="fas fa-phone"></i> رقم الجوال:</span>
            <span class="detail-value">
                <a href="tel:${unit['رقم جوال المستأجر']}" class="phone-link">
                    ${unit['رقم جوال المستأجر']} <i class="fas fa-phone-alt"></i>
                </a>
            </span>
        </div>`;
        }

        // رقم جوال إضافي
        if (unit['رقم جوال إضافي']) {
            html += `
        <div class="detail-row">
            <span class="detail-label"><i class="fas fa-phone"></i> رقم جوال إضافي:</span>
            <span class="detail-value">
                <a href="tel:${unit['رقم جوال إضافي']}" class="phone-link">
                    ${unit['رقم جوال إضافي']} <i class="fas fa-phone-alt"></i>
                </a>
            </span>
        </div>`;
        }

        // رقم العقد
        if (unit['رقم العقد']) {
            html += `
        <div class="detail-row">
            <span class="detail-label"><i class="fas fa-file-signature"></i> رقم العقد:</span>
            <span class="detail-value">${unit['رقم العقد']}</span>
        </div>`;
        }

        // قيمة الإيجار - مخفي حسب طلب المستخدم
        // if (unit['قيمة  الايجار ']) {
        //     html += `
        // <div class="detail-row">
        //     <span class="detail-label"><i class="fas fa-money-bill-wave"></i> قيمة الإيجار:</span>
        //     <span class="detail-value">${parseFloat(unit['قيمة  الايجار ']).toLocaleString()} ريال</span>
        // </div>`;
        // }

        // تاريخ بداية العقد
        if (unit['تاريخ بداية العقد']) {
            html += `
        <div class="detail-row">
            <span class="detail-label"><i class="fas fa-calendar-plus"></i> تاريخ بداية العقد:</span>
            <span class="detail-value">${unit['تاريخ بداية العقد']}</span>
        </div>`;
        }

        // تاريخ نهاية العقد
        if (unit['تاريخ نهاية العقد']) {
            html += `
        <div class="detail-row">
            <span class="detail-label"><i class="fas fa-calendar-minus"></i> تاريخ نهاية العقد:</span>
            <span class="detail-value">${unit['تاريخ نهاية العقد']}</span>
        </div>`;
        }

        // نوع العقد
        if (unit['نوع العقد']) {
            html += `
        <div class="detail-row">
            <span class="detail-label"><i class="fas fa-tag"></i> نوع العقد:</span>
            <span class="detail-value">${unit['نوع العقد']}</span>
        </div>`;
        }

        html += `
                    </div>
                </div>`;
    } else {
        html += `
                    </div>
                </div>

                <!-- وحدة فارغة -->
                <div class="details-section">
                    <div class="empty-unit-notice">
                        <i class="fas fa-info-circle"></i>
                        <span>هذه الوحدة فارغة - لا يوجد مستأجر حالياً</span>
                    </div>
                </div>`;
    }

    // معلومات التحديث
    if (unit['تاريخ آخر تحديث']) {
        html += `
                <div class="details-section">
                    <h4><i class="fas fa-clock"></i> معلومات التحديث</h4>
                    <div class="details-grid">
                        <div class="detail-row">
                            <span class="detail-label"><i class="fas fa-calendar-check"></i> تاريخ آخر تحديث:</span>
                            <span class="detail-value">${unit['تاريخ آخر تحديث']}</span>
                        </div>`;

        if (unit['نوع التحديث']) {
            html += `
                        <div class="detail-row">
                            <span class="detail-label"><i class="fas fa-edit"></i> نوع التحديث:</span>
                            <span class="detail-value">${unit['نوع التحديث']}</span>
                        </div>`;
        }

        if (unit['المسؤول عن التحديث']) {
            html += `
                        <div class="detail-row">
                            <span class="detail-label"><i class="fas fa-user-cog"></i> المسؤول عن التحديث:</span>
                            <span class="detail-value">${unit['المسؤول عن التحديث']}</span>
                        </div>`;
        }

        html += `
                    </div>
                </div>`;
    }

    html += `
            </div>
            <div class="modal-actions">
                <button onclick="showCardEditModal('${unit['رقم العقد'] || ''}', '${unit['اسم العقار']}', '${unit['رقم  الوحدة ']}')" class="modal-action-btn edit-btn">
                    <i class="fas fa-edit"></i> تحرير الوحدة
                </button>
                <button onclick="editProperty('${unit['اسم العقار']}')" class="modal-action-btn property-btn">
                    <i class="fas fa-building"></i> تحرير العقار
                </button>
                <button onclick="closeModal()" class="modal-action-btn close-btn">
                    <i class="fas fa-times"></i> إغلاق
                </button>
            </div>
        </div>
    </div>`;

    document.body.insertAdjacentHTML('beforeend', html);

    // إغلاق عند النقر خارج المودال
    document.querySelector('.modal-overlay:last-child').addEventListener('click', function(e) {
        if (e.target === this) closeModal();
    });
}
// ...existing code...
// دالة فتح نافذة اختيار الحقول للطباعة
function showPrintOptions(contractNumber, propertyName, unitNumber = null) {
    let property;
    if (contractNumber) {
        property = properties.find(p => p['رقم العقد'] === contractNumber && p['اسم العقار'] === propertyName);
    } else if (unitNumber) {
        property = properties.find(p => p['رقم  الوحدة '] === unitNumber && p['اسم العقار'] === propertyName);
    } else {
        property = properties.find(p => p['اسم العقار'] === propertyName);
    }
    if (!property) return;
    
    let html = `
    <div class="modal-overlay" style="display:flex;">
        <div class="modal-box">
            <button class="close-modal" onclick="closeModal()">×</button>
            <h3>اختر البيانات المراد طباعتها</h3>
            <div class="print-options">
                <div class="select-actions">
                    <button onclick="selectAllFields()" class="select-btn select-all">
                        <i class="fas fa-check-double"></i>
                        تحديد الكل
                    </button>
                    <button onclick="deselectAllFields()" class="select-btn deselect-all">
                        <i class="fas fa-times"></i>
                        إلغاء التحديد
                    </button>
                </div>
                <div class="fields-container">`;
    
    // إضافة جميع الحقول الممكنة كخيارات (مع إخفاء الحقول غير المرغوب فيها)
    Object.keys(property).forEach(key => {
        if (!shouldHideField(key)) {
            html += `
            <label class="field-option">
                <input type="checkbox" name="printFields" value="${key}" checked>
                <span>${key}</span>
            </label>`;
        }
    });
    
    html += `
                </div>
                <div class="print-actions">
                    <button onclick="executePrint('${contractNumber}', '${propertyName}'${unitNumber ? `, '${unitNumber}'` : ''})" class="modal-action-btn print-btn">
                        <i class="fas fa-print"></i> طباعة
                    </button>
                    <button onclick="closeModal()" class="modal-action-btn close-btn">
                        <i class="fas fa-times"></i> إلغاء
                    </button>
                </div>
            </div>
        </div>
    </div>`;
    
    document.body.insertAdjacentHTML('beforeend', html);
}

// تحديد كل الحقول للطباعة
function selectAllFields() {
    document.querySelectorAll('input[name="printFields"]').forEach(cb => cb.checked = true);
}

// إلغاء تحديد كل الحقول للطباعة
function deselectAllFields() {
    document.querySelectorAll('input[name="printFields"]').forEach(cb => cb.checked = false);
}

// تنفيذ الطباعة بناءً على الحقول المختارة
function executePrint(contractNumber, propertyName, unitNumber = null) {
    let related;
    if (contractNumber) {
        related = properties.filter(p => p['رقم العقد'] === contractNumber && p['اسم العقار'] === propertyName);
    } else if (unitNumber) {
        related = properties.filter(p => p['رقم  الوحدة '] === unitNumber && p['اسم العقار'] === propertyName);
    } else {
        related = properties.filter(p => p['اسم العقار'] === propertyName);
    }
    if (related.length === 0) return;

    const property = related[0];
    const status = calculateStatus(property);
    const printWindow = window.open('', '_blank');

    // الحصول على الحقول المحددة فقط
    const selectedFields = Array.from(document.querySelectorAll('input[name="printFields"]:checked')).map(cb => cb.value);

    if (selectedFields.length === 0) {
        alert('الرجاء تحديد حقل واحد على الأقل للطباعة');
        return;
    }

    let printContent = `
    <!DOCTYPE html>
    <html lang="ar" dir="rtl">
    <head>
        <meta charset="UTF-8">
        <title>طباعة العقار - ${property['اسم العقار'] || ''}</title>
        <style>
            @import url('https://fonts.googleapis.com/css2?family=Tajawal:wght@400;500;700;900&display=swap');
            body {
                font-family: 'Tajawal', sans-serif;
                padding: 20px;
                direction: rtl;
            }
            .header {
                text-align: center;
                margin-bottom:  20px;
                padding-bottom: 10px;
                border-bottom: 2px solid #2a4b9b;
                position: relative;
            }
            .print-logo {
                position: absolute;
                top: 0;
                left: 0;
                width: 110px;
                height: auto;
                margin: 10px 0 0 10px;
            }
            table {
                width: 100%;
                border-collapse: collapse;
                margin-bottom: 20px;
            }
            th, td {
                padding: 10px;
                border: 1px solid #ddd;
                text-align: right;
            }
            th {
                background-color: #333;
                color: white;
                font-weight: bold;
                width: 30%;
            }
            .footer {
                margin-top: 30px;
                text-align: center;
                font-size: 0.9rem;
                color: #777;
            }
        </style>
    </head>
    <body>
        <div class="header">
            <img src="logo.jpeg" class="print-logo" alt="logo" />
            <h1>تفاصيل العقار</h1>
            <h2>${property['اسم العقار'] || ''}</h2>
        </div>
        <table>`;

    // إذا تم اختيار رقم الوحدة، اعرض جميع الوحدات المرتبطة
    if (selectedFields.includes('رقم  الوحدة ')) {
        const allUnits = related.map(p => p['رقم  الوحدة ']).filter(Boolean);
        if (allUnits.length > 0) {
            printContent += `
                <tr>
                    <th>رقم الوحدة:</th>
                    <td>${allUnits.join(' , ')}${allUnits.length > 1 ? ` (${allUnits.length} وحدات)` : ''}</td>
                </tr>`;
        }
    }

    // طباعة الحقول المحددة فقط (مع إخفاء الحقول غير المرغوب فيها)
    const additionalHiddenFields = ['رقم  الوحدة ', 'الحالة النهائية', 'الحالة الجديدة'];
    selectedFields.forEach(key => {
        if (shouldHideField(key) || additionalHiddenFields.includes(key)) return; // تجاهل الحقول المخفية
        let value = property[key];
        if (!value && value !== 0) return;
        let displayValue = value;
        if (key === 'الاجمالى' && value) {
            displayValue = parseFloat(value).toLocaleString() + ' ريال';
        } else if (key === 'موقع العقار' && value) {
            let url = value;
            if (!url.startsWith('http')) {
                url = `https://www.google.com/maps/search/${encodeURIComponent(url)}`;
            }
            displayValue = `<a href="${url}" target="_blank" class="location-link">الخريطة <i class="fas fa-map-marker-alt"></i></a>`;
        }
        printContent += `
            <tr>
                <th>${key}</th>
                <td>${displayValue}</td>
            </tr>`;
    });

    printContent += `
        </table>
        <div class="footer">
            <p>تمت طباعة هذا المستند من نظام شركة السنيدي العقارية</p>
            <p>تاريخ الطباعة: ${new Date().toLocaleDateString('ar-SA')}</p>
        </div>
        <script>
            window.onload = function() {
                window.print();
            }
        </script>
    </body>
    </html>`;

    printWindow.document.write(printContent);
    printWindow.document.close();
    closeModal();
}
function showInstallmentsDetails(contractNumber, propertyName) {
    // ابحث عن أول عنصر يطابق رقم العقد واسم العقار
    const prop = properties.find(p => p['رقم العقد'] === contractNumber && p['اسم العقار'] === propertyName);
    if (!prop) {
        alert('لم يتم العثور على العقار');
        return;
    }

    // حساب عدد الأقساط الفعلي
    let actualInstallmentCount = 0;
    for (let i = 1; i <= 10; i++) {
        const dateKey = i === 1 ? 'تاريخ القسط الاول' :
                       i === 2 ? 'تاريخ القسط الثاني' :
                       `تاريخ القسط ${getArabicNumber(i)}`;
        const amountKey = i === 1 ? 'مبلغ القسط الاول' :
                         i === 2 ? 'مبلغ القسط الثاني' :
                         `مبلغ القسط ${getArabicNumber(i)}`;

        if (prop[dateKey] || prop[amountKey]) {
            actualInstallmentCount = i;
        }
    }

    if (actualInstallmentCount === 0) {
        alert('لا توجد أقساط لهذا العقار');
        return;
    }

    // تحديد لون الحالة
    let status = 'default';
    const statusObj = calculateStatus(prop);
    if (statusObj.isInstallmentEnded) {
        status = 'installment-ended';
    } else if (prop['الحالة النهائية']) {
        if (prop['الحالة النهائية'] === 'فعال') status = 'active';
        else if (prop['الحالة النهائية'] === 'منتهى') status = 'expired';
        else if (prop['الحالة النهائية'] === 'على وشك') status = 'pending';
        else if (prop['الحالة النهائية'] === 'فارغ') status = 'empty';
    }

    let html = `<div class="modal-overlay" style="display:flex;">
        <div class="modal-box installments-details-modal">
            <button class="close-modal" onclick="closeModal()">×</button>
            <div class="modal-header">
                <h3><i class="fas fa-calendar-check"></i> تفاصيل الأقساط</h3>
                <p>${prop['اسم العقار']} - ${prop['اسم المستأجر'] || 'غير محدد'}</p>
            </div>
            <div class="installments-summary">
                <div class="summary-item">
                    <span class="summary-label">إجمالي الأقساط:</span>
                    <span class="summary-value">${actualInstallmentCount}</span>
                </div>
                <div class="summary-item">
                    <span class="summary-label">رقم العقد:</span>
                    <span class="summary-value">${prop['رقم العقد'] || 'غير محدد'}</span>
                </div>
                <div class="summary-item">
                    <span class="summary-label">نوع العقد:</span>
                    <span class="summary-value">${prop['نوع العقد'] || 'غير محدد'}</span>
                </div>
            </div>
            <div class="installments-grid">`;

    let totalAmount = 0;
    let installmentsWithAmount = 0;

    for (let i = 1; i <= actualInstallmentCount; i++) {
        const dateKey = i === 1 ? 'تاريخ القسط الاول' :
                       i === 2 ? 'تاريخ القسط الثاني' :
                       `تاريخ القسط ${getArabicNumber(i)}`;
        const amountKey = i === 1 ? 'مبلغ القسط الاول' :
                         i === 2 ? 'مبلغ القسط الثاني' :
                         `مبلغ القسط ${getArabicNumber(i)}`;

        const date = prop[dateKey];
        const amount = prop[amountKey];

        if (date || amount) {
            const amountValue = parseFloat(amount) || 0;
            if (amountValue > 0) {
                totalAmount += amountValue;
                installmentsWithAmount++;
            }

            const base = amountValue / 1.15;
            const vat = amountValue - base;

            html += `
            <div class="installment-card installment-${status}">
                <div class="installment-header">
                    <h4><i class="fas fa-calendar-day"></i> القسط ${getArabicNumber(i)}</h4>
                    <span class="installment-number">#${i}</span>
                </div>
                <div class="installment-body">
                    ${date ? `
                    <div class="installment-field">
                        <span class="field-label"><i class="fas fa-calendar"></i> التاريخ:</span>
                        <span class="field-value">${date}</span>
                    </div>` : `
                    <div class="installment-field missing">
                        <span class="field-label"><i class="fas fa-calendar"></i> التاريخ:</span>
                        <span class="field-value">غير محدد</span>
                    </div>`}

                    ${amount ? `
                    <div class="installment-field">
                        <span class="field-label"><i class="fas fa-money-bill-wave"></i> المبلغ الكلي:</span>
                        <span class="field-value amount">${amountValue.toLocaleString()} ريال</span>
                    </div>
                    ${prop['نوع العقد'] === 'ضريبي' ? `
                    <div class="installment-field tax-details">
                        <span class="field-label">المبلغ الخاضع للضريبة:</span>
                        <span class="field-value">${base.toFixed(2).toLocaleString()} ريال</span>
                    </div>
                    <div class="installment-field tax-details">
                        <span class="field-label">قيمة الضريبة (15%):</span>
                        <span class="field-value">${vat.toFixed(2).toLocaleString()} ريال</span>
                    </div>` : ''}` : `
                    <div class="installment-field missing">
                        <span class="field-label"><i class="fas fa-money-bill-wave"></i> المبلغ:</span>
                        <span class="field-value">غير محدد</span>
                    </div>`}
                </div>
            </div>`;
        }
    }

    html += `</div>
            <div class="installments-total">
                <div class="total-item">
                    <span class="total-label">إجمالي المبلغ:</span>
                    <span class="total-value">${totalAmount.toLocaleString()} ريال</span>
                </div>
                <div class="total-item">
                    <span class="total-label">أقساط بمبالغ:</span>
                    <span class="total-value">${installmentsWithAmount} من ${actualInstallmentCount}</span>
                </div>
            </div>
        </div>
    </div>`;
    document.body.insertAdjacentHTML('beforeend', html);

    document.querySelector('.modal-overlay:last-child').addEventListener('click', function(e) {
        if (e.target === this) closeModal();
    });
}
// ربط زر فلتر الشهر في الهيدر بجميع الشاشات
document.addEventListener('DOMContentLoaded', function() {
    const monthBtn = document.getElementById('monthFilterBtn');
    if (monthBtn) {
        monthBtn.addEventListener('click', showMonthFilterModal);
    }
});
// عرض نافذة اختيار المدينة للفلتر الجديد مع آلية التبديل
function showMultiPropertyCityFilter() {
    // التحقق من وجود نافذة مفتوحة وإغلاقها إذا كانت موجودة
    const existingModal = document.querySelector('.modal-overlay');
    if (existingModal) {
        closeModal();
        return;
    }

    const cities = getUniqueCountries().filter(c => c !== 'الكل');
    let html = `<div class="modal-overlay" style="display:flex; z-index: 10000;">
        <div class="modal-box multi-property-filter-modal" style="max-width: 500px; max-height: 80vh; position: relative;">
            <h3 style="display: flex; align-items: center; gap: 10px; margin-bottom: 20px;">
                <i class="fas fa-building" style="color: #20c997;"></i>
                فلتر العقارات المتعددة - اختر المدينة
                <span class="badge" style="background: #20c997; color: white; padding: 4px 8px; border-radius: 12px; font-size: 0.8rem;">${cities.length}</span>
            </h3>
            <div class="country-selection" style="max-height: 400px; overflow-y: auto; border: 1px solid #e9ecef; border-radius: 8px; padding: 15px; display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">`;

    cities.forEach(city => {
        html += `
            <button onclick="selectMultiFilterCity('${city}')"
                    class="city-btn"
                    style="width: 100%; padding: 12px; margin: 4px 0; border-radius: 8px; cursor: pointer;
                           transition: all 0.3s ease; border: 1px solid #e9ecef; background: white;
                           display: flex; align-items: center; justify-content: space-between; min-height: 50px;">
                <span style="font-weight: 700; font-size: 1.3rem;">${city}</span>
                <i class="fas fa-arrow-left" style="color: #20c997;"></i>
            </button>
        `;
    });

    html += `
            </div>
            <div class="modal-actions" style="margin-top: 20px; display: flex; gap: 10px;">
                <button onclick="closeMultiPropertyFilterModal();" class="modal-action-btn close-btn multi-property-filter-close-btn" id="multiPropertyFilterCloseBtn"
                        style="flex: 1; background: linear-gradient(135deg, #6c757d, #495057); color: white; border: none; padding: 12px 20px; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; justify-content: center; gap: 8px;">
                    <i class="fas fa-times"></i> إغلاق
                </button>
            </div>
        </div>
    </div>`;

    document.body.insertAdjacentHTML('beforeend', html);

    // إضافة حدث إغلاق للمودال
    setTimeout(() => {
        const modalOverlay = document.querySelector('.modal-overlay:last-child');
        if (modalOverlay) {
            modalOverlay.addEventListener('click', function(e) {
                if (e.target === this) {
                    console.log('🔴 تم النقر خارج نافذة فلتر العقارات المتعددة - إغلاق');
                    closeMultiPropertyFilterModal();
                }
            });
            console.log('✅ تم ربط الإغلاق عند النقر خارج نافذة فلتر العقارات المتعددة');
        }
    }, 100);
}

// دالة إغلاق نافذة فلتر العقارات المتعددة
function closeMultiPropertyFilterModal() {
    console.log('🔴 إغلاق نافذة فلتر العقارات المتعددة...');
    const modal = document.querySelector('.multi-property-filter-modal');
    if (modal) {
        const modalOverlay = modal.closest('.modal-overlay');
        if (modalOverlay) {
            modalOverlay.remove();
            console.log('✅ تم إغلاق نافذة فلتر العقارات المتعددة');
        }
    }
}

function selectMultiFilterCity(city) {
    closeMultiPropertyFilterModal();
    multiFilterSelectedCity = city;
    multiFilterSelectedProperties = [];
    const props = properties.filter(p => p.المدينة === city)
        .map(p => p['اسم العقار'])
        .filter((v, i, arr) => v && arr.indexOf(v) === i);

    let html = `<div class="modal-overlay" style="display:flex; z-index: 10000;">
        <div class="modal-box multi-property-selection-modal" style="max-width: 600px; max-height: 80vh; position: relative;">
            <h3 style="display: flex; align-items: center; gap: 10px; margin-bottom: 20px;">
                <i class="fas fa-building" style="color: #20c997;"></i>
                اختر العقارات - ${city}
                <span class="badge" style="background: #20c997; color: white; padding: 4px 8px; border-radius: 12px; font-size: 0.8rem;">${props.length}</span>
            </h3>
            <input type="text" id="multiPropertySearch" placeholder="بحث عن عقار..."
                   style="width:100%; padding:12px; margin-bottom:15px; border:1px solid #e9ecef; border-radius:8px; font-size: 1rem;">
            <div id="multiPropertyList" style="max-height:300px; overflow-y:auto; border:1px solid #e9ecef; border-radius: 8px; padding:15px;">`;

    props.forEach(prop => {
        html += `
            <label class="multi-property-option" style="display:block; margin:8px 0; cursor:pointer; padding: 10px; border: 1px solid #e9ecef; border-radius: 6px; transition: all 0.3s ease; background: white;">
                <input type="checkbox" value="${prop}" onchange="toggleMultiFilterProperty(this)" style="margin-left: 10px;">
                <span style="font-weight: 700; font-size: 1.3rem;">${prop}</span>
            </label>
        `;
    });

    html += `
            </div>
            <div class="modal-actions" style="margin-top: 20px; display: flex; gap: 10px;">
                <button onclick="applyMultiPropertyFilter()" class="modal-action-btn print-btn"
                        style="flex: 1; background: linear-gradient(135deg, #20c997, #17a2b8); color: white; border: none; padding: 12px 20px; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; justify-content: center; gap: 8px;">
                    <i class="fas fa-check"></i> عرض الإحصائيات
                </button>
                <button onclick="closeMultiPropertySelectionModal()" class="modal-action-btn close-btn"
                        style="flex: 1; background: linear-gradient(135deg, #6c757d, #495057); color: white; border: none; padding: 12px 20px; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; justify-content: center; gap: 8px;">
                    <i class="fas fa-times"></i> إغلاق
                </button>
            </div>
        </div>
    </div>`;

    document.body.insertAdjacentHTML('beforeend', html);

    // بحث ديناميكي
    document.getElementById('multiPropertySearch').addEventListener('input', function() {
        const term = this.value.trim().toLowerCase();
        document.querySelectorAll('#multiPropertyList .multi-property-option').forEach(label => {
            const text = label.textContent.trim().toLowerCase();
            label.style.display = text.includes(term) ? '' : 'none';
        });
    });

    // إضافة حدث إغلاق للمودال
    setTimeout(() => {
        const modalOverlay = document.querySelector('.modal-overlay:last-child');
        if (modalOverlay) {
            modalOverlay.addEventListener('click', function(e) {
                if (e.target === this) {
                    console.log('🔴 تم النقر خارج نافذة اختيار العقارات المتعددة - إغلاق');
                    closeMultiPropertySelectionModal();
                }
            });
            console.log('✅ تم ربط الإغلاق عند النقر خارج نافذة اختيار العقارات المتعددة');
        }
    }, 100);
}

// دالة إغلاق نافذة اختيار العقارات المتعددة
function closeMultiPropertySelectionModal() {
    console.log('🔴 إغلاق نافذة اختيار العقارات المتعددة...');
    const modal = document.querySelector('.multi-property-selection-modal');
    if (modal) {
        const modalOverlay = modal.closest('.modal-overlay');
        if (modalOverlay) {
            modalOverlay.remove();
            console.log('✅ تم إغلاق نافذة اختيار العقارات المتعددة');
        }
    }
}

// تحديث قائمة العقارات المختارة
function toggleMultiFilterProperty(checkbox) {
    const val = checkbox.value;
    if (checkbox.checked) {
        if (!multiFilterSelectedProperties.includes(val)) multiFilterSelectedProperties.push(val);
    } else {
        multiFilterSelectedProperties = multiFilterSelectedProperties.filter(p => p !== val);
    }
}

// عند الضغط على "عرض الإحصائيات"
function applyMultiPropertyFilter() {
    closeModal();
    if (!multiFilterSelectedCity || multiFilterSelectedProperties.length === 0) {
        alert('يرجى اختيار مدينة وعقار واحد على الأقل');
        return;
    }
    // تصفية البيانات
    const filtered = properties.filter(p =>
        p.المدينة === multiFilterSelectedCity &&
        multiFilterSelectedProperties.includes(p['اسم العقار'])
    );
    showMultiPropertyStats(filtered);
}

// عرض نافذة الإحصائيات المجمعة
// ...existing code...
function showMultiPropertyStats(filtered) {
    // تجميع حسب اسم العقار
    const grouped = {};
    filtered.forEach(p => {
        const name = p['اسم العقار'];
        if (!name) return;
        if (!grouped[name]) grouped[name] = [];
        grouped[name].push(p);
    });

    // تحضير بيانات كل عقار
    const stats = {};
    let totalUnits = 0, totalTenants = 0, totalBeforeTax = 0, totalVat = 0, totalAfterTax = 0, totalResidential = 0;

    Object.entries(grouped).forEach(([name, props]) => {
        const units = props.length;
        // تجميع العقود الفريدة مع اعتماد أول مبلغ غير فارغ أو الأكبر
        const contracts = {};
        props.forEach(p => {
            if (p['رقم العقد']) {
                if (
                    !contracts[p['رقم العقد']] ||
                    (!contracts[p['رقم العقد']]['الاجمالى'] && p['الاجمالى']) ||
                    (
                        p['الاجمالى'] && contracts[p['رقم العقد']]['الاجمالى'] &&
                        parseFloat(p['الاجمالى']) > parseFloat(contracts[p['رقم العقد']]['الاجمالى'])
                    )
                ) {
                    contracts[p['رقم العقد']] = p;
                }
            }
        });
        const contractsArr = Object.values(contracts);

        // عدد المستأجرين الفريدين (حسب رقم العقد)
        const tenants = new Set(contractsArr.map(p => p['اسم المستأجر'])).size;

        // مبالغ العقود الضريبية مرة واحدة لكل عقد
        let beforeTax = 0, vat = 0, afterTax = 0, residential = 0;
        contractsArr.forEach(p => {
            if (p['نوع العقد'] === 'ضريبي' && p['الاجمالى']) {
                const amount = parseFloat(p['الاجمالى']) || 0;
                const base = amount / 1.15;
                beforeTax += base;
                vat += base * 0.15;
                afterTax += amount;
            } else if (p['نوع العقد'] !== 'ضريبي' && p['الاجمالى']) {
                residential += parseFloat(p['الاجمالى']) || 0;
            }
        });

        stats[name] = {
            units,
            tenants,
            beforeTax,
            vat,
            afterTax,
            residential,
            total: beforeTax + residential // الإجمالي الكلي بدون الضريبة
        };

        // جمع الإجماليات
        totalUnits += units;
        totalTenants += tenants;
        totalBeforeTax += beforeTax;
        totalVat += vat;
        totalAfterTax += afterTax;
        totalResidential += residential;
    });

    // بناء الجدول بشكل أفقي مع زر PDF
    let html = `<div class="modal-overlay" style="display:flex;">
      <div class="modal-box" style="max-width:1100px;">
        <button class="close-modal" onclick="closeModal()">×</button>
        <h3>إحصائيات العقارات المختارة</h3>
        <div style="text-align:left;margin-bottom:10px;">

        </div>
        <div class="property-details" style="padding:0;">
        <div style="overflow-x:auto;">
        <div id="multiStatsTableToPrint">
        <table style="width:100%;border-collapse:collapse;text-align:center;">
            <thead>
                <tr style="background:#2a4b9b;color:#fff;">
                    <th>الإحصائية</th>
                    ${Object.keys(stats).map(name => `<th>${name}</th>`).join('')}
                    <th>الإجمالي</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td style="font-weight:bold;">عدد الوحدات</td>
                    ${Object.values(stats).map(s => `<td>${s.units}</td>`).join('')}
                    <td>${totalUnits}</td>
                </tr>
                <tr>
                    <td style="font-weight:bold;">عدد المستأجرين</td>
                    ${Object.values(stats).map(s => `<td>${s.tenants}</td>`).join('')}
                    <td>${totalTenants}</td>
                </tr>
                <tr>
                    <td style="font-weight:bold;">قبل الضريبة</td>
                    ${Object.values(stats).map(s => `<td>${s.beforeTax.toLocaleString(undefined, {maximumFractionDigits:2})} ريال</td>`).join('')}
                    <td>${totalBeforeTax.toLocaleString(undefined, {maximumFractionDigits:2})} ريال</td>
                </tr>
                <tr>
                    <td style="font-weight:bold;">الضريبة</td>
                    ${Object.values(stats).map(s => `<td>${s.vat.toLocaleString(undefined, {maximumFractionDigits:2})} ريال</td>`).join('')}
                    <td>${totalVat.toLocaleString(undefined, {maximumFractionDigits:2})} ريال</td>
                </tr>
                <tr>
                    <td style="font-weight:bold;">بعد الضريبة</td>
                    ${Object.values(stats).map(s => `<td>${s.afterTax.toLocaleString(undefined, {maximumFractionDigits:2})} ريال</td>`).join('')}
                    <td>${totalAfterTax.toLocaleString(undefined, {maximumFractionDigits:2})} ريال</td>
                </tr>
                <tr>
                    <td style="font-weight:bold;">سكني</td>
                    ${Object.values(stats).map(s => `<td>${s.residential.toLocaleString(undefined, {maximumFractionDigits:2})} ريال</td>`).join('')}
                    <td>${totalResidential.toLocaleString(undefined, {maximumFractionDigits:2})} ريال</td>
                </tr>
                <tr>
                    <td style="font-weight:bold;color:#2a4b9b;">الإجمالي الكلي</td>
                    ${Object.values(stats).map(s => `<td style="font-weight:bold;color:#2a4b9b;">${(s.beforeTax + s.residential).toLocaleString(undefined, {maximumFractionDigits:2})} ريال</td>`).join('')}
                    <td style="font-weight:bold;color:#2a4b9b;">${(totalBeforeTax + totalResidential).toLocaleString(undefined, {maximumFractionDigits:2})} ريال</td>
                </tr>
            </tbody>
        </table>
        </div>
        </div>
        </div>
        <div class="modal-actions" style="flex-direction:row;gap:10px;">
  <button onclick="printMultiStatsTable()" class="modal-action-btn print-btn" style="flex:1;">
    <i class="fas fa-file-pdf"></i> طباعة PDF
  </button>
  <button onclick="closeModal()" class="modal-action-btn close-btn" style="flex:1;">
    <i class="fas fa-times"></i> إغلاق
  </button>
</div>
      </div>
    </div>`;
    document.body.insertAdjacentHTML('beforeend', html);
    document.querySelector('.modal-overlay:last-child').addEventListener('click', function(e) {
        if (e.target === this) closeModal();
    });
}

// دالة طباعة جدول الإحصائيات PDF
function printMultiStatsTable() {
    const tableHtml = document.getElementById('multiStatsTableToPrint').innerHTML;
    const win = window.open('', '', 'width=1100,height=700');
    win.document.write(`
        <html lang="ar" dir="rtl">
        <head>
            <title>طباعة إحصائيات العقارات</title>
            <style>
                body { font-family: 'Tajawal', sans-serif; direction: rtl; padding: 30px; }
                table { width: 100%; border-collapse: collapse; text-align: center; }
                th, td { border: 1px solid #333; padding: 10px; font-size: 1.1em; }
                th { background: #2a4b9b; color: #fff; }
                td { background: #f7f9fa; }
                tr:last-child td, tr:last-child th { font-weight: bold; color: #2a4b9b; background: #e8f7ef; }
            </style>
        </head>
        <body>
            <h2 style="text-align:center;">إحصائيات العقارات المختارة</h2>
            <div>${tableHtml}</div>
            <script>window.print();</script>
        </body>
        </html>
    `);
    win.document.close();
}
// ربط زر فلتر عقارات متعدد في الهيدر والجوال
document.addEventListener('DOMContentLoaded', function() {
    const multiBtn = document.getElementById('multiPropertyFilterBtn');
    if (multiBtn) multiBtn.addEventListener('click', showMultiPropertyCityFilter);

    const mobileMultiBtn = document.getElementById('mobile-multi-property-filter-btn');
    if (mobileMultiBtn) mobileMultiBtn.addEventListener('click', function() {
        showMultiPropertyCityFilter();
        // إغلاق قائمة الجوال إذا كانت مفتوحة
        const mobileMenu = document.getElementById('mobileMenu');
        const menuOverlay = document.getElementById('menuOverlay');
        if (mobileMenu) mobileMenu.classList.remove('active');
        if (menuOverlay) menuOverlay.classList.remove('active');
        document.body.style.overflow = '';
    });
});


// دالة إغلاق نافذة تفاصيل العقار
function closePropertyDetailsModal() {
    console.log('🔴 إغلاق نافذة تفاصيل العقار...');
    const modal = document.querySelector('.property-details-modal');
    if (modal) {
        const modalOverlay = modal.closest('.modal-overlay');
        if (modalOverlay) {
            modalOverlay.remove();
            console.log('✅ تم إغلاق نافذة تفاصيل العقار');
        }
    }
}

// دالة توسيع وطي البطاقات في الشاشات الصغيرة
function toggleCardExpansion(cardId, event) {
    // التحقق من حجم الشاشة - هذه الميزة للشاشات الصغيرة فقط
    if (window.innerWidth > 768) {
        console.log('🖥️ الشاشة كبيرة - الميزة غير نشطة');
        return; // لا تفعل شيئاً في الشاشات الكبيرة
    }

    // منع التوسيع إذا تم النقر على زر أو رابط
    if (event && event.target) {
        const clickedElement = event.target;
        const isButton = clickedElement.tagName === 'BUTTON' ||
                        clickedElement.closest('button') ||
                        clickedElement.tagName === 'A' ||
                        clickedElement.closest('a') ||
                        clickedElement.classList.contains('unit-link') ||
                        clickedElement.closest('.unit-link');

        if (isButton) {
            console.log('🚫 تم النقر على زر/رابط - لا يتم التوسيع');
            return;
        }
    }

    const card = document.getElementById(cardId);
    if (!card) {
        console.warn('⚠️ البطاقة غير موجودة:', cardId);
        return;
    }

    const isExpanded = card.getAttribute('data-expanded') === 'true';
    const compactView = card.querySelector('.card-compact-view');
    const fullView = card.querySelector('.card-full-view');

    if (!compactView || !fullView) {
        console.warn('⚠️ عناصر العرض غير موجودة في البطاقة:', cardId);
        return;
    }

    console.log('🔄 تبديل حالة البطاقة:', cardId, 'موسعة حالياً:', isExpanded);

    if (isExpanded) {
        // طي البطاقة - إظهار العرض المضغوط وإخفاء العرض الكامل
        card.setAttribute('data-expanded', 'false');
        card.classList.remove('expanded');

        // انتقال سلس للطي
        fullView.style.opacity = '0';
        fullView.style.transform = 'translateY(-10px)';

        setTimeout(() => {
            fullView.style.display = 'none';
            compactView.style.display = 'block';
            compactView.style.opacity = '0';
            compactView.style.transform = 'translateY(10px)';

            // إظهار العرض المضغوط بانتقال سلس
            setTimeout(() => {
                compactView.style.opacity = '1';
                compactView.style.transform = 'translateY(0)';
            }, 50);
        }, 200);

        console.log('📱 تم طي البطاقة:', cardId);
    } else {
        // توسيع البطاقة - إظهار العرض الكامل وإخفاء العرض المضغوط
        card.setAttribute('data-expanded', 'true');
        card.classList.add('expanded');

        // انتقال سلس للتوسيع
        compactView.style.opacity = '0';
        compactView.style.transform = 'translateY(-10px)';

        setTimeout(() => {
            compactView.style.display = 'none';
            fullView.style.display = 'block';
            fullView.style.opacity = '0';
            fullView.style.transform = 'translateY(10px)';

            // إظهار العرض الكامل بانتقال سلس
            setTimeout(() => {
                fullView.style.opacity = '1';
                fullView.style.transform = 'translateY(0)';
            }, 50);
        }, 200);

        console.log('📱 تم توسيع البطاقة:', cardId);

        // تمرير لطيف للبطاقة الموسعة
        setTimeout(() => {
            card.scrollIntoView({
                behavior: 'smooth',
                block: 'nearest',
                inline: 'nearest'
            });
        }, 400);
    }
}

// دالة وسيطة لعرض التفاصيل حسب رقم العقد واسم العقار
function showPropertyDetailsByKey(contractNumber, propertyName) {
    const prop = properties.find(
        p => p['رقم العقد'] == contractNumber && p['اسم العقار'] == propertyName
    );
    if (!prop) return;
    showPropertyDetails(properties.indexOf(prop));
}
function exportToExcel() {
    // استخدام البيانات المفلترة الحالية بدلاً من جميع البيانات
    const dataToExport = filteredProperties.length > 0 ? filteredProperties : properties;

    console.log(`📊 تصدير Excel: ${dataToExport.length} سجل من أصل ${properties.length} سجل`);

    // نسخ البيانات مباشرة بدون تنسيق التواريخ
    const formattedData = dataToExport.map(property => {
        // نسخ كل الحقول كما هي
        return { ...property };
    });

    // إنشاء ورقة عمل
    const ws = XLSX.utils.json_to_sheet(formattedData, {
        header: [
            'رقم  الوحدة ',
            'المدينة',
            'اسم العقار',
            'موقع العقار',
            'الارتفاع',
            'رقم الصك',
            'السجل العيني ',
            'مساحةالصك',
            'المالك',
            'اسم المستأجر',
            'رقم العقد',
            'قيمة  الايجار ',
            'المساحة',
            'تاريخ البداية',
            'تاريخ النهاية',
            'الاجمالى',
            'رقم حساب الكهرباء',
            'نوع العقد'
        ]
    });

    // تعديل عرض الأعمدة
    const colWidths = [
        { wch: 15 },  // رقم الوحدة
        { wch: 15 },  // المدينة
        { wch: 25 },  // اسم العقار
        { wch: 40 },  // موقع العقار
        { wch: 10 },  // الارتفاع
        { wch: 20 },  // رقم الصك
        { wch: 20 },  // السجل العيني
        { wch: 15 },  // مساحة الصك
        { wch: 20 },  // المالك
        { wch: 35 },  // اسم المستأجر
        { wch: 20 },  // رقم العقد
        { wch: 15 },  // قيمة الايجار
        { wch: 15 },  // المساحة
        { wch: 15 },  // تاريخ البداية
        { wch: 15 },  // تاريخ النهاية
        { wch: 15 },  // الاجمالى
        { wch: 20 },  // رقم حساب الكهرباء
        { wch: 15 }   // نوع العقد
    ];
    ws['!cols'] = colWidths;

    // إنشاء مصنف عمل
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "البيانات");

    // تحديد اسم الملف والتاريخ
    const now = new Date();
    const isFiltered = filteredProperties.length > 0 && filteredProperties.length < properties.length;
    const filterSuffix = isFiltered ? '_مفلتر' : '';
    const fileName = `بيانات_العقارات${filterSuffix}_${now.getFullYear()}_${now.getMonth()+1}_${now.getDate()}.xlsx`;

    // تصدير الملف
    XLSX.writeFile(wb, fileName);

    // إظهار رسالة تأكيد
    const message = isFiltered
        ? `✅ تم تصدير ${dataToExport.length} سجل مفلتر من أصل ${properties.length} سجل`
        : `✅ تم تصدير جميع السجلات (${dataToExport.length} سجل)`;

    console.log(message);

    // إظهار إشعار للمستخدم
    if (typeof showToast === 'function') {
        showToast(message, 'success');
    }
}

// تحديث نص أزرار التصدير حسب حالة الفلترة
function updateExportButtonsText() {
    const isFiltered = filteredProperties.length > 0 && filteredProperties.length < properties.length;
    const exportText = isFiltered
        ? `تصدير Excel (${filteredProperties.length} مفلتر)`
        : `تصدير Excel (${properties.length} سجل)`;

    // تحديث الأزرار في الواجهة
    const exportButtons = [
        document.getElementById('exportExcel'),
        document.querySelector('[onclick*="exportToExcel"]')
    ];

    exportButtons.forEach(button => {
        if (button) {
            // الحفاظ على الأيقونة وتحديث النص
            const icon = button.querySelector('i');
            if (icon) {
                button.innerHTML = icon.outerHTML + ' ' + exportText;
            } else {
                button.innerHTML = '<i class="fas fa-file-excel"></i> ' + exportText;
            }
        }
    });

    console.log(`📊 تحديث أزرار التصدير: ${exportText}`);
}

// المرفقات للعقارات

// تحميل المرفقات من localStorage عند بدء التطبيق
document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 بدء تهيئة نظام المرفقات...');

    // Enable debug mode by adding ?debug=true to URL
    const urlParams = new URLSearchParams(window.location.search);
    window.debugMode = urlParams.get('debug') === 'true';

    if (window.debugMode) {
        console.log('🐛 وضع التصحيح مفعل');
    }

    // تهيئة Supabase أولاً
    if (typeof initSupabase === 'function') {
        const supabaseInitialized = initSupabase();
        console.log('Supabase تهيئة:', supabaseInitialized ? 'نجح' : 'فشل');
    } else {
        console.warn('⚠️ وظيفة initSupabase غير متوفرة');
    }

    const savedAttachments = localStorage.getItem('propertyAttachments');
    if (savedAttachments) {
        attachments = JSON.parse(savedAttachments);
    }

    // تحميل مرفقات البطاقات المحفوظة
    const savedCardAttachments = localStorage.getItem('cardAttachments');
    if (savedCardAttachments) {
        cardAttachments = JSON.parse(savedCardAttachments);
    }

    // ربط زر إدارة المرفقات في الهيدر
    const attachmentsBtn = document.getElementById('attachmentsManagerBtn');
    if (attachmentsBtn) {
        attachmentsBtn.addEventListener('click', showAttachmentsManager);
    }

    // ربط زر إدارة المرفقات في الجوال
    const mobileAttachmentsBtn = document.getElementById('mobile-attachments-btn');
    if (mobileAttachmentsBtn) {
        mobileAttachmentsBtn.addEventListener('click', function() {
            document.getElementById('mobileMenu').classList.remove('active');
            document.getElementById('menuOverlay').classList.remove('active');
            document.body.style.overflow = '';
            showAttachmentsManager();
        });
    }

    // ربط زر إدارة العقارات في الهيدر
    const propertyManagerBtn = document.getElementById('propertyManagerBtn');
    if (propertyManagerBtn) {
        propertyManagerBtn.addEventListener('click', showPropertyManager);
    }

    // Initialize enhanced attachments system
    setTimeout(() => {
        initializeAttachmentsSystem();

        // Initialize card attachments real-time sync
        if (typeof subscribeToCardAttachmentChanges === 'function') {
            console.log('🔄 تفعيل المزامنة الفورية لمرفقات البطاقات...');
            const cardSubscription = subscribeToCardAttachmentChanges();
            if (cardSubscription) {
                console.log('✅ تم تفعيل المزامنة الفورية لمرفقات البطاقات');

                // Test the subscription after a short delay
                setTimeout(() => {
                    console.log('🧪 اختبار الاشتراك...');
                    console.log('📡 حالة الاشتراك:', cardSubscription.state);
                }, 3000);
            } else {
                console.warn('⚠️ فشل في تفعيل المزامنة الفورية لمرفقات البطاقات');
            }
        } else {
            console.warn('⚠️ وظيفة subscribeToCardAttachmentChanges غير متوفرة');
        }

        // Setup global card attachment event listeners
        setupGlobalCardAttachmentListeners();

    }, 2000); // Wait 2 seconds for other systems to load
});

// Setup global card attachment event listeners
function setupGlobalCardAttachmentListeners() {
    // Listen for card attachment events globally
    window.addEventListener('cardAttachmentAdded', (event) => {
        console.log(`🌐 حدث عالمي: تم إضافة مرفق للبطاقة ${event.detail.cardKey}`);

        // Update any open card modals
        const openCardModal = document.querySelector('.card-attachments-modal[data-card-key="' + event.detail.cardKey + '"]');
        if (openCardModal) {
            refreshCardAttachmentsList(event.detail.cardKey);
        }

        // Update card counters in any open lists
        updateCardAttachmentCounters(event.detail.cardKey);
    });

    window.addEventListener('cardAttachmentDeleted', (event) => {
        console.log(`🌐 حدث عالمي: تم حذف مرفق من البطاقة ${event.detail.cardKey}`);

        // Update any open card modals
        const openCardModal = document.querySelector('.card-attachments-modal[data-card-key="' + event.detail.cardKey + '"]');
        if (openCardModal) {
            refreshCardAttachmentsList(event.detail.cardKey);
        }

        // Update card counters in any open lists
        updateCardAttachmentCounters(event.detail.cardKey);
    });

    console.log('✅ تم تهيئة معالجات الأحداث العامة لمرفقات البطاقات');
}

// Update card attachment counters in UI
function updateCardAttachmentCounters(cardKey) {
    // Update attachment count badges in property cards
    const propertyCards = document.querySelectorAll('.property-card');
    propertyCards.forEach(card => {
        const cardKeyAttr = card.getAttribute('data-card-key');
        if (cardKeyAttr === cardKey) {
            // Update attachment count
            updateCardAttachmentCount(card, cardKey);
        }
    });
}

// Helper function to update card attachment count
async function updateCardAttachmentCount(cardElement, cardKey) {
    try {
        let count = 0;

        if (typeof getCardAttachmentsEnhanced === 'function') {
            const attachments = await getCardAttachmentsEnhanced(cardKey);
            count = attachments.length;
        }

        // Update count badge
        const countBadge = cardElement.querySelector('.attachment-count');
        if (countBadge) {
            countBadge.textContent = `${count} مرفق`;
        }

    } catch (error) {
        console.warn(`⚠️ خطأ في تحديث عداد مرفقات البطاقة ${cardKey}:`, error);
    }
}

// نافذة اختيار المدينة لإدارة المرفقات
function showAttachmentsManager() {
    closeModal();

    // فحص تحميل البيانات
    console.log('🔍 فحص تحميل البيانات لإدارة المرفقات:');
    console.log('📊 عدد العقارات المحملة:', properties.length);
    console.log('🏙️ عينة من البيانات:', properties.slice(0, 3));

    if (properties.length === 0) {
        console.warn('⚠️ لا توجد بيانات محملة! قد تحتاج لانتظار تحميل البيانات.');
        alert('يرجى انتظار تحميل البيانات أولاً، ثم المحاولة مرة أخرى.');
        return;
    }

    const cities = getUniqueCountries().filter(c => c !== 'الكل');
    console.log('🏙️ المدن المتاحة:', cities);
    let html = `<div class="modal-overlay" style="display:flex; z-index: 10000;">
        <div class="modal-box attachments-manager-modal" style="max-width: 500px; max-height: 80vh; position: relative;">
            <h3 style="display: flex; align-items: center; gap: 10px; margin-bottom: 20px;">
                <i class="fas fa-paperclip" style="color: #17a2b8;"></i>
                إدارة المرفقات - اختر المدينة
                <span class="badge" style="background: #17a2b8; color: white; padding: 4px 8px; border-radius: 12px; font-size: 0.8rem;">${cities.length}</span>
            </h3>
            <div class="country-selection" style="max-height: 400px; overflow-y: auto; border: 1px solid #e9ecef; border-radius: 8px; padding: 15px; display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">`;

    cities.forEach(city => {
        html += `
            <button onclick="showAttachmentsProperties('${city}')"
                    class="city-btn"
                    style="width: 100%; padding: 12px; margin: 4px 0; border-radius: 8px; cursor: pointer;
                           transition: all 0.3s ease; border: 1px solid #e9ecef; background: white;
                           display: flex; align-items: center; justify-content: space-between; min-height: 50px;">
                <span style="font-weight: 700; font-size: 1.3rem;">${city}</span>
                <i class="fas fa-arrow-left" style="color: #17a2b8;"></i>
            </button>
        `;
    });

    html += `
            </div>
            <div class="modal-actions" style="margin-top: 20px; display: flex; gap: 10px;">
                <button onclick="closeAttachmentsManagerModal();" class="modal-action-btn close-btn attachments-manager-close-btn" id="attachmentsManagerCloseBtn"
                        style="flex: 1; background: linear-gradient(135deg, #6c757d, #495057); color: white; border: none; padding: 12px 20px; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; justify-content: center; gap: 8px;">
                    <i class="fas fa-times"></i> إغلاق
                </button>
            </div>
        </div>
    </div>`;

    document.body.insertAdjacentHTML('beforeend', html);

    // إضافة حدث إغلاق للمودال
    setTimeout(() => {
        const modalOverlay = document.querySelector('.modal-overlay:last-child');
        if (modalOverlay) {
            modalOverlay.addEventListener('click', function(e) {
                if (e.target === this) {
                    console.log('🔴 تم النقر خارج نافذة إدارة المرفقات - إغلاق');
                    closeAttachmentsManagerModal();
                }
            });
            console.log('✅ تم ربط الإغلاق عند النقر خارج نافذة إدارة المرفقات');
        }
    }, 100);
}

// دالة إغلاق نافذة إدارة المرفقات
function closeAttachmentsManagerModal() {
    console.log('🔴 إغلاق نافذة إدارة المرفقات...');
    const modal = document.querySelector('.attachments-manager-modal');
    if (modal) {
        const modalOverlay = modal.closest('.modal-overlay');
        if (modalOverlay) {
            modalOverlay.remove();
            console.log('✅ تم إغلاق نافذة إدارة المرفقات');
        }
    }
}

// نافذة اختيار العقار
// ...existing code...

// ...existing code...

function showAttachmentsProperties(city) {
    closeModal();

    // تسجيل تشخيصي للدالة الأصلية
    console.log(`🔍 showAttachmentsProperties تم استدعاؤها للمدينة: ${city}`);
    console.log('📊 إجمالي العقارات في قاعدة البيانات:', properties.length);

    const cityProperties = properties.filter(p => p.المدينة === city);
    console.log(`🏙️ عقارات ${city}:`, cityProperties.length);

    // عرض عينة من أنواع الوحدات
    const unitTypes = cityProperties.map(p => p['نوع الوحدة']).filter(t => t);
    console.log('🏠 أنواع الوحدات في المدينة:', [...new Set(unitTypes)]);

    const props = cityProperties
        .map(p => p['اسم العقار'])
        .filter((v, i, arr) => v && arr.indexOf(v) === i);

    console.log('📋 العقارات الفريدة:', props);

    let html = `<div class="modal-overlay" style="display:flex;">
        <div class="modal-box" style="max-width:420px;">
            <button class="close-modal" onclick="closeModal()" title="إغلاق">×</button>
            <h3>عقارات مدينة <span style="color:#2a4b9b">${city}</span></h3>

            <!-- أزرار المباني والأراضي في الأعلى -->
            <div style="display: flex; gap: 10px; margin-bottom: 15px;">
                <button onclick="showAttachmentsBuildingsModal('${city}')" style="flex: 1; padding: 10px; background: #28a745; color: white; border: none; border-radius: 6px; font-weight: 600; cursor: pointer;">
                    <i class="fas fa-city" style="margin-left: 5px;"></i>المباني
                </button>
                <button onclick="showAttachmentsLandsModal('${city}')" style="flex: 1; padding: 10px; background: #ffc107; color: #212529; border: none; border-radius: 6px; font-weight: 600; cursor: pointer;">
                    <i class="fas fa-map" style="margin-left: 5px;"></i>الأراضي
                </button>
            </div>

            <input type="text" id="attachmentsPropertySearch" placeholder="بحث عن عقار..." style="width:100%;margin-bottom:12px;padding:10px 12px;border-radius:8px;border:1.5px solid #d1d5db;font-size:1.05rem;">
            <div id="attachmentsPropertyList" style="max-height:350px;overflow:auto;display:flex;flex-direction:column;gap:8px;">`;
    props.forEach(prop => {
        html += `<button onclick="showAttachmentsModal('${city}','${prop}')" class="filter-btn" style="width:100%;margin-bottom:0;text-align:right;font-weight:bold;font-size:1.1em;">
            <i class="fas fa-building" style="color:#1e88e5;margin-left:8px;"></i>${prop}
        </button>`;
    });
    html += `</div>
        <div class="modal-actions">
            <button onclick="closeModal()" class="modal-action-btn close-btn">
                <i class="fas fa-times"></i> إغلاق
            </button>
        </div>
    </div></div>`;
    document.body.insertAdjacentHTML('beforeend', html);

    // بحث ديناميكي
    document.getElementById('attachmentsPropertySearch').addEventListener('input', function() {
        const term = this.value.trim().toLowerCase();
        document.querySelectorAll('#attachmentsPropertyList button').forEach(btn => {
            btn.style.display = btn.textContent.toLowerCase().includes(term) ? '' : 'none';
        });
    });

    document.querySelector('.modal-overlay:last-child').addEventListener('click', function(e) {
        if (e.target === this) closeModal();
    });
}

// دالة إدارة مرفقات المباني
function showAttachmentsBuildingsModal(city) {
    closeModal();

    console.log(`🏗️ إدارة مرفقات المباني في ${city}`);

    // الحصول على جميع العقارات في المدينة
    const cityProperties = properties.filter(p => p.المدينة === city);
    const allPropertyNames = [...new Set(cityProperties.map(p => p['اسم العقار']).filter(name => name))];

    console.log(`📊 إجمالي العقارات في ${city}:`, allPropertyNames.length);

    // استخدام نفس منطق فلترة المباني من النظام الأساسي (مع تحديد المدينة)
    const buildingProperties = filterPropertiesByTypeLogic(allPropertyNames, 'buildings', city);

    console.log(`🏗️ المباني المفلترة في ${city}:`, buildingProperties.length);
    console.log('📋 قائمة المباني:', buildingProperties);

    let html = `<div class="modal-overlay" style="display:flex;">
        <div class="modal-box" style="max-width:420px;">
            <button class="close-modal" onclick="closeModal()" title="إغلاق">×</button>
            <h3 style="color: #28a745;">
                <i class="fas fa-city" style="margin-left: 8px;"></i>
                مرفقات المباني - <span style="color:#2a4b9b">${city}</span>
                <span class="badge" style="background: #28a745; color: white; padding: 4px 8px; border-radius: 12px; font-size: 0.8rem;">${buildingProperties.length}</span>
            </h3>

            <!-- أزرار التنقل الثابتة -->
            <div style="display: flex; gap: 10px; margin-bottom: 15px;">
                <button onclick="showAttachmentsBuildingsModal('${city}')" style="flex: 1; padding: 10px; background: #28a745; color: white; border: none; border-radius: 6px; font-weight: 600; cursor: pointer; opacity: 1;">
                    <i class="fas fa-city" style="margin-left: 5px;"></i>المباني
                </button>
                <button onclick="showAttachmentsLandsModal('${city}')" style="flex: 1; padding: 10px; background: #ffc107; color: #212529; border: none; border-radius: 6px; font-weight: 600; cursor: pointer; opacity: 0.7;">
                    <i class="fas fa-map" style="margin-left: 5px;"></i>الأراضي
                </button>
            </div>

            <input type="text" id="attachmentsBuildingSearch" placeholder="بحث عن مبنى..." style="width:100%;margin-bottom:12px;padding:10px 12px;border-radius:8px;border:1.5px solid #d1d5db;font-size:1.05rem;">
            <div id="attachmentsBuildingList" style="max-height:350px;overflow:auto;display:flex;flex-direction:column;gap:8px;">`;

    if (buildingProperties.length === 0) {
        html += `<div style="text-align: center; padding: 40px; color: #6c757d;">
            <i class="fas fa-city" style="font-size: 3rem; color: #28a745; margin-bottom: 20px;"></i>
            <p style="font-size: 1.1rem; margin-bottom: 10px;">لا توجد مباني</p>
            <p style="font-size: 0.9rem;">لا توجد عقارات تحتوي على مباني في ${city}</p>
        </div>`;
    } else {
        buildingProperties.forEach(prop => {
            html += `<button onclick="showAttachmentsModal('${city}','${prop}')" class="filter-btn" style="width:100%;margin-bottom:0;text-align:right;font-weight:bold;font-size:1.1em;">
                <i class="fas fa-city" style="color:#28a745;margin-left:8px;"></i>${prop}
            </button>`;
        });
    }

    html += `</div>
        <div class="modal-actions">
            <button onclick="closeModal()" class="modal-action-btn close-btn">
                <i class="fas fa-times"></i> إغلاق
            </button>
        </div>
    </div></div>`;

    document.body.insertAdjacentHTML('beforeend', html);

    // بحث ديناميكي
    setTimeout(() => {
        const searchInput = document.getElementById('attachmentsBuildingSearch');
        if (searchInput) {
            searchInput.addEventListener('input', function() {
                const term = this.value.trim().toLowerCase();
                document.querySelectorAll('#attachmentsBuildingList button').forEach(btn => {
                    btn.style.display = btn.textContent.toLowerCase().includes(term) ? '' : 'none';
                });
            });
        }

        document.querySelector('.modal-overlay:last-child').addEventListener('click', function(e) {
            if (e.target === this) closeModal();
        });
    }, 100);
}

// دالة إدارة مرفقات الأراضي
function showAttachmentsLandsModal(city) {
    closeModal();

    console.log(`🗺️ إدارة مرفقات الأراضي في ${city}`);

    // الحصول على جميع العقارات في المدينة
    const cityProperties = properties.filter(p => p.المدينة === city);
    const allPropertyNames = [...new Set(cityProperties.map(p => p['اسم العقار']).filter(name => name))];

    console.log(`📊 إجمالي العقارات في ${city}:`, allPropertyNames.length);

    // استخدام نفس منطق فلترة الأراضي من النظام الأساسي (مع تحديد المدينة)
    const landProperties = filterPropertiesByTypeLogic(allPropertyNames, 'lands', city);

    console.log(`🗺️ الأراضي المفلترة في ${city}:`, landProperties.length);
    console.log('📋 قائمة الأراضي:', landProperties);

    let html = `<div class="modal-overlay" style="display:flex;">
        <div class="modal-box" style="max-width:420px;">
            <button class="close-modal" onclick="closeModal()" title="إغلاق">×</button>
            <h3 style="color: #ffc107;">
                <i class="fas fa-map" style="margin-left: 8px;"></i>
                مرفقات الأراضي - <span style="color:#2a4b9b">${city}</span>
                <span class="badge" style="background: #ffc107; color: #212529; padding: 4px 8px; border-radius: 12px; font-size: 0.8rem;">${landProperties.length}</span>
            </h3>

            <!-- أزرار التنقل الثابتة -->
            <div style="display: flex; gap: 10px; margin-bottom: 15px;">
                <button onclick="showAttachmentsBuildingsModal('${city}')" style="flex: 1; padding: 10px; background: #28a745; color: white; border: none; border-radius: 6px; font-weight: 600; cursor: pointer; opacity: 0.7;">
                    <i class="fas fa-city" style="margin-left: 5px;"></i>المباني
                </button>
                <button onclick="showAttachmentsLandsModal('${city}')" style="flex: 1; padding: 10px; background: #ffc107; color: #212529; border: none; border-radius: 6px; font-weight: 600; cursor: pointer; opacity: 1;">
                    <i class="fas fa-map" style="margin-left: 5px;"></i>الأراضي
                </button>
            </div>

            <input type="text" id="attachmentsLandSearch" placeholder="بحث عن أرض أو حوش..." style="width:100%;margin-bottom:12px;padding:10px 12px;border-radius:8px;border:1.5px solid #d1d5db;font-size:1.05rem;">
            <div id="attachmentsLandList" style="max-height:350px;overflow:auto;display:flex;flex-direction:column;gap:8px;">`;

    if (landProperties.length === 0) {
        html += `<div style="text-align: center; padding: 40px; color: #6c757d;">
            <i class="fas fa-map" style="font-size: 3rem; color: #ffc107; margin-bottom: 20px;"></i>
            <p style="font-size: 1.1rem; margin-bottom: 10px;">لا توجد أراضي</p>
            <p style="font-size: 0.9rem;">لا توجد عقارات تحتوي على أراضي أو حوش في ${city}</p>
        </div>`;
    } else {
        landProperties.forEach(prop => {
            html += `<button onclick="showAttachmentsModal('${city}','${prop}')" class="filter-btn" style="width:100%;margin-bottom:0;text-align:right;font-weight:bold;font-size:1.1em;">
                <i class="fas fa-map" style="color:#ffc107;margin-left:8px;"></i>${prop}
            </button>`;
        });
    }

    html += `</div>
        <div class="modal-actions">
            <button onclick="closeModal()" class="modal-action-btn close-btn">
                <i class="fas fa-times"></i> إغلاق
            </button>
        </div>
    </div></div>`;

    document.body.insertAdjacentHTML('beforeend', html);

    // بحث ديناميكي
    setTimeout(() => {
        const searchInput = document.getElementById('attachmentsLandSearch');
        if (searchInput) {
            searchInput.addEventListener('input', function() {
                const term = this.value.trim().toLowerCase();
                document.querySelectorAll('#attachmentsLandList button').forEach(btn => {
                    btn.style.display = btn.textContent.toLowerCase().includes(term) ? '' : 'none';
                });
            });
        }

        document.querySelector('.modal-overlay:last-child').addEventListener('click', function(e) {
            if (e.target === this) closeModal();
        });
    }, 100);
}



// دالة التكيف التلقائي مع المحتوى
function adjustModalSizeBasedOnContent(attachmentCount) {
    const modal = document.querySelector('.attachments-modal.enhanced');
    if (!modal) return;

    // إزالة الكلاسات السابقة
    modal.classList.remove('no-attachments', 'few-attachments', 'many-attachments');

    // تطبيق الكلاس المناسب حسب عدد المرفقات
    if (attachmentCount === 0) {
        modal.classList.add('no-attachments');
    } else if (attachmentCount <= 5) {
        modal.classList.add('few-attachments');
    } else {
        modal.classList.add('many-attachments');
    }

    console.log(`📏 تم تعديل حجم النافذة حسب المحتوى: ${attachmentCount} مرفق`);
}

// Enhanced attachments modal with real-time cross-device synchronization (Updated to match Card Attachments)
function showAttachmentsModal(city, propertyName) {
    console.log('🎯 فتح نافذة مرفقات العقار...', { city, propertyName });

    // منع التمرير في الخلفية
    document.body.style.overflow = 'hidden';
    document.body.style.position = 'fixed';
    document.body.style.width = '100%';
    document.body.style.height = '100%';
    document.documentElement.style.overflow = 'hidden';

    // إغلاق أي نوافذ موجودة مسبقاً
    closeModal();

    const propertyKey = `${city}_${propertyName}`;

    // التحقق من صلاحيات المستخدم
    const canDelete = isAuthorizedUser();
    const canUpload = isAuthorizedUser();

    // Try to get attachments from Supabase first, fallback to local
    async function loadPropertyAttachments() {
        let propertyAttachments = [];
        let isFromCloud = false;

        // Try Supabase first
        if (typeof getPropertyAttachmentsEnhanced === 'function' && supabaseClient) {
            try {
                console.log(`☁️ جلب مرفقات ${propertyKey} من السحابة...`);
                propertyAttachments = await getPropertyAttachmentsEnhanced(propertyKey);
                isFromCloud = true;
                console.log(`✅ تم جلب ${propertyAttachments.length} مرفق من السحابة`);
            } catch (error) {
                console.warn('⚠️ فشل في جلب المرفقات من السحابة:', error);
            }
        }

        // Fallback to local attachments if no cloud data
        if (!isFromCloud || propertyAttachments.length === 0) {
            propertyAttachments = window.attachments?.[propertyKey] || [];
            console.log(`💾 تم جلب ${propertyAttachments.length} مرفق محلي`);
        }

        return { propertyAttachments, isFromCloud };
    }

    // تصميم مختلف للجوال والشاشات الكبيرة
    const isMobile = isMobileDevice();

    let html;

    if (isMobile) {
        // تصميم مضغوط للجوال
        html = `
        <div class="modal-overlay mobile-attachments-overlay" style="display:flex;">
            <div class="modal-box mobile-attachments-modal compact">
                <!-- رأس مضغوط - صف واحد -->
                <div class="mobile-compact-header">
                    <div class="header-content">
                        <span class="header-title"><i class="fas fa-paperclip"></i> مرفقات العقار</span>
                        <span class="header-separator">|</span>
                        <span class="header-info"><i class="fas fa-building"></i> ${propertyName}</span>
                        <span class="header-separator">|</span>
                        <span class="header-info"><i class="fas fa-map-marker-alt"></i> ${city}</span>
                    </div>

                </div>

                <!-- رسالة للمستخدمين محدودي الصلاحية -->
                ${!canUpload && !canDelete ? `
                <div class="limited-user-notice" style="background: #e3f2fd; border: 1px solid #2196f3; border-radius: 6px; padding: 12px; margin-bottom: 15px; text-align: center;">
                    <i class="fas fa-info-circle" style="color: #2196f3; margin-left: 8px;"></i>
                    <span style="color: #1976d2; font-size: 0.9rem;">يمكنك عرض وتحميل المرفقات فقط</span>
                </div>
                ` : ''}

                <!-- قائمة المرفقات الموسعة -->
                <div class="mobile-attachments-section expanded">
                    <div class="mobile-attachments-header-small">
                        <span><i class="fas fa-folder-open"></i> المرفقات الموجودة</span>
                        <span class="mobile-attachments-count" id="mobilePropertyAttachmentsCount_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}">جاري التحميل...</span>
                    </div>
                    <div id="propertyAttachmentsList_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}" class="mobile-attachments-list">
                        <div class="mobile-loading" style="text-align: center; padding: 20px; color: #666;">
                            <i class="fas fa-spinner fa-spin" style="font-size: 1.5rem; margin-bottom: 10px;"></i>
                            <p style="font-size: 0.9rem;">جاري تحميل المرفقات...</p>
                        </div>
                    </div>
                </div>

                <!-- أزرار الأسفل - مثل الشاشات الكبيرة -->
                <div class="bottom-buttons-row">
                    ${canUpload ? `
                    <button class="bottom-action-btn upload drag-drop-zone"
                            onclick="document.getElementById('propertyFileInput_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}').click()"
                            ondragover="handleDragOver(event)"
                            ondragenter="handleDragEnter(event)"
                            ondragleave="handleDragLeave(event)"
                            ondrop="handleDrop(event, 'propertyFileInput_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}')">
                        <i class="fas fa-plus"></i> إرفاق
                    </button>
                    ` : ''}
                    <button class="bottom-action-btn cancel" onclick="closeModal()">
                        <i class="fas fa-times"></i> إلغاء
                    </button>
                </div>

                <!-- حقل الرفع المخفي -->
                ${canUpload ? `
                <input type="file" id="propertyFileInput_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}" multiple style="display:none" onchange="handleFileUploadEnhanced(event, '${city}', '${propertyName}')">
                ` : ''}
            </div>
        </div>`;
    } else {
        // تصميم مضغوط للشاشات الكبيرة
        html = `
        <div class="modal-overlay enhanced-modal-overlay" style="display:flex;">
            <div class="modal-box attachments-modal enhanced compact">
                <!-- رأس مضغوط - صف واحد مع زر الإغلاق -->
                <div class="compact-header-row">
                    <div class="header-content-inline">
                        <span class="header-title"><i class="fas fa-paperclip"></i> مرفقات العقار</span>
                        <span class="header-separator">|</span>
                        <span class="header-info"><i class="fas fa-building"></i> ${propertyName}</span>
                        <span class="header-separator">|</span>
                        <span class="header-info"><i class="fas fa-map-marker-alt"></i> ${city}</span>
                    </div>
                    <button class="header-close-btn" onclick="closeModal()" title="إغلاق النافذة">
                        <i class="fas fa-times"></i>
                    </button>
                </div>

                <!-- رسالة للمستخدمين محدودي الصلاحية -->
                ${!canUpload && !canDelete ? `
                <div class="limited-user-notice" style="background: #e3f2fd; border: 1px solid #2196f3; border-radius: 8px; padding: 15px; margin-bottom: 20px; text-align: center;">
                    <i class="fas fa-info-circle" style="color: #2196f3; margin-left: 10px; font-size: 1.2rem;"></i>
                    <span style="color: #1976d2; font-size: 1rem; font-weight: 500;">يمكنك عرض وتحميل المرفقات فقط</span>
                </div>
                ` : ''}

                <!-- قائمة المرفقات الموسعة -->
                <div class="attachments-main-section" style="width: 100%;">
                    <div class="attachments-header">
                        <h3><i class="fas fa-folder-open"></i> المرفقات الموجودة</h3>
                    </div>
                    <div id="propertyAttachmentsList_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}" class="attachments-list expanded">
                        <div class="loading-attachments" style="text-align: center; padding: 20px; color: #666;">
                            <i class="fas fa-spinner fa-spin" style="font-size: 2rem; margin-bottom: 10px;"></i>
                            <p>جاري تحميل المرفقات...</p>
                        </div>
                    </div>
                </div>

                <!-- أزرار الأسفل -->
                <div class="bottom-buttons-row">
                    ${canUpload ? `
                    <button class="bottom-action-btn upload drag-drop-zone"
                            onclick="document.getElementById('propertyFileInput_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}').click()"
                            ondragover="handleDragOver(event)"
                            ondragenter="handleDragEnter(event)"
                            ondragleave="handleDragLeave(event)"
                            ondrop="handleDrop(event, 'propertyFileInput_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}')">
                        <i class="fas fa-plus"></i> إرفاق
                    </button>
                    ` : ''}
                    <button class="bottom-action-btn cancel" onclick="closeModal()">
                        <i class="fas fa-times"></i> إلغاء
                    </button>
                </div>

                <!-- حقل الرفع المخفي -->
                ${canUpload ? `
                <input type="file" id="propertyFileInput_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}" multiple style="display:none" onchange="handleFileUploadEnhanced(event, '${city}', '${propertyName}')">
                ` : ''}
            </div>
        </div>`;
    }

    // إدراج النافذة في الصفحة
    document.body.insertAdjacentHTML('beforeend', html);

    // 🎯 تحميل المرفقات بعد إنشاء النافذة
    loadPropertyAttachments().then(({ propertyAttachments, isFromCloud }) => {
        console.log(`📎 تم تحميل ${propertyAttachments.length} مرفق للعقار ${propertyKey} (${isFromCloud ? 'من السحابة' : 'محلي'})`);

        const listContainer = document.getElementById(`propertyAttachmentsList_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
        if (listContainer) {
            // Force visibility with enhanced mobile support
            listContainer.style.display = 'block';
            listContainer.style.visibility = 'visible';
            listContainer.style.opacity = '1';

            // Add mobile-specific classes
            if (isMobileDevice()) {
                listContainer.classList.add('mobile-list', 'mobile-optimized');
                listContainer.style.minHeight = '300px';
                listContainer.style.maxHeight = '60vh';
                listContainer.style.overflowY = 'auto';
            }

            // Render attachments with layout specific to device type
            if (isMobileDevice()) {
                listContainer.innerHTML = renderMobilePropertyAttachmentsList(propertyKey, propertyAttachments);

                // Update mobile attachments count
                const mobileCountBadge = document.getElementById(`mobilePropertyAttachmentsCount_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
                if (mobileCountBadge) {
                    mobileCountBadge.textContent = `${propertyAttachments.length} مرفق`;
                }
            } else {
                listContainer.innerHTML = renderPropertyAttachmentsList(propertyKey, propertyAttachments);

                // Enhanced mobile display optimization
                enhanceAttachmentDisplayForMobile();
            }

            // إعداد اسكرول المرفقات بعد التحميل
            setTimeout(() => {
                setupPropertyAttachmentsScroll(propertyKey);
            }, 100);

            // إضافة سكرول للأعلى لإظهار المرفقات (للشاشات الكبيرة فقط)
            if (!isMobileDevice()) {
                setTimeout(() => {
                    scrollToAttachments();
                }, 300);
            }

            console.log('✅ تم عرض المرفقات في النافذة مع تحسينات الجوال');

            // تطبيق التكيف التلقائي مع المحتوى
            adjustModalSizeBasedOnContent(propertyAttachments.length);

            // Initialize search functionality
            setTimeout(() => {
                initAttachmentsSearch(propertyKey);
                // تهيئة عداد التحديد المتعدد
                updateAttachmentSelectedCount(propertyKey);
            }, 200);
        } else {
            console.error('❌ لم يتم العثور على حاوية قائمة المرفقات');
        }
    }).catch(error => {
        console.error('❌ خطأ في تحميل مرفقات العقار:', error);

        const listContainer = document.getElementById(`propertyAttachmentsList_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
        if (listContainer) {
            listContainer.innerHTML = `
                <div class="error-loading-attachments enhanced-error" style="text-align: center; padding: ${isMobileDevice() ? '40px 20px' : '20px'}; color: #dc3545;">
                    <i class="fas fa-exclamation-triangle" style="font-size: ${isMobileDevice() ? '3rem' : '2rem'}; margin-bottom: ${isMobileDevice() ? '20px' : '10px'};"></i>
                    <p style="font-size: ${isMobileDevice() ? '1.2rem' : '1rem'};">خطأ في تحميل المرفقات</p>
                    <button onclick="refreshPropertyAttachmentsList('${propertyKey}')" class="btn-primary" style="margin-top: ${isMobileDevice() ? '15px' : '10px'}; padding: ${isMobileDevice() ? '12px 20px' : '8px 16px'}; font-size: ${isMobileDevice() ? '1.1rem' : '0.9rem'};">
                        <i class="fas fa-refresh"></i> إعادة المحاولة
                    </button>
                </div>
            `;
        }
    });

    // إضافة حدث إغلاق للمودال
    document.querySelector('.modal-overlay:last-child').addEventListener('click', function(e) {
        if (e.target === this) {
            closeModal();
        }
    });

    // إضافة أحداث السحب والإفلات
    setupPropertyDragAndDrop(propertyKey);
}

// ===== Render Property Attachments List (Desktop) =====
function renderPropertyAttachmentsList(propertyKey, attachments) {
    console.log(`🖥️ عرض ${attachments.length} مرفق للشاشات الكبيرة - العقار: ${propertyKey}`);

    if (!attachments || attachments.length === 0) {
        return `
            <div class="no-attachments-state" style="text-align: center; padding: 40px 20px; color: #6c757d;">
                <i class="fas fa-folder-open" style="font-size: 3rem; margin-bottom: 15px; opacity: 0.5;"></i>
                <h4 style="margin: 10px 0; font-size: 1.2rem;">لا توجد مرفقات</h4>
                <p style="margin: 0; opacity: 0.7;">استخدم منطقة الرفع لإضافة الملفات</p>
            </div>
        `;
    }

    // التحقق من صلاحيات المستخدم
    const canDelete = isAuthorizedUser();
    const canUpload = isAuthorizedUser();

    // إضافة شريط التحكم بالتحديد المتعدد (فقط للمستخدمين المخولين)
    let html = '';
    if (canDelete) {
        html += `
            <div class="attachments-bulk-controls" style="background: #f8f9fa; padding: 12px; border-radius: 8px; margin-bottom: 15px; border: 1px solid #e9ecef;">
                <div style="display: flex; align-items: center; justify-content: space-between; flex-wrap: wrap; gap: 10px;">
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <label class="bulk-select-label" style="display: flex; align-items: center; gap: 8px; cursor: pointer; font-weight: 500;">
                            <input type="checkbox" id="selectAllAttachments_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}"
                                   onchange="toggleSelectAllAttachments('${propertyKey}')"
                                   style="width: 18px; height: 18px; cursor: pointer;">
                            <span>تحديد الكل</span>
                        </label>
                        <span id="selectedCount_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}" class="selected-count"
                              style="color: #6c757d; font-size: 0.9rem; display: none;">
                            (0 محدد)
                        </span>
                    </div>
                    <button id="deleteSelectedBtn_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}"
                            onclick="deleteSelectedAttachments('${propertyKey}')"
                            class="btn-danger bulk-delete-btn"
                            style="display: none; padding: 8px 16px; background: #dc3545; color: white; border: none; border-radius: 6px; cursor: pointer; font-size: 0.9rem;">
                        <i class="fas fa-trash"></i> حذف المحدد
                    </button>
                </div>
            </div>
        `;
    }

    html += attachments.map((file, index) => {
        // Handle both local and cloud file formats
        const fileName = file.file_name || file.name;
        const fileSize = formatFileSize(file.file_size || file.size);
        const fileType = file.file_type || file.type;
        const uploadDate = new Date(file.created_at || file.uploadDate).toLocaleDateString('ar-SA');
        const fileIcon = getFileIcon(fileName);

        // Determine file source
        const isCloudFile = file.file_url || file.url;
        const sourceIcon = isCloudFile ? '☁️' : '💾';
        const sourceText = isCloudFile ? 'سحابي' : 'محلي';
        const fileId = file.id || `local_${index}`;

        return `
            <div class="attachment-item desktop-enhanced-item" data-file-index="${index}" data-file-id="${fileId}">
                ${canDelete ? `
                <div class="attachment-checkbox" style="margin-left: 12px;">
                    <input type="checkbox" class="attachment-select"
                           data-file-id="${fileId}"
                           data-property-key="${propertyKey}"
                           onchange="updateAttachmentSelectedCount('${propertyKey}')"
                           style="width: 16px; height: 16px; cursor: pointer;">
                </div>
                ` : ''}
                <div class="file-icon-enhanced" style="color: ${getFileIconColor(fileName)};">
                    ${fileIcon}
                </div>
                <div class="file-details-enhanced">
                    <div class="file-name-text" title="${fileName}">
                        ${fileName}
                    </div>
                </div>
                <div class="attachment-actions-enhanced">
                    ${isCloudFile ?
                        `<button class="btn-enhanced download-btn" onclick="downloadAttachmentFromSupabase('${file.file_url || file.url}', '${fileName}')" title="تحميل">
                            <i class="fas fa-download"></i>
                            <span>تحميل</span>
                        </button>
                        ${canDelete ? `<button class="btn-enhanced delete-btn" onclick="deletePropertyAttachmentFromSupabase('${file.id}', '${propertyKey}')" title="حذف">
                            <i class="fas fa-trash"></i>
                            <span>حذف</span>
                        </button>` : ''}` :
                        `<button class="btn-enhanced download-btn" onclick="downloadPropertyAttachment('${propertyKey}', ${index})" title="تحميل">
                            <i class="fas fa-download"></i>
                            <span>تحميل</span>
                        </button>
                        ${canDelete ? `<button class="btn-enhanced delete-btn" onclick="deletePropertyAttachment('${propertyKey}', ${index})" title="حذف">
                            <i class="fas fa-trash"></i>
                            <span>حذف</span>
                        </button>` : ''}`
                    }
                </div>
                </div>
            </div>
        `;
    }).join('');

    return html;
}

// ===== Render Mobile Property Attachments List =====
function renderMobilePropertyAttachmentsList(propertyKey, attachments) {
    console.log(`📱 عرض ${attachments.length} مرفق للجوال - العقار: ${propertyKey}`);

    if (!attachments || attachments.length === 0) {
        return `
            <div class="mobile-no-attachments" style="text-align: center; padding: 30px 20px; color: #6c757d;">
                <i class="fas fa-folder-open" style="font-size: 2rem; margin-bottom: 10px; opacity: 0.5;"></i>
                <p style="margin: 0; font-size: 0.9rem;">لا توجد مرفقات</p>
                <small style="opacity: 0.7;">استخدم زر "إضافة مرفق" لرفع الملفات</small>
            </div>
        `;
    }

    // التحقق من صلاحيات المستخدم
    const canDelete = isAuthorizedUser();
    const canUpload = isAuthorizedUser();

    // إضافة شريط التحكم بالتحديد المتعدد للجوال (فقط للمستخدمين المخولين)
    let html = '';
    if (canDelete) {
        html += `
            <div class="mobile-bulk-controls" style="background: #f8f9fa; padding: 10px; border-radius: 8px; margin-bottom: 12px; border: 1px solid #e9ecef;">
                <div style="display: flex; align-items: center; justify-content: space-between; flex-wrap: wrap; gap: 8px;">
                    <label class="mobile-bulk-select-label" style="display: flex; align-items: center; gap: 6px; cursor: pointer; font-weight: 500; font-size: 0.9rem;">
                        <input type="checkbox" id="selectAllAttachments_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}"
                               onchange="toggleSelectAllAttachments('${propertyKey}')"
                               style="width: 16px; height: 16px; cursor: pointer;">
                        <span>تحديد الكل</span>
                    </label>
                    <div style="display: flex; align-items: center; gap: 8px;">
                        <span id="selectedCount_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}" class="mobile-selected-count"
                              style="color: #6c757d; font-size: 0.8rem; display: none;">
                            (0 محدد)
                        </span>
                        <button id="deleteSelectedBtn_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}"
                                onclick="deleteSelectedAttachments('${propertyKey}')"
                                class="mobile-bulk-delete-btn"
                                style="display: none; padding: 6px 12px; background: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 0.8rem;">
                            <i class="fas fa-trash"></i> حذف
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    attachments.forEach((file, index) => {
        // Handle both local and cloud file formats
        const fileName = file.file_name || file.name;
        const fileSize = formatFileSize(file.file_size || file.size);
        const uploadDate = new Date(file.created_at || file.uploadDate).toLocaleDateString('ar-SA');
        const fileIcon = getFileIcon(fileName);

        // Determine file source
        const isCloudFile = file.file_url || file.url;
        const sourceIcon = isCloudFile ? '☁️' : '💾';
        const sourceText = isCloudFile ? 'سحابي' : 'محلي';
        const fileId = file.id || `local_${index}`;

        html += `
            <div class="mobile-attachment-item" data-file-index="${index}" data-file-id="${fileId}">
                ${canDelete ? `
                <!-- تشيك بوكس التحديد -->
                <div class="mobile-attachment-checkbox" style="margin-left: 8px;">
                    <input type="checkbox" class="attachment-select"
                           data-file-id="${fileId}"
                           data-property-key="${propertyKey}"
                           onchange="updateAttachmentSelectedCount('${propertyKey}')"
                           style="width: 14px; height: 14px; cursor: pointer;">
                </div>
                ` : ''}

                <!-- أيقونة الملف -->
                <div class="mobile-file-icon" style="color: ${getFileIconColor(fileName)};">
                    ${fileIcon}
                </div>

                <!-- معلومات الملف -->
                <div class="mobile-file-info">
                    <div class="mobile-file-name" title="${fileName}">
                        ${fileName}
                    </div>
                    <!-- أزرار العمليات أسفل اسم الملف مباشرة -->
                    <div class="mobile-file-actions" style="margin-top: 8px;">
                        ${isCloudFile ?
                            `<button class="mobile-action-btn download" onclick="downloadAttachmentFromSupabase('${file.file_url || file.url}', '${fileName}')" title="تحميل">
                                <i class="fas fa-download"></i>
                                <span>تحميل</span>
                            </button>
                            ${canDelete ? `<button class="mobile-action-btn delete" onclick="deletePropertyAttachmentFromSupabase('${file.id}', '${propertyKey}')" title="حذف">
                                <i class="fas fa-trash"></i>
                                <span>حذف</span>
                            </button>` : ''}` :
                            `<button class="mobile-action-btn download" onclick="downloadPropertyAttachment('${propertyKey}', ${index})" title="تحميل">
                                <i class="fas fa-download"></i>
                                <span>تحميل</span>
                            </button>
                            ${canDelete ? `<button class="mobile-action-btn delete" onclick="deletePropertyAttachment('${propertyKey}', ${index})" title="حذف">
                                <i class="fas fa-trash"></i>
                                <span>حذف</span>
                            </button>` : ''}`
                        }
                    </div>
                </div>
            </div>
        `;
    });

    console.log(`✅ تم إنشاء قائمة المرفقات للجوال - ${attachments.length} عنصر`);
    return html;
}

// ===== Setup Property Attachments Scroll =====
function setupPropertyAttachmentsScroll(propertyKey) {
    console.log('📜 إعداد اسكرول مرفقات العقار مع زر العودة للأعلى...');

    const attachmentsList = document.getElementById(`propertyAttachmentsList_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
    const scrollToTopBtn = document.getElementById(`scrollToTopBtn_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);

    if (!attachmentsList || !scrollToTopBtn) {
        console.warn('⚠️ لم يتم العثور على عناصر الاسكرول للعقار');
        return;
    }

    // إضافة حدث الاسكرول لإظهار/إخفاء زر العودة للأعلى
    attachmentsList.addEventListener('scroll', function() {
        const scrollTop = this.scrollTop;
        const scrollThreshold = 100; // إظهار الزر بعد التمرير 100px

        if (scrollTop > scrollThreshold) {
            scrollToTopBtn.classList.add('show');
        } else {
            scrollToTopBtn.classList.remove('show');
        }
    });

    // تحسين الاسكرول للجوال
    if (isMobileDevice()) {
        attachmentsList.style.webkitOverflowScrolling = 'touch';
        attachmentsList.style.scrollBehavior = 'smooth';
    }

    console.log('✅ تم إعداد اسكرول مرفقات العقار بنجاح');
}

// ===== Scroll to Top Function for Property Attachments =====
function scrollToTopPropertyAttachments(propertyKey) {
    console.log('⬆️ العودة لأعلى قائمة مرفقات العقار...');

    const attachmentsList = document.getElementById(`propertyAttachmentsList_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);

    if (attachmentsList) {
        // اسكرول سلس للأعلى
        attachmentsList.scrollTo({
            top: 0,
            behavior: 'smooth'
        });

        // تأثير بصري للزر
        const scrollToTopBtn = document.getElementById(`scrollToTopBtn_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
        if (scrollToTopBtn) {
            scrollToTopBtn.style.transform = 'scale(0.9)';
            setTimeout(() => {
                scrollToTopBtn.style.transform = 'scale(1)';
            }, 150);
        }

        console.log('✅ تم التمرير لأعلى قائمة مرفقات العقار');
    } else {
        console.warn('⚠️ لم يتم العثور على قائمة مرفقات العقار');
    }
}

// ===== Setup Property Drag and Drop =====
function setupPropertyDragAndDrop(propertyKey) {
    console.log('🎯 إعداد السحب والإفلات لمرفقات العقار...');

    const uploadArea = document.getElementById(`propertyUploadArea_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);

    if (!uploadArea) {
        console.warn('⚠️ لم يتم العثور على منطقة الرفع للعقار');
        return;
    }

    // منع السلوك الافتراضي للسحب والإفلات
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        uploadArea.addEventListener(eventName, preventDefaults, false);
        document.body.addEventListener(eventName, preventDefaults, false);
    });

    // تأثيرات بصرية عند السحب
    ['dragenter', 'dragover'].forEach(eventName => {
        uploadArea.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
        uploadArea.addEventListener(eventName, unhighlight, false);
    });

    // معالجة الإفلات
    uploadArea.addEventListener('drop', handlePropertyDrop, false);

    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    function highlight(e) {
        uploadArea.classList.add('dragover');
        uploadArea.style.borderColor = '#007bff';
        uploadArea.style.backgroundColor = '#f8f9ff';
    }

    function unhighlight(e) {
        uploadArea.classList.remove('dragover');
        uploadArea.style.borderColor = '#007bff';
        uploadArea.style.backgroundColor = 'white';
    }

    function handlePropertyDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;

        if (files.length > 0) {
            // استخراج معلومات العقار من propertyKey
            const [city, propertyName] = propertyKey.split('_');

            // محاكاة حدث تغيير الملف
            const fileInput = document.getElementById(`propertyFileInput_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
            if (fileInput) {
                // إنشاء حدث مخصص
                const event = new Event('change');
                Object.defineProperty(event, 'target', {
                    value: { files: files },
                    enumerable: true
                });

                handleFileUploadEnhanced(event, city, propertyName);
            }
        }
    }

    console.log('✅ تم إعداد السحب والإفلات لمرفقات العقار');
}

// ===== Property Attachment Functions =====

// عرض مرفق العقار
function viewPropertyAttachment(propertyKey, fileIndex) {
    const propertyFiles = attachments[propertyKey] || [];
    const file = propertyFiles[fileIndex];

    if (!file) {
        alert('لم يتم العثور على الملف');
        return;
    }

    // فتح الملف في نافذة جديدة
    const newWindow = window.open('', '_blank');
    newWindow.document.write(`
        <html>
            <head>
                <title>${file.name}</title>
                <style>
                    body { margin: 0; padding: 20px; font-family: Arial, sans-serif; }
                    img { max-width: 100%; height: auto; }
                    .file-info { background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px; }
                </style>
            </head>
            <body>
                <div class="file-info">
                    <h2>${file.name}</h2>
                    <p>الحجم: ${formatFileSize(file.size)}</p>
                    <p>تاريخ الرفع: ${new Date(file.uploadDate).toLocaleDateString('ar-SA')}</p>
                    ${file.notes ? `<p>ملاحظات: ${file.notes}</p>` : ''}
                </div>
                ${file.type.startsWith('image/') ?
                    `<img src="${file.data}" alt="${file.name}">` :
                    `<p>لا يمكن عرض هذا النوع من الملفات. <a href="${file.data}" download="${file.name}">تحميل الملف</a></p>`
                }
            </body>
        </html>
    `);
}

// تحميل مرفق العقار - Enhanced for all file types
function downloadPropertyAttachment(propertyKey, fileIndex) {
    const propertyFiles = attachments[propertyKey] || [];
    const file = propertyFiles[fileIndex];

    if (!file) {
        alert('لم يتم العثور على الملف');
        return;
    }

    try {
        console.log(`📥 بدء تحميل مرفق العقار: ${file.name}`);

        // إظهار مؤشر التحميل
        showDownloadProgress(file.name, true);

        // تحويل base64 إلى blob إذا لزم الأمر
        let downloadUrl = file.data;
        let shouldRevoke = false;

        if (file.data.startsWith('data:')) {
            // تحويل data URL إلى blob للتحميل الصحيح
            const response = fetch(file.data);
            response.then(res => res.blob()).then(blob => {
                downloadUrl = window.URL.createObjectURL(blob);
                shouldRevoke = true;
                performDownload();
            });
        } else {
            performDownload();
        }

        function performDownload() {
            // إنشاء رابط التحميل
            const link = document.createElement('a');
            link.href = downloadUrl;
            link.download = file.name;
            link.style.display = 'none';

            // إضافة الرابط للصفحة وتفعيله
            document.body.appendChild(link);
            link.click();

            // تنظيف الموارد
            document.body.removeChild(link);
            if (shouldRevoke) {
                window.URL.revokeObjectURL(downloadUrl);
            }

            // إخفاء مؤشر التحميل وإظهار رسالة نجاح
            showDownloadProgress(file.name, false);
            showMiniIconNotification('📥', '#28a745', 2000);

            console.log(`✅ تم تحميل مرفق العقار بنجاح: ${file.name}`);
        }

    } catch (error) {
        console.error(`❌ خطأ في تحميل مرفق العقار ${file.name}:`, error);

        // إخفاء مؤشر التحميل وإظهار رسالة خطأ
        showDownloadProgress(file.name, false);
        showMiniIconNotification('❌', '#dc3545', 3000);

        // محاولة التحميل المباشر كبديل
        const link = document.createElement('a');
        link.href = file.data;
        link.download = file.name;
        link.style.display = 'none';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
}

// حذف مرفق العقار
function deletePropertyAttachment(propertyKey, fileIndex) {
    if (!confirm('هل أنت متأكد من حذف هذا المرفق؟')) return;

    attachments[propertyKey] = (attachments[propertyKey] || []).filter((_, index) => index !== fileIndex);
    localStorage.setItem('attachments', JSON.stringify(attachments));

    // تحديث القائمة
    const listContainer = document.getElementById(`propertyAttachmentsList_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
    if (listContainer) {
        if (isMobileDevice()) {
            listContainer.innerHTML = renderMobilePropertyAttachmentsList(propertyKey, attachments[propertyKey] || []);
        } else {
            listContainer.innerHTML = renderPropertyAttachmentsList(propertyKey, attachments[propertyKey] || []);
        }
    }
}

// حذف مرفق العقار من Supabase
async function deletePropertyAttachmentFromSupabase(attachmentId, propertyKey) {
    try {
        if (typeof deleteAttachmentEnhanced === 'function') {
            const success = await deleteAttachmentEnhanced(attachmentId);

            if (success) {
                // تحديث القائمة
                await refreshPropertyAttachmentsList(propertyKey);
                console.log('✅ تم حذف مرفق العقار من السحابة');
            }
        } else {
            console.warn('⚠️ وظيفة حذف المرفقات من السحابة غير متوفرة');
        }
    } catch (error) {
        console.error('❌ خطأ في حذف مرفق العقار:', error);
        // تم إزالة رسالة الخطأ حسب طلب المستخدم
    }
}

// تحديث قائمة مرفقات العقار
async function refreshPropertyAttachmentsList(propertyKey) {
    console.log(`🔄 تحديث قائمة مرفقات العقار: ${propertyKey}`);
    console.log(`📊 حالة المتغيرات: window.attachments=${!!window.attachments}, attachments=${!!attachments}`);

    const listContainer = document.getElementById(`propertyAttachmentsList_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
    if (!listContainer) {
        console.warn('⚠️ لم يتم العثور على حاوية قائمة المرفقات');
        return;
    }

    try {
        // إظهار حالة التحميل
        listContainer.style.opacity = '0.5';

        // تحميل المرفقات المحدثة
        let propertyAttachments = [];
        let isFromCloud = false;

        // محاولة التحميل من السحابة أولاً
        if (typeof getPropertyAttachmentsEnhanced === 'function' && supabaseClient) {
            try {
                console.log(`☁️ جلب مرفقات ${propertyKey} من السحابة...`);
                propertyAttachments = await getPropertyAttachmentsEnhanced(propertyKey);
                isFromCloud = true;
                console.log(`✅ تم جلب ${propertyAttachments.length} مرفق من السحابة`);
            } catch (cloudError) {
                console.warn('⚠️ فشل في تحميل المرفقات من السحابة:', cloudError);
            }
        }

        // التراجع للمرفقات المحلية
        if (!isFromCloud || propertyAttachments.length === 0) {
            // استخدام المتغير العام للمرفقات أو localStorage
            const localAttachments = window.attachments?.[propertyKey] ||
                                   JSON.parse(localStorage.getItem('propertyAttachments') || '{}')[propertyKey] ||
                                   [];
            propertyAttachments = localAttachments;
            console.log(`💾 تم جلب ${propertyAttachments.length} مرفق محلي`);
        }

        // تحديث القائمة
        if (isMobileDevice()) {
            listContainer.innerHTML = renderMobilePropertyAttachmentsList(propertyKey, propertyAttachments);

            // Update mobile attachments count
            const mobileCountBadge = document.getElementById(`mobilePropertyAttachmentsCount_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
            if (mobileCountBadge) {
                mobileCountBadge.textContent = `${propertyAttachments.length} مرفق`;
            }
        } else {
            listContainer.innerHTML = renderPropertyAttachmentsList(propertyKey, propertyAttachments);
        }

        // استعادة الشفافية
        listContainer.style.opacity = '1';

        // تهيئة عداد التحديد المتعدد
        setTimeout(() => {
            updateAttachmentSelectedCount(propertyKey);
        }, 100);

        console.log(`✅ تم تحديث قائمة مرفقات العقار: ${attachments.length} ملف`);

    } catch (error) {
        console.error('❌ خطأ في تحديث قائمة مرفقات العقار:', error);

        // عرض رسالة خطأ
        listContainer.innerHTML = `
            <div class="error-loading-attachments" style="text-align: center; padding: 20px; color: #dc3545;">
                <i class="fas fa-exclamation-triangle" style="font-size: 2rem; margin-bottom: 10px;"></i>
                <p>خطأ في تحديث المرفقات</p>
                <button onclick="refreshPropertyAttachmentsList('${propertyKey}')" class="btn-primary">
                    <i class="fas fa-refresh"></i> إعادة المحاولة
                </button>
            </div>
        `;

        // استعادة الشفافية
        listContainer.style.opacity = '1';
    }
}

// ===== دوال التحديد المتعدد للمرفقات =====

// تبديل تحديد جميع المرفقات
function toggleSelectAllAttachments(propertyKey) {
    console.log(`🔄 تبديل تحديد جميع المرفقات للعقار: ${propertyKey}`);

    const selectAllCheckbox = document.getElementById(`selectAllAttachments_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
    const attachmentCheckboxes = document.querySelectorAll(`.attachment-select[data-property-key="${propertyKey}"]`);

    if (!selectAllCheckbox || !attachmentCheckboxes.length) {
        console.warn('⚠️ لم يتم العثور على عناصر التحديد');
        return;
    }

    const isChecked = selectAllCheckbox.checked;

    // تحديد/إلغاء تحديد جميع المرفقات
    attachmentCheckboxes.forEach(checkbox => {
        checkbox.checked = isChecked;
    });

    // تحديث العداد وزر الحذف
    updateAttachmentSelectedCount(propertyKey);

    console.log(`✅ تم ${isChecked ? 'تحديد' : 'إلغاء تحديد'} جميع المرفقات`);
}

// تحديث عداد المرفقات المحددة
function updateAttachmentSelectedCount(propertyKey) {
    console.log(`🔄 تحديث عداد المرفقات المحددة للعقار: ${propertyKey}`);

    const attachmentCheckboxes = document.querySelectorAll(`.attachment-select[data-property-key="${propertyKey}"]:checked`);
    const totalCheckboxes = document.querySelectorAll(`.attachment-select[data-property-key="${propertyKey}"]`);
    const selectedCount = attachmentCheckboxes.length;
    const totalCount = totalCheckboxes.length;

    console.log(`📊 العداد: ${selectedCount}/${totalCount} مرفق محدد`);

    // تحديث عداد المحدد
    const countElement = document.getElementById(`selectedCount_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
    if (countElement) {
        if (selectedCount > 0) {
            countElement.textContent = `(${selectedCount} محدد)`;
            countElement.style.display = 'inline';
            console.log(`✅ تم إظهار العداد: ${selectedCount} محدد`);
        } else {
            countElement.style.display = 'none';
            console.log(`🔄 تم إخفاء العداد`);
        }
    } else {
        console.warn(`⚠️ لم يتم العثور على عنصر العداد: selectedCount_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
    }

    // تحديث زر الحذف
    const deleteBtnId = `deleteSelectedBtn_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`;
    const deleteBtn = document.getElementById(deleteBtnId);
    console.log(`🔍 البحث عن زر الحذف: ${deleteBtnId}`, deleteBtn ? 'موجود' : 'غير موجود');

    if (deleteBtn) {
        if (selectedCount > 0) {
            deleteBtn.style.display = 'inline-block';
            deleteBtn.style.visibility = 'visible';
            deleteBtn.innerHTML = `<i class="fas fa-trash"></i> حذف المحدد (${selectedCount})`;
            console.log(`✅ تم إظهار زر الحذف: ${selectedCount} مرفق محدد`);
        } else {
            deleteBtn.style.display = 'none';
            console.log(`🔄 تم إخفاء زر الحذف`);
        }
    } else {
        console.error(`❌ لم يتم العثور على زر الحذف: ${deleteBtnId}`);
        // محاولة البحث عن جميع الأزرار المشابهة
        const allDeleteBtns = document.querySelectorAll('[id*="deleteSelectedBtn"]');
        console.log(`🔍 الأزرار الموجودة:`, Array.from(allDeleteBtns).map(btn => btn.id));
    }

    // تحديث حالة تحديد الكل
    const selectAllCheckbox = document.getElementById(`selectAllAttachments_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
    if (selectAllCheckbox) {
        if (selectedCount === 0) {
            selectAllCheckbox.checked = false;
            selectAllCheckbox.indeterminate = false;
        } else if (selectedCount === totalCount) {
            selectAllCheckbox.checked = true;
            selectAllCheckbox.indeterminate = false;
        } else {
            selectAllCheckbox.checked = false;
            selectAllCheckbox.indeterminate = true;
        }
    }

    console.log(`📊 تم تحديث العداد: ${selectedCount}/${totalCount} مرفق محدد`);
}

// دالة مساعدة لفرض إظهار زر الحذف (للتشخيص)
function forceShowDeleteButton(propertyKey) {
    const deleteBtnId = `deleteSelectedBtn_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`;
    const deleteBtn = document.getElementById(deleteBtnId);

    if (deleteBtn) {
        deleteBtn.style.display = 'inline-block';
        deleteBtn.style.visibility = 'visible';
        deleteBtn.innerHTML = `<i class="fas fa-trash"></i> حذف المحدد (تجريبي)`;
        console.log(`🔧 تم فرض إظهار زر الحذف للاختبار`);
    } else {
        console.error(`❌ لم يتم العثور على زر الحذف: ${deleteBtnId}`);
    }
}

// حذف المرفقات المحددة
async function deleteSelectedAttachments(propertyKey) {
    // التحقق من الصلاحيات أولاً
    if (!checkAttachmentPermission('bulk_delete')) {
        return;
    }

    const selectedCheckboxes = document.querySelectorAll(`.attachment-select[data-property-key="${propertyKey}"]:checked`);

    if (selectedCheckboxes.length === 0) {
        alert('لم يتم تحديد أي مرفقات للحذف');
        return;
    }

    // تأكيد واحد فقط في البداية
    const confirmMessage = `هل أنت متأكد من حذف ${selectedCheckboxes.length} مرفق محدد؟\n\nسيتم الحذف مباشرة دون طلب تأكيد إضافي.`;

    if (!confirm(confirmMessage)) {
        return;
    }

    console.log(`🗑️ بدء حذف ${selectedCheckboxes.length} مرفق محدد للعقار: ${propertyKey}`);

    // إنشاء شريط التقدم
    const progressBarHtml = `
        <div id="deleteProgressBar_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}" class="delete-progress-bar" style="
            position: fixed;
            top: 20px;
            right: 20px;
            background: white;
            border: 1px solid #dc3545;
            border-radius: 8px;
            padding: 15px 20px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            z-index: 10000;
            min-width: 300px;
            font-family: 'Cairo', sans-serif;
        ">
            <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
                <i class="fas fa-trash" style="color: #dc3545;"></i>
                <span style="font-weight: 600; color: #dc3545;">جاري حذف المرفقات</span>
            </div>
            <div style="background: #f8f9fa; border-radius: 4px; height: 8px; overflow: hidden; margin-bottom: 8px;">
                <div id="deleteProgressFill_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}" style="
                    background: linear-gradient(90deg, #dc3545, #c82333);
                    height: 100%;
                    width: 0%;
                    transition: width 0.3s ease;
                "></div>
            </div>
            <div id="deleteProgressText_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}" style="
                font-size: 0.9rem;
                color: #6c757d;
                text-align: center;
            ">تم حذف 0 من ${selectedCheckboxes.length} مرفق</div>
        </div>
    `;

    // إضافة شريط التقدم للصفحة
    document.body.insertAdjacentHTML('beforeend', progressBarHtml);

    // تعطيل زر الحذف
    const deleteBtn = document.getElementById(`deleteSelectedBtn_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
    if (deleteBtn) {
        deleteBtn.disabled = true;
        deleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> جاري الحذف...';
    }

    let successCount = 0;
    let errorCount = 0;
    const totalCount = selectedCheckboxes.length;

    // دالة تحديث شريط التقدم
    function updateProgress() {
        const progressFill = document.getElementById(`deleteProgressFill_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
        const progressText = document.getElementById(`deleteProgressText_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);

        if (progressFill && progressText) {
            const completedCount = successCount + errorCount;
            const percentage = (completedCount / totalCount) * 100;

            progressFill.style.width = `${percentage}%`;
            progressText.textContent = `تم حذف ${successCount} من ${totalCount} مرفق${errorCount > 0 ? ` (${errorCount} فشل)` : ''}`;
        }
    }

    // حذف كل مرفق محدد بدون طلب تأكيد إضافي
    for (let i = 0; i < selectedCheckboxes.length; i++) {
        const checkbox = selectedCheckboxes[i];
        const fileId = checkbox.getAttribute('data-file-id');
        const attachmentItem = checkbox.closest('.attachment-item, .mobile-attachment-item');

        try {
            // إضافة تأثير بصري للعنصر قيد الحذف
            if (attachmentItem) {
                attachmentItem.style.opacity = '0.3';
                attachmentItem.style.pointerEvents = 'none';
                attachmentItem.style.transform = 'scale(0.95)';
                attachmentItem.style.transition = 'all 0.3s ease';
            }

            // تحديد نوع الحذف (سحابي أم محلي)
            if (fileId.startsWith('local_')) {
                // حذف محلي فوري
                const fileIndex = parseInt(fileId.replace('local_', ''));
                const localAttachments = window.attachments?.[propertyKey] || [];

                if (localAttachments[fileIndex]) {
                    localAttachments.splice(fileIndex, 1);
                    window.attachments[propertyKey] = localAttachments;
                    localStorage.setItem('attachments', JSON.stringify(window.attachments));
                    successCount++;
                }
            } else {
                // حذف من السحابة بدون تأكيد
                if (typeof deleteAttachmentEnhanced === 'function') {
                    // تعديل مؤقت لتجاوز التأكيد في deleteAttachmentEnhanced
                    const originalConfirm = window.confirm;
                    window.confirm = () => true; // تجاوز التأكيد

                    const success = await deleteAttachmentEnhanced(fileId);

                    // استعادة دالة التأكيد الأصلية
                    window.confirm = originalConfirm;

                    if (success) {
                        successCount++;
                    } else {
                        errorCount++;
                    }
                } else {
                    console.warn('⚠️ وظيفة حذف المرفقات من السحابة غير متوفرة');
                    errorCount++;
                }
            }

        } catch (error) {
            console.error(`❌ خطأ في حذف المرفق ${fileId}:`, error);
            errorCount++;

            // استعادة العنصر في حالة الخطأ
            if (attachmentItem) {
                attachmentItem.style.opacity = '1';
                attachmentItem.style.pointerEvents = 'auto';
                attachmentItem.style.transform = 'scale(1)';
            }
        }

        // تحديث شريط التقدم
        updateProgress();

        // توقف قصير لإظهار التقدم
        await new Promise(resolve => setTimeout(resolve, 100));
    }

    // إخفاء شريط التقدم بعد 2 ثانية
    setTimeout(() => {
        const progressBar = document.getElementById(`deleteProgressBar_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
        if (progressBar) {
            progressBar.style.opacity = '0';
            progressBar.style.transform = 'translateX(100%)';
            progressBar.style.transition = 'all 0.5s ease';
            setTimeout(() => progressBar.remove(), 500);
        }
    }, 2000);

    // تحديث القائمة
    await refreshPropertyAttachmentsList(propertyKey);

    // إظهار نتيجة العملية
    console.log(`✅ تم حذف ${successCount} مرفق بنجاح`);
    if (errorCount > 0) {
        console.warn(`⚠️ فشل في حذف ${errorCount} مرفق`);
    }

    // رسالة نجاح مختصرة
    if (successCount > 0) {
        showToast(`تم حذف ${successCount} مرفق بنجاح${errorCount > 0 ? ` (فشل ${errorCount})` : ''}`, 'success');
    }

    // استعادة زر الحذف
    if (deleteBtn) {
        deleteBtn.disabled = false;
        deleteBtn.style.display = 'none';
    }

    console.log(`🏁 انتهت عملية الحذف المتعدد: ${successCount} نجح، ${errorCount} فشل`);
}

// دالة مساعدة لإظهار رسائل Toast
function showToast(message, type = 'info') {
    const toast = document.createElement('div');
    toast.style.cssText = `
        position: fixed;
        top: 80px;
        right: 20px;
        background: ${type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#007bff'};
        color: white;
        padding: 12px 20px;
        border-radius: 6px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        z-index: 10001;
        font-family: 'Cairo', sans-serif;
        font-size: 0.9rem;
        max-width: 300px;
        opacity: 0;
        transform: translateX(100%);
        transition: all 0.3s ease;
    `;

    toast.innerHTML = `
        <div style="display: flex; align-items: center; gap: 8px;">
            <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
            <span>${message}</span>
        </div>
    `;

    document.body.appendChild(toast);

    // إظهار التوست
    setTimeout(() => {
        toast.style.opacity = '1';
        toast.style.transform = 'translateX(0)';
    }, 100);

    // إخفاء التوست بعد 3 ثواني
    setTimeout(() => {
        toast.style.opacity = '0';
        toast.style.transform = 'translateX(100%)';
        setTimeout(() => toast.remove(), 300);
    }, 3000);
}

// Enhanced file upload with comprehensive cross-device synchronization
async function handleFileUploadEnhanced(event, city, propertyName) {
    console.log(`🚀 بدء رفع الملفات للعقار: ${city}_${propertyName}`);

    const files = event.target.files;
    const propertyKey = `${city}_${propertyName}`;

    console.log(`📁 عدد الملفات المحددة: ${files.length}`);
    console.log(`🔑 مفتاح العقار: ${propertyKey}`);

    // Get notes from the correct element based on the new design
    let notes = '';
    const notesElement = document.getElementById(`propertyUploadNotes_${propertyKey.replace(/[^a-zA-Z0-9]/g, '_')}`) ||
                        document.getElementById('uploadNotes');
    if (notesElement) {
        notes = notesElement.value || '';
        console.log(`📝 ملاحظات: ${notes}`);
    } else {
        console.log(`⚠️ لم يتم العثور على عنصر الملاحظات`);
    }

    if (files.length === 0) {
        console.log(`❌ لا توجد ملفات للرفع`);
        return;
    }

    // Show enhanced upload progress modal
    const progressModal = document.createElement('div');
    progressModal.className = 'modal-overlay';
    progressModal.innerHTML = `
        <div class="modal-box upload-progress-modal" style="text-align: center; padding: 40px; max-width: 500px;">
            <div class="upload-header">
                <i class="fas fa-cloud-upload-alt" style="font-size: 3rem; color: #17a2b8; margin-bottom: 1rem;"></i>
                <h3>رفع الملفات</h3>
            </div>
            <div class="upload-progress">
                <div class="progress-bar-container">
                    <div class="progress-bar">
                        <div class="progress-fill" id="progressFill" style="width: 0%;"></div>
                    </div>
                    <div class="progress-text">
                        <span id="progressText">0 من ${files.length} ملف</span>
                        <span id="progressPercentage">0%</span>
                    </div>
                </div>
                <div class="upload-details">
                    <p id="uploadStatus">جاري التحقق من الاتصال...</p>
                    <p id="currentFile" style="font-size: 0.9rem; color: #666;"></p>
                </div>
            </div>
            <div class="device-sync-info" style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px;">
                <i class="fas fa-sync-alt" style="color: #17a2b8;"></i>
                <small>سيتم مزامنة الملفات تلقائياً مع جميع الأجهزة المتصلة</small>
            </div>
        </div>
    `;
    document.body.appendChild(progressModal);

    try {
        // Check if Supabase is available and working
        const supabaseAvailable = await checkSupabaseAvailability();

        if (supabaseAvailable) {
            document.getElementById('uploadStatus').textContent = 'جاري الرفع إلى السحابة...';

            // Upload files with progress tracking
            await handleFilesEnhanced(files, city, propertyName, notes);

            // Remove progress modal
            progressModal.remove();

            // Update the attachments list immediately
            try {
                await refreshPropertyAttachmentsList(propertyKey);
                console.log('✅ تم تحديث قائمة المرفقات بعد الرفع');
            } catch (updateError) {
                console.warn('⚠️ خطأ في تحديث قائمة المرفقات:', updateError);
            }

            // Show success message with cross-device info
            const successModal = document.createElement('div');
            successModal.className = 'modal-overlay';
            successModal.innerHTML = `
                <div class="modal-box success-modal" style="text-align: center; padding: 40px;">
                    <div class="success-animation">
                        <i class="fas fa-check-circle" style="font-size: 3rem; color: #28a745; margin-bottom: 1rem;"></i>
                    </div>
                    <h3>تم رفع الملفات بنجاح!</h3>
                    <div class="success-details">
                        <p>تم رفع ${files.length} ملف إلى السحابة</p>
                        <div class="sync-status" style="margin: 20px 0; padding: 15px; background: #d4edda; border-radius: 8px; color: #155724;">
                            <i class="fas fa-globe" style="margin-left: 8px;"></i>
                            <strong>متزامن عبر جميع الأجهزة</strong>
                            <br>
                            <small>الملفات متاحة الآن على جميع الأجهزة والمتصفحات</small>
                        </div>
                    </div>
                    <div class="modal-actions">
                        <button class="btn-primary" onclick="closeModal(); refreshPropertyAttachmentsList('${propertyKey}')">
                            <i class="fas fa-eye"></i> عرض المرفقات
                        </button>
                        <button class="btn-secondary" onclick="closeModal()">
                            <i class="fas fa-times"></i> إغلاق
                        </button>
                    </div>
                </div>
            `;
            document.body.appendChild(successModal);

            // Auto-close success modal after 5 seconds
            setTimeout(() => {
                if (document.body.contains(successModal)) {
                    successModal.remove();
                }
            }, 5000);

        } else {
            throw new Error('Supabase غير متوفر');
        }

    } catch (error) {
        console.error('❌ خطأ في رفع الملفات:', error);

        // Update status
        document.getElementById('uploadStatus').textContent = 'جاري الحفظ محلياً...';

        // Fallback to local upload
        await handleFilesLocal(files, city, propertyName, notes);

        // Remove progress modal
        progressModal.remove();

        // Update the attachments list immediately
        try {
            await refreshPropertyAttachmentsList(propertyKey);
            console.log('✅ تم تحديث قائمة المرفقات بعد الحفظ المحلي');
        } catch (updateError) {
            console.warn('⚠️ خطأ في تحديث قائمة المرفقات:', updateError);
        }

        // Show fallback message with sync options
        const fallbackModal = document.createElement('div');
        fallbackModal.className = 'modal-overlay';
        fallbackModal.innerHTML = `
            <div class="modal-box fallback-modal" style="text-align: center; padding: 40px;">
                <i class="fas fa-exclamation-triangle" style="font-size: 3rem; color: #ffc107; margin-bottom: 1rem;"></i>
                <h3>تم الحفظ محلياً</h3>
                <div class="fallback-details">
                    <p>لم يتمكن من الرفع للسحابة، تم حفظ الملفات محلياً</p>
                    <div class="local-storage-info" style="margin: 20px 0; padding: 15px; background: #fff3cd; border-radius: 8px; color: #856404;">
                        <i class="fas fa-laptop" style="margin-left: 8px;"></i>
                        <strong>محفوظ على هذا الجهاز فقط</strong>
                        <br>
                        <small>يمكنك المزامنة لاحقاً عند توفر الاتصال</small>
                    </div>
                </div>
                <div class="modal-actions">
                    <button class="btn-primary" onclick="closeModal(); refreshPropertyAttachmentsList('${propertyKey}')">
                        <i class="fas fa-eye"></i> عرض المرفقات
                    </button>
                    <button class="btn-warning" onclick="closeModal(); retryUploadToSupabase('${city}', '${propertyName}')">
                        <i class="fas fa-sync"></i> إعادة المحاولة
                    </button>
                    <button class="btn-secondary" onclick="closeModal()">
                        <i class="fas fa-times"></i> إغلاق
                    </button>
                </div>
            </div>
        `;
        document.body.appendChild(fallbackModal);
    }
}

// Check if Supabase is available and working
async function checkSupabaseAvailability() {
    try {
        if (!supabaseClient) {
            console.warn('⚠️ Supabase client غير متوفر');
            return false;
        }

        // Test connection with a simple query
        const { error } = await supabaseClient
            .from('attachments')
            .select('count', { count: 'exact', head: true });

        if (error) {
            console.warn('⚠️ جدول المرفقات غير متوفر:', error.message);
            return false;
        }

        console.log('✅ Supabase متوفر ويعمل');
        return true;

    } catch (error) {
        console.warn('⚠️ خطأ في التحقق من Supabase:', error.message);
        return false;
    }
}

// Retry upload to Supabase
async function retryUploadToSupabase(city, propertyName) {
    try {
        const propertyKey = `${city}_${propertyName}`;

        // Show retry modal
        const retryModal = document.createElement('div');
        retryModal.className = 'modal-overlay';
        retryModal.innerHTML = `
            <div class="modal-box" style="text-align: center; padding: 40px;">
                <i class="fas fa-sync fa-spin" style="font-size: 2rem; color: #17a2b8;"></i>
                <h3>جاري إعادة المحاولة...</h3>
                <p>يتم رفع المرفقات المحلية إلى السحابة</p>
            </div>
        `;
        document.body.appendChild(retryModal);

        // Check if Supabase is available
        const supabaseAvailable = await checkSupabaseAvailability();

        if (supabaseAvailable && typeof syncLocalAttachmentsToSupabase === 'function') {
            await syncLocalAttachmentsToSupabase();

            // Remove retry modal
            retryModal.remove();

            // Show success message
            const successModal = document.createElement('div');
            successModal.className = 'modal-overlay';
            successModal.innerHTML = `
                <div class="modal-box" style="text-align: center; padding: 40px;">
                    <i class="fas fa-check-circle" style="font-size: 2rem; color: #28a745;"></i>
                    <h3>تمت المزامنة بنجاح!</h3>
                    <p>تم رفع جميع المرفقات المحلية إلى السحابة</p>
                    <button class="btn-primary" onclick="closeModal(); showAttachmentsModal('${city}', '${propertyName}')">
                        عرض المرفقات
                    </button>
                </div>
            `;
            document.body.appendChild(successModal);

        } else {
            // Remove retry modal
            retryModal.remove();

            // Show error message
            const errorModal = document.createElement('div');
            errorModal.className = 'modal-overlay';
            errorModal.innerHTML = `
                <div class="modal-box" style="text-align: center; padding: 40px;">
                    <i class="fas fa-exclamation-triangle" style="font-size: 2rem; color: #dc3545;"></i>
                    <h3>فشل في المزامنة</h3>
                    <p>لا يزال الاتصال بالسحابة غير متوفر</p>
                    <button class="btn-secondary" onclick="closeModal()">إغلاق</button>
                </div>
            `;
            document.body.appendChild(errorModal);
        }

    } catch (error) {
        console.error('❌ خطأ في إعادة المحاولة:', error);

        // Show error message
        const errorModal = document.createElement('div');
        errorModal.className = 'modal-overlay';
        errorModal.innerHTML = `
            <div class="modal-box" style="text-align: center; padding: 40px;">
                <i class="fas fa-exclamation-triangle" style="font-size: 2rem; color: #dc3545;"></i>
                <h3>خطأ في المزامنة</h3>
                <p>حدث خطأ أثناء محاولة المزامنة</p>
                <button class="btn-secondary" onclick="closeModal()">إغلاق</button>
            </div>
        `;
        document.body.appendChild(errorModal);
    }
}

// Enhanced file handling with detailed progress tracking and cross-device sync
async function handleFilesEnhanced(files, city, propertyName, notes = '') {
    const propertyKey = `${city}_${propertyName}`;
    let filesProcessed = 0;
    const totalFiles = files.length;
    let cloudUploads = 0;
    let localUploads = 0;

    for (const file of files) {
        try {
            // Update current file being processed
            const currentFileElement = document.getElementById('currentFile');
            if (currentFileElement) {
                currentFileElement.innerHTML = `<i class="fas fa-upload"></i> جاري رفع: ${file.name}`;
            }

            // Always try Supabase upload first for cross-device sync
            let uploadSuccess = false;

            if (typeof uploadFileToSupabase === 'function' && supabaseClient) {
                try {
                    console.log(`☁️ رفع ${file.name} إلى السحابة...`);
                    const result = await uploadFileToSupabase(file, propertyKey, notes);

                    if (result) {
                        uploadSuccess = true;
                        cloudUploads++;
                        console.log(`✅ تم رفع ${file.name} إلى السحابة بنجاح`);

                        // Trigger real-time update event
                        window.dispatchEvent(new CustomEvent('attachmentAdded', {
                            detail: { propertyKey, attachment: result }
                        }));
                    }
                } catch (supabaseError) {
                    console.warn(`⚠️ فشل رفع ${file.name} للسحابة:`, supabaseError);
                    // Will fallback to local storage
                }
            }

            // Fallback to local storage if Supabase fails
            if (!uploadSuccess) {
                console.log(`💾 حفظ ${file.name} محلياً كنسخة احتياطية`);
                await handleFileLocal(file, propertyKey, notes);
                localUploads++;
            }

            filesProcessed++;

            // Update progress with enhanced UI
            const progressFill = document.getElementById('progressFill');
            const progressText = document.getElementById('progressText');
            const progressPercentage = document.getElementById('progressPercentage');

            if (progressFill && progressText) {
                const percentage = Math.round((filesProcessed / totalFiles) * 100);
                progressFill.style.width = `${percentage}%`;
                progressText.textContent = `${filesProcessed} من ${totalFiles} ملف`;

                if (progressPercentage) {
                    progressPercentage.textContent = `${percentage}%`;
                }
            }

            // Show completion for current file
            if (currentFileElement) {
                const icon = uploadSuccess ?
                    `<i class="fas fa-cloud-upload-alt" style="color: #28a745;"></i>` :
                    `<i class="fas fa-save" style="color: #ffc107;"></i>`;
                const location = uploadSuccess ? 'السحابة' : 'محلياً';
                currentFileElement.innerHTML = `${icon} تم حفظ ${file.name} ${location}`;
            }

            // Small delay to show progress
            await new Promise(resolve => setTimeout(resolve, 300));

        } catch (error) {
            console.error(`❌ فشل في رفع ${file.name}:`, error);

            // Show error for current file
            const currentFileElement = document.getElementById('currentFile');
            if (currentFileElement) {
                currentFileElement.innerHTML = `<i class="fas fa-times" style="color: #dc3545;"></i> فشل في رفع: ${file.name}`;
            }

            throw error;
        }
    }

    // Final status update with sync info
    const uploadStatus = document.getElementById('uploadStatus');
    if (uploadStatus) {
        const syncInfo = cloudUploads > 0 ?
            `<i class="fas fa-sync-alt" style="color: #17a2b8;"></i> ${cloudUploads} ملف متزامن عبر الأجهزة` :
            `<i class="fas fa-laptop" style="color: #ffc107;"></i> ${localUploads} ملف محفوظ محلياً`;

        uploadStatus.innerHTML = `
            <i class="fas fa-check-circle" style="color: #28a745;"></i> تم رفع جميع الملفات بنجاح!
            <br><small>${syncInfo}</small>
        `;
    }

    // Trigger real-time sync notification
    if (cloudUploads > 0) {
        console.log(`🔄 تم رفع ${cloudUploads} ملف للسحابة - سيتم تحديث جميع الأجهزة المتصلة`);
        showConnectionNotification(`تم مزامنة ${cloudUploads} ملف عبر الأجهزة`, 'success');
    }
}

// Handle single file upload to local storage
async function handleFileLocal(file, propertyKey, notes = '') {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();

        reader.onload = function(e) {
            try {
                const attachment = {
                    name: file.name,
                    type: file.type,
                    size: file.size,
                    data: e.target.result,
                    date: new Date().toISOString(),
                    notes: notes
                };

                // Get existing attachments
                const existingAttachments = JSON.parse(localStorage.getItem('propertyAttachments') || '{}');

                // Initialize property attachments if not exists
                if (!existingAttachments[propertyKey]) {
                    existingAttachments[propertyKey] = [];
                }

                // Add new attachment
                existingAttachments[propertyKey].push(attachment);

                // Save to localStorage
                localStorage.setItem('propertyAttachments', JSON.stringify(existingAttachments));

                // Update global attachments variable
                if (typeof window.attachments !== 'undefined') {
                    window.attachments = existingAttachments;
                }

                resolve(attachment);

            } catch (error) {
                reject(error);
            }
        };

        reader.onerror = function() {
            reject(new Error('فشل في قراءة الملف'));
        };

        reader.readAsDataURL(file);
    });
}

// Fallback local file handling
async function handleFilesLocal(files, city, propertyName, notes = '') {
    const propertyKey = `${city}_${propertyName}`;

    // Initialize global attachments if not exists
    if (!window.attachments) {
        window.attachments = {};
    }

    if (!window.attachments[propertyKey]) {
        window.attachments[propertyKey] = [];
    }

    let filesProcessed = 0;
    const totalFiles = files.length;

    for (const file of files) {
        const reader = new FileReader();

        await new Promise((resolve) => {
            reader.onload = function(e) {
                const attachment = {
                    name: file.name,
                    type: file.type,
                    data: e.target.result,
                    date: new Date().toISOString(),
                    uploadDate: new Date().toISOString(),
                    size: file.size,
                    notes: notes
                };

                window.attachments[propertyKey].push(attachment);
                filesProcessed++;
                resolve();
            };
            reader.readAsDataURL(file);
        });
    }

    // Save to localStorage with both keys for compatibility
    localStorage.setItem('propertyAttachments', JSON.stringify(window.attachments));
    localStorage.setItem('attachments', JSON.stringify(window.attachments));

    console.log(`💾 تم حفظ ${filesProcessed} ملف محلياً للعقار ${propertyKey}`);
}

// Legacy function for backward compatibility
function handleFileUpload(event, city, propertyName) {
    handleFileUploadEnhanced(event, city, propertyName);
}

function handleFiles(files, city, propertyName) {
    handleFilesLocal(files, city, propertyName);
}

// بحث في المرفقات
function filterAttachmentsList(event) {
    const term = event.target.value.toLowerCase();
    document.querySelectorAll('.attachment-item').forEach(item => {
        item.style.display = item.dataset.name.includes(term) ? '' : 'none';
    });
}

// أيقونة الملف حسب النوع
function getFileIcon(fileName) {
    const extension = fileName.split('.').pop().toLowerCase();

    // صور
    if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'svg', 'webp'].includes(extension)) {
        return '<i class="fas fa-image"></i>';
    }
    // PDF
    if (extension === 'pdf') {
        return '<i class="fas fa-file-pdf"></i>';
    }
    // Word
    if (['doc', 'docx'].includes(extension)) {
        return '<i class="fas fa-file-word"></i>';
    }
    // Excel
    if (['xls', 'xlsx', 'csv'].includes(extension)) {
        return '<i class="fas fa-file-excel"></i>';
    }
    // PowerPoint
    if (['ppt', 'pptx'].includes(extension)) {
        return '<i class="fas fa-file-powerpoint"></i>';
    }
    // فيديو
    if (['mp4', 'avi', 'mov', 'wmv', 'flv', 'webm'].includes(extension)) {
        return '<i class="fas fa-file-video"></i>';
    }
    // صوت
    if (['mp3', 'wav', 'flac', 'aac', 'ogg'].includes(extension)) {
        return '<i class="fas fa-file-audio"></i>';
    }
    // نص
    if (['txt', 'rtf'].includes(extension)) {
        return '<i class="fas fa-file-alt"></i>';
    }
    // أرشيف
    if (['zip', 'rar', '7z', 'tar', 'gz'].includes(extension)) {
        return '<i class="fas fa-file-archive"></i>';
    }

    return '<i class="fas fa-file"></i>';
}

// لون أيقونة الملف حسب النوع
function getFileIconColor(fileName) {
    const extension = fileName.split('.').pop().toLowerCase();

    // صور - أزرق
    if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'svg', 'webp'].includes(extension)) {
        return '#007bff';
    }
    // PDF - أحمر
    if (extension === 'pdf') {
        return '#dc3545';
    }
    // Word - أزرق داكن
    if (['doc', 'docx'].includes(extension)) {
        return '#2b579a';
    }
    // Excel - أخضر
    if (['xls', 'xlsx', 'csv'].includes(extension)) {
        return '#217346';
    }
    // PowerPoint - برتقالي
    if (['ppt', 'pptx'].includes(extension)) {
        return '#d24726';
    }
    // فيديو - بنفسجي
    if (['mp4', 'avi', 'mov', 'wmv', 'flv', 'webm'].includes(extension)) {
        return '#6f42c1';
    }
    // صوت - وردي
    if (['mp3', 'wav', 'flac', 'aac', 'ogg'].includes(extension)) {
        return '#e83e8c';
    }
    // نص - رمادي
    if (['txt', 'rtf'].includes(extension)) {
        return '#6c757d';
    }
    // أرشيف - بني
    if (['zip', 'rar', '7z', 'tar', 'gz'].includes(extension)) {
        return '#795548';
    }

    // افتراضي - رمادي
    return '#6c757d';
}

// تنسيق حجم الملف
function formatFileSize(bytes) {
    if (bytes === 0) return '0 بايت';

    const k = 1024;
    const sizes = ['بايت', 'كيلوبايت', 'ميجابايت', 'جيجابايت'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));

    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// عرض المرفق
function viewAttachment(propertyKey, fileName) {
    const att = (attachments[propertyKey] || []).find(a => a.name === fileName);
    if (!att) return;
    if (att.type.startsWith('image/')) {
        let html = `<div class="modal-overlay" style="display:flex;">
            <div class="modal-box" style="max-width:90vw;max-height:90vh;padding:10px;">
                <button class="close-modal" onclick="closeModal()">×</button>
                <img src="${att.data}" style="max-width:100%;max-height:80vh;display:block;margin:0 auto;">
            </div>
        </div>`;
        document.body.insertAdjacentHTML('beforeend', html);
    } else if (att.type === 'application/pdf') {
        let html = `<div class="modal-overlay" style="display:flex;">
            <div class="modal-box" style="max-width:90vw;max-height:90vh;padding:10px;">
                <button class="close-modal" onclick="closeModal()">×</button>
                <iframe src="${att.data}" style="width:100%;height:80vh;border:none;"></iframe>
            </div>
        </div>`;
        document.body.insertAdjacentHTML('beforeend', html);
    } else {
        downloadAttachment(propertyKey, fileName);
    }
}

// تنزيل المرفق
function downloadAttachment(propertyKey, fileName) {
    const att = (attachments[propertyKey] || []).find(a => a.name === fileName);
    if (!att) return;
    const link = document.createElement('a');
    link.href = att.data;
    link.download = att.name;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

// حذف المرفق
function deleteAttachment(propertyKey, fileName, city, propertyName) {
    if (!confirm('هل أنت متأكد من حذف هذا المرفق؟')) return;
    attachments[propertyKey] = (attachments[propertyKey] || []).filter(a => a.name !== fileName);
    localStorage.setItem('propertyAttachments', JSON.stringify(attachments));
    showAttachmentsModal(city, propertyName);
}

// ===== SUPABASE ATTACHMENT FUNCTIONS =====

// View attachment from Supabase
function viewAttachmentFromSupabase(attachmentId, fileUrl, fileType) {
    if (fileType.startsWith('image/')) {
        let html = `<div class="modal-overlay" style="display:flex;">
            <div class="modal-box mobile-friendly" style="max-width:90vw;max-height:90vh;padding:10px;">
                <button class="close-modal mobile-friendly" onclick="closeModal()">×</button>
                <img src="${fileUrl}" style="max-width:100%;max-height:80vh;display:block;margin:0 auto;" alt="مرفق">
            </div>
        </div>`;
        document.body.insertAdjacentHTML('beforeend', html);
    } else if (fileType === 'application/pdf') {
        let html = `<div class="modal-overlay" style="display:flex;">
            <div class="modal-box mobile-friendly" style="max-width:90vw;max-height:90vh;padding:10px;">
                <button class="close-modal mobile-friendly" onclick="closeModal()">×</button>
                <iframe src="${fileUrl}" style="width:100%;height:80vh;border:none;" title="مرفق PDF"></iframe>
            </div>
        </div>`;
        document.body.insertAdjacentHTML('beforeend', html);
    } else {
        // For other file types, download directly
        downloadAttachmentFromSupabase(fileUrl, 'attachment');
    }
}

// Download attachment from Supabase - Enhanced for all file types
async function downloadAttachmentFromSupabase(fileUrl, fileName) {
    try {
        console.log(`📥 بدء تحميل الملف: ${fileName}`);

        // إظهار مؤشر التحميل
        showDownloadProgress(fileName, true);

        // جلب الملف من الرابط
        const response = await fetch(fileUrl);

        if (!response.ok) {
            throw new Error(`فشل في تحميل الملف: ${response.status}`);
        }

        // تحويل الاستجابة إلى blob
        const blob = await response.blob();

        // إنشاء رابط التحميل
        const downloadUrl = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = downloadUrl;
        link.download = fileName;
        link.style.display = 'none';

        // إضافة الرابط للصفحة وتفعيله
        document.body.appendChild(link);
        link.click();

        // تنظيف الموارد
        document.body.removeChild(link);
        window.URL.revokeObjectURL(downloadUrl);

        // إخفاء مؤشر التحميل وإظهار رسالة نجاح
        showDownloadProgress(fileName, false);
        showMiniIconNotification('📥', '#28a745', 2000);

        console.log(`✅ تم تحميل الملف بنجاح: ${fileName}`);

    } catch (error) {
        console.error(`❌ خطأ في تحميل الملف ${fileName}:`, error);

        // إخفاء مؤشر التحميل وإظهار رسالة خطأ
        showDownloadProgress(fileName, false);
        showMiniIconNotification('❌', '#dc3545', 3000);

        // محاولة التحميل المباشر كبديل
        const link = document.createElement('a');
        link.href = fileUrl;
        link.download = fileName;
        link.target = '_blank';
        link.style.display = 'none';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
}

// Delete attachment from Supabase
async function deleteAttachmentFromSupabase(attachmentId, propertyKey) {
    if (!confirm('هل أنت متأكد من حذف هذا المرفق؟ سيتم حذفه نهائياً من السحابة.')) return;

    // Show loading
    const loadingModal = document.createElement('div');
    loadingModal.className = 'modal-overlay';
    loadingModal.innerHTML = `
        <div class="modal-box" style="text-align: center; padding: 40px;">
            <i class="fas fa-spinner fa-spin" style="font-size: 2rem; color: #dc3545;"></i>
            <p style="margin-top: 20px;">جاري حذف المرفق...</p>
        </div>
    `;
    document.body.appendChild(loadingModal);

    try {
        if (typeof deleteAttachmentEnhanced === 'function') {
            await deleteAttachmentEnhanced(attachmentId);

            // Remove loading modal
            loadingModal.remove();

            // Show success message
            const successModal = document.createElement('div');
            successModal.className = 'modal-overlay';
            successModal.innerHTML = `
                <div class="modal-box" style="text-align: center; padding: 40px;">
                    <i class="fas fa-check-circle" style="font-size: 2rem; color: #28a745;"></i>
                    <h3>تم حذف المرفق بنجاح</h3>
                    <button class="btn-primary" onclick="closeModal(); refreshAttachmentsList('${propertyKey}')">
                        تحديث القائمة
                    </button>
                </div>
            `;
            document.body.appendChild(successModal);

        } else {
            throw new Error('Delete function not available');
        }

    } catch (error) {
        console.error('❌ خطأ في حذف المرفق:', error);

        // Remove loading modal
        loadingModal.remove();

        // Show error message
        const errorModal = document.createElement('div');
        errorModal.className = 'modal-overlay';
        errorModal.innerHTML = `
            <div class="modal-box" style="text-align: center; padding: 40px;">
                <i class="fas fa-exclamation-triangle" style="font-size: 2rem; color: #dc3545;"></i>
                <h3>خطأ في حذف المرفق</h3>
                <p>حدث خطأ أثناء حذف المرفق من السحابة</p>
                <button class="btn-secondary" onclick="closeModal()">إغلاق</button>
            </div>
        `;
        document.body.appendChild(errorModal);
    }
}

// Manual sync attachments
async function syncAttachmentsManually(propertyKey) {
    const syncModal = document.createElement('div');
    syncModal.className = 'modal-overlay';
    syncModal.innerHTML = `
        <div class="modal-box" style="text-align: center; padding: 40px;">
            <i class="fas fa-sync fa-spin" style="font-size: 2rem; color: #17a2b8;"></i>
            <h3>جاري المزامنة...</h3>
            <p>يتم مزامنة المرفقات مع السحابة</p>
        </div>
    `;
    document.body.appendChild(syncModal);

    try {
        if (typeof syncLocalAttachmentsToSupabase === 'function') {
            await syncLocalAttachmentsToSupabase();

            // Remove sync modal
            syncModal.remove();

            // Show success message
            const successModal = document.createElement('div');
            successModal.className = 'modal-overlay';
            successModal.innerHTML = `
                <div class="modal-box" style="text-align: center; padding: 40px;">
                    <i class="fas fa-check-circle" style="font-size: 2rem; color: #28a745;"></i>
                    <h3>تمت المزامنة بنجاح</h3>
                    <p>تم مزامنة جميع المرفقات مع السحابة</p>
                    <button class="btn-primary" onclick="closeModal(); refreshAttachmentsList('${propertyKey}')">
                        تحديث القائمة
                    </button>
                </div>
            `;
            document.body.appendChild(successModal);

        } else {
            throw new Error('Sync function not available');
        }

    } catch (error) {
        console.error('❌ خطأ في المزامنة:', error);

        // Remove sync modal
        syncModal.remove();

        // Show error message
        const errorModal = document.createElement('div');
        errorModal.className = 'modal-overlay';
        errorModal.innerHTML = `
            <div class="modal-box" style="text-align: center; padding: 40px;">
                <i class="fas fa-exclamation-triangle" style="font-size: 2rem; color: #dc3545;"></i>
                <h3>خطأ في المزامنة</h3>
                <p>حدث خطأ أثناء مزامنة المرفقات</p>
                <button class="btn-secondary" onclick="closeModal()">إغلاق</button>
            </div>
        `;
        document.body.appendChild(errorModal);
    }
}

// Enhanced drag and drop setup with cross-device support
function setupDragAndDropEnhanced(propertyKey) {
    const uploadZone = document.querySelector('.upload-zone');
    if (!uploadZone) return;

    // Enhanced mobile-friendly drag and drop
    uploadZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadZone.classList.add('drag-over');
        uploadZone.style.borderColor = '#17a2b8';
        uploadZone.style.backgroundColor = '#f8f9fa';
        uploadZone.style.transform = 'scale(1.02)';
    });

    uploadZone.addEventListener('dragleave', (e) => {
        e.preventDefault();
        uploadZone.classList.remove('drag-over');
        uploadZone.style.borderColor = '#17a2b8';
        uploadZone.style.backgroundColor = '';
        uploadZone.style.transform = 'scale(1)';
    });

    uploadZone.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadZone.classList.remove('drag-over');
        uploadZone.style.borderColor = '#17a2b8';
        uploadZone.style.backgroundColor = '';
        uploadZone.style.transform = 'scale(1)';

        const files = e.dataTransfer.files;
        if (files.length > 0) {
            // Extract city and property name from the current modal
            const modal = uploadZone.closest('.attachments-modal');
            if (modal) {
                const propertyKeyFromModal = modal.getAttribute('data-property-key');
                if (propertyKeyFromModal) {
                    const [city, propertyName] = propertyKeyFromModal.split('_');
                    handleFileUploadEnhanced({ target: { files } }, city, propertyName);
                }
            }
        }
    });

    // Touch support for mobile devices
    uploadZone.addEventListener('touchstart', () => {
        uploadZone.style.backgroundColor = '#f8f9fa';
    });

    uploadZone.addEventListener('touchend', () => {
        uploadZone.style.backgroundColor = '';
    });
}

// Setup real-time updates for modal
function setupModalRealTimeUpdates(propertyKey) {
    // Listen for custom attachment events
    window.addEventListener('attachmentAdded', (event) => {
        if (event.detail.propertyKey === propertyKey) {
            console.log('🔄 ملف جديد تم إضافته من جهاز آخر');
            refreshAttachmentsList(propertyKey);
        }
    });

    window.addEventListener('attachmentDeleted', (event) => {
        if (event.detail.propertyKey === propertyKey) {
            console.log('🗑️ ملف تم حذفه من جهاز آخر');
            refreshAttachmentsList(propertyKey);
        }
    });
}

// Update sync status indicator
function updateSyncStatus() {
    const syncStatus = document.getElementById('syncStatus');
    if (!syncStatus) return;

    if (typeof checkSupabaseAvailability === 'function') {
        checkSupabaseAvailability().then(isAvailable => {
            if (isAvailable) {
                syncStatus.innerHTML = '<i class="fas fa-sync-alt" style="color: #28a745;"></i> متزامن';
                syncStatus.style.color = '#28a745';
            } else {
                syncStatus.innerHTML = '<i class="fas fa-exclamation-triangle" style="color: #ffc107;"></i> محلي فقط';
                syncStatus.style.color = '#ffc107';
            }
        });
    } else {
        syncStatus.innerHTML = '<i class="fas fa-laptop" style="color: #6c757d;"></i> محلي';
        syncStatus.style.color = '#6c757d';
    }
}

// Refresh attachments list in modal
async function refreshAttachmentsList(propertyKey) {
    try {
        const modal = document.querySelector(`.attachments-modal[data-property-key="${propertyKey}"]`);
        if (!modal) return;

        const listContainer = modal.querySelector('.attachments-list');
        if (!listContainer) return;

        // Show loading state
        listContainer.style.opacity = '0.7';
        listContainer.innerHTML = `
            <div style="text-align: center; padding: 30px;">
                <i class="fas fa-spinner fa-spin" style="font-size: 2rem; color: #17a2b8;"></i>
                <p style="margin-top: 15px; color: #6c757d;">جاري تحديث المرفقات...</p>
            </div>
        `;

        // Get updated attachments - prioritize Supabase
        let attachments = [];
        let isFromCloud = false;

        // Try Supabase first
        if (typeof getPropertyAttachmentsEnhanced === 'function' && supabaseClient) {
            try {
                attachments = await getPropertyAttachmentsEnhanced(propertyKey);
                isFromCloud = true;
                console.log(`☁️ تم جلب ${attachments.length} مرفق من السحابة`);
            } catch (error) {
                console.warn('⚠️ فشل في جلب المرفقات من السحابة:', error);
            }
        }

        // Fallback to local storage
        if (!isFromCloud || attachments.length === 0) {
            attachments = window.attachments?.[propertyKey] || [];
            console.log(`💾 تم جلب ${attachments.length} مرفق محلي`);
        }

        // Update the list with sync status indicator
        if (attachments.length === 0) {
            listContainer.innerHTML = `
                <div class="no-attachments-state" style="text-align:center;color:#888;padding:40px 20px;">
                    <i class="fas fa-cloud-upload-alt" style="font-size: 3rem; color: #ccc; margin-bottom: 15px;"></i>
                    <h4 style="margin: 10px 0; color: #6c757d;">لا توجد مرفقات بعد</h4>
                    <p style="color: #aaa; margin: 0;">اسحب الملفات هنا أو استخدم زر الرفع لإضافة مرفقات</p>
                    ${isFromCloud ?
                        '<p style="color: #17a2b8; margin-top: 10px;"><i class="fas fa-sync-alt"></i> متزامن مع السحابة</p>' :
                        '<p style="color: #ffc107; margin-top: 10px;"><i class="fas fa-laptop"></i> محلي فقط</p>'
                    }
                </div>
            `;
        } else {
            listContainer.innerHTML = attachments.map(att => {
                const fileName = att.file_name || att.name;
                const fileType = att.file_type || att.type;
                const fileSize = att.file_size || att.size;
                const uploadDate = att.created_at || att.date;
                const notes = att.notes || '';
                const isCloudFile = !!att.id; // Has Supabase ID

                return `
                    <div class="attachment-item enhanced" data-name="${fileName.toLowerCase()}" ${att.id ? `data-id="${att.id}"` : ''}>
                        <div class="attachment-icon">
                            ${getFileIcon(fileName)}
                            ${isCloudFile ?
                                '<i class="fas fa-cloud" style="position: absolute; top: -5px; right: -5px; font-size: 0.8rem; color: #17a2b8;" title="متزامن مع السحابة"></i>' :
                                '<i class="fas fa-laptop" style="position: absolute; top: -5px; right: -5px; font-size: 0.8rem; color: #ffc107;" title="محلي فقط"></i>'
                            }
                        </div>
                        <div class="attachment-details">
                            <div class="attachment-name" title="${fileName}">${fileName}</div>
                            <div class="attachment-meta">
                                <span class="file-size">${formatFileSize(fileSize)}</span>
                                <span class="upload-date">${formatDate(uploadDate)}</span>
                                ${notes ? `<span class="file-notes" title="${notes}"><i class="fas fa-sticky-note"></i></span>` : ''}
                                ${isCloudFile ?
                                    '<span class="sync-status" style="color: #17a2b8;" title="متزامن عبر الأجهزة"><i class="fas fa-sync-alt"></i></span>' :
                                    '<span class="sync-status" style="color: #ffc107;" title="محلي فقط"><i class="fas fa-laptop"></i></span>'
                                }
                            </div>
                        </div>
                        <div class="attachment-actions">
                            ${isCloudFile ?
                                // Supabase attachment
                                `<button class="attachment-btn view-btn" onclick="viewAttachmentFromSupabase('${att.id}', '${att.file_url}', '${fileType}')" title="معاينة">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button class="attachment-btn download-btn" onclick="downloadAttachmentFromSupabase('${att.file_url}', '${fileName}')" title="تحميل">
                                    <i class="fas fa-download"></i>
                                </button>
                                <button class="attachment-btn delete-btn" onclick="deleteAttachmentFromSupabase('${att.id}', '${propertyKey}')" title="حذف من جميع الأجهزة">
                                    <i class="fas fa-trash"></i>
                                </button>` :
                                // Local attachment
                                `<button class="attachment-btn view-btn" onclick="viewAttachment('${propertyKey}', '${fileName}')" title="معاينة">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button class="attachment-btn download-btn" onclick="downloadAttachment('${propertyKey}', '${fileName}')" title="تحميل">
                                    <i class="fas fa-download"></i>
                                </button>
                                <button class="attachment-btn delete-btn" onclick="deleteAttachment('${propertyKey}', '${fileName}')" title="حذف محلي">
                                    <i class="fas fa-trash"></i>
                                </button>
                                <button class="attachment-btn sync-btn" onclick="syncLocalAttachment('${propertyKey}', '${fileName}')" title="مزامنة مع السحابة">
                                    <i class="fas fa-cloud-upload-alt"></i>
                                </button>`
                            }
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Update attachment count
        const countElement = modal.querySelector('.attachment-count');
        if (countElement) {
            countElement.textContent = `(${attachments.length} ملف)`;
        }

        // Update footer summary with sync status
        const summaryElement = modal.querySelector('.attachments-summary');
        if (summaryElement) {
            const cloudFiles = attachments.filter(att => att.id).length;
            const localFiles = attachments.length - cloudFiles;

            let summaryText = `<i class="fas fa-info-circle"></i> ${attachments.length} ملف`;

            if (isFromCloud && cloudFiles > 0) {
                summaryText += ` • <i class="fas fa-sync-alt" style="color: #17a2b8;"></i> ${cloudFiles} متزامن عبر الأجهزة`;
                if (localFiles > 0) {
                    summaryText += ` • <i class="fas fa-laptop" style="color: #ffc107;"></i> ${localFiles} محلي`;
                }
            } else if (localFiles > 0) {
                summaryText += ` • <i class="fas fa-laptop" style="color: #ffc107;"></i> محفوظ محلياً فقط`;
            }

            summaryElement.innerHTML = summaryText;
        }

        // Restore opacity
        listContainer.style.opacity = '1';

        console.log(`✅ تم تحديث قائمة المرفقات: ${attachments.length} ملف`);

    } catch (error) {
        console.error('❌ خطأ في تحديث قائمة المرفقات:', error);

        const listContainer = document.querySelector('.attachments-list');
        if (listContainer) {
            listContainer.innerHTML = `
                <div class="error-state" style="text-align: center; padding: 30px;">
                    <i class="fas fa-exclamation-triangle" style="font-size: 2rem; color: #dc3545; margin-bottom: 15px;"></i>
                    <p style="color: #dc3545;">خطأ في تحميل المرفقات</p>
                    <button onclick="refreshAttachmentsList('${propertyKey}')" class="btn-secondary">إعادة المحاولة</button>
                </div>
            `;
            listContainer.style.opacity = '1';
        }
    }
}

// Sync local attachment to cloud
async function syncLocalAttachment(propertyKey, fileName) {
    try {
        console.log(`🔄 مزامنة ملف محلي: ${fileName}`);

        // Get local attachment
        const localAttachments = window.attachments?.[propertyKey] || [];
        const attachment = localAttachments.find(att => att.name === fileName);

        if (!attachment) {
            throw new Error('الملف المحلي غير موجود');
        }

        // Convert base64 to file
        const response = await fetch(attachment.data);
        const blob = await response.blob();
        const file = new File([blob], attachment.name, { type: attachment.type });

        // Upload to Supabase
        if (typeof uploadFileToSupabase === 'function') {
            const result = await uploadFileToSupabase(file, propertyKey, attachment.notes || '');

            if (result) {
                console.log(`✅ تم مزامنة ${fileName} مع السحابة`);
                showConnectionNotification(`تم مزامنة ${fileName} مع السحابة`, 'success');

                // Remove from local storage
                const updatedLocal = localAttachments.filter(att => att.name !== fileName);
                window.attachments[propertyKey] = updatedLocal;
                localStorage.setItem('propertyAttachments', JSON.stringify(window.attachments));

                // Refresh the list
                refreshAttachmentsList(propertyKey);

                return true;
            }
        }

        throw new Error('فشل في رفع الملف للسحابة');

    } catch (error) {
        console.error(`❌ خطأ في مزامنة ${fileName}:`, error);
        showConnectionNotification(`فشل في مزامنة ${fileName}`, 'error');
        return false;
    }
}

// Setup real-time sync for attachments
function setupAttachmentRealTimeSync() {
    if (typeof subscribeToAttachmentChanges === 'function') {
        try {
            const subscription = subscribeToAttachmentChanges();

            if (subscription) {
                console.log('🔔 تم تفعيل المزامنة الفورية للمرفقات');

                // Listen for attachment changes
                window.addEventListener('attachmentAdded', (event) => {
                    const { propertyKey } = event.detail;
                    console.log(`📎 ملف جديد تم إضافته: ${propertyKey}`);

                    // Refresh any open attachment modals for this property
                    const modal = document.querySelector(`.attachments-modal[data-property-key="${propertyKey}"]`);
                    if (modal) {
                        refreshAttachmentsList(propertyKey);
                    }

                    showConnectionNotification('تم إضافة ملف جديد من جهاز آخر', 'info');
                });

                window.addEventListener('attachmentDeleted', (event) => {
                    const { propertyKey } = event.detail;
                    console.log(`🗑️ ملف تم حذفه: ${propertyKey}`);

                    // Refresh any open attachment modals for this property
                    const modal = document.querySelector(`.attachments-modal[data-property-key="${propertyKey}"]`);
                    if (modal) {
                        refreshAttachmentsList(propertyKey);
                    }

                    showConnectionNotification('تم حذف ملف من جهاز آخر', 'info');
                });

                return subscription;
            }
        } catch (error) {
            console.error('❌ خطأ في تفعيل المزامنة الفورية:', error);
        }
    }

    return null;
}

// Show local attachments modal (fallback)
function showAttachmentsModalLocal(city, propertyName) {
    const propertyKey = `${city}_${propertyName}`;
    const propertyAttachments = attachments[propertyKey] || [];

    // Use the original function logic but with local data only
    showAttachmentsModal(city, propertyName);
}

// ===== ATTACHMENTS SYSTEM INITIALIZATION =====

// Initialize the enhanced cross-device attachments system
let isSystemInitialized = false;
let initializationPromise = null;

async function initializeAttachmentsSystem() {
    // Prevent multiple initializations
    if (isSystemInitialized) {
        console.log('✅ نظام المرفقات مهيأ بالفعل');
        return;
    }

    if (initializationPromise) {
        return initializationPromise;
    }

    initializationPromise = performInitialization();
    return initializationPromise;
}

async function performInitialization() {
    try {
        if (window.debugMode) {
            console.log('🚀 تهيئة نظام المرفقات المحسن...');
        }

        // Check if Supabase is available
        if (!supabaseClient) {
            console.warn('⚠️ Supabase غير متوفر، سيتم استخدام النظام المحلي فقط');
            if (window.debugMode) {
                showConnectionNotification('النظام المحلي فقط', 'warning');
            }
            isSystemInitialized = true;
            return;
        }

        // Test Supabase connection first
        const isSupabaseAvailable = await checkSupabaseAvailability();
        if (!isSupabaseAvailable) {
            console.warn('⚠️ لا يمكن الاتصال بـ Supabase');
            if (window.debugMode) {
                showConnectionNotification('لا يمكن الاتصال بالسحابة', 'warning');
            }
            isSystemInitialized = true;
            return;
        }

        // Ensure Supabase attachments table exists
        if (typeof ensureAttachmentsTableExists === 'function') {
            await ensureAttachmentsTableExists();
            if (window.debugMode) {
                console.log('✅ جدول المرفقات جاهز');
            }
        }

        // Ensure storage bucket exists
        if (typeof ensureStorageBucketExists === 'function') {
            await ensureStorageBucketExists();
            if (window.debugMode) {
                console.log('✅ مجلد التخزين جاهز');
            }
        }

        // Subscribe to real-time attachment changes
        if (typeof subscribeToAttachmentChanges === 'function') {
            const subscription = subscribeToAttachmentChanges();
            if (subscription) {
                console.log('🔔 تم تفعيل المزامنة الفورية');
                showConnectionNotification('المزامنة الفورية نشطة', 'success');
            }
        }

        // Setup attachment real-time sync
        setupAttachmentRealTimeSync();

        // Test attachment functions (only in debug mode)
        if (window.debugMode) {
            await testAttachmentFunctions();
        }

        // Initialize connection indicator
        updateConnectionIndicator(true);

        // Sync local attachments to Supabase (background process)
        setTimeout(async () => {
            if (typeof syncLocalAttachmentsToSupabase === 'function') {
                try {
                    if (window.debugMode) {
                        console.log('🔄 بدء مزامنة المرفقات المحلية...');
                    }
                    await syncLocalAttachmentsToSupabase();
                    if (window.debugMode) {
                        console.log('✅ تم مزامنة المرفقات المحلية');
                        showConnectionNotification('تم مزامنة المرفقات المحلية', 'success');
                    }
                } catch (error) {
                    if (window.debugMode) {
                        console.warn('⚠️ فشل في مزامنة المرفقات:', error.message);
                    }
                }
            }
        }, 5000); // Wait 5 seconds after app load

        // Setup periodic connection check (less frequent)
        setInterval(async () => {
            const isConnected = await checkSupabaseAvailability();
            updateConnectionIndicator(isConnected);
        }, 60000); // Check every 60 seconds instead of 30

        console.log('🎉 تم تهيئة نظام المرفقات بنجاح');
        isSystemInitialized = true;

    } catch (error) {
        console.error('❌ خطأ في تهيئة نظام المرفقات:', error);
        if (window.debugMode) {
            showConnectionNotification('خطأ في التهيئة', 'error');
        }
        updateConnectionIndicator(false);
        isSystemInitialized = true;
    }
}

// Test attachment functions availability
async function testAttachmentFunctions() {
    try {
        console.log('🧪 اختبار وظائف المرفقات...');

        const functions = [
            'ensureAttachmentsTableExists',
            'uploadFileToSupabase',
            'getPropertyAttachmentsEnhanced',
            'deleteAttachmentEnhanced',
            'syncLocalAttachmentsToSupabase',
            'subscribeToAttachmentChanges'
        ];

        const availableFunctions = [];
        const missingFunctions = [];

        functions.forEach(funcName => {
            if (typeof window[funcName] === 'function') {
                availableFunctions.push(funcName);
            } else {
                missingFunctions.push(funcName);
            }
        });

        console.log('✅ وظائف متوفرة:', availableFunctions);
        if (missingFunctions.length > 0) {
            console.warn('⚠️ وظائف مفقودة:', missingFunctions);
        }

        // Test Supabase connection for attachments
        if (supabaseClient) {
            try {
                const { data, error } = await supabaseClient
                    .from('attachments')
                    .select('count', { count: 'exact', head: true });

                if (error) {
                    console.warn('⚠️ جدول المرفقات غير موجود أو غير متاح:', error.message);
                } else {
                    console.log('✅ جدول المرفقات متاح');
                }
            } catch (error) {
                console.warn('⚠️ خطأ في اختبار جدول المرفقات:', error.message);
            }
        }

    } catch (error) {
        console.error('❌ خطأ في اختبار وظائف المرفقات:', error);
    }
}

// Format date for display
function formatDate(dateString) {
    if (!dateString) return 'غير محدد';

    try {
        const date = new Date(dateString);
        return date.toLocaleDateString('ar-SA', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
    } catch (error) {
        return 'تاريخ غير صحيح';
    }
}

// Enhanced file icon function (legacy - replaced by new getFileIcon above)

// Enhanced file size formatting
function formatFileSize(bytes) {
    if (!bytes || bytes === 0) return '0 بايت';

    const k = 1024;
    const sizes = ['بايت', 'كيلوبايت', 'ميجابايت', 'جيجابايت', 'تيرابايت'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));

    if (i >= sizes.length) return 'ملف كبير جداً';

    const size = parseFloat((bytes / Math.pow(k, i)).toFixed(2));
    return `${size} ${sizes[i]}`;
}

// Check if device is mobile
function isMobileDevice() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
           window.innerWidth <= 768;
}

// ===== نظام إدارة الإشعارات =====

// إعدادات الإشعارات
const notificationSettings = {
    // إعدادات عامة
    enabled: true,
    developerMode: false,

    // أنواع الإشعارات المسموحة
    allowedTypes: {
        error: true,        // أخطاء مهمة
        success: true,      // نجاح العمليات المهمة
        warning: true,      // تحذيرات مهمة
        info: false,        // معلومات عامة (مخفية افتراضياً)
        debug: false        // رسائل التطوير (مخفية افتراضياً)
    },

    // العمليات المهمة التي تحتاج إشعارات
    importantOperations: [
        'حفظ', 'تحديث', 'حذف', 'مزامنة', 'استيراد', 'تصدير',
        'تسجيل الدخول', 'تسجيل الخروج', 'إصلاح الإحصائيات'
    ]
};

// تحميل إعدادات الإشعارات من localStorage
function loadNotificationSettings() {
    const saved = localStorage.getItem('notificationSettings');
    if (saved) {
        try {
            const parsed = JSON.parse(saved);
            Object.assign(notificationSettings, parsed);
        } catch (error) {
            console.warn('خطأ في تحميل إعدادات الإشعارات:', error);
        }
    }
}

// حفظ إعدادات الإشعارات في localStorage
function saveNotificationSettings() {
    localStorage.setItem('notificationSettings', JSON.stringify(notificationSettings));
}

// فحص ما إذا كان الإشعار مهم
function isImportantNotification(message, type) {
    // الأخطاء دائماً مهمة
    if (type === 'error') return true;

    // فحص العمليات المهمة
    const isImportantOperation = notificationSettings.importantOperations.some(op =>
        message.includes(op)
    );

    return isImportantOperation;
}

// Show toast notification مع نظام الفلترة والأيقونات المصغرة
function showToast(message, type = 'info', duration = 3000) {
    // تحميل الإعدادات
    loadNotificationSettings();

    // فحص ما إذا كانت الإشعارات مفعلة
    if (!notificationSettings.enabled) {
        console.log(`[TOAST DISABLED] ${type.toUpperCase()}: ${message}`);
        return;
    }

    // تحويل الرسائل إلى أيقونات صغيرة إذا كانت رسائل حالة
    const iconNotification = convertToIconNotification(message, type);
    if (iconNotification) {
        showMiniIconNotification(iconNotification.icon, iconNotification.color, duration);
        return;
    }

    // فحص نوع الإشعار
    if (!notificationSettings.allowedTypes[type]) {
        // إذا كان الإشعار غير مسموح، تحقق من أهميته
        if (!isImportantNotification(message, type)) {
            console.log(`[TOAST FILTERED] ${type.toUpperCase()}: ${message}`);
            return;
        }
    }

    // في وضع المطور، اعرض جميع الإشعارات
    if (notificationSettings.developerMode) {
        console.log(`[DEVELOPER MODE] ${type.toUpperCase()}: ${message}`);
    }

    const toast = document.createElement('div');
    toast.className = `message-toast ${type}`;
    toast.textContent = message;

    document.body.appendChild(toast);

    // Auto remove after duration
    setTimeout(() => {
        if (toast.parentNode) {
            toast.remove();
        }
    }, duration);

    return toast;
}

// تحويل الرسائل إلى أيقونات صغيرة
function convertToIconNotification(message, type) {
    // قائمة الرسائل التي يجب تحويلها إلى أيقونات
    const statusMessages = {
        'جميع المكونات تعمل بشكل صحيح': { icon: '✓', color: '#28a745' },
        'جميع المكونات تظهر بشكل صحيح': { icon: '✓', color: '#28a745' },
        'النظام يعمل بشكل مثالي': { icon: '✓', color: '#28a745' },
        'تم الاتصال بنجاح': { icon: '●', color: '#28a745' },
        'المزامنة الفورية نشطة': { icon: '●', color: '#17a2b8' },
        'تم مزامنة': { icon: '↻', color: '#17a2b8' },
        'تم حفظ': { icon: '💾', color: '#28a745' },
        'تم ربط': { icon: '🔗', color: '#28a745' },
        'تم فصل': { icon: '🔓', color: '#ffc107' },
        'تم حذف': { icon: '🗑', color: '#dc3545' },
        'تم إضافة': { icon: '+', color: '#28a745' },
        'تم تحديث': { icon: '↻', color: '#17a2b8' },
        'فشل في': { icon: '✗', color: '#dc3545' },
        'خطأ في': { icon: '!', color: '#dc3545' },
        'تحذير': { icon: '⚠', color: '#ffc107' },
        'لا يمكن الاتصال': { icon: '●', color: '#dc3545' },
        'غير متوفر': { icon: '○', color: '#6c757d' }
    };

    // البحث عن تطابق في الرسالة
    for (const [keyword, iconData] of Object.entries(statusMessages)) {
        if (message.includes(keyword)) {
            return iconData;
        }
    }

    // إذا كان نوع الإشعار success أو error أو warning، استخدم أيقونة افتراضية
    if (type === 'success') return { icon: '✓', color: '#28a745' };
    if (type === 'error') return { icon: '✗', color: '#dc3545' };
    if (type === 'warning') return { icon: '⚠', color: '#ffc107' };
    if (type === 'info') return { icon: 'ℹ', color: '#17a2b8' };

    return null; // لا تحويل، اعرض الرسالة العادية
}

// عرض أيقونة صغيرة جداً (4px)
function showMiniIconNotification(icon, color, duration = 3000) {
    // إزالة الأيقونات الموجودة
    const existingIcons = document.querySelectorAll('.mini-icon-notification');
    existingIcons.forEach(icon => icon.remove());

    // إنشاء الأيقونة الصغيرة
    const iconElement = document.createElement('div');
    iconElement.className = 'mini-icon-notification';
    iconElement.textContent = icon;

    // تطبيق الأنماط
    iconElement.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        width: 4px;
        height: 4px;
        background: ${color};
        border-radius: 50%;
        z-index: 10000;
        font-size: 3px;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 1px 3px rgba(0,0,0,0.3);
        animation: miniIconPulse 0.5s ease-out;
        transition: all 0.3s ease;
    `;

    // إضافة للصفحة
    document.body.appendChild(iconElement);

    // إزالة تلقائية
    setTimeout(() => {
        if (iconElement.parentNode) {
            iconElement.style.opacity = '0';
            iconElement.style.transform = 'scale(0)';
            setTimeout(() => iconElement.remove(), 300);
        }
    }, duration);

    console.log(`🔸 أيقونة صغيرة: ${icon} (${color})`);
    return iconElement;
}

// ===== DATA IMPORT SYSTEM =====

// Global variables for import system
let importedData = null;
let importPreview = null;
let importStats = {
    totalRecords: 0,
    newProperties: 0,
    newUnits: 0,
    updatedUnits: 0,
    errors: 0,
    warnings: 0
};

// Show data import modal
function showDataImportModal() {
    console.log('🔄 فتح نافذة استيراد البيانات...');

    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.style.display = 'flex';
    modal.innerHTML = `
        <div class="data-import-modal">
            <div class="import-modal-header">
                <h2><i class="fas fa-file-import"></i> استيراد ملف البيانات</h2>
                <p>استيراد وتحديث بيانات العقارات من ملف خارجي</p>
            </div>

            <div class="import-modal-content">
                <!-- خطوة 1: اختيار الملف -->
                <div class="import-step" id="step1">
                    <div class="step-header">
                        <span class="step-number">1</span>
                        <h3>اختيار ملف البيانات</h3>
                    </div>

                    <div class="file-upload-area" id="fileUploadArea">
                        <div class="upload-icon">
                            <i class="fas fa-cloud-upload-alt"></i>
                        </div>
                        <div class="upload-text">
                            <p>اسحب الملف هنا أو انقر للاختيار</p>
                            <small>الملفات المدعومة: JSON, CSV, Excel (.xlsx)</small>
                        </div>
                        <input type="file" id="importFileInput" accept=".json,.csv,.xlsx" style="display: none;">
                    </div>

                    <div class="file-info" id="fileInfo" style="display: none;">
                        <div class="file-details">
                            <i class="fas fa-file"></i>
                            <span id="fileName"></span>
                            <span id="fileSize"></span>
                        </div>
                        <button class="change-file-btn" onclick="changeImportFile()">
                            <i class="fas fa-exchange-alt"></i> تغيير الملف
                        </button>
                    </div>
                </div>

                <!-- خطوة 2: معاينة البيانات -->
                <div class="import-step" id="step2" style="display: none;">
                    <div class="step-header">
                        <span class="step-number">2</span>
                        <h3>معاينة البيانات</h3>
                    </div>

                    <div class="preview-stats" id="previewStats"></div>
                    <div class="preview-table-container">
                        <table class="preview-table" id="previewTable"></table>
                    </div>

                    <div class="import-options">
                        <label class="checkbox-label">
                            <input type="checkbox" id="createBackup" checked>
                            <span class="checkmark"></span>
                            إنشاء نسخة احتياطية قبل الاستيراد
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" id="updateExisting" checked>
                            <span class="checkmark"></span>
                            تحديث البيانات الموجودة
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" id="addNewUnits" checked>
                            <span class="checkmark"></span>
                            إضافة وحدات جديدة
                        </label>
                    </div>
                </div>

                <!-- خطوة 3: تنفيذ الاستيراد -->
                <div class="import-step" id="step3" style="display: none;">
                    <div class="step-header">
                        <span class="step-number">3</span>
                        <h3>تنفيذ الاستيراد</h3>
                    </div>

                    <div class="import-progress">
                        <div class="progress-bar">
                            <div class="progress-fill" id="progressFill"></div>
                        </div>
                        <div class="progress-text" id="progressText">جاري التحضير...</div>
                    </div>

                    <div class="import-log" id="importLog"></div>
                </div>

                <!-- خطوة 4: النتائج -->
                <div class="import-step" id="step4" style="display: none;">
                    <div class="step-header">
                        <span class="step-number">4</span>
                        <h3>نتائج الاستيراد</h3>
                    </div>

                    <div class="import-results" id="importResults"></div>
                </div>
            </div>

            <div class="import-modal-actions">
                <button class="modal-action-btn close-btn" onclick="closeImportModal()">
                    <i class="fas fa-times"></i> إغلاق
                </button>
                <button class="modal-action-btn next-btn" id="nextBtn" onclick="nextImportStep()" style="display: none;">
                    <i class="fas fa-arrow-left"></i> التالي
                </button>
                <button class="modal-action-btn import-btn" id="importBtn" onclick="executeImport()" style="display: none;">
                    <i class="fas fa-download"></i> بدء الاستيراد
                </button>
                <button class="modal-action-btn finish-btn" id="finishBtn" onclick="finishImport()" style="display: none;">
                    <i class="fas fa-check"></i> إنهاء
                </button>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    setupFileUpload();
}

// Setup file upload functionality
function setupFileUpload() {
    const fileUploadArea = document.getElementById('fileUploadArea');
    const fileInput = document.getElementById('importFileInput');

    // Click to upload
    fileUploadArea.addEventListener('click', () => {
        fileInput.click();
    });

    // Drag and drop
    fileUploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        fileUploadArea.classList.add('dragover');
    });

    fileUploadArea.addEventListener('dragleave', () => {
        fileUploadArea.classList.remove('dragover');
    });

    fileUploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        fileUploadArea.classList.remove('dragover');

        const files = e.dataTransfer.files;
        if (files.length > 0) {
            handleFileSelection(files[0]);
        }
    });

    // File input change
    fileInput.addEventListener('change', (e) => {
        if (e.target.files.length > 0) {
            handleFileSelection(e.target.files[0]);
        }
    });
}

// Handle file selection
async function handleFileSelection(file) {
    console.log('📁 تم اختيار الملف:', file.name);

    // Validate file type
    const allowedTypes = ['.json', '.csv', '.xlsx'];
    const fileExtension = '.' + file.name.split('.').pop().toLowerCase();

    if (!allowedTypes.includes(fileExtension)) {
        showImportError('نوع الملف غير مدعوم. الملفات المدعومة: JSON, CSV, Excel (.xlsx)');
        return;
    }

    // Show file info
    document.getElementById('fileName').textContent = file.name;
    document.getElementById('fileSize').textContent = formatFileSize(file.size);
    document.getElementById('fileUploadArea').style.display = 'none';
    document.getElementById('fileInfo').style.display = 'flex';
    document.getElementById('nextBtn').style.display = 'inline-flex';

    // Parse file
    try {
        importedData = await parseImportFile(file);
        console.log('✅ تم تحليل الملف بنجاح:', importedData.length, 'سجل');
    } catch (error) {
        console.error('❌ خطأ في تحليل الملف:', error);
        showImportError('خطأ في قراءة الملف: ' + error.message);
    }
}

// Parse import file based on type
async function parseImportFile(file) {
    const fileExtension = '.' + file.name.split('.').pop().toLowerCase();

    switch (fileExtension) {
        case '.json':
            return await parseJSONFile(file);
        case '.csv':
            return await parseCSVFile(file);
        case '.xlsx':
            return await parseExcelFile(file);
        default:
            throw new Error('نوع الملف غير مدعوم');
    }
}

// Parse JSON file
async function parseJSONFile(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const data = JSON.parse(e.target.result);
                if (Array.isArray(data)) {
                    resolve(data);
                } else {
                    reject(new Error('ملف JSON يجب أن يحتوي على مصفوفة من البيانات'));
                }
            } catch (error) {
                reject(new Error('خطأ في تحليل ملف JSON: ' + error.message));
            }
        };
        reader.onerror = () => reject(new Error('خطأ في قراءة الملف'));
        reader.readAsText(file);
    });
}

// Parse CSV file
async function parseCSVFile(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const csv = e.target.result;
                const lines = csv.split('\n').filter(line => line.trim());

                if (lines.length < 2) {
                    reject(new Error('ملف CSV يجب أن يحتوي على رأس وبيانات'));
                    return;
                }

                const headers = lines[0].split(',').map(h => h.trim().replace(/"/g, ''));
                const data = [];

                for (let i = 1; i < lines.length; i++) {
                    const values = lines[i].split(',').map(v => v.trim().replace(/"/g, ''));
                    const row = {};

                    headers.forEach((header, index) => {
                        row[header] = values[index] || '';
                    });

                    data.push(row);
                }

                resolve(data);
            } catch (error) {
                reject(new Error('خطأ في تحليل ملف CSV: ' + error.message));
            }
        };
        reader.onerror = () => reject(new Error('خطأ في قراءة الملف'));
        reader.readAsText(file);
    });
}

// Parse Excel file (requires SheetJS library)
async function parseExcelFile(file) {
    // Note: This requires the SheetJS library to be loaded
    if (typeof XLSX === 'undefined') {
        throw new Error('مكتبة Excel غير محملة. يرجى تحميل SheetJS library');
    }

    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, { type: 'array' });
                const sheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[sheetName];
                const jsonData = XLSX.utils.sheet_to_json(worksheet);

                resolve(jsonData);
            } catch (error) {
                reject(new Error('خطأ في تحليل ملف Excel: ' + error.message));
            }
        };
        reader.onerror = () => reject(new Error('خطأ في قراءة الملف'));
        reader.readAsArrayBuffer(file);
    });
}

// Next step in import process
function nextImportStep() {
    const currentStep = document.querySelector('.import-step:not([style*="display: none"])');
    const stepNumber = parseInt(currentStep.id.replace('step', ''));

    if (stepNumber === 1) {
        // Move to preview step
        showImportStep(2);
        generateImportPreview();
    }
}

// Show specific import step
function showImportStep(stepNumber) {
    // Hide all steps
    for (let i = 1; i <= 4; i++) {
        const step = document.getElementById(`step${i}`);
        if (step) step.style.display = 'none';
    }

    // Show target step
    const targetStep = document.getElementById(`step${stepNumber}`);
    if (targetStep) targetStep.style.display = 'block';

    // Update buttons
    updateImportButtons(stepNumber);
}

// Update import modal buttons
function updateImportButtons(stepNumber) {
    const nextBtn = document.getElementById('nextBtn');
    const importBtn = document.getElementById('importBtn');
    const finishBtn = document.getElementById('finishBtn');

    // Hide all buttons first
    nextBtn.style.display = 'none';
    importBtn.style.display = 'none';
    finishBtn.style.display = 'none';

    switch (stepNumber) {
        case 1:
            if (importedData) nextBtn.style.display = 'inline-flex';
            break;
        case 2:
            importBtn.style.display = 'inline-flex';
            break;
        case 3:
            // No buttons during import
            break;
        case 4:
            finishBtn.style.display = 'inline-flex';
            break;
    }
}

// Generate import preview
function generateImportPreview() {
    console.log('🔍 إنشاء معاينة البيانات...');

    if (!importedData || importedData.length === 0) {
        showImportError('لا توجد بيانات للمعاينة');
        return;
    }

    // Analyze data and generate preview
    analyzeImportData();
    displayPreviewStats();
    displayPreviewTable();
}

// Analyze import data
function analyzeImportData() {
    console.log('📊 تحليل البيانات المستوردة...');

    importStats = {
        totalRecords: importedData.length,
        newProperties: 0,
        newUnits: 0,
        updatedUnits: 0,
        errors: 0,
        warnings: 0
    };

    importPreview = [];

    importedData.forEach((record, index) => {
        try {
            const analysis = analyzeRecord(record, index);
            importPreview.push(analysis);

            // Update stats
            if (analysis.action === 'new_property') importStats.newProperties++;
            else if (analysis.action === 'new_unit') importStats.newUnits++;
            else if (analysis.action === 'update_unit') importStats.updatedUnits++;

            if (analysis.errors.length > 0) importStats.errors++;
            if (analysis.warnings.length > 0) importStats.warnings++;

        } catch (error) {
            console.error(`❌ خطأ في تحليل السجل ${index}:`, error);
            importStats.errors++;
        }
    });

    console.log('📊 نتائج التحليل:', importStats);
}

// Analyze individual record
function analyzeRecord(record, index) {
    const analysis = {
        index: index,
        record: record,
        action: 'unknown',
        existingProperty: null,
        existingUnit: null,
        errors: [],
        warnings: []
    };

    // Validate required fields
    const requiredFields = ['اسم العقار', 'المدينة', 'رقم  الوحدة '];
    requiredFields.forEach(field => {
        if (!record[field] || record[field].toString().trim() === '') {
            analysis.errors.push(`الحقل "${field}" مطلوب`);
        }
    });

    if (analysis.errors.length > 0) {
        return analysis;
    }

    // Find existing property
    const propertyName = record['اسم العقار'].toString().trim();
    const cityName = record['المدينة'].toString().trim();
    const unitNumber = record['رقم  الوحدة '].toString().trim();

    analysis.existingProperty = properties.find(p =>
        p['اسم العقار'] === propertyName && p['المدينة'] === cityName
    );

    if (analysis.existingProperty) {
        // Property exists, check for unit
        analysis.existingUnit = properties.find(p =>
            p['اسم العقار'] === propertyName &&
            p['المدينة'] === cityName &&
            p['رقم  الوحدة '] === unitNumber
        );

        if (analysis.existingUnit) {
            analysis.action = 'update_unit';
        } else {
            analysis.action = 'new_unit';
        }
    } else {
        analysis.action = 'new_property';
    }

    // Validate data types
    validateRecordData(record, analysis);

    return analysis;
}

// Validate record data types
function validateRecordData(record, analysis) {
    // Validate numeric fields
    const numericFields = ['قيمة  الايجار ', 'المساحة', 'عدد الاقساط'];
    numericFields.forEach(field => {
        if (record[field] && record[field] !== '') {
            const value = parseFloat(record[field]);
            if (isNaN(value)) {
                analysis.warnings.push(`الحقل "${field}" يجب أن يكون رقم`);
            }
        }
    });

    // Validate dates
    const dateFields = ['تاريخ بداية العقد', 'تاريخ نهاية العقد'];
    dateFields.forEach(field => {
        if (record[field] && record[field] !== '') {
            const date = new Date(record[field]);
            if (isNaN(date.getTime())) {
                analysis.warnings.push(`الحقل "${field}" يجب أن يكون تاريخ صحيح`);
            }
        }
    });
}

// Next step in import process
function nextImportStep() {
    const currentStep = document.querySelector('.import-step:not([style*="display: none"])');
    const stepNumber = parseInt(currentStep.id.replace('step', ''));

    if (stepNumber === 1) {
        // Move to preview step
        showImportStep(2);
        generateImportPreview();
    }
}

// Show specific import step
function showImportStep(stepNumber) {
    // Hide all steps
    for (let i = 1; i <= 4; i++) {
        const step = document.getElementById(`step${i}`);
        if (step) step.style.display = 'none';
    }

    // Show target step
    const targetStep = document.getElementById(`step${stepNumber}`);
    if (targetStep) targetStep.style.display = 'block';

    // Update buttons
    updateImportButtons(stepNumber);
}

// Update import modal buttons
function updateImportButtons(stepNumber) {
    const nextBtn = document.getElementById('nextBtn');
    const importBtn = document.getElementById('importBtn');
    const finishBtn = document.getElementById('finishBtn');

    // Hide all buttons first
    nextBtn.style.display = 'none';
    importBtn.style.display = 'none';
    finishBtn.style.display = 'none';

    switch (stepNumber) {
        case 1:
            if (importedData) nextBtn.style.display = 'inline-flex';
            break;
        case 2:
            importBtn.style.display = 'inline-flex';
            break;
        case 3:
            // No buttons during import
            break;
        case 4:
            finishBtn.style.display = 'inline-flex';
            break;
    }
}

// Generate import preview
function generateImportPreview() {
    console.log('🔍 إنشاء معاينة البيانات...');

    if (!importedData || importedData.length === 0) {
        showImportError('لا توجد بيانات للمعاينة');
        return;
    }

    // Analyze data and generate preview
    analyzeImportData();
    displayPreviewStats();
    displayPreviewTable();
}

// Analyze import data
function analyzeImportData() {
    console.log('📊 تحليل البيانات المستوردة...');

    importStats = {
        totalRecords: importedData.length,
        newProperties: 0,
        newUnits: 0,
        updatedUnits: 0,
        errors: 0,
        warnings: 0
    };

    importPreview = [];

    importedData.forEach((record, index) => {
        try {
            const analysis = analyzeRecord(record, index);
            importPreview.push(analysis);

            // Update stats
            if (analysis.action === 'new_property') importStats.newProperties++;
            else if (analysis.action === 'new_unit') importStats.newUnits++;
            else if (analysis.action === 'update_unit') importStats.updatedUnits++;

            if (analysis.errors.length > 0) importStats.errors++;
            if (analysis.warnings.length > 0) importStats.warnings++;

        } catch (error) {
            console.error(`❌ خطأ في تحليل السجل ${index}:`, error);
            importStats.errors++;
        }
    });

    console.log('📊 نتائج التحليل:', importStats);
}

// Analyze individual record
function analyzeRecord(record, index) {
    const analysis = {
        index: index,
        record: record,
        action: 'unknown',
        existingProperty: null,
        existingUnit: null,
        errors: [],
        warnings: []
    };

    // Validate required fields
    const requiredFields = ['اسم العقار', 'المدينة', 'رقم  الوحدة '];
    requiredFields.forEach(field => {
        if (!record[field] || record[field].toString().trim() === '') {
            analysis.errors.push(`الحقل "${field}" مطلوب`);
        }
    });

    if (analysis.errors.length > 0) {
        return analysis;
    }

    // Find existing property
    const propertyName = record['اسم العقار'].toString().trim();
    const cityName = record['المدينة'].toString().trim();
    const unitNumber = record['رقم  الوحدة '].toString().trim();

    analysis.existingProperty = properties.find(p =>
        p['اسم العقار'] === propertyName && p['المدينة'] === cityName
    );

    if (analysis.existingProperty) {
        // Property exists, check for unit
        analysis.existingUnit = properties.find(p =>
            p['اسم العقار'] === propertyName &&
            p['المدينة'] === cityName &&
            p['رقم  الوحدة '] === unitNumber
        );

        if (analysis.existingUnit) {
            analysis.action = 'update_unit';
        } else {
            analysis.action = 'new_unit';
        }
    } else {
        analysis.action = 'new_property';
    }

    // Validate data types
    validateRecordData(record, analysis);

    return analysis;
}

// Validate record data types
function validateRecordData(record, analysis) {
    // Validate numeric fields
    const numericFields = [
        'قيمة  الايجار ', 'المساحة', 'عدد الاقساط', 'عدد الاقساط المتبقية',
        'مساحة الصك', 'مساحةالصك', 'الاجمالى', 'المبلغ المدفوع', 'المبلغ المتبقي'
    ];
    numericFields.forEach(field => {
        if (record[field] && record[field] !== '' && record[field] !== null) {
            const value = parseFloat(record[field]);
            if (isNaN(value)) {
                analysis.warnings.push(`الحقل "${field}" يجب أن يكون رقم`);
            }
        }
    });

    // Validate dates
    const dateFields = [
        'تاريخ بداية العقد', 'تاريخ نهاية العقد', 'تاريخ البداية', 'تاريخ النهاية',
        'تاريخ آخر تحديث', 'تاريخ القسط الاول', 'تاريخ القسط الثاني', 'تاريخ نهاية القسط'
    ];
    dateFields.forEach(field => {
        if (record[field] && record[field] !== '' && record[field] !== null) {
            // Handle different date formats
            let dateStr = record[field].toString();

            // Remove time part if exists
            if (dateStr.includes(' 00:00:00')) {
                dateStr = dateStr.replace(' 00:00:00', '');
            }

            // Try to parse the date
            const date = new Date(dateStr);
            if (isNaN(date.getTime())) {
                // Try alternative formats
                const altFormats = [
                    dateStr.replace(/(\d{1,2})\/(\d{1,2})\/(\d{4})/, '$3-$2-$1'), // DD/MM/YYYY to YYYY-MM-DD
                    dateStr.replace(/(\d{1,2})-(\d{1,2})-(\d{4})/, '$3-$2-$1'),  // DD-MM-YYYY to YYYY-MM-DD
                    dateStr.replace(/(\d{1,2})\/(\d{1,2})\/(\d{4})/, '$3-$1-$2')  // MM/DD/YYYY to YYYY-MM-DD
                ];

                let validDate = false;
                for (const format of altFormats) {
                    const testDate = new Date(format);
                    if (!isNaN(testDate.getTime())) {
                        validDate = true;
                        break;
                    }
                }

                if (!validDate) {
                    analysis.warnings.push(`الحقل "${field}" يجب أن يكون تاريخ صحيح (${dateStr})`);
                }
            }
        }
    });

    // Validate contract status
    const validStatuses = ['نشط', 'شاغر', 'مؤكد', 'ينتهي قريباً', 'منتهي', 'معلق'];
    if (record['حالة العقد'] && !validStatuses.includes(record['حالة العقد'])) {
        analysis.warnings.push(`حالة العقد "${record['حالة العقد']}" غير صحيحة`);
    }

    // Validate contract type
    const validTypes = ['ضريبي', 'غير ضريبي', 'حكومي', 'خاص'];
    if (record['نوع العقد'] && !validTypes.includes(record['نوع العقد'])) {
        analysis.warnings.push(`نوع العقد "${record['نوع العقد']}" غير صحيح`);
    }

    // Validate financial consistency
    if (record['الاجمالى'] && record['المبلغ المدفوع'] && record['المبلغ المتبقي']) {
        const total = parseFloat(record['الاجمالى']);
        const paid = parseFloat(record['المبلغ المدفوع']);
        const remaining = parseFloat(record['المبلغ المتبقي']);

        if (!isNaN(total) && !isNaN(paid) && !isNaN(remaining)) {
            const calculatedRemaining = total - paid;
            if (Math.abs(calculatedRemaining - remaining) > 0.01) {
                analysis.warnings.push(`عدم تطابق في المبالغ المالية: الإجمالي ${total} - المدفوع ${paid} ≠ المتبقي ${remaining}`);
            }
        }
    }
}

// Display preview statistics
function displayPreviewStats() {
    const statsContainer = document.getElementById('previewStats');

    statsContainer.innerHTML = `
        <div class="stats-grid">
            <div class="stat-item">
                <div class="stat-number">${importStats.totalRecords}</div>
                <div class="stat-label">إجمالي السجلات</div>
            </div>
            <div class="stat-item new">
                <div class="stat-number">${importStats.newProperties}</div>
                <div class="stat-label">عقارات جديدة</div>
            </div>
            <div class="stat-item new">
                <div class="stat-number">${importStats.newUnits}</div>
                <div class="stat-label">وحدات جديدة</div>
            </div>
            <div class="stat-item update">
                <div class="stat-number">${importStats.updatedUnits}</div>
                <div class="stat-label">وحدات محدثة</div>
            </div>
            <div class="stat-item warning">
                <div class="stat-number">${importStats.warnings}</div>
                <div class="stat-label">تحذيرات</div>
            </div>
            <div class="stat-item error">
                <div class="stat-number">${importStats.errors}</div>
                <div class="stat-label">أخطاء</div>
            </div>
        </div>
    `;
}

// Display preview table
function displayPreviewTable() {
    const tableContainer = document.getElementById('previewTable');

    if (!importPreview || importPreview.length === 0) {
        tableContainer.innerHTML = '<p>لا توجد بيانات للمعاينة</p>';
        return;
    }

    // Show first 10 records for preview
    const previewData = importPreview.slice(0, 10);

    let tableHTML = `
        <thead>
            <tr>
                <th>#</th>
                <th>اسم العقار</th>
                <th>المدينة</th>
                <th>رقم الوحدة</th>
                <th>الإجراء</th>
                <th>الحالة</th>
            </tr>
        </thead>
        <tbody>
    `;

    previewData.forEach((item, index) => {
        const record = item.record;
        const actionText = getActionText(item.action);
        const statusClass = getStatusClass(item);
        const statusText = getStatusText(item);

        tableHTML += `
            <tr class="${statusClass}">
                <td>${index + 1}</td>
                <td>${record['اسم العقار'] || '-'}</td>
                <td>${record['المدينة'] || '-'}</td>
                <td>${record['رقم  الوحدة '] || '-'}</td>
                <td>${actionText}</td>
                <td>${statusText}</td>
            </tr>
        `;
    });

    tableHTML += '</tbody>';

    if (importPreview.length > 10) {
        tableHTML += `
            <tfoot>
                <tr>
                    <td colspan="6" class="more-records">
                        ... و ${importPreview.length - 10} سجل آخر
                    </td>
                </tr>
            </tfoot>
        `;
    }

    tableContainer.innerHTML = tableHTML;
}

// Get action text in Arabic
function getActionText(action) {
    switch (action) {
        case 'new_property': return 'إنشاء عقار جديد';
        case 'new_unit': return 'إضافة وحدة جديدة';
        case 'update_unit': return 'تحديث وحدة موجودة';
        default: return 'غير محدد';
    }
}

// Get status class for styling
function getStatusClass(item) {
    if (item.errors.length > 0) return 'error';
    if (item.warnings.length > 0) return 'warning';
    return 'success';
}

// Get status text
function getStatusText(item) {
    if (item.errors.length > 0) return `خطأ (${item.errors.length})`;
    if (item.warnings.length > 0) return `تحذير (${item.warnings.length})`;
    return 'جاهز';
}

// Execute import process
async function executeImport() {
    console.log('🚀 بدء تنفيذ عملية الاستيراد...');

    // Move to execution step
    showImportStep(3);

    // Get import options
    const createBackup = document.getElementById('createBackup').checked;
    const updateExisting = document.getElementById('updateExisting').checked;
    const addNewUnits = document.getElementById('addNewUnits').checked;

    console.log('⚙️ خيارات الاستيراد:', { createBackup, updateExisting, addNewUnits });

    try {
        // Step 1: Create backup if requested
        if (createBackup) {
            await createDataBackup();
            updateImportProgress(10, 'تم إنشاء النسخة الاحتياطية...');
        }

        // Step 2: Process import data
        updateImportProgress(20, 'بدء معالجة البيانات...');

        const results = await processImportData(updateExisting, addNewUnits);

        // Step 3: Save to localStorage
        updateImportProgress(80, 'حفظ البيانات محلياً...');
        localStorage.setItem('properties', JSON.stringify(properties));

        // Step 4: Sync with Supabase if available
        if (typeof supabaseClient !== 'undefined' && supabaseClient) {
            updateImportProgress(90, 'مزامنة مع قاعدة البيانات...');
            await syncImportWithSupabase(results);
        }

        // Step 5: Complete
        updateImportProgress(100, 'تم الانتهاء من الاستيراد بنجاح!');

        // Show results
        setTimeout(() => {
            showImportResults(results);
        }, 1000);

    } catch (error) {
        console.error('❌ خطأ في عملية الاستيراد:', error);
        showImportError('خطأ في عملية الاستيراد: ' + error.message);
    }
}

// Create data backup with storage management
async function createDataBackup() {
    console.log('💾 إنشاء نسخة احتياطية...');

    try {
        // Clean up storage before creating backup
        await cleanupLocalStorage();

        const backupData = {
            timestamp: new Date().toISOString(),
            properties: [...properties],
            totalCount: properties.length
        };

        // Save backup to localStorage with error handling
        const backupKey = `backup_${Date.now()}`;

        try {
            localStorage.setItem(backupKey, JSON.stringify(backupData));
            console.log(`✅ تم إنشاء نسخة احتياطية: ${backupKey}`);
            addImportLog(`✅ تم إنشاء نسخة احتياطية (${properties.length} عقار)`);
        } catch (storageError) {
            console.warn('⚠️ فشل في إنشاء النسخة الاحتياطية:', storageError.message);

            // Try to free up more space and retry
            await forceCleanupStorage();

            try {
                localStorage.setItem(backupKey, JSON.stringify(backupData));
                console.log(`✅ تم إنشاء نسخة احتياطية بعد تنظيف التخزين: ${backupKey}`);
                addImportLog(`✅ تم إنشاء نسخة احتياطية (${properties.length} عقار)`);
            } catch (retryError) {
                console.error('❌ فشل في إنشاء النسخة الاحتياطية نهائياً:', retryError.message);
                addImportLog(`⚠️ تحذير: لم يتم إنشاء نسخة احتياطية (مساحة التخزين ممتلئة)`);
            }
        }

    } catch (error) {
        console.error('❌ خطأ في عملية النسخ الاحتياطي:', error);
        addImportLog(`⚠️ تحذير: لم يتم إنشاء نسخة احتياطية`);
    }
}

// Clean up localStorage to free space
async function cleanupLocalStorage() {
    console.log('🧹 تنظيف مساحة التخزين...');

    try {
        // Keep only last 3 backups instead of 5
        const allKeys = Object.keys(localStorage);
        const backupKeys = allKeys.filter(key => key.startsWith('backup_')).sort();

        if (backupKeys.length > 3) {
            const keysToRemove = backupKeys.slice(0, backupKeys.length - 3);
            keysToRemove.forEach(key => {
                localStorage.removeItem(key);
                console.log(`🗑️ تم حذف النسخة الاحتياطية القديمة: ${key}`);
            });
        }

        // Clean up old update logs (keep only last 50 entries)
        const updateLog = JSON.parse(localStorage.getItem('updateLog') || '[]');
        if (updateLog.length > 50) {
            const trimmedLog = updateLog.slice(-50);
            localStorage.setItem('updateLog', JSON.stringify(trimmedLog));
            console.log(`🗑️ تم تنظيف سجل التحديثات: ${updateLog.length} → ${trimmedLog.length}`);
        }

        // Clean up any temporary data
        const tempKeys = allKeys.filter(key =>
            key.startsWith('temp_') ||
            key.startsWith('cache_') ||
            key.includes('_temp')
        );

        tempKeys.forEach(key => {
            localStorage.removeItem(key);
            console.log(`🗑️ تم حذف البيانات المؤقتة: ${key}`);
        });

        console.log('✅ تم تنظيف مساحة التخزين');

    } catch (error) {
        console.error('❌ خطأ في تنظيف التخزين:', error);
    }
}

// Force cleanup storage (more aggressive)
async function forceCleanupStorage() {
    console.log('🧹 تنظيف قسري لمساحة التخزين...');

    try {
        // Remove all backups except the most recent one
        const allKeys = Object.keys(localStorage);
        const backupKeys = allKeys.filter(key => key.startsWith('backup_')).sort();

        if (backupKeys.length > 1) {
            const keysToRemove = backupKeys.slice(0, backupKeys.length - 1);
            keysToRemove.forEach(key => {
                localStorage.removeItem(key);
                console.log(`🗑️ تم حذف النسخة الاحتياطية: ${key}`);
            });
        }

        // Clear update log completely
        localStorage.removeItem('updateLog');
        console.log('🗑️ تم حذف سجل التحديثات');

        // Clear any other non-essential data
        const nonEssentialKeys = allKeys.filter(key =>
            !key.includes('properties') &&
            !key.includes('cardAttachments') &&
            !key.startsWith('backup_')
        );

        nonEssentialKeys.forEach(key => {
            localStorage.removeItem(key);
            console.log(`🗑️ تم حذف البيانات غير الأساسية: ${key}`);
        });

        console.log('✅ تم التنظيف القسري لمساحة التخزين');

    } catch (error) {
        console.error('❌ خطأ في التنظيف القسري:', error);
    }
}

// Save to localStorage with retry mechanism
async function saveToLocalStorageWithRetry(key, data, maxRetries = 3) {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            localStorage.setItem(key, data);
            console.log(`✅ تم حفظ ${key} في المحاولة ${attempt}`);
            return; // Success

        } catch (error) {
            console.warn(`⚠️ فشلت المحاولة ${attempt} لحفظ ${key}:`, error.message);

            if (error.message.includes('quota') || error.message.includes('Storage')) {
                console.log(`🧹 تنظيف التخزين قبل المحاولة ${attempt + 1}...`);

                if (attempt === 1) {
                    // First attempt: light cleanup
                    await cleanupLocalStorage();
                } else if (attempt === 2) {
                    // Second attempt: aggressive cleanup
                    await forceCleanupStorage();
                } else {
                    // Final attempt: show storage info and fail
                    showStorageInfo();
                    throw new Error('مساحة التخزين ممتلئة ولا يمكن تحرير مساحة كافية');
                }
            } else {
                // Non-storage related error, don't retry
                throw error;
            }
        }
    }

    throw new Error(`فشل في حفظ البيانات بعد ${maxRetries} محاولات`);
}

// Show storage information
function showStorageInfo() {
    try {
        const storageInfo = getStorageInfo();
        console.log('📊 معلومات التخزين:', storageInfo);

        // Show user-friendly storage info
        const message = `
معلومات مساحة التخزين:
- المساحة المستخدمة: ${storageInfo.usedMB} ميجابايت
- المساحة المتاحة: ${storageInfo.availableMB} ميجابايت
- النسبة المستخدمة: ${storageInfo.usagePercentage}%

لحل هذه المشكلة:
1. احذف بعض البيانات غير المهمة من المتصفح
2. استخدم متصفح آخر
3. امسح ذاكرة التخزين المؤقت للمتصفح
        `;

        console.log(message);

    } catch (error) {
        console.error('❌ خطأ في عرض معلومات التخزين:', error);
    }
}

// Get storage information
function getStorageInfo() {
    try {
        let totalSize = 0;
        let itemCount = 0;

        for (let key in localStorage) {
            if (localStorage.hasOwnProperty(key)) {
                const itemSize = localStorage.getItem(key).length;
                totalSize += itemSize;
                itemCount++;
            }
        }

        // Estimate available space (most browsers have ~5-10MB limit)
        const estimatedLimit = 5 * 1024 * 1024; // 5MB in characters
        const usedMB = (totalSize / (1024 * 1024)).toFixed(2);
        const availableMB = ((estimatedLimit - totalSize) / (1024 * 1024)).toFixed(2);
        const usagePercentage = ((totalSize / estimatedLimit) * 100).toFixed(1);

        return {
            totalSize,
            itemCount,
            usedMB,
            availableMB,
            usagePercentage
        };

    } catch (error) {
        console.error('❌ خطأ في حساب معلومات التخزين:', error);
        return {
            totalSize: 0,
            itemCount: 0,
            usedMB: '0',
            availableMB: 'غير معروف',
            usagePercentage: '0'
        };
    }
}

// Process import data
async function processImportData(updateExisting, addNewUnits) {
    console.log('🔄 معالجة بيانات الاستيراد...');

    const results = {
        processed: 0,
        newProperties: 0,
        newUnits: 0,
        updatedUnits: 0,
        skipped: 0,
        errors: []
    };

    for (let i = 0; i < importPreview.length; i++) {
        const item = importPreview[i];
        const progress = 20 + (60 * (i + 1) / importPreview.length);

        updateImportProgress(progress, `معالجة السجل ${i + 1} من ${importPreview.length}...`);

        try {
            if (item.errors.length > 0) {
                results.skipped++;
                results.errors.push(`السجل ${i + 1}: ${item.errors.join(', ')}`);
                addImportLog(`⚠️ تم تخطي السجل ${i + 1}: ${item.errors[0]}`);
                continue;
            }

            await processRecord(item, updateExisting, addNewUnits, results);
            results.processed++;

        } catch (error) {
            console.error(`❌ خطأ في معالجة السجل ${i + 1}:`, error);
            results.errors.push(`السجل ${i + 1}: ${error.message}`);
            addImportLog(`❌ خطأ في السجل ${i + 1}: ${error.message}`);
        }

        // Small delay to allow UI updates
        await new Promise(resolve => setTimeout(resolve, 10));
    }

    console.log('📊 نتائج المعالجة:', results);
    return results;
}

// Process individual record
async function processRecord(item, updateExisting, addNewUnits, results) {
    const record = item.record;

    switch (item.action) {
        case 'new_property':
            await createNewProperty(record, results);
            break;

        case 'new_unit':
            if (addNewUnits) {
                await createNewUnit(record, results);
            } else {
                results.skipped++;
                addImportLog(`⏭️ تم تخطي وحدة جديدة: ${record['رقم  الوحدة ']} (إضافة الوحدات الجديدة معطلة)`);
            }
            break;

        case 'update_unit':
            if (updateExisting) {
                await updateExistingUnit(record, item.existingUnit, results);
            } else {
                results.skipped++;
                addImportLog(`⏭️ تم تخطي تحديث الوحدة: ${record['رقم  الوحدة ']} (تحديث البيانات الموجودة معطل)`);
            }
            break;
    }
}

// Create new property from import
async function createNewProperty(record, results) {
    const newProperty = createPropertyFromRecord(record);
    properties.push(newProperty);
    results.newProperties++;
    addImportLog(`✅ تم إنشاء عقار جديد: ${record['اسم العقار']} - ${record['رقم  الوحدة ']}`);
}

// Create new unit from import
async function createNewUnit(record, results) {
    const newUnit = createPropertyFromRecord(record);
    properties.push(newUnit);
    results.newUnits++;
    addImportLog(`✅ تم إضافة وحدة جديدة: ${record['رقم  الوحدة ']} في ${record['اسم العقار']}`);
}

// Update existing unit from import
async function updateExistingUnit(record, existingUnit, results) {
    const unitIndex = properties.findIndex(p => p === existingUnit);
    if (unitIndex !== -1) {
        // Update all fields from import
        Object.keys(record).forEach(key => {
            if (record[key] !== null && record[key] !== undefined && record[key] !== '') {
                properties[unitIndex][key] = record[key];
            }
        });

        results.updatedUnits++;
        addImportLog(`🔄 تم تحديث الوحدة: ${record['رقم  الوحدة ']} في ${record['اسم العقار']}`);
    }
}

// Create property object from record
function createPropertyFromRecord(record) {
    return {
        'اسم العقار': record['اسم العقار'] || '',
        'المدينة': record['المدينة'] || '',
        'رقم  الوحدة ': record['رقم  الوحدة '] || '',
        'اسم المستأجر': record['اسم المستأجر'] || '',
        'رقم العقد': record['رقم العقد'] || '',
        'قيمة  الايجار ': record['قيمة  الايجار '] ? parseFloat(record['قيمة  الايجار ']) : '',
        'المساحة': record['المساحة'] ? parseFloat(record['المساحة']) : '',
        'تاريخ بداية العقد': record['تاريخ بداية العقد'] || record['تاريخ البداية'] || '',
        'تاريخ نهاية العقد': record['تاريخ نهاية العقد'] || record['تاريخ النهاية'] || '',
        'عدد الاقساط': record['عدد الاقساط'] || record['عدد الاقساط المتبقية'] ? parseInt(record['عدد الاقساط'] || record['عدد الاقساط المتبقية']) : '',
        'نوع العقد': record['نوع العقد'] || '',
        'رقم السجل العقاري': record['رقم السجل العقاري'] || record['السجل العيني '] || '',
        'مساحة الصك': record['مساحة الصك'] || record['مساحةالصك'] ? parseFloat(record['مساحة الصك'] || record['مساحةالصك']) : '',
        'رقم الصك': record['رقم الصك'] || '',
        'المالك': record['المالك'] || '',
        'موقع العقار': record['موقع العقار'] || '',
        'رقم حساب الكهرباء': record['رقم حساب الكهرباء'] || '',
        'الاجمالى': record['الاجمالى'] ? parseFloat(record['الاجمالى']) : '',
        'المبلغ المدفوع': record['المبلغ المدفوع'] ? parseFloat(record['المبلغ المدفوع']) : 0,
        'المبلغ المتبقي': record['المبلغ المتبقي'] ? parseFloat(record['المبلغ المتبقي']) : 0,
        'حالة العقد': record['حالة العقد'] || 'نشط',
        'ملاحظات': record['ملاحظات'] || '',
        'تاريخ آخر تحديث': record['تاريخ آخر تحديث'] || new Date().toISOString().split('T')[0]
    };
}

// Update import progress
function updateImportProgress(percentage, message) {
    const progressFill = document.getElementById('progressFill');
    const progressText = document.getElementById('progressText');

    if (progressFill) {
        progressFill.style.width = percentage + '%';
    }

    if (progressText) {
        progressText.textContent = message;
    }

    console.log(`📊 ${percentage}%: ${message}`);
}

// Add log message to import log
function addImportLog(message) {
    const logContainer = document.getElementById('importLog');
    if (logContainer) {
        const logEntry = document.createElement('div');
        logEntry.className = 'log-entry';
        logEntry.innerHTML = `
            <span class="log-time">${new Date().toLocaleTimeString('ar-SA')}</span>
            <span class="log-message">${message}</span>
        `;
        logContainer.appendChild(logEntry);
        logContainer.scrollTop = logContainer.scrollHeight;
    }
}

// Sync import with Supabase
async function syncImportWithSupabase(results) {
    console.log('☁️ مزامنة البيانات مع Supabase...');

    try {
        // This would sync the imported data with Supabase
        // For now, we'll just log the attempt
        addImportLog(`☁️ محاولة مزامنة ${results.processed} سجل مع قاعدة البيانات...`);

        // Simulate sync delay
        await new Promise(resolve => setTimeout(resolve, 1000));

        addImportLog(`✅ تم مزامنة البيانات مع قاعدة البيانات بنجاح`);

    } catch (error) {
        console.warn('⚠️ خطأ في مزامنة Supabase:', error);
        addImportLog(`⚠️ تحذير: لم يتم مزامنة البيانات مع قاعدة البيانات`);
    }
}

// Show import results
function showImportResults(results) {
    showImportStep(4);

    const resultsContainer = document.getElementById('importResults');

    resultsContainer.innerHTML = `
        <div class="results-summary">
            <div class="result-item success">
                <i class="fas fa-check-circle"></i>
                <div class="result-details">
                    <div class="result-number">${results.processed}</div>
                    <div class="result-label">سجل تم معالجته بنجاح</div>
                </div>
            </div>

            <div class="result-item new">
                <i class="fas fa-plus-circle"></i>
                <div class="result-details">
                    <div class="result-number">${results.newProperties}</div>
                    <div class="result-label">عقار جديد</div>
                </div>
            </div>

            <div class="result-item new">
                <i class="fas fa-home"></i>
                <div class="result-details">
                    <div class="result-number">${results.newUnits}</div>
                    <div class="result-label">وحدة جديدة</div>
                </div>
            </div>

            <div class="result-item update">
                <i class="fas fa-edit"></i>
                <div class="result-details">
                    <div class="result-number">${results.updatedUnits}</div>
                    <div class="result-label">وحدة محدثة</div>
                </div>
            </div>

            ${results.skipped > 0 ? `
                <div class="result-item warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <div class="result-details">
                        <div class="result-number">${results.skipped}</div>
                        <div class="result-label">سجل تم تخطيه</div>
                    </div>
                </div>
            ` : ''}

            ${results.errors.length > 0 ? `
                <div class="result-item error">
                    <i class="fas fa-times-circle"></i>
                    <div class="result-details">
                        <div class="result-number">${results.errors.length}</div>
                        <div class="result-label">خطأ</div>
                    </div>
                </div>
            ` : ''}
        </div>

        ${results.errors.length > 0 ? `
            <div class="error-details">
                <h4>تفاصيل الأخطاء:</h4>
                <ul>
                    ${results.errors.map(error => `<li>${error}</li>`).join('')}
                </ul>
            </div>
        ` : ''}

        <div class="import-actions">
            <button class="action-btn" onclick="refreshDataDisplay()">
                <i class="fas fa-sync"></i> تحديث العرض
            </button>
            <button class="action-btn" onclick="exportImportLog()">
                <i class="fas fa-download"></i> تصدير سجل العمليات
            </button>
        </div>
    `;
}

// Utility functions
function changeImportFile() {
    document.getElementById('fileUploadArea').style.display = 'block';
    document.getElementById('fileInfo').style.display = 'none';
    document.getElementById('nextBtn').style.display = 'none';
    importedData = null;
}

function closeImportModal() {
    const modal = document.querySelector('.modal-overlay');
    if (modal) {
        modal.remove();
    }
}

function finishImport() {
    // Refresh the main data display
    refreshDataDisplay();
    closeImportModal();
}

function refreshDataDisplay() {
    // Refresh the main interface
    if (typeof renderData === 'function') {
        renderData();
    }
    if (typeof updateTotalStats === 'function') {
        updateTotalStats();
    }
    if (typeof searchUnits === 'function' && isManagementMode) {
        searchUnits();
    }
}

function showImportError(message) {
    // تم إزالة رسالة الخطأ حسب طلب المستخدم
    console.error('خطأ في الاستيراد:', message);
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function exportImportLog() {
    const logEntries = document.querySelectorAll('.log-entry');
    let logText = 'سجل عمليات الاستيراد\n';
    logText += '===================\n\n';

    logEntries.forEach(entry => {
        const time = entry.querySelector('.log-time').textContent;
        const message = entry.querySelector('.log-message').textContent;
        logText += `${time}: ${message}\n`;
    });

    const blob = new Blob([logText], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `import_log_${new Date().toISOString().split('T')[0]}.txt`;
    a.click();
    URL.revokeObjectURL(url);
}

// Show storage cleanup modal
function showStorageCleanupModal() {
    console.log('🧹 فتح نافذة تنظيف التخزين...');

    const storageInfo = getStorageInfo();

    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.style.display = 'flex';
    modal.innerHTML = `
        <div class="storage-cleanup-modal">
            <div class="cleanup-modal-header">
                <h2><i class="fas fa-broom"></i> تنظيف مساحة التخزين</h2>
                <p>إدارة وتنظيف بيانات التخزين المحلي</p>
            </div>

            <div class="cleanup-modal-content">
                <div class="storage-info-section">
                    <h3>معلومات التخزين الحالية</h3>
                    <div class="storage-stats">
                        <div class="storage-stat">
                            <div class="stat-icon"><i class="fas fa-database"></i></div>
                            <div class="stat-details">
                                <div class="stat-value">${storageInfo.usedMB} ميجابايت</div>
                                <div class="stat-label">المساحة المستخدمة</div>
                            </div>
                        </div>
                        <div class="storage-stat">
                            <div class="stat-icon"><i class="fas fa-chart-pie"></i></div>
                            <div class="stat-details">
                                <div class="stat-value">${storageInfo.usagePercentage}%</div>
                                <div class="stat-label">نسبة الاستخدام</div>
                            </div>
                        </div>
                        <div class="storage-stat">
                            <div class="stat-icon"><i class="fas fa-file-alt"></i></div>
                            <div class="stat-details">
                                <div class="stat-value">${storageInfo.itemCount}</div>
                                <div class="stat-label">عدد العناصر</div>
                            </div>
                        </div>
                    </div>

                    <div class="storage-progress">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${storageInfo.usagePercentage}%"></div>
                        </div>
                        <div class="progress-text">استخدام التخزين: ${storageInfo.usagePercentage}%</div>
                    </div>
                </div>

                <div class="cleanup-options-section">
                    <h3>خيارات التنظيف</h3>
                    <div class="cleanup-options">
                        <div class="cleanup-option">
                            <div class="option-info">
                                <h4><i class="fas fa-archive"></i> تنظيف النسخ الاحتياطية القديمة</h4>
                                <p>حذف النسخ الاحتياطية القديمة والاحتفاظ بأحدث 2 نسخة فقط</p>
                            </div>
                            <button class="cleanup-btn" onclick="cleanupBackups()">
                                <i class="fas fa-trash-alt"></i> تنظيف
                            </button>
                        </div>

                        <div class="cleanup-option">
                            <div class="option-info">
                                <h4><i class="fas fa-history"></i> مسح سجل التحديثات</h4>
                                <p>حذف سجل العمليات والتحديثات القديمة</p>
                            </div>
                            <button class="cleanup-btn" onclick="clearUpdateLog()">
                                <i class="fas fa-eraser"></i> مسح
                            </button>
                        </div>

                        <div class="cleanup-option">
                            <div class="option-info">
                                <h4><i class="fas fa-temp-high"></i> حذف البيانات المؤقتة</h4>
                                <p>حذف جميع البيانات المؤقتة والذاكرة التخزينية</p>
                            </div>
                            <button class="cleanup-btn" onclick="clearTempData()">
                                <i class="fas fa-broom"></i> حذف
                            </button>
                        </div>

                        <div class="cleanup-option danger">
                            <div class="option-info">
                                <h4><i class="fas fa-exclamation-triangle"></i> تنظيف شامل</h4>
                                <p>حذف جميع البيانات غير الأساسية (احتفظ بالعقارات والمرفقات فقط)</p>
                            </div>
                            <button class="cleanup-btn danger" onclick="performFullCleanup()">
                                <i class="fas fa-fire"></i> تنظيف شامل
                            </button>
                        </div>
                    </div>
                </div>

                <div class="cleanup-results" id="cleanupResults" style="display: none;">
                    <h3>نتائج التنظيف</h3>
                    <div id="cleanupResultsContent"></div>
                </div>
            </div>

            <div class="cleanup-modal-actions">
                <button class="modal-action-btn close-btn" onclick="closeCleanupModal()">
                    <i class="fas fa-times"></i> إغلاق
                </button>
                <button class="modal-action-btn refresh-btn" onclick="refreshStorageInfo()">
                    <i class="fas fa-sync"></i> تحديث المعلومات
                </button>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
}

// Cleanup functions
async function cleanupBackups() {
    console.log('🧹 تنظيف النسخ الاحتياطية...');

    try {
        const allKeys = Object.keys(localStorage);
        const backupKeys = allKeys.filter(key => key.startsWith('backup_')).sort();

        if (backupKeys.length > 2) {
            const keysToRemove = backupKeys.slice(0, backupKeys.length - 2);
            keysToRemove.forEach(key => localStorage.removeItem(key));

            showCleanupResult(`✅ تم حذف ${keysToRemove.length} نسخة احتياطية قديمة`);
        } else {
            showCleanupResult('ℹ️ لا توجد نسخ احتياطية قديمة للحذف');
        }

        refreshStorageInfo();

    } catch (error) {
        console.error('❌ خطأ في تنظيف النسخ الاحتياطية:', error);
        showCleanupResult('❌ فشل في تنظيف النسخ الاحتياطية');
    }
}

async function clearUpdateLog() {
    console.log('🧹 مسح سجل التحديثات...');

    try {
        localStorage.removeItem('updateLog');
        showCleanupResult('✅ تم مسح سجل التحديثات');
        refreshStorageInfo();

    } catch (error) {
        console.error('❌ خطأ في مسح سجل التحديثات:', error);
        showCleanupResult('❌ فشل في مسح سجل التحديثات');
    }
}

async function clearTempData() {
    console.log('🧹 حذف البيانات المؤقتة...');

    try {
        const allKeys = Object.keys(localStorage);
        const tempKeys = allKeys.filter(key =>
            key.startsWith('temp_') ||
            key.startsWith('cache_') ||
            key.includes('_temp') ||
            key.includes('_cache')
        );

        tempKeys.forEach(key => localStorage.removeItem(key));

        showCleanupResult(`✅ تم حذف ${tempKeys.length} عنصر مؤقت`);
        refreshStorageInfo();

    } catch (error) {
        console.error('❌ خطأ في حذف البيانات المؤقتة:', error);
        showCleanupResult('❌ فشل في حذف البيانات المؤقتة');
    }
}

async function performFullCleanup() {
    const confirmed = confirm('⚠️ تحذير: سيتم حذف جميع البيانات غير الأساسية. هل أنت متأكد؟');

    if (!confirmed) return;

    console.log('🧹 تنظيف شامل...');

    try {
        await forceCleanupStorage();
        showCleanupResult('✅ تم التنظيف الشامل بنجاح');
        refreshStorageInfo();

    } catch (error) {
        console.error('❌ خطأ في التنظيف الشامل:', error);
        showCleanupResult('❌ فشل في التنظيف الشامل');
    }
}

function showCleanupResult(message) {
    const resultsSection = document.getElementById('cleanupResults');
    const resultsContent = document.getElementById('cleanupResultsContent');

    if (resultsSection && resultsContent) {
        resultsContent.innerHTML = `<div class="cleanup-message">${message}</div>`;
        resultsSection.style.display = 'block';

        // Auto-hide after 3 seconds
        setTimeout(() => {
            if (resultsSection) {
                resultsSection.style.display = 'none';
            }
        }, 3000);
    }
}

function refreshStorageInfo() {
    // Close and reopen the modal with updated info
    closeCleanupModal();
    setTimeout(() => {
        showStorageCleanupModal();
    }, 100);
}

function closeCleanupModal() {
    const modal = document.querySelector('.modal-overlay');
    if (modal) {
        modal.remove();
    }
}

// Show date update modal
function showDateUpdateModal() {
    console.log('📅 فتح نافذة تحديث التواريخ...');

    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.style.display = 'flex';
    modal.innerHTML = `
        <div class="date-update-modal">
            <div class="date-update-header">
                <h2><i class="fas fa-calendar-alt"></i> تحديث التواريخ من ملف</h2>
                <p>تحديث تواريخ العقود والأقساط من ملف JSON</p>
            </div>

            <div class="date-update-content">
                <div class="upload-section">
                    <h3>اختيار ملف التحديث</h3>
                    <div class="file-upload-area" id="dateFileUploadArea">
                        <div class="upload-icon">
                            <i class="fas fa-calendar-upload"></i>
                        </div>
                        <div class="upload-text">
                            <p>اسحب وأفلت ملف JSON هنا أو انقر للاختيار</p>
                            <small>يجب أن يحتوي الملف على: رقم الوحدة، التواريخ الجديدة</small>
                        </div>
                    </div>
                    <input type="file" id="dateFileInput" accept=".json" style="display: none;">

                    <div class="file-info" id="dateFileInfo" style="display: none;">
                        <div class="file-details">
                            <i class="fas fa-file-code"></i>
                            <div>
                                <div class="file-name" id="dateFileName"></div>
                                <div class="file-size" id="dateFileSize"></div>
                            </div>
                        </div>
                        <button class="change-file-btn" onclick="changeDateFile()">تغيير الملف</button>
                    </div>
                </div>

                <div class="preview-section" id="datePreviewSection" style="display: none;">
                    <h3>معاينة التحديثات</h3>
                    <div class="preview-stats" id="datePreviewStats"></div>
                    <div class="preview-table-container">
                        <table class="preview-table" id="datePreviewTable"></table>
                    </div>
                </div>

                <div class="update-options" id="dateUpdateOptions" style="display: none;">
                    <h3>خيارات التحديث</h3>
                    <div class="options-grid">
                        <label class="checkbox-label">
                            <input type="checkbox" id="updateContractDates" checked>
                            <span class="checkmark"></span>
                            تحديث تواريخ العقود (بداية ونهاية)
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" id="updateInstallmentDates" checked>
                            <span class="checkmark"></span>
                            تحديث تواريخ الأقساط
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" id="createDateBackup" checked>
                            <span class="checkmark"></span>
                            إنشاء نسخة احتياطية قبل التحديث
                        </label>
                    </div>
                </div>

                <div class="update-progress" id="dateUpdateProgress" style="display: none;">
                    <h3>تقدم التحديث</h3>
                    <div class="progress-bar">
                        <div class="progress-fill" id="dateProgressFill"></div>
                    </div>
                    <div class="progress-text" id="dateProgressText">جاري التحضير...</div>
                    <div class="update-log" id="dateUpdateLog"></div>
                </div>

                <div class="update-results" id="dateUpdateResults" style="display: none;">
                    <h3>نتائج التحديث</h3>
                    <div id="dateUpdateResultsContent"></div>
                </div>
            </div>

            <div class="date-update-actions">
                <button class="modal-action-btn close-btn" onclick="closeDateUpdateModal()">
                    <i class="fas fa-times"></i> إغلاق
                </button>
                <button class="modal-action-btn next-btn" id="dateNextBtn" onclick="previewDateUpdates()" style="display: none;">
                    <i class="fas fa-eye"></i> معاينة
                </button>
                <button class="modal-action-btn update-btn" id="dateUpdateBtn" onclick="executeDateUpdate()" style="display: none;">
                    <i class="fas fa-calendar-check"></i> تحديث التواريخ
                </button>
                <button class="modal-action-btn finish-btn" id="dateFinishBtn" onclick="finishDateUpdate()" style="display: none;">
                    <i class="fas fa-check"></i> إنهاء
                </button>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    setupDateFileUpload();
}

// Alias for mobile menu compatibility
function openDateUpdateModal() {
    showDateUpdateModal();
}

// Setup date file upload functionality
function setupDateFileUpload() {
    const fileUploadArea = document.getElementById('dateFileUploadArea');
    const fileInput = document.getElementById('dateFileInput');

    // Click to upload
    fileUploadArea.addEventListener('click', () => {
        fileInput.click();
    });

    // Drag and drop
    fileUploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        fileUploadArea.classList.add('dragover');
    });

    fileUploadArea.addEventListener('dragleave', () => {
        fileUploadArea.classList.remove('dragover');
    });

    fileUploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        fileUploadArea.classList.remove('dragover');

        const files = e.dataTransfer.files;
        if (files.length > 0) {
            handleDateFileSelection(files[0]);
        }
    });

    // File input change
    fileInput.addEventListener('change', (e) => {
        if (e.target.files.length > 0) {
            handleDateFileSelection(e.target.files[0]);
        }
    });
}

// Handle date file selection
async function handleDateFileSelection(file) {
    console.log('📅 تم اختيار ملف التواريخ:', file.name);

    // Validate file type
    if (!file.name.toLowerCase().endsWith('.json')) {
        showDateUpdateError('يجب أن يكون الملف من نوع JSON فقط');
        return;
    }

    // Show file info
    document.getElementById('dateFileName').textContent = file.name;
    document.getElementById('dateFileSize').textContent = formatFileSize(file.size);
    document.getElementById('dateFileUploadArea').style.display = 'none';
    document.getElementById('dateFileInfo').style.display = 'flex';
    document.getElementById('dateNextBtn').style.display = 'inline-flex';

    // Parse file
    try {
        dateUpdateData = await parseDateUpdateFile(file);
        console.log('✅ تم تحليل ملف التواريخ بنجاح:', dateUpdateData.length, 'سجل');
    } catch (error) {
        console.error('❌ خطأ في تحليل ملف التواريخ:', error);
        showDateUpdateError('خطأ في قراءة الملف: ' + error.message);
    }
}

// Parse date update file
async function parseDateUpdateFile(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const data = JSON.parse(e.target.result);
                if (Array.isArray(data)) {
                    resolve(data);
                } else {
                    reject(new Error('ملف JSON يجب أن يحتوي على مصفوفة من البيانات'));
                }
            } catch (error) {
                reject(new Error('خطأ في تحليل ملف JSON: ' + error.message));
            }
        };
        reader.onerror = () => reject(new Error('خطأ في قراءة الملف'));
        reader.readAsText(file);
    });
}

// Preview date updates
function previewDateUpdates() {
    console.log('🔍 إنشاء معاينة تحديثات التواريخ...');

    if (!dateUpdateData || dateUpdateData.length === 0) {
        showDateUpdateError('لا توجد بيانات للمعاينة');
        return;
    }

    // Analyze date updates
    const analysis = analyzeDateUpdates();
    displayDatePreviewStats(analysis);
    displayDatePreviewTable(analysis);

    // Show preview and options
    document.getElementById('datePreviewSection').style.display = 'block';
    document.getElementById('dateUpdateOptions').style.display = 'block';
    document.getElementById('dateNextBtn').style.display = 'none';
    document.getElementById('dateUpdateBtn').style.display = 'inline-flex';
}

// Analyze date updates
function analyzeDateUpdates() {
    console.log('📊 تحليل تحديثات التواريخ...');

    const analysis = {
        totalRecords: dateUpdateData.length,
        validUpdates: 0,
        contractDateUpdates: 0,
        installmentDateUpdates: 0,
        notFound: 0,
        errors: [],
        updates: []
    };

    dateUpdateData.forEach((record, index) => {
        try {
            const updateInfo = analyzeRecordDateUpdate(record, index);
            analysis.updates.push(updateInfo);

            if (updateInfo.found) {
                analysis.validUpdates++;
                if (updateInfo.hasContractDates) analysis.contractDateUpdates++;
                if (updateInfo.hasInstallmentDates) analysis.installmentDateUpdates++;
            } else {
                analysis.notFound++;
            }

            if (updateInfo.errors.length > 0) {
                analysis.errors.push(...updateInfo.errors);
            }

        } catch (error) {
            console.error(`❌ خطأ في تحليل السجل ${index}:`, error);
            analysis.errors.push(`السجل ${index + 1}: ${error.message}`);
        }
    });

    console.log('📊 نتائج تحليل التواريخ:', analysis);
    return analysis;
}

// Analyze individual record for date update
function analyzeRecordDateUpdate(record, index) {
    const updateInfo = {
        index: index,
        record: record,
        found: false,
        existingUnit: null,
        hasContractDates: false,
        hasInstallmentDates: false,
        errors: [],
        warnings: []
    };

    // Validate required field
    if (!record['رقم  الوحدة ']) {
        updateInfo.errors.push('رقم الوحدة مطلوب');
        return updateInfo;
    }

    // Find existing unit
    const unitNumber = record['رقم  الوحدة '].toString().trim();
    updateInfo.existingUnit = properties.find(p => p['رقم  الوحدة '] === unitNumber);

    if (updateInfo.existingUnit) {
        updateInfo.found = true;

        // Check for contract dates
        if (record['تاريخ بداية العقد'] || record['تاريخ نهاية العقد']) {
            updateInfo.hasContractDates = true;
        }

        // Check for installment dates
        for (let i = 1; i <= 10; i++) {
            const dateKey = i === 1 ? 'تاريخ القسط الاول' :
                           i === 2 ? 'تاريخ القسط الثاني' :
                           `تاريخ القسط ${getArabicNumber(i)}`;

            if (record[dateKey]) {
                updateInfo.hasInstallmentDates = true;
                break;
            }
        }

        // Validate date formats
        validateDateFormats(record, updateInfo);

    } else {
        updateInfo.errors.push(`لم يتم العثور على الوحدة رقم: ${unitNumber}`);
    }

    return updateInfo;
}

// Validate date formats in record
function validateDateFormats(record, updateInfo) {
    const dateFields = [
        'تاريخ بداية العقد', 'تاريخ نهاية العقد',
        'تاريخ القسط الاول', 'تاريخ القسط الثاني'
    ];

    // Add more installment date fields
    for (let i = 3; i <= 10; i++) {
        dateFields.push(`تاريخ القسط ${getArabicNumber(i)}`);
    }

    dateFields.forEach(field => {
        if (record[field]) {
            const dateStr = record[field].toString();
            const date = new Date(dateStr);

            if (isNaN(date.getTime())) {
                updateInfo.warnings.push(`تنسيق التاريخ غير صحيح في "${field}": ${dateStr}`);
            }
        }
    });
}

// Display date preview statistics
function displayDatePreviewStats(analysis) {
    const statsContainer = document.getElementById('datePreviewStats');

    statsContainer.innerHTML = `
        <div class="stats-grid">
            <div class="stat-item">
                <div class="stat-number">${analysis.totalRecords}</div>
                <div class="stat-label">إجمالي السجلات</div>
            </div>
            <div class="stat-item success">
                <div class="stat-number">${analysis.validUpdates}</div>
                <div class="stat-label">تحديثات صالحة</div>
            </div>
            <div class="stat-item info">
                <div class="stat-number">${analysis.contractDateUpdates}</div>
                <div class="stat-label">تواريخ عقود</div>
            </div>
            <div class="stat-item warning">
                <div class="stat-number">${analysis.installmentDateUpdates}</div>
                <div class="stat-label">تواريخ أقساط</div>
            </div>
            <div class="stat-item error">
                <div class="stat-number">${analysis.notFound}</div>
                <div class="stat-label">غير موجود</div>
            </div>
            <div class="stat-item error">
                <div class="stat-number">${analysis.errors.length}</div>
                <div class="stat-label">أخطاء</div>
            </div>
        </div>

        ${analysis.errors.length > 0 ? `
            <div class="errors-section">
                <h4><i class="fas fa-exclamation-triangle"></i> الأخطاء المكتشفة:</h4>
                <ul class="error-list">
                    ${analysis.errors.slice(0, 5).map(error => `<li>${error}</li>`).join('')}
                    ${analysis.errors.length > 5 ? `<li>... و ${analysis.errors.length - 5} خطأ آخر</li>` : ''}
                </ul>
            </div>
        ` : ''}
    `;
}

// Display date preview table
function displayDatePreviewTable(analysis) {
    const tableContainer = document.getElementById('datePreviewTable');

    // Show only first 10 records for preview
    const previewUpdates = analysis.updates.slice(0, 10);

    let tableHTML = `
        <thead>
            <tr>
                <th>رقم الوحدة</th>
                <th>العقار</th>
                <th>تواريخ العقد</th>
                <th>تواريخ الأقساط</th>
                <th>الحالة</th>
            </tr>
        </thead>
        <tbody>
    `;

    previewUpdates.forEach(update => {
        const statusClass = update.found ? 'success' : 'error';
        const statusText = update.found ? 'موجود' : 'غير موجود';

        const contractDates = update.hasContractDates ?
            `<i class="fas fa-check text-success"></i> سيتم التحديث` :
            `<i class="fas fa-minus text-muted"></i> لا يوجد`;

        const installmentDates = update.hasInstallmentDates ?
            `<i class="fas fa-check text-success"></i> سيتم التحديث` :
            `<i class="fas fa-minus text-muted"></i> لا يوجد`;

        tableHTML += `
            <tr class="${statusClass}">
                <td>${update.record['رقم  الوحدة '] || 'غير محدد'}</td>
                <td>${update.existingUnit ? update.existingUnit['اسم العقار'] : 'غير موجود'}</td>
                <td>${contractDates}</td>
                <td>${installmentDates}</td>
                <td><span class="status-badge ${statusClass}">${statusText}</span></td>
            </tr>
        `;
    });

    tableHTML += '</tbody>';

    if (analysis.updates.length > 10) {
        tableHTML += `
            <tfoot>
                <tr>
                    <td colspan="5" class="text-center">
                        <small>عرض أول 10 سجلات من ${analysis.updates.length} سجل</small>
                    </td>
                </tr>
            </tfoot>
        `;
    }

    tableContainer.innerHTML = tableHTML;
}

// Execute date update
async function executeDateUpdate() {
    console.log('🚀 بدء تنفيذ تحديث التواريخ...');

    // Get options
    const updateContractDates = document.getElementById('updateContractDates').checked;
    const updateInstallmentDates = document.getElementById('updateInstallmentDates').checked;
    const createBackup = document.getElementById('createDateBackup').checked;

    console.log('⚙️ خيارات التحديث:', { updateContractDates, updateInstallmentDates, createBackup });

    // Hide options and show progress
    document.getElementById('dateUpdateOptions').style.display = 'none';
    document.getElementById('dateUpdateBtn').style.display = 'none';
    document.getElementById('dateUpdateProgress').style.display = 'block';

    try {
        // Create backup if requested
        if (createBackup) {
            updateDateProgress(10, 'إنشاء نسخة احتياطية...');
            await createDateBackup();
            addDateUpdateLog('✅ تم إنشاء نسخة احتياطية');
        }

        // Process updates
        updateDateProgress(20, 'بدء معالجة التحديثات...');
        const results = await processDateUpdates(updateContractDates, updateInstallmentDates);

        // Save data
        updateDateProgress(90, 'حفظ البيانات...');
        saveDataLocally();

        // Show results
        updateDateProgress(100, 'تم الانتهاء!');
        displayDateUpdateResults(results);

        document.getElementById('dateUpdateProgress').style.display = 'none';
        document.getElementById('dateUpdateResults').style.display = 'block';
        document.getElementById('dateFinishBtn').style.display = 'inline-flex';

    } catch (error) {
        console.error('❌ خطأ في تحديث التواريخ:', error);
        showDateUpdateError('خطأ في تحديث التواريخ: ' + error.message);
    }
}

// Process date updates
async function processDateUpdates(updateContractDates, updateInstallmentDates) {
    const results = {
        processed: 0,
        contractDatesUpdated: 0,
        installmentDatesUpdated: 0,
        errors: 0,
        skipped: 0
    };

    const analysis = analyzeDateUpdates();
    const validUpdates = analysis.updates.filter(u => u.found);

    for (let i = 0; i < validUpdates.length; i++) {
        const update = validUpdates[i];
        const progress = 20 + (i / validUpdates.length) * 70;

        updateDateProgress(progress, `معالجة الوحدة ${update.record['رقم  الوحدة ']}...`);

        try {
            const unitIndex = properties.findIndex(p => p['رقم  الوحدة '] === update.record['رقم  الوحدة ']);

            if (unitIndex !== -1) {
                let updated = false;

                // Update contract dates
                if (updateContractDates && update.hasContractDates) {
                    if (update.record['تاريخ بداية العقد']) {
                        properties[unitIndex]['تاريخ بداية العقد'] = formatDateForStorage(update.record['تاريخ بداية العقد']);
                        updated = true;
                    }
                    if (update.record['تاريخ نهاية العقد']) {
                        properties[unitIndex]['تاريخ نهاية العقد'] = formatDateForStorage(update.record['تاريخ نهاية العقد']);
                        updated = true;
                    }
                    if (updated) results.contractDatesUpdated++;
                }

                // Update installment dates
                if (updateInstallmentDates && update.hasInstallmentDates) {
                    let installmentUpdated = false;

                    for (let j = 1; j <= 10; j++) {
                        const dateKey = j === 1 ? 'تاريخ القسط الاول' :
                                       j === 2 ? 'تاريخ القسط الثاني' :
                                       `تاريخ القسط ${getArabicNumber(j)}`;

                        if (update.record[dateKey]) {
                            properties[unitIndex][dateKey] = formatDateForStorage(update.record[dateKey]);
                            installmentUpdated = true;
                        }
                    }

                    if (installmentUpdated) {
                        results.installmentDatesUpdated++;
                        updated = true;
                    }
                }

                if (updated) {
                    results.processed++;
                    addDateUpdateLog(`✅ تم تحديث الوحدة: ${update.record['رقم  الوحدة ']}`);
                } else {
                    results.skipped++;
                    addDateUpdateLog(`⏭️ تم تخطي الوحدة: ${update.record['رقم  الوحدة ']} (لا توجد تحديثات مطلوبة)`);
                }
            }

        } catch (error) {
            console.error(`❌ خطأ في معالجة الوحدة ${update.record['رقم  الوحدة ']}:`, error);
            results.errors++;
            addDateUpdateLog(`❌ خطأ في الوحدة ${update.record['رقم  الوحدة ']}: ${error.message}`);
        }
    }

    return results;
}

// Helper functions for date update
function formatDateForStorage(dateStr) {
    try {
        if (!dateStr) return dateStr;

        // إذا كان التاريخ بالتنسيق العربي DD/MM/YYYY
        if (typeof dateStr === 'string' && dateStr.includes('/')) {
            const parts = dateStr.split('/');
            if (parts.length === 3) {
                const day = parseInt(parts[0]);
                const month = parseInt(parts[1]);
                const year = parseInt(parts[2]);

                // التحقق من صحة التاريخ
                if (day >= 1 && day <= 31 && month >= 1 && month <= 12 && year >= 1900 && year <= 2100) {
                    // إنشاء التاريخ بتنسيق ISO صحيح
                    const isoDate = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
                    const testDate = new Date(isoDate);

                    // التأكد من أن التاريخ صحيح
                    if (!isNaN(testDate.getTime())) {
                        return isoDate; // YYYY-MM-DD format
                    }
                }
            }
        }

        // إذا كان التاريخ بتنسيق YYYY-MM-DD، تحقق من صحته وأرجعه
        if (typeof dateStr === 'string' && dateStr.match(/^\d{4}-\d{1,2}-\d{1,2}$/)) {
            const parts = dateStr.split('-');
            const year = parseInt(parts[0]);
            const month = parseInt(parts[1]);
            const day = parseInt(parts[2]);

            if (year >= 1900 && year <= 2100 && month >= 1 && month <= 12 && day >= 1 && day <= 31) {
                const testDate = new Date(year, month - 1, day, 12, 0, 0);
                if (testDate.getFullYear() === year && testDate.getMonth() === (month - 1) && testDate.getDate() === day) {
                    return `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
                }
            }
        }

        console.warn('تاريخ غير صحيح:', dateStr);
        return dateStr; // Return original if invalid
    } catch (error) {
        console.warn('خطأ في تنسيق التاريخ:', dateStr, error);
        return dateStr;
    }
}

function updateDateProgress(percentage, message) {
    const progressFill = document.getElementById('dateProgressFill');
    const progressText = document.getElementById('dateProgressText');

    if (progressFill) {
        progressFill.style.width = percentage + '%';
    }
    if (progressText) {
        progressText.textContent = message;
    }
}

function addDateUpdateLog(message) {
    const logContainer = document.getElementById('dateUpdateLog');
    if (logContainer) {
        const logEntry = document.createElement('div');
        logEntry.className = 'log-entry';
        logEntry.innerHTML = `<span class="log-time">${new Date().toLocaleTimeString('ar-SA')}</span> ${message}`;
        logContainer.appendChild(logEntry);
        logContainer.scrollTop = logContainer.scrollHeight;
    }
}

async function createDateBackup() {
    const backupData = {
        timestamp: new Date().toISOString(),
        type: 'date_update_backup',
        data: JSON.parse(JSON.stringify(properties))
    };

    const backupKey = `backup_dates_${Date.now()}`;
    localStorage.setItem(backupKey, JSON.stringify(backupData));

    console.log('💾 تم إنشاء نسخة احتياطية:', backupKey);
}

function displayDateUpdateResults(results) {
    const resultsContainer = document.getElementById('dateUpdateResultsContent');

    resultsContainer.innerHTML = `
        <div class="results-summary">
            <div class="result-stats">
                <div class="stat-item success">
                    <div class="stat-number">${results.processed}</div>
                    <div class="stat-label">وحدات محدثة</div>
                </div>
                <div class="stat-item info">
                    <div class="stat-number">${results.contractDatesUpdated}</div>
                    <div class="stat-label">تواريخ عقود</div>
                </div>
                <div class="stat-item warning">
                    <div class="stat-number">${results.installmentDatesUpdated}</div>
                    <div class="stat-label">تواريخ أقساط</div>
                </div>
                <div class="stat-item muted">
                    <div class="stat-number">${results.skipped}</div>
                    <div class="stat-label">متخطاة</div>
                </div>
                <div class="stat-item error">
                    <div class="stat-number">${results.errors}</div>
                    <div class="stat-label">أخطاء</div>
                </div>
            </div>

            <div class="success-message">
                <i class="fas fa-check-circle"></i>
                <h3>تم تحديث التواريخ بنجاح!</h3>
                <p>تم معالجة ${results.processed} وحدة وتحديث تواريخها</p>
            </div>
        </div>
    `;
}

function changeDateFile() {
    document.getElementById('dateFileUploadArea').style.display = 'block';
    document.getElementById('dateFileInfo').style.display = 'none';
    document.getElementById('datePreviewSection').style.display = 'none';
    document.getElementById('dateUpdateOptions').style.display = 'none';
    document.getElementById('dateNextBtn').style.display = 'none';
    document.getElementById('dateUpdateBtn').style.display = 'none';

    // Reset file input
    document.getElementById('dateFileInput').value = '';
    dateUpdateData = null;
}

function showDateUpdateError(message) {
    const errorModal = document.createElement('div');
    errorModal.className = 'modal-overlay';
    errorModal.style.display = 'flex';
    errorModal.innerHTML = `
        <div class="error-modal">
            <div class="error-content">
                <i class="fas fa-exclamation-triangle"></i>
                <h3>خطأ في تحديث التواريخ</h3>
                <p>${message}</p>
                <button class="btn-primary" onclick="this.closest('.modal-overlay').remove()">
                    حسناً
                </button>
            </div>
        </div>
    `;
    document.body.appendChild(errorModal);
}

function closeDateUpdateModal() {
    const modal = document.querySelector('.modal-overlay');
    if (modal) {
        modal.remove();
    }

    // Reset global variables
    dateUpdateData = null;
}

function finishDateUpdate() {
    // Refresh the main interface
    renderData();
    updateTotalStats();

    // Close modal
    closeDateUpdateModal();

    // Show success notification
    showSuccessMessage('تم تحديث التواريخ بنجاح', 'تم تحديث جميع التواريخ المحددة في النظام');
}

// Global variable to store date update data
let dateUpdateData = null;

// ==================== نظام إدارة العقارات ====================

// تحرير وحدة في نظام إدارة العقارات
function editUnit(unitNumber, propertyName) {
    console.log(`🔧 تحرير الوحدة: ${unitNumber} في العقار: ${propertyName}`);

    // البحث عن الوحدة
    const unit = properties.find(p =>
        p['رقم  الوحدة '] === unitNumber && p['اسم العقار'] === propertyName
    );

    if (!unit) {
        alert('❌ لم يتم العثور على الوحدة المطلوبة');
        return;
    }

    // إظهار نافذة تحرير الوحدة
    showUnitEditModal(unit);
}

// إظهار نافذة تحرير الوحدة
function showUnitEditModal(unit) {
    const modalHTML = `
        <div class="modal-overlay" style="display:flex;">
            <div class="modal-box unit-edit-modal">
                <button class="close-modal" onclick="closeModal()">×</button>

                <div class="edit-modal-header">
                    <h2><i class="fas fa-edit"></i> تحرير الوحدة</h2>
                    <p>تحرير بيانات الوحدة: ${unit['رقم  الوحدة ']}</p>
                </div>

                <div class="edit-modal-content">
                    <form id="unitEditForm" onsubmit="saveUnitEdit(event)">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="editUnitNumber">رقم الوحدة <span class="required">*</span></label>
                                <input type="text" id="editUnitNumber" name="unitNumber"
                                       value="${unit['رقم  الوحدة '] || ''}"
                                       required class="form-control"
                                       placeholder="أدخل رقم الوحدة الجديد">
                                <small class="form-text">رقم الوحدة يجب أن يكون فريداً</small>
                            </div>

                            <div class="form-group">
                                <label for="editPropertyName">اسم العقار</label>
                                <input type="text" id="editPropertyName" name="propertyName"
                                       value="${unit['اسم العقار'] || ''}"
                                       readonly class="form-control"
                                       style="background-color: #f8f9fa;">
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="editTenantName">اسم المستأجر</label>
                                <input type="text" id="editTenantName" name="tenantName"
                                       value="${unit['اسم المستأجر'] || ''}"
                                       class="form-control"
                                       placeholder="اسم المستأجر">
                            </div>

                            <div class="form-group">
                                <label for="editContractNumber">رقم العقد</label>
                                <input type="text" id="editContractNumber" name="contractNumber"
                                       value="${unit['رقم العقد'] || ''}"
                                       class="form-control"
                                       placeholder="رقم العقد">
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="editRentValue">قيمة الإيجار</label>
                                <input type="number" id="editRentValue" name="rentValue"
                                       value="${unit['قيمة  الايجار '] || ''}"
                                       class="form-control"
                                       placeholder="قيمة الإيجار بالريال">
                            </div>

                            <div class="form-group">
                                <label for="editArea">المساحة</label>
                                <input type="number" id="editArea" name="area"
                                       value="${unit['المساحة'] || ''}"
                                       class="form-control"
                                       placeholder="المساحة بالمتر المربع">
                            </div>
                        </div>

                        <input type="hidden" id="originalUnitNumber" value="${unit['رقم  الوحدة '] || ''}">
                        <input type="hidden" id="originalPropertyName" value="${unit['اسم العقار'] || ''}">

                        <div class="modal-actions">
                            <button type="button" class="modal-action-btn close-btn" onclick="closeModal()">
                                <i class="fas fa-times"></i> إلغاء
                            </button>
                            <button type="submit" class="modal-action-btn save-btn">
                                <i class="fas fa-save"></i> حفظ التغييرات
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    `;

    document.body.insertAdjacentHTML('beforeend', modalHTML);

    // إضافة حدث إغلاق للمودال
    document.querySelector('.modal-overlay:last-child').addEventListener('click', function(e) {
        if (e.target === this) {
            closeModal();
        }
    });

    // تركيز على حقل رقم الوحدة
    setTimeout(() => {
        document.getElementById('editUnitNumber').focus();
    }, 100);
}

// حفظ تعديل الوحدة
async function saveUnitEdit(event) {
    event.preventDefault();

    const form = event.target;
    const formData = new FormData(form);

    // الحصول على البيانات
    const newUnitNumber = formData.get('unitNumber').trim();
    const originalUnitNumber = document.getElementById('originalUnitNumber').value;
    const originalPropertyName = document.getElementById('originalPropertyName').value;
    const tenantName = formData.get('tenantName').trim();
    const contractNumber = formData.get('contractNumber').trim();
    const rentValue = formData.get('rentValue');
    const area = formData.get('area');

    // التحقق من صحة البيانات
    if (!newUnitNumber) {
        alert('❌ رقم الوحدة مطلوب');
        return;
    }

    // التحقق من عدم تكرار رقم الوحدة (إذا تم تغييره)
    if (newUnitNumber !== originalUnitNumber) {
        const existingUnit = properties.find(p =>
            p['رقم  الوحدة '] === newUnitNumber &&
            p['اسم العقار'] === originalPropertyName
        );

        if (existingUnit) {
            alert(`❌ رقم الوحدة "${newUnitNumber}" موجود بالفعل في هذا العقار`);
            return;
        }
    }

    try {
        // إظهار مؤشر التحميل
        const saveBtn = form.querySelector('.save-btn');
        const originalText = saveBtn.innerHTML;
        saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> جاري الحفظ...';
        saveBtn.disabled = true;

        // البحث عن الوحدة وتحديثها
        const unitIndex = properties.findIndex(p =>
            p['رقم  الوحدة '] === originalUnitNumber &&
            p['اسم العقار'] === originalPropertyName
        );

        if (unitIndex === -1) {
            throw new Error('لم يتم العثور على الوحدة المطلوب تحديثها');
        }

        console.log(`🔍 تم العثور على الوحدة في الفهرس: ${unitIndex}`);
        console.log(`📝 البيانات الأصلية:`, JSON.stringify(properties[unitIndex], null, 2));
        console.log(`📊 إجمالي الوحدات قبل التحديث: ${properties.length}`);

        // حفظ البيانات الأصلية للمقارنة
        const originalData = { ...properties[unitIndex] };

        // تحديث البيانات مباشرة في نفس الكائن (بدلاً من إنشاء نسخة جديدة)
        console.log(`🔄 بدء تحديث البيانات...`);
        properties[unitIndex]['رقم  الوحدة '] = newUnitNumber;
        properties[unitIndex]['اسم المستأجر'] = tenantName || properties[unitIndex]['اسم المستأجر'];
        properties[unitIndex]['رقم العقد'] = contractNumber || properties[unitIndex]['رقم العقد'];
        properties[unitIndex]['قيمة  الايجار '] = rentValue ? parseFloat(rentValue) : properties[unitIndex]['قيمة  الايجار '];
        properties[unitIndex]['المساحة'] = area ? parseFloat(area) : properties[unitIndex]['المساحة'];

        console.log(`✅ البيانات بعد التحديث:`, JSON.stringify(properties[unitIndex], null, 2));
        console.log(`🔄 رقم الوحدة تغير من "${originalUnitNumber}" إلى "${newUnitNumber}"`);
        console.log(`📊 إجمالي الوحدات بعد التحديث: ${properties.length}`);

        // التحقق من أن التحديث تم فعلاً
        if (properties[unitIndex]['رقم  الوحدة '] === newUnitNumber) {
            console.log(`✅ تأكيد: تم تحديث رقم الوحدة بنجاح في المصفوفة`);
        } else {
            console.error(`❌ خطأ: فشل في تحديث رقم الوحدة في المصفوفة`);
            throw new Error('فشل في تحديث البيانات في المصفوفة المحلية');
        }

        // التأكد من عدم وجود نسخ مكررة
        const duplicateCheck = properties.filter(p =>
            p['رقم  الوحدة '] === newUnitNumber &&
            p['اسم العقار'] === originalPropertyName
        );

        if (duplicateCheck.length > 1) {
            console.warn(`⚠️ تم اكتشاف ${duplicateCheck.length} نسخة من الوحدة ${newUnitNumber}`);
            // إزالة النسخ المكررة والاحتفاظ بالأولى فقط
            const firstIndex = properties.findIndex(p =>
                p['رقم  الوحدة '] === newUnitNumber &&
                p['اسم العقار'] === originalPropertyName
            );

            // إزالة النسخ المكررة
            for (let i = properties.length - 1; i >= 0; i--) {
                if (i !== firstIndex &&
                    properties[i]['رقم  الوحدة '] === newUnitNumber &&
                    properties[i]['اسم العقار'] === originalPropertyName) {
                    properties.splice(i, 1);
                    console.log(`🗑️ تم حذف نسخة مكررة من الفهرس ${i}`);
                }
            }
        }

        // حفظ في localStorage مع معالجة أخطاء المساحة
        console.log(`💾 بدء حفظ البيانات في localStorage...`);
        console.log(`📊 عدد الوحدات قبل الحفظ: ${properties.length}`);

        try {
            // تحويل البيانات إلى JSON
            const dataToSave = JSON.stringify(properties);
            console.log(`📝 حجم البيانات المراد حفظها: ${dataToSave.length} حرف`);

            // محاولة حفظ البيانات مع معالجة أخطاء المساحة
            await saveToLocalStorageWithRetry('properties', dataToSave);
            console.log(`✅ تم حفظ البيانات في localStorage بنجاح`);

            // التحقق الفوري من الحفظ
            const savedData = localStorage.getItem('properties');
            if (savedData) {
                const parsedData = JSON.parse(savedData);
                console.log(`📊 عدد الوحدات المحفوظة: ${parsedData.length}`);

                // البحث عن الوحدة المحدثة
                const savedUnit = parsedData.find(p =>
                    p['رقم  الوحدة '] === newUnitNumber &&
                    p['اسم العقار'] === originalPropertyName
                );

                if (savedUnit) {
                    console.log(`✅ تأكيد: تم العثور على الوحدة المحدثة في localStorage`);
                    console.log(`   - رقم الوحدة المحفوظ: "${savedUnit['رقم  الوحدة ']}"`);
                    console.log(`   - اسم العقار: "${savedUnit['اسم العقار']}"`);
                    console.log(`   - اسم المستأجر: "${savedUnit['اسم المستأجر']}"`);
                } else {
                    console.error(`❌ لم يتم العثور على الوحدة المحدثة في localStorage`);
                    console.log(`🔍 البحث عن: رقم الوحدة="${newUnitNumber}", العقار="${originalPropertyName}"`);

                    // عرض جميع الوحدات للتشخيص
                    console.log(`🔍 جميع الوحدات المحفوظة:`, parsedData.map(p => ({
                        unitNumber: p['رقم  الوحدة '],
                        propertyName: p['اسم العقار']
                    })));

                    throw new Error('فشل في العثور على الوحدة المحدثة في localStorage');
                }
            } else {
                console.error(`❌ فشل في قراءة البيانات من localStorage`);
                throw new Error('فشل في قراءة البيانات المحفوظة');
            }

        } catch (error) {
            console.error(`❌ خطأ في حفظ البيانات في localStorage:`, error);

            // إذا كان الخطأ متعلق بالمساحة، أظهر رسالة مفيدة
            if (error.message.includes('quota') || error.message.includes('Storage')) {
                throw new Error('مساحة التخزين ممتلئة. يرجى تنظيف البيانات أو استخدام متصفح آخر.');
            } else {
                throw new Error(`فشل في حفظ البيانات محلياً: ${error.message}`);
            }
        }

        // محاولة الحفظ في Supabase إذا كان متاحاً
        if (typeof supabaseClient !== 'undefined' && supabaseClient) {
            try {
                await saveUnitToSupabase(properties[unitIndex], originalUnitNumber, originalPropertyName);

                // التحقق من عدم وجود سجلات مكررة في قاعدة البيانات
                console.log(`🔍 فحص السجلات المكررة في قاعدة البيانات...`);
                const { data: duplicateCheck, error: duplicateError } = await supabaseClient
                    .from('properties')
                    .select('*')
                    .eq('رقم  الوحدة ', newUnitNumber)
                    .eq('اسم العقار', originalPropertyName);

                if (!duplicateError && duplicateCheck && duplicateCheck.length > 1) {
                    console.warn(`⚠️ تم اكتشاف ${duplicateCheck.length} سجل مكرر في قاعدة البيانات`);

                    // حذف السجلات المكررة والاحتفاظ بالأحدث
                    const sortedRecords = duplicateCheck.sort((a, b) =>
                        new Date(b.updated_at || b.created_at) - new Date(a.updated_at || a.created_at)
                    );

                    for (let i = 1; i < sortedRecords.length; i++) {
                        const { error: deleteError } = await supabaseClient
                            .from('properties')
                            .delete()
                            .eq('id', sortedRecords[i].id);

                        if (!deleteError) {
                            console.log(`🗑️ تم حذف السجل المكرر ID: ${sortedRecords[i].id}`);
                        }
                    }
                }

            } catch (supabaseError) {
                console.warn('⚠️ خطأ في Supabase، لكن التحديث المحلي تم بنجاح:', supabaseError.message);
                // لا نرمي الخطأ هنا لأن التحديث المحلي نجح
            }
        }

        // إغلاق النافذة
        closeModal();

        // تحديث الواجهة فوراً
        console.log(`🔄 تحديث الواجهة - وضع الإدارة: ${isManagementMode}`);

        if (isManagementMode) {
            // إذا كنا في وضع الإدارة، تحديث قائمة الوحدات
            console.log(`🔄 تحديث قائمة الوحدات في وضع الإدارة`);
            searchUnits();
        } else {
            // تحديث العرض العادي
            console.log(`🔄 تحديث العرض العادي`);
            renderData();
            updateTotalStats();
        }

        // إعادة تحميل البيانات من localStorage للتأكد من التحديث
        setTimeout(() => {
            console.log(`🔄 إعادة تحميل البيانات للتأكد من التحديث`);

            // إعادة تحميل البيانات من localStorage
            const reloadedData = localStorage.getItem('properties');
            if (reloadedData) {
                try {
                    properties = JSON.parse(reloadedData);
                    console.log(`✅ تم إعادة تحميل ${properties.length} عقار من localStorage`);

                    // التحقق من أن التحديث تم بنجاح
                    const updatedUnit = properties.find(p =>
                        p['رقم  الوحدة '] === newUnitNumber &&
                        p['اسم العقار'] === originalPropertyName
                    );

                    if (updatedUnit) {
                        console.log(`✅ تأكيد: الوحدة محدثة بنجاح - رقم الوحدة: ${updatedUnit['رقم  الوحدة ']}`);
                    } else {
                        console.error(`❌ خطأ: لم يتم العثور على الوحدة المحدثة`);
                    }

                } catch (e) {
                    console.error('❌ خطأ في إعادة تحميل البيانات:', e);
                }
            }

            if (isManagementMode) {
                searchUnits();
            } else {
                renderData();
            }
        }, 100);

        // إظهار رسالة نجاح
        showSuccessMessage(`✅ تم تحديث الوحدة "${newUnitNumber}" بنجاح`);

        console.log(`✅ تم تحديث الوحدة: ${originalUnitNumber} → ${newUnitNumber}`);

        // فحص نهائي شامل للتأكد من التحديث الدائم
        console.log(`🔍 فحص نهائي شامل للتأكد من التحديث الدائم...`);

        // فحص 1: التحقق من المصفوفة المحلية
        const finalCheckLocal = properties.find(p =>
            p['رقم  الوحدة '] === newUnitNumber &&
            p['اسم العقار'] === originalPropertyName
        );

        if (finalCheckLocal) {
            console.log(`✅ فحص 1 - المصفوفة المحلية: الوحدة محدثة بنجاح`);
            console.log(`   - رقم الوحدة: ${finalCheckLocal['رقم  الوحدة ']}`);
            console.log(`   - اسم المستأجر: ${finalCheckLocal['اسم المستأجر']}`);
            console.log(`   - رقم العقد: ${finalCheckLocal['رقم العقد']}`);
        } else {
            console.error(`❌ فحص 1 فشل - لم يتم العثور على الوحدة المحدثة في المصفوفة المحلية`);
            throw new Error('فشل في تحديث المصفوفة المحلية');
        }

        // فحص 2: التحقق من localStorage
        const localStorageData = JSON.parse(localStorage.getItem('properties') || '[]');
        const finalCheckStorage = localStorageData.find(p =>
            p['رقم  الوحدة '] === newUnitNumber &&
            p['اسم العقار'] === originalPropertyName
        );

        if (finalCheckStorage) {
            console.log(`✅ فحص 2 - localStorage: الوحدة محفوظة بنجاح`);
            console.log(`   - رقم الوحدة المحفوظ: ${finalCheckStorage['رقم  الوحدة ']}`);
        } else {
            console.error(`❌ فحص 2 فشل - لم يتم العثور على الوحدة المحدثة في localStorage`);
            throw new Error('فشل في حفظ البيانات في localStorage');
        }

        // فحص 3: التأكد من عدم وجود الوحدة القديمة
        const oldUnitCheck = properties.find(p =>
            p['رقم  الوحدة '] === originalUnitNumber &&
            p['اسم العقار'] === originalPropertyName
        );

        if (oldUnitCheck) {
            console.warn(`⚠️ تحذير: ما زالت الوحدة القديمة موجودة - قد يكون هناك تكرار`);
            console.log(`   - الوحدة القديمة: ${oldUnitCheck['رقم  الوحدة ']}`);
        } else {
            console.log(`✅ فحص 3 - لا توجد وحدة قديمة: تم التحديث بنجاح بدون تكرار`);
        }

        console.log(`🎉 جميع الفحوصات نجحت - التحديث مكتمل ودائم!`);

        // إضافة معرف فريد للتحديث لتتبعه
        const updateId = `update_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;
        console.log(`🆔 معرف التحديث: ${updateId}`);

        // حفظ معرف التحديث في localStorage للتحقق منه لاحقاً
        const updateLog = JSON.parse(localStorage.getItem('updateLog') || '[]');
        updateLog.push({
            id: updateId,
            timestamp: new Date().toISOString(),
            action: 'editUnit',
            originalUnitNumber: originalUnitNumber,
            newUnitNumber: newUnitNumber,
            propertyName: originalPropertyName
        });
        localStorage.setItem('updateLog', JSON.stringify(updateLog));
        console.log(`📝 تم تسجيل التحديث في سجل العمليات`);

        // تحديث فوري إضافي للواجهة
        console.log(`🔄 تحديث فوري إضافي للواجهة`);
        if (typeof renderData === 'function') {
            renderData();
        }
        if (typeof updateTotalStats === 'function') {
            updateTotalStats();
        }

    } catch (error) {
        console.error('❌ خطأ في حفظ تعديل الوحدة:', error);
        // تم إزالة رسالة الخطأ حسب طلب المستخدم

        // إعادة تفعيل الزر
        const saveBtn = form.querySelector('.save-btn');
        saveBtn.innerHTML = '<i class="fas fa-save"></i> حفظ التغييرات';
        saveBtn.disabled = false;
    }
}

// حفظ الوحدة في Supabase
async function saveUnitToSupabase(unit, originalUnitNumber, originalPropertyName) {
    try {
        console.log(`☁️ محاولة تحديث الوحدة في Supabase:`);
        console.log(`   - البيانات الأصلية: رقم الوحدة="${originalUnitNumber}", العقار="${originalPropertyName}"`);
        console.log(`   - البيانات الجديدة: رقم الوحدة="${unit['رقم  الوحدة ']}", العقار="${unit['اسم العقار']}"`);

        // البحث عن السجل في Supabase باستخدام البيانات الأصلية فقط
        const { data: existingRecords, error: searchError } = await supabaseClient
            .from('properties')
            .select('*')
            .eq('رقم  الوحدة ', originalUnitNumber)
            .eq('اسم العقار', originalPropertyName);

        if (searchError) {
            console.error('❌ خطأ في البحث في Supabase:', searchError);
            throw new Error(`خطأ في البحث في قاعدة البيانات: ${searchError.message}`);
        }

        console.log(`🔍 نتائج البحث في Supabase: ${existingRecords?.length || 0} سجل`);

        if (existingRecords && existingRecords.length > 0) {
            const existingRecord = existingRecords[0];
            console.log(`📋 السجل الموجود:`, {
                id: existingRecord.id,
                unitNumber: existingRecord['رقم  الوحدة '],
                propertyName: existingRecord['اسم العقار']
            });

            // تحديث السجل الموجود باستخدام ID للتأكد من التحديث الصحيح
            const updateData = {
                'رقم  الوحدة ': unit['رقم  الوحدة '],
                'اسم المستأجر': unit['اسم المستأجر'],
                'رقم جوال المستأجر': unit['رقم جوال المستأجر'],
                'رقم جوال إضافي': unit['رقم جوال إضافي'],
                'رقم العقد': unit['رقم العقد'],
                'قيمة  الايجار ': unit['قيمة  الايجار '],
                'المساحة': unit['المساحة'],
                updated_at: new Date().toISOString()
            };

            console.log(`📝 بيانات التحديث:`, updateData);

            // استخدام ID للتحديث بدلاً من البحث بالحقول
            const { data: updatedData, error: updateError } = await supabaseClient
                .from('properties')
                .update(updateData)
                .eq('id', existingRecord.id)
                .select();

            if (updateError) {
                console.error('❌ خطأ في تحديث Supabase:', updateError);
                throw new Error(`خطأ في تحديث قاعدة البيانات: ${updateError.message}`);
            } else {
                console.log('✅ تم تحديث الوحدة في Supabase بنجاح');
                console.log('📊 البيانات المحدثة:', updatedData);

                // التحقق من التحديث
                if (updatedData && updatedData.length > 0) {
                    const updated = updatedData[0];
                    console.log(`✅ تأكيد التحديث: رقم الوحدة الجديد = "${updated['رقم  الوحدة ']}"`);
                }
            }
        } else {
            console.warn('⚠️ لم يتم العثور على السجل في Supabase للتحديث');
            console.log('🔍 محاولة البحث بطريقة أخرى...');

            // محاولة البحث بدون تطابق دقيق للمسافات
            const { data: alternativeSearch, error: altError } = await supabaseClient
                .from('properties')
                .select('*')
                .ilike('رقم  الوحدة ', `%${originalUnitNumber.trim()}%`)
                .ilike('اسم العقار', `%${originalPropertyName.trim()}%`);

            if (!altError && alternativeSearch && alternativeSearch.length > 0) {
                console.log(`🔍 تم العثور على ${alternativeSearch.length} سجل بالبحث البديل`);
                // يمكن إضافة منطق التحديث هنا إذا لزم الأمر
            } else {
                console.warn('⚠️ لم يتم العثور على السجل حتى بالبحث البديل');
            }
        }

    } catch (error) {
        console.error('❌ خطأ في حفظ الوحدة في Supabase:', error);
        throw error; // إعادة رمي الخطأ ليتم التعامل معه في الدالة الرئيسية
    }
}

// فحص البيانات عند تحميل الصفحة للتأكد من الحفظ الدائم
function verifyDataPersistence() {
    console.log(`🔍 فحص البيانات عند تحميل الصفحة...`);

    try {
        // فحص localStorage
        const savedData = localStorage.getItem('properties');
        if (savedData) {
            const parsedData = JSON.parse(savedData);
            console.log(`📊 تم تحميل ${parsedData.length} عقار من localStorage`);

            // فحص سجل التحديثات
            const updateLog = JSON.parse(localStorage.getItem('updateLog') || '[]');
            if (updateLog.length > 0) {
                console.log(`📝 سجل التحديثات يحتوي على ${updateLog.length} عملية`);

                // عرض آخر 3 تحديثات
                const recentUpdates = updateLog.slice(-3);
                recentUpdates.forEach((update, index) => {
                    console.log(`📋 تحديث ${index + 1}: ${update.originalUnitNumber} → ${update.newUnitNumber} في ${update.propertyName}`);
                });
            }

            // فحص تطابق البيانات
            if (properties.length === parsedData.length) {
                console.log(`✅ تطابق عدد العقارات: المصفوفة المحلية = localStorage`);
            } else {
                console.warn(`⚠️ عدم تطابق: المصفوفة المحلية (${properties.length}) ≠ localStorage (${parsedData.length})`);
            }

        } else {
            console.warn(`⚠️ لا توجد بيانات محفوظة في localStorage`);
        }

    } catch (error) {
        console.error(`❌ خطأ في فحص البيانات:`, error);
    }
}

// إظهار رسالة نجاح
function showSuccessMessage(message) {
    // إنشاء عنصر الرسالة
    const messageDiv = document.createElement('div');
    messageDiv.className = 'success-message';
    messageDiv.innerHTML = `
        <div class="success-content">
            <i class="fas fa-check-circle"></i>
            <span>${message}</span>
        </div>
    `;

    // إضافة الأنماط
    messageDiv.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
        padding: 15px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
        z-index: 10000;
        font-size: 1rem;
        font-weight: 500;
        animation: slideInRight 0.3s ease-out;
        max-width: 400px;
        word-wrap: break-word;
    `;

    // إضافة الرسالة للصفحة
    document.body.appendChild(messageDiv);

    // إزالة الرسالة بعد 3 ثوان
    setTimeout(() => {
        messageDiv.style.animation = 'slideOutRight 0.3s ease-in';
        setTimeout(() => {
            if (messageDiv.parentNode) {
                messageDiv.parentNode.removeChild(messageDiv);
            }
        }, 300);
    }, 3000);
}

// عرض صفحة إدارة العقارات
function showPropertyManager() {
    if (isManagementMode) {
        // العودة للوضع العادي
        exitManagementMode();
        return;
    }

    // الدخول في وضع الإدارة
    enterManagementMode();
}

// الدخول في وضع الإدارة
function enterManagementMode() {
    isManagementMode = true;

    // تغيير نص الزر
    const propertyManagerBtn = document.getElementById('propertyManagerBtn');
    if (propertyManagerBtn) {
        propertyManagerBtn.innerHTML = '<i class="fas fa-arrow-left"></i> عقاراتنا';
        propertyManagerBtn.title = 'العودة للعرض العادي';
    }

    // إخفاء المحتوى الحالي
    const mainContent = document.getElementById('content');
    const totalContainer = document.getElementById('totalContainer');
    const mobileTotals = document.getElementById('mobileTotals');
    const filterContainer = document.querySelector('.filter-container');
    const viewToggle = document.querySelector('.view-toggle');
    const header = document.querySelector('header');

    if (mainContent) mainContent.style.display = 'none';
    if (totalContainer) totalContainer.style.display = 'none';
    if (mobileTotals) mobileTotals.style.display = 'none';
    if (filterContainer) filterContainer.style.display = 'none';
    if (viewToggle) viewToggle.style.display = 'none';
    if (header) header.style.display = 'none';

    // إنشاء صفحة الإدارة مع التصميم الجديد
    const managementPage = document.createElement('div');
    managementPage.id = 'managementPage';
    managementPage.className = 'management-page';
    managementPage.innerHTML = `
        <!-- الهيدر الثابت مع زر القائمة للجوال -->
        <div class="management-fixed-header">
            <div class="header-content">
                <!-- زر القائمة للجوال فقط -->
                <button class="mobile-menu-toggle" id="managementMobileMenuToggle" onclick="toggleManagementSidebar()">
                    <i class="fas fa-bars"></i>
                </button>

                <div class="header-center">
                    <h1><i class="fas fa-building"></i> إدارة العقارات</h1>
                    <p>إضافة وتحرير العقارات والوحدات</p>
                </div>

                <!-- زر الخروج للجوال -->
                <button class="mobile-exit-btn" onclick="exitManagementMode()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>

        <!-- طبقة التغطية للجوال -->
        <div class="management-overlay" id="managementOverlay" onclick="closeManagementSidebar()"></div>

        <!-- السايد بار مع دعم الجوال -->
        <div class="management-sidebar" id="managementSidebar">
            <div class="sidebar-content">
                <!-- رأس السايد بار مع زر الإغلاق للجوال -->
                <div class="sidebar-header" style="background: linear-gradient(135deg, #007bff, #0056b3) !important; padding: 25px 20px !important; margin: 0 !important; border-bottom: none !important; position: relative !important; flex-shrink: 0 !important; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1) !important;">
                    <h3 style="font-size: 1.3rem !important; color: white !important; margin: 0 !important; text-align: center !important; font-weight: 700 !important; text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2) !important; font-family: 'Cairo', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif !important; letter-spacing: 0.4px !important;"><i class="fas fa-cogs" style="margin-left: 8px; color: white; font-size: 1.2rem;"></i> التنقل السريع</h3>
                    <button class="mobile-sidebar-close" onclick="closeManagementSidebar()" style="display: flex; align-items: center; justify-content: center; background: rgba(255, 255, 255, 0.2); border: none; color: white; font-size: 1.4rem; padding: 12px; cursor: pointer; border-radius: 50%; transition: all 0.3s ease; position: absolute; left: 20px; top: 20px; width: 45px; height: 45px; backdrop-filter: blur(10px); border: 1px solid rgba(255, 255, 255, 0.3);">
                        <i class="fas fa-times" style="color: white; font-size: 1.4rem;"></i>
                    </button>
                </div>
                <nav class="sidebar-nav" style="flex: 1 !important; padding: 20px !important; display: flex !important; flex-direction: column !important; gap: 15px !important; overflow-y: auto !important; background: transparent !important; justify-content: flex-start !important;">

                    <!-- زر العقارات -->
                    <button class="nav-btn active" onclick="showPropertyTabMobile('properties');" data-tab="properties"
                            style="
                                width: 100% !important;
                                background: linear-gradient(135deg, #007bff, #0056b3) !important;
                                color: white !important;
                                border: none !important;
                                margin: 0 0 12px 0 !important;
                                padding: 18px 25px !important;
                                border-radius: 12px !important;
                                min-height: 60px !important;
                                font-family: 'Cairo', 'Tajawal', 'Segoe UI', Arial, sans-serif !important;
                                box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3) !important;
                                display: flex !important;
                                align-items: center !important;
                                gap: 20px !important;
                                cursor: pointer !important;
                                transition: all 0.3s ease !important;
                                text-align: right !important;
                                direction: rtl !important;
                            ">
                        <i class="fas fa-building" style="color: white !important; font-size: 1.4rem !important; width: 30px !important; text-align: center !important; font-weight: 900 !important; flex-shrink: 0 !important;"></i>
                        <span style="
                            color: white !important;
                            font-size: 1.2rem !important;
                            font-weight: 800 !important;
                            flex: 1 !important;
                            text-align: right !important;
                            font-family: 'Cairo', 'Tajawal', 'Segoe UI', Arial, sans-serif !important;
                            letter-spacing: 0.5px !important;
                            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3) !important;
                            line-height: 1.2 !important;
                            display: block !important;
                            visibility: visible !important;
                            opacity: 1 !important;
                        ">العقارات</span>
                    </button>

                    <!-- زر الوحدات -->
                    <button class="nav-btn" onclick="showPropertyTabMobile('units');" data-tab="units"
                            style="
                                width: 100% !important;
                                background: #ffffff !important;
                                color: #2c3e50 !important;
                                border: 3px solid #e9ecef !important;
                                margin: 0 0 12px 0 !important;
                                padding: 18px 25px !important;
                                border-radius: 12px !important;
                                min-height: 60px !important;
                                font-family: 'Cairo', 'Tajawal', 'Segoe UI', Arial, sans-serif !important;
                                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12) !important;
                                display: flex !important;
                                align-items: center !important;
                                gap: 20px !important;
                                cursor: pointer !important;
                                transition: all 0.3s ease !important;
                                text-align: right !important;
                                direction: rtl !important;
                            ">
                        <i class="fas fa-home" style="color: #34495e !important; font-size: 1.4rem !important; width: 30px !important; text-align: center !important; font-weight: 900 !important; flex-shrink: 0 !important;"></i>
                        <span style="
                            color: #2c3e50 !important;
                            font-size: 1.2rem !important;
                            font-weight: 800 !important;
                            flex: 1 !important;
                            text-align: right !important;
                            font-family: 'Cairo', 'Tajawal', 'Segoe UI', Arial, sans-serif !important;
                            letter-spacing: 0.5px !important;
                            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1) !important;
                            line-height: 1.2 !important;
                            display: block !important;
                            visibility: visible !important;
                            opacity: 1 !important;
                        ">الوحدات</span>
                    </button>

                    <!-- زر دمج الوحدات -->
                    <button class="nav-btn" onclick="showPropertyTabMobile('merge'); hideSidebarOnMobile();" data-tab="merge"
                            style="
                                width: 100% !important;
                                background: #ffffff !important;
                                color: #2c3e50 !important;
                                border: 3px solid #e9ecef !important;
                                margin: 0 0 12px 0 !important;
                                padding: 18px 25px !important;
                                border-radius: 12px !important;
                                min-height: 60px !important;
                                font-family: 'Cairo', 'Tajawal', 'Segoe UI', Arial, sans-serif !important;
                                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12) !important;
                                display: flex !important;
                                align-items: center !important;
                                gap: 20px !important;
                                cursor: pointer !important;
                                transition: all 0.3s ease !important;
                                text-align: right !important;
                                direction: rtl !important;
                            ">
                        <i class="fas fa-layer-group" style="color: #34495e !important; font-size: 1.4rem !important; width: 30px !important; text-align: center !important; font-weight: 900 !important; flex-shrink: 0 !important;"></i>
                        <span style="
                            color: #2c3e50 !important;
                            font-size: 1.2rem !important;
                            font-weight: 800 !important;
                            flex: 1 !important;
                            text-align: right !important;
                            font-family: 'Cairo', 'Tajawal', 'Segoe UI', Arial, sans-serif !important;
                            letter-spacing: 0.5px !important;
                            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1) !important;
                            line-height: 1.2 !important;
                            display: block !important;
                            visibility: visible !important;
                            opacity: 1 !important;
                        ">دمج الوحدات</span>
                    </button>

                    <!-- زر نقل الوحدات -->
                    <button class="nav-btn" onclick="showUnitTransferModal(); hideSidebarOnMobile();"
                            style="
                                width: 100% !important;
                                background: #ffffff !important;
                                color: #2c3e50 !important;
                                border: 3px solid #e9ecef !important;
                                margin: 0 0 12px 0 !important;
                                padding: 18px 25px !important;
                                border-radius: 12px !important;
                                min-height: 60px !important;
                                font-family: 'Cairo', 'Tajawal', 'Segoe UI', Arial, sans-serif !important;
                                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12) !important;
                                display: flex !important;
                                align-items: center !important;
                                gap: 20px !important;
                                cursor: pointer !important;
                                transition: all 0.3s ease !important;
                                text-align: right !important;
                                direction: rtl !important;
                            ">
                        <i class="fas fa-exchange-alt" style="color: #34495e !important; font-size: 1.4rem !important; width: 30px !important; text-align: center !important; font-weight: 900 !important; flex-shrink: 0 !important;"></i>
                        <span style="
                            color: #2c3e50 !important;
                            font-size: 1.2rem !important;
                            font-weight: 800 !important;
                            flex: 1 !important;
                            text-align: right !important;
                            font-family: 'Cairo', 'Tajawal', 'Segoe UI', Arial, sans-serif !important;
                            letter-spacing: 0.5px !important;
                            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1) !important;
                            line-height: 1.2 !important;
                            display: block !important;
                            visibility: visible !important;
                            opacity: 1 !important;
                        ">نقل الوحدات</span>
                    </button>

                    <!-- زر إدارة سجلات التتبع (للمدير فقط) -->
                    <button class="nav-btn admin-only-btn" onclick="showTrackingManagementModal(); hideSidebarOnMobile();" id="trackingManagementBtn"
                            style="
                                width: 100% !important;
                                background: #ffffff !important;
                                color: #2c3e50 !important;
                                border: 3px solid #e9ecef !important;
                                margin: 0 0 12px 0 !important;
                                padding: 18px 25px !important;
                                border-radius: 12px !important;
                                min-height: 60px !important;
                                font-family: 'Cairo', 'Tajawal', 'Segoe UI', Arial, sans-serif !important;
                                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12) !important;
                                display: flex !important;
                                align-items: center !important;
                                gap: 20px !important;
                                cursor: pointer !important;
                                transition: all 0.3s ease !important;
                                text-align: right !important;
                                direction: rtl !important;
                            ">
                        <i class="fas fa-clipboard-list" style="color: #6f42c1 !important; font-size: 1.4rem !important; width: 30px !important; text-align: center !important; font-weight: 900 !important; flex-shrink: 0 !important;"></i>
                        <span style="
                            color: #2c3e50 !important;
                            font-size: 1.1rem !important;
                            font-weight: 800 !important;
                            flex: 1 !important;
                            text-align: right !important;
                            font-family: 'Cairo', 'Tajawal', 'Segoe UI', Arial, sans-serif !important;
                            letter-spacing: 0.5px !important;
                            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1) !important;
                            line-height: 1.2 !important;
                            display: block !important;
                            visibility: visible !important;
                            opacity: 1 !important;
                        ">إدارة سجلات التتبع</span>
                    </button>

                    <!-- زر تصفية حسب المدينة -->
                    <button class="nav-btn filter-btn" onclick="toggleCityFilter()" id="cityFilterBtn"
                            style="
                                width: 100% !important;
                                background: linear-gradient(135deg, #6f42c1, #5a32a3) !important;
                                color: white !important;
                                border: none !important;
                                margin: 0 0 12px 0 !important;
                                padding: 18px 25px !important;
                                border-radius: 12px !important;
                                min-height: 60px !important;
                                font-family: 'Cairo', 'Tajawal', 'Segoe UI', Arial, sans-serif !important;
                                box-shadow: 0 4px 15px rgba(111, 66, 193, 0.3) !important;
                                display: flex !important;
                                align-items: center !important;
                                gap: 20px !important;
                                cursor: pointer !important;
                                transition: all 0.3s ease !important;
                                text-align: right !important;
                                direction: rtl !important;
                            ">
                        <i class="fas fa-filter" style="color: white !important; font-size: 1.4rem !important; width: 30px !important; text-align: center !important; font-weight: 900 !important; flex-shrink: 0 !important;"></i>
                        <span style="
                            color: white !important;
                            font-size: 1.1rem !important;
                            font-weight: 800 !important;
                            flex: 1 !important;
                            text-align: right !important;
                            font-family: 'Cairo', 'Tajawal', 'Segoe UI', Arial, sans-serif !important;
                            letter-spacing: 0.5px !important;
                            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3) !important;
                            line-height: 1.2 !important;
                            display: block !important;
                            visibility: visible !important;
                            opacity: 1 !important;
                        ">تصفية حسب المدينة</span>
                        <i class="fas fa-chevron-down filter-arrow" id="filterArrow" style="color: white !important; font-size: 1.1rem !important; flex-shrink: 0 !important;"></i>
                    </button>



                    <!-- قائمة المدن القابلة للطي - تصميم محسن -->
                    <div class="city-filter-list" id="cityFilterList"
                         style="
                             display: none;
                             background: #f8f9fa;
                             border-radius: 12px;
                             margin: 0 20px 15px 20px;
                             padding: 15px;
                             border: 2px solid #e9ecef;
                             box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
                             max-height: none;
                             overflow: visible;
                         ">

                        <!-- خيار جميع المدن -->
                        <div class="city-option all-cities" onclick="filterByCity('all')"
                             style="
                                 background: #28a745;
                                 color: white;
                                 padding: 8px 12px;
                                 border-radius: 20px;
                                 margin-bottom: 8px;
                                 cursor: pointer;
                                 display: inline-flex;
                                 align-items: center;
                                 gap: 6px;
                                 transition: all 0.2s ease;
                                 font-family: 'Cairo', 'Tajawal', 'Segoe UI', Arial, sans-serif;
                                 font-weight: 600;
                                 font-size: 13px;
                                 box-shadow: 0 1px 3px rgba(40, 167, 69, 0.3);
                                 white-space: nowrap;
                                 flex-shrink: 0;
                                 border: 1px solid #28a745;
                             ">
                            <i class="fas fa-globe" style="font-size: 12px; color: white; flex-shrink: 0;"></i>
                            <span style="color: white; font-weight: inherit;">جميع المدن</span>
                            <span class="city-count" id="allCitiesCount"
                                  style="
                                      background: rgba(255, 255, 255, 0.2);
                                      color: white;
                                      padding: 2px 6px;
                                      border-radius: 10px;
                                      font-size: 11px;
                                      font-weight: 600;
                                      min-width: 18px;
                                      text-align: center;
                                      border: none;
                                      flex-shrink: 0;
                                  ">0</span>
                        </div>

                        <!-- قائمة المدن المنظمة -->
                        <ol class="cities-list" id="citiesContainer"
                            style="
                                list-style: none;
                                margin: 0;
                                padding: 0;
                                counter-reset: city-counter;
                            ">
                            <!-- سيتم ملء المدن هنا -->
                        </ol>
                    </div>
                </nav>
                <div class="sidebar-footer" style="padding: 25px 20px !important; border-top: 2px solid #e9ecef !important; background: #f8f9fa !important; margin-top: auto !important; flex-shrink: 0 !important;">
                    <!-- زر الخروج -->
                    <button class="btn-exit" onclick="exitManagementMode()"
                            style="
                                width: 100% !important;
                                padding: 25px 30px !important;
                                margin: 0 !important;
                                background: linear-gradient(135deg, #dc3545, #c82333) !important;
                                color: white !important;
                                border: none !important;
                                border-radius: 15px !important;
                                font-size: 1.5rem !important;
                                font-weight: 800 !important;
                                cursor: pointer !important;
                                transition: all 0.3s ease !important;
                                display: flex !important;
                                align-items: center !important;
                                justify-content: center !important;
                                gap: 15px !important;
                                min-height: 65px !important;
                                box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3) !important;
                                font-family: 'Cairo', 'Tajawal', 'Segoe UI', Arial, sans-serif !important;
                                letter-spacing: 0.5px !important;
                                text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3) !important;
                                text-align: center !important;
                                direction: rtl !important;
                            ">
                        <i class="fas fa-sign-out-alt" style="font-size: 1.3rem !important; color: white !important; flex-shrink: 0 !important;"></i>
                        <span style="
                            color: white !important;
                            font-size: 1.2rem !important;
                            font-weight: 800 !important;
                            font-family: 'Cairo', 'Tajawal', 'Segoe UI', Arial, sans-serif !important;
                            line-height: 1.2 !important;
                            display: block !important;
                            visibility: visible !important;
                            opacity: 1 !important;
                            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3) !important;
                        ">خروج</span>
                    </button>
                </div>
            </div>


        </div>

        <!-- المحتوى الرئيسي -->
        <div class="management-main-content">
            <div class="management-body">
                <div id="properties-tab" class="tab-content active">
                    ${renderPropertiesTab()}
                </div>
                <div id="units-tab" class="tab-content">
                    ${renderUnitsTab()}
                </div>
                <div id="merge-tab" class="tab-content">
                    ${renderMergeTab()}
                </div>
            </div>
        </div>
    `;

    // إضافة الصفحة للمحتوى
    document.body.appendChild(managementPage);

    // منع التمرير في الخلفية
    document.body.style.overflow = 'hidden';

    // تهيئة قائمة تصفية المدن
    setTimeout(() => {
        initializeCityFilter();
        initializeManagementMobile();
        setupSidebarProtection();

        // إعادة تطبيق الحماية عند تحديث المحتوى
        const observer = new MutationObserver(() => {
            setupSidebarProtection();
            protectSearchFields();
        });

        const sidebar = document.getElementById('managementSidebar');
        if (sidebar) {
            observer.observe(sidebar, {
                childList: true,
                subtree: true
            });
        }
    }, 100);
}

// ===== وظائف السايد بار للجوال في إدارة العقارات =====

// تهيئة وظائف الجوال لإدارة العقارات
function initializeManagementMobile() {
    console.log('📱 تهيئة وظائف الجوال لإدارة العقارات...');

    // إخفاء السايد بار في الجوال بشكل افتراضي
    if (isMobileDevice()) {
        const sidebar = document.getElementById('managementSidebar');
        const overlay = document.getElementById('managementOverlay');

        if (sidebar) {
            sidebar.classList.remove('active');
        }
        if (overlay) {
            overlay.classList.remove('active');
        }

        console.log('✅ تم إخفاء السايد بار في الجوال');
    }
}

// تبديل عرض السايد بار في الجوال
function toggleManagementSidebar() {
    console.log('🔄 تبديل عرض السايد بار...');

    const sidebar = document.getElementById('managementSidebar');
    const overlay = document.getElementById('managementOverlay');
    const menuToggle = document.getElementById('managementMobileMenuToggle');

    if (!sidebar || !overlay) {
        console.error('❌ لم يتم العثور على عناصر السايد بار');
        return;
    }

    const isActive = sidebar.classList.contains('active');

    if (isActive) {
        // إخفاء السايد بار
        closeManagementSidebar();
    } else {
        // إظهار السايد بار
        openManagementSidebar();
    }
}

// فتح السايد بار
function openManagementSidebar() {
    console.log('📂 فتح السايد بار...');

    const sidebar = document.getElementById('managementSidebar');
    const overlay = document.getElementById('managementOverlay');
    const menuToggle = document.getElementById('managementMobileMenuToggle');

    if (sidebar) {
        sidebar.classList.add('active');
    }
    if (overlay) {
        overlay.classList.add('active');
    }
    if (menuToggle) {
        menuToggle.classList.add('active');
        // تغيير الأيقونة إلى X
        const icon = menuToggle.querySelector('i');
        if (icon) {
            icon.className = 'fas fa-times';
        }
    }

    // منع التمرير في الخلفية
    document.body.style.overflow = 'hidden';

    console.log('✅ تم فتح السايد بار');
}

// إغلاق السايد بار
function closeManagementSidebar() {
    console.log('📁 إغلاق السايد بار...');

    const sidebar = document.getElementById('managementSidebar');
    const overlay = document.getElementById('managementOverlay');
    const menuToggle = document.getElementById('managementMobileMenuToggle');

    if (sidebar) {
        sidebar.classList.remove('active');
    }
    if (overlay) {
        overlay.classList.remove('active');
    }
    if (menuToggle) {
        menuToggle.classList.remove('active');
        // إعادة الأيقونة إلى القائمة
        const icon = menuToggle.querySelector('i');
        if (icon) {
            icon.className = 'fas fa-bars';
        }
    }

    // السماح بالتمرير مرة أخرى
    document.body.style.overflow = '';

    console.log('✅ تم إغلاق السايد بار');
}

// تحديث وظيفة showPropertyTab لإغلاق السايد بار في الجوال
function showPropertyTabMobile(tabName) {
    // استدعاء الوظيفة الأصلية
    showPropertyTab(tabName);

    // إخفاء السايد بار في الجوال فقط عند تغيير التبويب
    // ولكن ليس عند التفاعل مع النماذج أو البحث
    if (isMobileDevice() || window.innerWidth <= 768) {
        // تأخير قصير للسماح بتحديث المحتوى أولاً
        setTimeout(() => {
            // التحقق من أن المستخدم لم ينقر على حقل نموذج أو بحث
            const activeElement = document.activeElement;
            const isFormElement = activeElement && (
                activeElement.tagName === 'INPUT' ||
                activeElement.tagName === 'SELECT' ||
                activeElement.tagName === 'TEXTAREA' ||
                activeElement.classList.contains('form-control') ||
                activeElement.type === 'search' ||
                activeElement.hasAttribute('data-prevent-sidebar-close') ||
                activeElement.placeholder?.includes('بحث') ||
                activeElement.placeholder?.includes('اسم العقار') ||
                activeElement.placeholder?.includes('رقم الوحدة')
            );

            // التحقق من وجود حقول بحث نشطة
            const activeSearchFields = document.querySelectorAll('input[data-prevent-sidebar-close="true"]');
            const hasActiveSearch = activeSearchFields.length > 0;

            // التحقق من حالة البحث النشط في السايد بار
            const sidebar = document.getElementById('managementSidebar');
            const sidebarSearchActive = sidebar && sidebar.hasAttribute('data-search-active');

            // إخفاء السايد بار فقط إذا لم يكن المستخدم يتفاعل مع نموذج أو بحث
            if (!isFormElement && !hasActiveSearch && !sidebarSearchActive) {
                closeManagementSidebar();
            }
        }, 300);
    }
}

// إخفاء السايد بار في الجوال عند النقر على الأزرار (للاستخدام المحدد)
function hideSidebarOnMobile() {
    // التحقق من أن الجهاز جوال
    if (isMobileDevice() || window.innerWidth <= 768) {
        setTimeout(() => {
            closeManagementSidebar();
        }, 200);
    }
}

// إعداد حماية السايد بار من الإخفاء غير المرغوب فيه
function setupSidebarProtection() {
    const sidebar = document.getElementById('managementSidebar');
    if (!sidebar) return;

    // منع إخفاء السايد بار عند النقر على عناصر النماذج
    const protectedElements = [
        'input', 'select', 'textarea', 'button.city-option',
        '.city-filter-list', '.form-control', '.form-group',
        '.property-form', '.section-header', '.search-container',
        '.property-search', '.unit-search', '.merge-search'
    ];

    protectedElements.forEach(selector => {
        const elements = sidebar.querySelectorAll(selector);
        elements.forEach(element => {
            element.addEventListener('click', function(e) {
                e.stopPropagation();
            });

            element.addEventListener('focus', function(e) {
                e.stopPropagation();
            });

            element.addEventListener('touchstart', function(e) {
                e.stopPropagation();
            });

            element.addEventListener('touchend', function(e) {
                e.stopPropagation();
            });
        });
    });

    // حماية خاصة لحقول البحث في جميع التبويبات
    const searchSelectors = [
        '#propertySearch', '#unitSearch', '#mergeSearch',
        'input[type="search"]', 'input[placeholder*="بحث"]',
        'input[placeholder*="اسم العقار"]', 'input[placeholder*="رقم الوحدة"]',
        'input[placeholder*="رقم العقد"]', '.search-input',
        '#unitSearchInput', '#propertySearchInput', '#mergeSearchInput'
    ];

    searchSelectors.forEach(selector => {
        // البحث في السايد بار
        const sidebarInputs = sidebar.querySelectorAll(selector);
        sidebarInputs.forEach(input => {
            addSearchProtection(input);
        });

        // البحث في المحتوى الرئيسي أيضاً
        const mainInputs = document.querySelectorAll(selector);
        mainInputs.forEach(input => {
            addSearchProtection(input);
        });
    });

    console.log('✅ تم إعداد حماية السايد بار من الإخفاء غير المرغوب فيه');
}

// إضافة حماية لحقل البحث
function addSearchProtection(input) {
    if (!input) return;

    // منع جميع الأحداث التي قد تؤدي لإخفاء السايد بار
    const events = ['click', 'focus', 'touchstart', 'touchend', 'input', 'keyup', 'keydown', 'mousedown', 'mouseup'];

    events.forEach(eventType => {
        input.addEventListener(eventType, function(e) {
            e.stopPropagation();
            // وضع علامة حماية
            this.setAttribute('data-prevent-sidebar-close', 'true');

            // حماية إضافية للجوال
            if (isMobileDevice() || window.innerWidth <= 768) {
                // منع إخفاء السايد بار عند التفاعل مع البحث
                const sidebar = document.getElementById('managementSidebar');
                if (sidebar) {
                    sidebar.setAttribute('data-search-active', 'true');
                }
            }
        });
    });

    // إزالة الحماية عند فقدان التركيز
    input.addEventListener('blur', function() {
        setTimeout(() => {
            this.removeAttribute('data-prevent-sidebar-close');

            // إزالة الحماية من السايد بار
            const sidebar = document.getElementById('managementSidebar');
            if (sidebar) {
                sidebar.removeAttribute('data-search-active');
            }
        }, 200);
    });
}

// الخروج من وضع الإدارة
function exitManagementMode() {
    // رسالة تأكيد
    if (!confirm('هل أنت متأكد من العودة للصفحة الرئيسية؟')) {
        return;
    }

    isManagementMode = false;

    // تغيير نص الزر
    const propertyManagerBtn = document.getElementById('propertyManagerBtn');
    if (propertyManagerBtn) {
        propertyManagerBtn.innerHTML = '<i class="fas fa-building"></i> إدارة العقارات';
        propertyManagerBtn.title = 'إدارة العقارات';
    }

    // إزالة صفحة الإدارة
    const managementPage = document.getElementById('managementPage');
    if (managementPage) {
        managementPage.remove();
    }

    // إظهار المحتوى الأصلي
    const mainContent = document.getElementById('content');
    const totalContainer = document.getElementById('totalContainer');
    const mobileTotals = document.getElementById('mobileTotals');
    const filterContainer = document.querySelector('.filter-container');
    const viewToggle = document.querySelector('.view-toggle');
    const header = document.querySelector('header');

    // التأكد من إظهار جميع العناصر
    if (mainContent) {
        mainContent.style.display = '';
        mainContent.style.visibility = 'visible';
    }
    if (totalContainer) {
        totalContainer.style.display = '';
        totalContainer.style.visibility = 'visible';
    }
    if (mobileTotals) {
        mobileTotals.style.display = '';
        mobileTotals.style.visibility = 'visible';
    }
    if (filterContainer) {
        filterContainer.style.display = '';
        filterContainer.style.visibility = 'visible';
    }
    if (viewToggle) {
        viewToggle.style.display = '';
        viewToggle.style.visibility = 'visible';
    }
    if (header) {
        header.style.display = '';
        header.style.visibility = 'visible';
    }

    // إعادة تعيين body للحالة الطبيعية
    document.body.style.overflow = '';
    document.body.style.position = '';

    // إعادة تحميل البيانات
    setTimeout(() => {
        renderData();
    }, 100);
}

// عرض تبويب العقارات
function renderPropertiesTab() {
    const cities = getUniqueCountries().filter(city => city !== 'الكل');
    let existingProperties = getUniqueProperties();

    // تطبيق التصفية حسب المدينة
    if (selectedCityFilter !== 'all') {
        existingProperties = existingProperties.filter(propertyName => {
            const property = properties.find(p => p['اسم العقار'] === propertyName);
            return property && property['المدينة'] === selectedCityFilter;
        });
    }

    return `
        <div class="property-section city-management-section">
            <div class="section-header">
                <h3><i class="fas fa-city"></i> إدارة المدن</h3>
            </div>
            <div class="property-form">
                <div class="form-row">
                    <div class="form-group">
                        <label><i class="fas fa-plus-circle"></i> إضافة مدينة جديدة:</label>
                        <div style="display: flex; gap: 10px; align-items: center;">
                            <input type="text" id="newCityName" placeholder="أدخل اسم المدينة الجديدة"
                                   style="flex: 1; padding: 10px; border: 2px solid #6f42c1; border-radius: 6px;"
                                   onkeypress="if(event.key==='Enter') addNewCityToSystem()">
                            <button class="btn-primary" onclick="addNewCityToSystem()"
                                    style="white-space: nowrap; background: linear-gradient(135deg, #6f42c1, #5a32a3);">
                                <i class="fas fa-plus-circle"></i> إضافة المدينة
                            </button>
                        </div>
                        <div class="existing-cities-display">
                            <strong><i class="fas fa-list"></i> المدن الموجودة:</strong><br>
                            ${cities.filter(city => city !== 'الكل').join(' • ')}
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="property-section">
            <div class="section-header">
                <h3><i class="fas fa-plus-circle"></i> إضافة عقار جديد</h3>
            </div>
            <div class="property-form">
                <div class="form-row">
                    <div class="form-group">
                        <label>اسم العقار:</label>
                        <input type="text" id="newPropertyName" placeholder="أدخل اسم العقار">
                    </div>
                    <div class="form-group">
                        <label>المدينة:</label>
                        <select id="newPropertyCity">
                            <option value="">اختر المدينة</option>
                            ${cities.map(city => `<option value="${city}">${city}</option>`).join('')}
                        </select>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>رقم الصك:</label>
                        <input type="text" id="newPropertyDeed" placeholder="رقم الصك">
                    </div>
                    <div class="form-group">
                        <label>مساحة الصك:</label>
                        <input type="number" id="newPropertyArea" placeholder="المساحة بالمتر المربع">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>السجل العيني:</label>
                        <input type="text" id="newPropertyRegistry" placeholder="رقم السجل العيني (اختياري)">
                    </div>
                    <div class="form-group">
                        <label>المالك:</label>
                        <select id="newPropertyOwner" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                            <option value="">-- اختر المالك --</option>
                            <option value="أبو خالد">أبو خالد</option>
                            <option value="أبو تميم">أبو تميم</option>
                        </select>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>موقع العقار (رابط الخريطة):</label>
                        <input type="url" id="newPropertyLocation" placeholder="https://maps.google.com/...">
                    </div>
                </div>
                <button class="btn-primary" onclick="addNewProperty()">
                    <i class="fas fa-plus"></i> إضافة العقار
                </button>
            </div>
        </div>

        <div class="property-section">
            <div class="section-header">
                <h3><i class="fas fa-list"></i> العقارات الموجودة</h3>
                <div class="filter-info">
                    ${selectedCityFilter === 'all' ?
                        `<span class="filter-badge all">جميع المدن (${existingProperties.length} عقار)</span>` :
                        `<span class="filter-badge filtered">مدينة ${selectedCityFilter} (${existingProperties.length} عقار)</span>`
                    }
                </div>
                <div class="section-actions">
                    <button onclick="testPropertyEditSystem()" class="test-btn" title="اختبار نظام تحرير العقارات">
                        <i class="fas fa-vial"></i> اختبار النظام
                    </button>
                    <button onclick="checkAllPropertiesSync()" class="sync-check-btn" title="فحص حالة المزامنة">
                        <i class="fas fa-sync-alt"></i> فحص المزامنة
                    </button>
                    <button onclick="fixAllDuplicatesWithConfirmation()" class="fix-duplicates-btn" title="إصلاح الوحدات المكررة">
                        <i class="fas fa-broom"></i> إصلاح التكرار
                    </button>
                </div>
            </div>

            <!-- خانة البحث في العقارات -->
            <div class="properties-search-section">
                <div class="search-container">
                    <div class="search-input-wrapper">
                        <i class="fas fa-search search-icon"></i>
                        <input type="text"
                               id="propertiesSearchInput"
                               placeholder="البحث في العقارات بالاسم أو المدينة..."
                               class="properties-search-input"
                               oninput="handlePropertiesSearch(this.value)"
                               autocomplete="off">
                        <button class="clear-search-btn" onclick="clearPropertiesSearch()" style="display: none;">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="search-results-count" id="propertiesSearchCount" style="display: none;">
                        <span id="searchResultsText"></span>
                    </div>
                </div>
            </div>
            <div class="existing-properties">
                ${existingProperties.length > 0 ?
                    existingProperties.map(property => {
                        const propertyData = properties.find(p => p['اسم العقار'] === property);
                        const cityName = propertyData ? propertyData['المدينة'] : 'غير محدد';
                        return `
                            <div class="property-item">
                                <div class="property-info">
                                    <h4>${property}</h4>
                                    <p><i class="fas fa-map-marker-alt"></i> ${cityName}</p>
                                    <p><i class="fas fa-building"></i> عدد الوحدات: ${properties.filter(p => p['اسم العقار'] === property).length}</p>
                                </div>
                                <div class="property-actions">
                                    <button onclick="editPropertyData('${property}')" class="btn-edit">
                                        <i class="fas fa-edit"></i> تعديل العقار
                                    </button>
                                    <button onclick="viewPropertyUnits('${property}')" class="btn-view">
                                        <i class="fas fa-eye"></i> عرض الوحدات
                                    </button>
                                    ${isMobileDevice() ? `
                                    <button onclick="showDeedInfoForProperty('${property}', '${cityName}')" class="btn-deed" style="background: linear-gradient(135deg, #17a2b8, #138496); color: white;">
                                        <i class="fas fa-file-contract"></i> معلومات الصك
                                    </button>
                                    ` : ''}
                                    <button onclick="showPropertyStatistics('${property}')" class="btn-secondary">
                                        <i class="fas fa-chart-bar"></i> الإحصائيات
                                    </button>
                                    <button onclick="deleteProperty('${property}')" class="btn-delete">
                                        <i class="fas fa-trash"></i> حذف العقار
                                    </button>
                                </div>
                            </div>
                        `;
                    }).join('') :
                    `<div class="no-properties">
                        <i class="fas fa-search"></i>
                        <h4>لا توجد عقارات</h4>
                        <p>${selectedCityFilter === 'all' ? 'لا توجد عقارات مضافة بعد' : `لا توجد عقارات في مدينة ${selectedCityFilter}`}</p>
                    </div>`
                }
            </div>
        </div>
    `;
}

// عرض تبويب الوحدات
function renderUnitsTab() {
    const properties = getUniqueProperties();

    return `
        <div class="property-section">
            <div class="section-header">
                <h3><i class="fas fa-plus-circle"></i> إضافة وحدة جديدة</h3>
            </div>
            <div class="property-form">
                <div class="form-row">
                    <div class="form-group">
                        <label>العقار:</label>
                        <select id="unitPropertyName">
                            <option value="">اختر العقار</option>
                            ${properties.map(property => `<option value="${property}">${property}</option>`).join('')}
                        </select>
                    </div>
                    <div class="form-group">
                        <label>رقم الوحدة:</label>
                        <input type="text" id="unitNumber" placeholder="رقم الوحدة">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>المساحة:</label>
                        <input type="number" id="unitArea" placeholder="المساحة بالمتر المربع">
                    </div>
                    <div class="form-group">
                        <label>رقم حساب الكهرباء:</label>
                        <input type="text" id="unitElectricity" placeholder="رقم حساب الكهرباء">
                    </div>
                </div>
                <button class="btn-primary" onclick="addNewUnit()">
                    <i class="fas fa-plus"></i> إضافة الوحدة
                </button>
            </div>
        </div>

        <div class="property-section">
            <div class="section-header">
                <h3><i class="fas fa-search"></i> البحث في الوحدات</h3>
            </div>
            <div class="units-search">
                <input type="text" id="unitsSearchInput" placeholder="ابحث عن وحدة..." onkeyup="searchUnits()">
                <select id="unitsFilterProperty" onchange="filterUnitsByProperty()">
                    <option value="">جميع العقارات</option>
                    ${properties.map(property => `<option value="${property}">${property}</option>`).join('')}
                </select>
            </div>
            <div id="unitsResults" class="units-results">
                <!-- سيتم ملء النتائج هنا -->
            </div>
        </div>
    `;
}

// عرض تبويب دمج الوحدات
function renderMergeTab() {
    const properties = getUniqueProperties();

    return `
        <div class="property-section">
            <div class="section-header">
                <h3><i class="fas fa-layer-group"></i> دمج الوحدات</h3>
                <p>يمكنك دمج عدة وحدات في بطاقة واحدة برقم عقد واحد</p>
            </div>
            <div class="property-form">
                <div class="form-row">
                    <div class="form-group">
                        <label>العقار:</label>
                        <select id="mergePropertyName" onchange="loadUnitsForMerge()">
                            <option value="">اختر العقار</option>
                            ${properties.map(property => `<option value="${property}">${property}</option>`).join('')}
                        </select>
                    </div>
                    <div class="form-group">
                        <label>رقم العقد الجديد:</label>
                        <input type="text" id="mergeContractNumber" placeholder="رقم العقد الموحد">
                    </div>
                </div>
                <div class="form-group">
                    <label>الوحدات المتاحة للدمج:</label>
                    <div id="availableUnitsForMerge" class="units-checkbox-list">
                        <!-- سيتم ملء الوحدات هنا -->
                    </div>
                </div>
                <button class="btn-primary" onclick="mergeSelectedUnits()">
                    <i class="fas fa-layer-group"></i> دمج الوحدات المحددة
                </button>
            </div>
        </div>

        <div class="property-section">
            <div class="section-header">
                <h3><i class="fas fa-list"></i> الوحدات المدموجة</h3>
            </div>
            <div id="mergedUnitsDisplay" class="merged-units-display">
                ${renderMergedUnits()}
            </div>
        </div>
    `;
}

// عرض الوحدات المدموجة
function renderMergedUnits() {
    const mergedContracts = {};

    // تجميع الوحدات حسب رقم العقد
    properties.forEach(property => {
        if (property['رقم العقد']) {
            const contractKey = `${property['رقم العقد']}_${property['اسم العقار']}`;
            if (!mergedContracts[contractKey]) {
                mergedContracts[contractKey] = {
                    contractNumber: property['رقم العقد'],
                    propertyName: property['اسم العقار'],
                    units: [],
                    totalArea: 0
                };
            }
            mergedContracts[contractKey].units.push(property['رقم  الوحدة ']);
            mergedContracts[contractKey].totalArea += parseFloat(property['المساحة']) || 0;
        }
    });

    // عرض العقود التي تحتوي على أكثر من وحدة واحدة
    const mergedOnly = Object.values(mergedContracts).filter(contract => contract.units.length > 1);

    if (mergedOnly.length === 0) {
        return '<p class="no-data">لا توجد وحدات مدموجة حالياً</p>';
    }

    return mergedOnly.map(contract => `
        <div class="merged-contract-item">
            <div class="contract-header">
                <h4>عقد رقم: ${contract.contractNumber}</h4>
                <span class="property-name">${contract.propertyName}</span>
            </div>
            <div class="contract-details">
                <p><strong>الوحدات:</strong> ${contract.units.join(', ')}</p>
                <p><strong>إجمالي المساحة:</strong> ${contract.totalArea.toLocaleString()} م²</p>
                <p><strong>عدد الوحدات:</strong> ${contract.units.length}</p>
            </div>
            <div class="contract-actions">
                <button onclick="editMergedContract('${contract.contractNumber}', '${contract.propertyName}')" class="btn-edit">
                    <i class="fas fa-edit"></i> تحرير
                </button>
                <button onclick="splitMergedContract('${contract.contractNumber}', '${contract.propertyName}')" class="btn-danger">
                    <i class="fas fa-unlink"></i> فصل الوحدات
                </button>
            </div>
        </div>
    `).join('');
}

// تبديل التبويبات في إدارة العقارات
function showPropertyTab(tabName) {
    // إخفاء جميع التبويبات
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });

    // إزالة التفعيل من جميع أزرار التبويبات والسايد بار
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('active');
    });

    // إظهار التبويب المحدد
    const targetTab = document.getElementById(`${tabName}-tab`);
    if (targetTab) {
        targetTab.classList.add('active');
    }

    // تفعيل الزر المحدد في السايد بار
    const sidebarBtn = document.querySelector(`[data-tab="${tabName}"]`);
    if (sidebarBtn) {
        sidebarBtn.classList.add('active');
    }

    // تحديث محتوى التبويب إذا لزم الأمر
    if (tabName === 'units') {
        loadUnitsResults();
    } else if (tabName === 'merge') {
        const mergedDisplay = document.getElementById('mergedUnitsDisplay');
        if (mergedDisplay) {
            mergedDisplay.innerHTML = renderMergedUnits();
        }
    }

    // إعادة تطبيق حماية حقول البحث بعد تحديث المحتوى
    setTimeout(() => {
        protectSearchFields();
    }, 100);
}

// حماية خاصة لحقول البحث
function protectSearchFields() {
    const searchFields = document.querySelectorAll('#propertySearch, #unitSearch, #mergeSearch, input[type="search"], input[placeholder*="بحث"]');

    searchFields.forEach(field => {
        if (field && !field.hasAttribute('data-protected')) {
            field.setAttribute('data-protected', 'true');
            addSearchProtection(field);

            // حماية إضافية للجوال
            if (isMobileDevice() || window.innerWidth <= 768) {
                field.addEventListener('touchstart', function(e) {
                    e.stopPropagation();
                    this.setAttribute('data-prevent-sidebar-close', 'true');
                });

                field.addEventListener('touchend', function(e) {
                    e.stopPropagation();
                });
            }
        }
    });
}

// إضافة عقار جديد
function addNewProperty() {
    const name = document.getElementById('newPropertyName').value.trim();
    const city = document.getElementById('newPropertyCity').value;
    const deed = document.getElementById('newPropertyDeed').value.trim();
    const area = document.getElementById('newPropertyArea').value;
    const registry = document.getElementById('newPropertyRegistry').value.trim();
    const location = document.getElementById('newPropertyLocation').value.trim();
    const owner = document.getElementById('newPropertyOwner').value.trim();

    if (!name || !city) {
        alert('يرجى إدخال اسم العقار واختيار المدينة');
        return;
    }

    // التحقق من عدم وجود عقار بنفس الاسم في نفس المدينة
    const existingProperty = properties.find(p =>
        p['اسم العقار'] === name && p['المدينة'] === city
    );

    if (existingProperty) {
        alert('يوجد عقار بنفس الاسم في هذه المدينة بالفعل');
        return;
    }

    // ✅ لا يتم إنشاء أي وحدات افتراضية أو أساسية
    // العقار يُحفظ في propertyDefinitions فقط
    console.log(`📋 إضافة عقار جديد بدون وحدات: "${name}" في مدينة "${city}"`);
    console.log('✅ لن يتم إنشاء أي وحدات افتراضية - العقار سيُحفظ في التعريفات فقط');

    // حفظ معلومات العقار في تعريفات العقارات أيضاً
    const propertyDefinition = {
        name: name,
        city: city,
        deed: deed || null,
        area: area || null,
        registry: registry || null,
        location: location || null,
        owner: owner || null,
        createdAt: new Date().toISOString()
    };

    propertyDefinitions.push(propertyDefinition);
    localStorage.setItem('propertyDefinitions', JSON.stringify(propertyDefinitions));

    // ✅ لا يتم حفظ أي وحدة في Supabase لأنه لا توجد وحدة
    console.log('💾 تم حفظ تعريف العقار في propertyDefinitions فقط');

    // حفظ البيانات محلياً (properties فقط، بدون وحدة جديدة)
    localStorage.setItem('properties', JSON.stringify(properties));

    console.log(`✅ تم إضافة العقار "${name}" في مدينة "${city}" بنجاح`);

    // إضافة المدينة إلى قائمة المدن إذا لم تكن موجودة
    if (!cityDefinitions.includes(city)) {
        cityDefinitions.push(city);
        localStorage.setItem('cityDefinitions', JSON.stringify(cityDefinitions));
        console.log(`💾 تم إضافة المدينة "${city}" تلقائياً`);
    }

    // تحديث البيانات المحلية
    alert('تم إضافة العقار بنجاح!\n\n✅ العقار جاهز لإضافة الوحدات.\n\nاذهب إلى تبويب "الوحدات" لإضافة وحدات للعقار.');

    // إعادة تحميل التطبيق
    initializeApp();

    // تنظيف النموذج
    document.getElementById('newPropertyName').value = '';
    document.getElementById('newPropertyCity').value = '';
    document.getElementById('newPropertyDeed').value = '';
    document.getElementById('newPropertyArea').value = '';
    document.getElementById('newPropertyRegistry').value = '';
    document.getElementById('newPropertyLocation').value = '';
    document.getElementById('newPropertyOwner').value = '';

    // تحديث محتوى التبويب
    updatePropertiesDisplay();
}

// إضافة وحدة جديدة
function addNewUnit() {
    const propertyName = document.getElementById('unitPropertyName').value;
    const unitNumber = document.getElementById('unitNumber').value.trim();
    const unitArea = document.getElementById('unitArea').value;
    const electricity = document.getElementById('unitElectricity').value.trim();

    if (!propertyName || !unitNumber) {
        alert('يرجى اختيار العقار وإدخال رقم الوحدة');
        return;
    }

    // التحقق من عدم وجود وحدة بنفس الرقم في نفس العقار
    const existingUnit = properties.find(p =>
        p['اسم العقار'] === propertyName && p['رقم  الوحدة '] === unitNumber
    );

    if (existingUnit) {
        alert('يوجد وحدة بنفس الرقم في هذا العقار بالفعل');
        return;
    }

    // ✅ الحصول على بيانات العقار الأساسية من مصدرين
    let baseProperty = properties.find(p => p['اسم العقار'] === propertyName);
    let isFromDefinitions = false; // متغير لتتبع مصدر العقار

    // إذا لم يوجد في properties، ابحث في propertyDefinitions
    if (!baseProperty) {
        const propertyDefinition = propertyDefinitions.find(p => p.name === propertyName);
        if (propertyDefinition) {
            isFromDefinitions = true; // العقار من التعريفات

            // تحويل تعريف العقار إلى تنسيق properties
            baseProperty = {
                'اسم العقار': propertyDefinition.name,
                'المدينة': propertyDefinition.city,
                'رقم الصك': propertyDefinition.deed,
                'مساحةالصك': propertyDefinition.area,
                'السجل العيني ': propertyDefinition.registry,
                'موقع العقار': propertyDefinition.location,
                'المالك': propertyDefinition.owner,
                // قيم افتراضية للحقول المطلوبة
                'الارتفاع': null,
                'اسم المستأجر': null,
                'رقم العقد': null,
                'قيمة  الايجار ': null,
                'تاريخ البداية': null,
                'تاريخ النهاية': null,
                'الاجمالى': 0.0,
                'رقم حساب الكهرباء': null,
                'عدد الاقساط المتبقية': null,
                'تاريخ القسط الاول': null,
                'مبلغ القسط الاول': null,
                'تاريخ القسط الثاني': null,
                'مبلغ القسط الثاني': null,
                'تاريخ نهاية القسط': null,
                'نوع العقد': 'سكني'
            };
            console.log(`✅ تم العثور على العقار "${propertyName}" في propertyDefinitions وتحويله`);
        }
    } else {
        console.log(`✅ تم العثور على العقار "${propertyName}" في properties`);
    }

    if (!baseProperty) {
        alert('لم يتم العثور على العقار المحدد في النظام');
        return;
    }

    // إنشاء الوحدة الجديدة
    const newUnit = {
        ...baseProperty,
        'رقم  الوحدة ': unitNumber,
        'المساحة': parseFloat(unitArea) || null,
        'رقم حساب الكهرباء': electricity || null,
        'اسم المستأجر': null,
        'رقم العقد': null,
        'قيمة  الايجار ': null,
        'تاريخ البداية': null,
        'تاريخ النهاية': null,
        'الاجمالى': 0.0,
        'عدد الاقساط المتبقية': null,
        'تاريخ القسط الاول': null,
        'مبلغ القسط الاول': null,
        'تاريخ القسط الثاني': null,
        'مبلغ القسط الثاني': null,
        'تاريخ نهاية القسط': null
    };

    // إضافة الوحدة إلى المصفوفة
    properties.push(newUnit);

    // ✅ إذا كان العقار من propertyDefinitions، احذفه من هناك لتجنب التكرار
    if (isFromDefinitions) {
        const definitionIndex = propertyDefinitions.findIndex(p => p.name === propertyName);
        if (definitionIndex !== -1) {
            propertyDefinitions.splice(definitionIndex, 1);
            localStorage.setItem('propertyDefinitions', JSON.stringify(propertyDefinitions));
            console.log(`✅ تم حذف العقار "${propertyName}" من propertyDefinitions لتجنب التكرار`);
        }
    }

    // حفظ في Supabase إذا كان متوفراً
    if (typeof savePropertyToSupabase === 'function') {
        savePropertyToSupabase(newUnit);
    }

    // حفظ البيانات محلياً
    saveDataLocally();

    alert('تم إضافة الوحدة بنجاح!');

    // إعادة تحميل التطبيق
    initializeApp();

    // تنظيف النموذج
    document.getElementById('unitPropertyName').value = '';
    document.getElementById('unitNumber').value = '';
    document.getElementById('unitArea').value = '';
    document.getElementById('unitElectricity').value = '';

    // تحديث محتوى التبويب
    document.getElementById('units-tab').innerHTML = renderUnitsTab();
}

// ===== وظيفة حذف الوحدة =====
async function deleteUnit(unitNumber, propertyName) {
    console.log('🚀 بدء وظيفة حذف الوحدة:', { unitNumber, propertyName });

    // التحقق من وجود البيانات
    if (!ensurePropertiesLoaded('deleteUnit')) {
        return;
    }

    // التحقق من وجود الوحدة
    const unitIndex = properties.findIndex(p =>
        p['رقم  الوحدة '] === unitNumber && p['اسم العقار'] === propertyName
    );

    console.log('🔍 فهرس الوحدة في المصفوفة:', unitIndex);
    console.log('📊 إجمالي عدد العقارات:', properties.length);

    if (unitIndex === -1) {
        console.error('❌ لم يتم العثور على الوحدة في المصفوفة');
        alert('لم يتم العثور على الوحدة المحددة');
        return;
    }

    const unit = properties[unitIndex];

    // نافذة تأكيد الحذف
    const confirmModal = document.createElement('div');
    confirmModal.className = 'modal-overlay';
    confirmModal.style.display = 'flex';
    confirmModal.innerHTML = `
        <div class="modal-box" style="max-width: 500px;">
            <div class="modal-header">
                <h3 style="color: #dc3545; margin: 0;">
                    <i class="fas fa-exclamation-triangle"></i> تأكيد حذف الوحدة
                </h3>
            </div>
            <div class="modal-body" style="padding: 20px;">
                <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 15px; margin-bottom: 20px;">
                    <p style="margin: 0; color: #856404;">
                        <i class="fas fa-info-circle"></i>
                        <strong>تحذير:</strong> هذا الإجراء لا يمكن التراجع عنه!
                    </p>
                </div>
                <div style="background: #f8f9fa; border-radius: 8px; padding: 15px; margin-bottom: 20px;">
                    <h4 style="margin: 0 0 10px 0; color: #495057;">بيانات الوحدة المراد حذفها:</h4>
                    <p><strong>رقم الوحدة:</strong> ${unitNumber}</p>
                    <p><strong>اسم العقار:</strong> ${propertyName}</p>
                    <p><strong>المدينة:</strong> ${unit['المدينة']}</p>
                    <p><strong>المستأجر:</strong> ${unit['اسم المستأجر'] || 'فارغ'}</p>
                    <p><strong>رقم العقد:</strong> ${unit['رقم العقد'] || 'غير محدد'}</p>
                </div>
                <p style="color: #dc3545; font-weight: 600; text-align: center;">
                    هل أنت متأكد من حذف هذه الوحدة وجميع مرفقاتها؟
                </p>
            </div>
            <div class="modal-actions">
                <button class="modal-action-btn close-btn" onclick="closeDeleteConfirmModal()">
                    <i class="fas fa-times"></i> إلغاء
                </button>
                <button class="modal-action-btn print-btn" onclick="confirmDeleteUnit('${unitNumber}', '${propertyName}', ${unitIndex})"
                        style="background: #dc3545; border-color: #dc3545;">
                    <i class="fas fa-trash"></i> تأكيد الحذف
                </button>
            </div>
        </div>
    `;

    document.body.appendChild(confirmModal);
}

// إغلاق نافذة تأكيد الحذف
function closeDeleteConfirmModal() {
    const modal = document.querySelector('.modal-overlay');
    if (modal) {
        modal.remove();
    }
}

// تأكيد حذف الوحدة
async function confirmDeleteUnit(unitNumber, propertyName, unitIndex) {
    // إغلاق نافذة التأكيد
    closeDeleteConfirmModal();

    // إظهار مؤشر التحميل
    const loadingModal = document.createElement('div');
    loadingModal.className = 'modal-overlay';
    loadingModal.style.display = 'flex';
    loadingModal.innerHTML = `
        <div class="modal-box" style="text-align: center; padding: 40px;">
            <i class="fas fa-spinner fa-spin" style="font-size: 2rem; color: #dc3545; margin-bottom: 20px;"></i>
            <h3>جاري حذف الوحدة...</h3>
            <p>يرجى الانتظار، جاري حذف الوحدة وجميع مرفقاتها</p>
        </div>
    `;
    document.body.appendChild(loadingModal);

    try {
        const unit = properties[unitIndex];
        console.log('🗑️ بدء عملية حذف الوحدة:', unitNumber, 'من العقار:', propertyName);

        // 1. استخدام الحذف القوي الجديد أولاً
        console.log('💪 استخدام الحذف القوي لضمان الحذف النهائي من Supabase...');

        let forceDeleteResult = { success: false };
        if (typeof forceDeleteUnitFromSupabase === 'function') {
            try {
                forceDeleteResult = await forceDeleteUnitFromSupabase(unit);
                console.log('💪 نتيجة الحذف القوي:', forceDeleteResult);
            } catch (error) {
                console.error('❌ خطأ في الحذف القوي:', error);
            }
        }

        // 2. استخدام الحذف المتقدم كبديل
        console.log('🔧 استخدام الحذف المتقدم مع معالجة الروابط...');

        const enhancedResult = await enhancedDeleteUnit(unit);

        // تحديد نجاح العملية
        const isSuccessful = forceDeleteResult.success || enhancedResult.success;
        const deletedFromSupabase = forceDeleteResult.deletedCount || enhancedResult.cloudDeleted || 0;

        if (isSuccessful) {
            console.log('✅ تم الحذف بنجاح');

            // إزالة مؤشر التحميل
            loadingModal.remove();

            // إظهار رسالة نجاح مفصلة
            const successMessage = deletedFromSupabase > 0
                ? `تم حذف الوحدة نهائياً من قاعدة البيانات (${deletedFromSupabase} سجل) والبيانات المحلية`
                : 'تم حذف الوحدة من البيانات المحلية (لم توجد في قاعدة البيانات)';

            showSuccessMessage('تم حذف الوحدة بنجاح', successMessage);

            // تحديث الواجهة
            if (document.getElementById('units-tab')) {
                document.getElementById('units-tab').innerHTML = renderUnitsTab();
            }

            const searchResults = document.getElementById('unitSearchResults');
            if (searchResults) {
                const searchInput = document.getElementById('unitSearchInput');
                if (searchInput && searchInput.value.trim()) {
                    searchUnits();
                }
            }

            return; // انتهى بنجاح
        } else {
            console.warn('⚠️ فشل الحذف المتقدم والقوي، سيتم المتابعة بالطريقة التقليدية');
        }

        // 2. Delete from Supabase with advanced foreign key handling
        console.log('🏠 Starting advanced Supabase deletion process...');
        console.log('📋 Property data for deletion:', {
            unitNumber: unit['رقم  الوحدة '],
            propertyName: unit['اسم العقار'],
            city: unit['المدينة'],
            tenant: unit['اسم المستأجر'],
            contract: unit['رقم العقد']
        });

        let deletionResult = { success: false, reason: 'UNKNOWN' };

        if (typeof deletePropertyFromSupabase === 'function') {
            try {
                // Show deletion progress to user
                showToast('جاري حذف الوحدة مع جميع البيانات المرتبطة...', 'info');

                // Advanced deletion with foreign key handling
                deletionResult = await deletePropertyFromSupabase(unit);
                console.log('🏠 Advanced deletion result:', deletionResult);

                // Handle results and provide detailed user feedback
                if (deletionResult.success) {
                    console.log('✅ Property and all related data successfully deleted from Supabase');

                    // Show detailed success message
                    const successMessage = deletionResult.deletedCount > 0
                        ? `تم حذف الوحدة نهائياً مع جميع البيانات المرتبطة (${deletionResult.deletedCount} سجل)`
                        : 'تم حذف الوحدة نهائياً من قاعدة البيانات';

                    showToast(successMessage, 'success');

                    // Log deletion details
                    if (deletionResult.deletionResults) {
                        const successfulDeletions = deletionResult.deletionResults.filter(r => r.success);
                        console.log(`📊 Deletion summary: ${successfulDeletions.length}/${deletionResult.deletionResults.length} records deleted successfully`);
                    }

                    // Trigger UI refresh after successful deletion
                    setTimeout(() => {
                        console.log('🔄 Triggering data refresh after successful advanced deletion');
                        renderData();
                    }, 1000);

                } else {
                    // Handle different failure scenarios with more context
                    let userMessage = '';
                    let logLevel = 'warn';

                    switch (deletionResult.reason) {
                        case 'NO_CLIENT':
                            userMessage = 'تم الحذف محلياً فقط - قاعدة البيانات غير متصلة';
                            break;
                        case 'NOT_FOUND':
                            userMessage = 'تم الحذف محلياً - الوحدة غير موجودة في قاعدة البيانات';
                            break;
                        case 'LOCAL_ONLY':
                            userMessage = 'تم الحذف بنجاح - الوحدة لم تكن موجودة في قاعدة البيانات';
                            break;
                        case 'SCHEMA_ERROR':
                            userMessage = 'خطأ في هيكل قاعدة البيانات - تم الحذف محلياً فقط';
                            logLevel = 'error';
                            break;
                        case 'CRITICAL_ERROR':
                            userMessage = 'خطأ خطير في قاعدة البيانات - تم الحذف محلياً فقط';
                            logLevel = 'error';
                            break;
                        default:
                            // Check if partial deletion occurred
                            if (deletionResult.deletionResults) {
                                const partialSuccess = deletionResult.deletionResults.some(r => r.success);
                                if (partialSuccess) {
                                    userMessage = 'تم حذف بعض البيانات - قد تحتاج لاستخدام "الحذف المتقدم"';
                                    logLevel = 'warning';
                                } else {
                                    userMessage = 'فشل الحذف من قاعدة البيانات - تم الحذف محلياً فقط';
                                }
                            } else {
                                userMessage = 'فشل الحذف من قاعدة البيانات - تم الحذف محلياً فقط';
                            }
                    }

                    console[logLevel]('⚠️ Advanced Supabase deletion failed:', deletionResult);
                    showToast(userMessage, logLevel === 'error' ? 'error' : 'warning');

                    // Provide specific guidance based on failure type
                    if (deletionResult.reason === 'NOT_FOUND') {
                        setTimeout(() => {
                            showToast('استخدم "تشخيص قاعدة البيانات" للتحقق من التزامن', 'info');
                        }, 3000);
                    } else if (deletionResult.deletionResults && deletionResult.deletionResults.some(r => r.error && r.error.includes('foreign key'))) {
                        setTimeout(() => {
                            showToast('استخدم زر "حذف متقدم مع الروابط" لحذف البيانات المرتبطة', 'info');
                        }, 3000);
                    }
                }

            } catch (error) {
                console.error('❌ Critical error during advanced Supabase deletion:', error);
                showToast('خطأ خطير في حذف الوحدة من قاعدة البيانات', 'error');

                // Log comprehensive error information
                console.error('Advanced deletion error details:', {
                    message: error.message,
                    stack: error.stack,
                    propertyData: unit,
                    timestamp: new Date().toISOString()
                });
            }
        } else {
            console.warn('⚠️ deletePropertyFromSupabase function not available');
            showToast('تم الحذف محلياً فقط - وظيفة قاعدة البيانات غير متوفرة', 'warning');
        }

        // 3. حذف الوحدة من المصفوفة المحلية
        console.log('💾 حذف الوحدة من البيانات المحلية...');
        properties.splice(unitIndex, 1);
        console.log('✅ تم حذف الوحدة من المصفوفة المحلية');

        // 4. حذف المرفقات المحلية
        console.log('📁 حذف المرفقات المحلية...');
        const propertyKey = `${propertyName}_${unitNumber}`;
        if (attachments[propertyKey]) {
            delete attachments[propertyKey];
            localStorage.setItem('propertyAttachments', JSON.stringify(attachments));
            console.log('✅ تم حذف المرفقات المحلية');
        } else {
            console.log('ℹ️ لا توجد مرفقات محلية للحذف');
        }

        // 5. حفظ البيانات محلياً
        console.log('💾 حفظ البيانات محلياً...');
        saveDataLocally();
        console.log('✅ تم حفظ البيانات محلياً');

        // 6. إعادة تحميل التطبيق
        console.log('🔄 إعادة تحميل التطبيق...');
        initializeApp();
        console.log('✅ تم إعادة تحميل التطبيق');

        // إزالة مؤشر التحميل
        loadingModal.remove();

        // إظهار رسالة نجاح
        showSuccessMessage('تم حذف الوحدة بنجاح', 'تم حذف الوحدة وجميع مرفقاتها بنجاح من النظام');

        // تحديث واجهة إدارة العقارات إذا كانت مفتوحة
        if (document.getElementById('units-tab')) {
            document.getElementById('units-tab').innerHTML = renderUnitsTab();
        }

        // تحديث نتائج البحث إذا كانت موجودة
        const searchResults = document.getElementById('unitSearchResults');
        if (searchResults) {
            // إعادة تشغيل البحث الحالي
            const searchInput = document.getElementById('unitSearchInput');
            if (searchInput && searchInput.value.trim()) {
                searchUnits();
            }
        }

    } catch (error) {
        console.error('❌ خطأ في حذف الوحدة:', error);

        // إزالة مؤشر التحميل
        loadingModal.remove();

        // حتى لو فشل الحذف السحابي، نحاول الحذف المحلي
        try {
            console.log('🔄 محاولة الحذف المحلي فقط...');

            // حذف الوحدة من المصفوفة المحلية
            const localUnitIndex = properties.findIndex(p =>
                p['رقم  الوحدة '] === unitNumber && p['اسم العقار'] === propertyName
            );

            if (localUnitIndex !== -1) {
                properties.splice(localUnitIndex, 1);
                console.log('✅ تم حذف الوحدة محلياً');

                // حذف المرفقات المحلية
                const propertyKey = `${propertyName}_${unitNumber}`;
                if (attachments[propertyKey]) {
                    delete attachments[propertyKey];
                    localStorage.setItem('propertyAttachments', JSON.stringify(attachments));
                    console.log('✅ تم حذف المرفقات محلياً');
                }

                // حفظ البيانات محلياً
                saveDataLocally();

                // إعادة تحميل التطبيق
                initializeApp();

                // إظهار رسالة نجاح مع تحذير
                showSuccessMessage(
                    'تم حذف الوحدة محلياً',
                    'تم حذف الوحدة من البيانات المحلية. قد تحتاج لحذفها يدوياً من قاعدة البيانات السحابية.'
                );

                // تحديث واجهة إدارة العقارات إذا كانت مفتوحة
                if (document.getElementById('units-tab')) {
                    document.getElementById('units-tab').innerHTML = renderUnitsTab();
                }

                // تحديث نتائج البحث إذا كانت موجودة
                const searchResults = document.getElementById('unitSearchResults');
                if (searchResults) {
                    const searchInput = document.getElementById('unitSearchInput');
                    if (searchInput && searchInput.value.trim()) {
                        searchUnits();
                    }
                }

                return; // نجح الحذف المحلي
            }
        } catch (localError) {
            console.error('❌ فشل الحذف المحلي أيضاً:', localError);
        }

        // إظهار رسالة خطأ
        showErrorMessage(
            'خطأ في حذف الوحدة',
            'فشل في حذف الوحدة من قاعدة البيانات. يرجى المحاولة مرة أخرى أو الاتصال بالدعم الفني.'
        );
    }
}

// إظهار رسالة نجاح
function showSuccessMessage(title, message) {
    const successModal = document.createElement('div');
    successModal.className = 'modal-overlay';
    successModal.style.display = 'flex';
    successModal.innerHTML = `
        <div class="modal-box" style="text-align: center; padding: 40px; max-width: 450px;">
            <i class="fas fa-check-circle" style="font-size: 3rem; color: #28a745; margin-bottom: 20px;"></i>
            <h3 style="color: #28a745; margin-bottom: 15px;">${title}</h3>
            <p style="color: #6c757d; margin-bottom: 25px;">${message}</p>
            <button class="modal-action-btn print-btn" onclick="closeModal()"
                    style="background: #28a745; border-color: #28a745;">
                <i class="fas fa-check"></i> موافق
            </button>
        </div>
    `;
    document.body.appendChild(successModal);
}

// إظهار رسالة نجاح مع callback (للتحديث بعد الضغط على موافق)
function showSuccessMessageWithCallback(title, message, callback) {
    console.log('🎉 عرض رسالة النجاح مع callback:', title);

    const successModal = document.createElement('div');
    successModal.className = 'modal-overlay';
    successModal.style.display = 'flex';
    successModal.style.zIndex = '10000';

    // إنشاء ID فريد للزر
    const uniqueId = 'successOkBtn_' + Date.now();

    successModal.innerHTML = `
        <div class="modal-box" style="text-align: center; padding: 40px; max-width: 500px;">
            <i class="fas fa-check-circle" style="font-size: 3rem; color: #28a745; margin-bottom: 20px;"></i>
            <h3 style="color: #28a745; margin-bottom: 15px;">${title}</h3>
            <div style="color: #6c757d; margin-bottom: 25px; white-space: pre-line; text-align: right;">${message}</div>
            <button class="modal-action-btn print-btn" id="${uniqueId}"
                    style="background: #28a745; border-color: #28a745; font-size: 16px; padding: 12px 30px;">
                <i class="fas fa-check"></i> موافق
            </button>
        </div>
    `;

    document.body.appendChild(successModal);

    // إضافة حدث للزر
    const okBtn = document.getElementById(uniqueId);
    if (okBtn) {
        okBtn.addEventListener('click', function() {
            console.log('✅ تم الضغط على موافق، تنفيذ callback...');

            // إغلاق النافذة
            successModal.remove();

            // تنفيذ الـ callback بعد إغلاق النافذة
            if (callback && typeof callback === 'function') {
                setTimeout(callback, 100); // تأخير قصير للتأكد من إغلاق النافذة
            }
        });
    } else {
        console.error('❌ لم يتم العثور على زر موافق');
    }

    // إضافة حدث إغلاق للمودال (عند الضغط خارج النافذة)
    successModal.addEventListener('click', function(e) {
        if (e.target === successModal) {
            console.log('✅ إغلاق النافذة بالضغط خارجها، تنفيذ callback...');
            successModal.remove();
            if (callback && typeof callback === 'function') {
                setTimeout(callback, 100);
            }
        }
    });

    // إضافة حدث لمفتاح Enter
    const handleEnterKey = function(e) {
        if (e.key === 'Enter' && document.body.contains(successModal)) {
            console.log('✅ إغلاق النافذة بمفتاح Enter، تنفيذ callback...');
            e.preventDefault();
            successModal.remove();
            document.removeEventListener('keydown', handleEnterKey);
            if (callback && typeof callback === 'function') {
                setTimeout(callback, 100);
            }
        }
    };

    document.addEventListener('keydown', handleEnterKey);
}

// إظهار شريط التقدم مع callback
function showProgressModal(title, progressFunction, onComplete) {
    const progressModal = document.createElement('div');
    progressModal.className = 'modal-overlay';
    progressModal.style.display = 'flex';
    progressModal.style.zIndex = '10000';

    progressModal.innerHTML = `
        <div class="modal-box" style="text-align: center; padding: 40px; max-width: 450px;">
            <i class="fas fa-save" style="font-size: 3rem; color: #007bff; margin-bottom: 20px;"></i>
            <h3 style="color: #007bff; margin-bottom: 15px;">${title}</h3>
            <div style="margin-bottom: 20px;">
                <div style="background: #e9ecef; border-radius: 10px; height: 20px; overflow: hidden; margin-bottom: 10px;">
                    <div id="progressBar" style="background: linear-gradient(90deg, #007bff, #0056b3); height: 100%; width: 0%; transition: width 0.3s ease;"></div>
                </div>
                <div id="progressText" style="color: #6c757d; font-size: 14px;">جاري التحضير...</div>
                <div id="progressPercent" style="color: #007bff; font-weight: bold; margin-top: 5px;">0%</div>
            </div>
        </div>
    `;

    document.body.appendChild(progressModal);

    const progressBar = document.getElementById('progressBar');
    const progressText = document.getElementById('progressText');
    const progressPercent = document.getElementById('progressPercent');

    // دالة تحديث التقدم
    const updateProgress = (percent, text) => {
        progressBar.style.width = percent + '%';
        progressText.textContent = text;
        progressPercent.textContent = percent + '%';

        // تغيير اللون عند الانتهاء
        if (percent >= 100) {
            progressBar.style.background = 'linear-gradient(90deg, #28a745, #1e7e34)';
            progressPercent.style.color = '#28a745';
        }
    };

    // تنفيذ دالة التقدم
    progressFunction(updateProgress).then((result) => {
        // إغلاق شريط التقدم بعد ثانية
        setTimeout(() => {
            progressModal.remove();
            if (onComplete && typeof onComplete === 'function') {
                onComplete(result);
            }
        }, 1000);
    }).catch((error) => {
        console.error('خطأ في شريط التقدم:', error);
        progressModal.remove();
        if (onComplete && typeof onComplete === 'function') {
            onComplete(false);
        }
    });
}

// إظهار رسالة خطأ
function showErrorMessage(title, message) {
    const errorModal = document.createElement('div');
    errorModal.className = 'modal-overlay';
    errorModal.style.display = 'flex';
    errorModal.innerHTML = `
        <div class="modal-box" style="text-align: center; padding: 40px; max-width: 450px;">
            <i class="fas fa-exclamation-circle" style="font-size: 3rem; color: #dc3545; margin-bottom: 20px;"></i>
            <h3 style="color: #dc3545; margin-bottom: 15px;">${title}</h3>
            <p style="color: #6c757d; margin-bottom: 25px;">${message}</p>
            <button class="modal-action-btn close-btn" onclick="closeModal()">
                <i class="fas fa-times"></i> إغلاق
            </button>
        </div>
    `;
    document.body.appendChild(errorModal);
}

// ===== وظيفة حذف العقار بالكامل (محسنة للنظام الجديد) =====
async function deleteProperty(propertyName) {
    // البحث عن جميع وحدات العقار
    const propertyUnits = properties.filter(p => p['اسم العقار'] === propertyName);

    // البحث في تعريفات العقارات أيضاً
    const propertyDefinition = propertyDefinitions.find(p => p.name === propertyName);

    if (propertyUnits.length === 0 && !propertyDefinition) {
        alert('لم يتم العثور على العقار المحدد');
        return;
    }

    console.log(`🗑️ حذف العقار "${propertyName}": ${propertyUnits.length} وحدة، تعريف موجود: ${!!propertyDefinition}`);

    // نافذة تأكيد الحذف
    const confirmModal = document.createElement('div');
    confirmModal.className = 'modal-overlay';
    confirmModal.style.display = 'flex';
    confirmModal.innerHTML = `
        <div class="modal-box" style="max-width: 600px;">
            <div class="modal-header">
                <h3 style="color: #dc3545; margin: 0;">
                    <i class="fas fa-exclamation-triangle"></i> تأكيد حذف العقار
                </h3>
            </div>
            <div class="modal-body" style="padding: 20px;">
                <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 15px; margin-bottom: 20px;">
                    <p style="margin: 0; color: #856404;">
                        <i class="fas fa-info-circle"></i>
                        <strong>تحذير:</strong> سيتم حذف العقار وجميع وحداته ومرفقاته نهائياً!
                    </p>
                </div>
                <div style="background: #f8f9fa; border-radius: 8px; padding: 15px; margin-bottom: 20px;">
                    <h4 style="margin: 0 0 10px 0; color: #495057;">بيانات العقار المراد حذفه:</h4>
                    <p><strong>اسم العقار:</strong> ${propertyName}</p>
                    <p><strong>المدينة:</strong> ${propertyUnits.length > 0 ? propertyUnits[0]['المدينة'] : 'غير محدد'}</p>
                    <p><strong>عدد الوحدات:</strong> ${propertyUnits.length} وحدة</p>
                    <p><strong>الوحدات:</strong> ${propertyUnits.map(u => u['رقم  الوحدة ']).join(', ')}</p>
                </div>
                <div style="background: #f8d7da; border: 1px solid #f5c6cb; border-radius: 8px; padding: 15px; margin-bottom: 20px;">
                    <p style="margin: 0; color: #721c24; font-weight: 600;">
                        <i class="fas fa-exclamation-triangle"></i>
                        سيتم حذف جميع البيانات والمرفقات المرتبطة بهذا العقار
                    </p>
                </div>
                <p style="color: #dc3545; font-weight: 600; text-align: center;">
                    هل أنت متأكد من حذف هذا العقار بالكامل؟
                </p>
            </div>
            <div class="modal-actions">
                <button class="modal-action-btn close-btn" onclick="closeDeleteConfirmModal()">
                    <i class="fas fa-times"></i> إلغاء
                </button>
                <button class="modal-action-btn print-btn" onclick="confirmDeleteProperty('${propertyName}')"
                        style="background: #dc3545; border-color: #dc3545;">
                    <i class="fas fa-trash"></i> تأكيد الحذف
                </button>
            </div>
        </div>
    `;

    document.body.appendChild(confirmModal);
}

// تأكيد حذف العقار (محسن للنظام الجديد)
async function confirmDeleteProperty(propertyName) {
    // إغلاق نافذة التأكيد
    closeDeleteConfirmModal();

    // إظهار مؤشر التحميل
    const loadingModal = document.createElement('div');
    loadingModal.className = 'modal-overlay';
    loadingModal.style.display = 'flex';
    loadingModal.innerHTML = `
        <div class="modal-box" style="text-align: center; padding: 40px;">
            <i class="fas fa-spinner fa-spin" style="font-size: 2rem; color: #dc3545; margin-bottom: 20px;"></i>
            <h3>جاري حذف العقار...</h3>
            <p>يرجى الانتظار، جاري حذف العقار وجميع وحداته ومرفقاته</p>
        </div>
    `;
    document.body.appendChild(loadingModal);

    try {
        // البحث عن جميع وحدات العقار
        const propertyUnits = properties.filter(p => p['اسم العقار'] === propertyName);

        // البحث في تعريفات العقارات
        const propertyDefinition = propertyDefinitions.find(p => p.name === propertyName);

        console.log(`🗑️ حذف العقار "${propertyName}": ${propertyUnits.length} وحدة، تعريف موجود: ${!!propertyDefinition}`);

        // حذف كل وحدة باستخدام الحذف المتقدم
        for (const unit of propertyUnits) {
            console.log(`🔧 حذف متقدم للوحدة: ${unit['رقم  الوحدة ']}`);

            // استخدام الحذف المتقدم
            const result = await enhancedDeleteUnit(unit);

            if (result.success) {
                console.log(`✅ تم حذف الوحدة ${unit['رقم  الوحدة ']} بنجاح`);

                // إضافة سجل التتبع لحذف الوحدة
                try {
                    await addChangeLog(
                        OPERATION_TYPES.DELETE_UNIT,
                        unit,
                        {},
                        {
                            reason: 'حذف وحدة من العقار',
                            previousTenant: unit['اسم المستأجر']
                        }
                    );
                } catch (trackingError) {
                    console.error('❌ خطأ في إضافة سجل تتبع حذف الوحدة:', trackingError);
                }
            } else {
                console.warn(`⚠️ فشل حذف الوحدة ${unit['رقم  الوحدة ']} من قاعدة البيانات`);

                // حذف محلي كبديل
                const propertyKey = `${propertyName}_${unit['رقم  الوحدة ']}`;
                if (attachments[propertyKey]) {
                    delete attachments[propertyKey];
                }
            }
        }

        // حذف جميع وحدات العقار من المصفوفة المحلية
        for (let i = properties.length - 1; i >= 0; i--) {
            if (properties[i]['اسم العقار'] === propertyName) {
                properties.splice(i, 1);
            }
        }

        // حذف تعريف العقار من propertyDefinitions
        if (propertyDefinition) {
            const definitionIndex = propertyDefinitions.findIndex(p => p.name === propertyName);
            if (definitionIndex !== -1) {
                propertyDefinitions.splice(definitionIndex, 1);
                localStorage.setItem('propertyDefinitions', JSON.stringify(propertyDefinitions));
                console.log(`✅ تم حذف تعريف العقار "${propertyName}" من propertyDefinitions`);
            }
        }

        // حفظ البيانات محلياً
        localStorage.setItem('propertyAttachments', JSON.stringify(attachments));
        saveDataLocally();

        // 🔧 إضافة: تحديث المدن المحفوظة بعد حذف العقار
        if (typeof saveCitiesLocally === 'function') {
            saveCitiesLocally();
        }

        // إعادة تحميل التطبيق
        initializeApp();

        // إزالة مؤشر التحميل
        loadingModal.remove();

        // إظهار رسالة نجاح
        showSuccessMessage('تم حذف العقار بنجاح', `تم حذف العقار "${propertyName}" وجميع وحداته ومرفقاته بنجاح من النظام`);

        // تحديث واجهة إدارة العقارات إذا كانت مفتوحة
        if (document.getElementById('properties-tab')) {
            document.getElementById('properties-tab').innerHTML = renderPropertiesTab();
        }

    } catch (error) {
        console.error('❌ خطأ في حذف العقار:', error);

        // إزالة مؤشر التحميل
        loadingModal.remove();

        // تم إزالة رسالة الخطأ حسب طلب المستخدم
        console.error('خطأ في حذف العقار:', error.message || 'حدث خطأ غير متوقع أثناء حذف العقار');
    }
}

// ===== وظيفة اختبار شاملة لإدارة العقارات =====
async function testPropertyManagementFunctions() {
    console.log('🧪 بدء اختبار وظائف إدارة العقارات...');

    const testResults = {
        addProperty: false,
        editProperty: false,
        deleteProperty: false,
        addUnit: false,
        editUnit: false,
        deleteUnit: false,
        attachments: false,
        search: false,
        supabaseSync: false
    };

    try {
        // اختبار إضافة عقار جديد
        console.log('📝 اختبار إضافة عقار جديد...');
        const testProperty = {
            'رقم  الوحدة ': 'TEST_001',
            'المدينة': 'الرياض',
            'اسم العقار': 'عقار اختبار',
            'موقع العقار': 'موقع اختبار',
            'الارتفاع': null,
            'رقم الصك': '12345',
            'السجل العيني ': '67890',
            'مساحةالصك': '500',
            'المالك': 'مالك اختبار',
            'اسم المستأجر': null,
            'رقم العقد': null,
            'قيمة  الايجار ': null,
            'المساحة': null,
            'تاريخ البداية': null,
            'تاريخ النهاية': null,
            'الاجمالى': 0.0,
            'رقم حساب الكهرباء': null,
            'عدد الاقساط المتبقية': null,
            'تاريخ القسط الاول': null,
            'مبلغ القسط الاول': null,
            'تاريخ القسط الثاني': null,
            'مبلغ القسط الثاني': null,
            'تاريخ نهاية القسط': null,
            'نوع العقد': 'سكني'
        };

        properties.push(testProperty);
        if (typeof savePropertyToSupabase === 'function') {
            await savePropertyToSupabase(testProperty);
        }
        testResults.addProperty = true;
        console.log('✅ نجح اختبار إضافة العقار');

        // اختبار تعديل العقار
        console.log('✏️ اختبار تعديل العقار...');
        const propertyIndex = properties.findIndex(p => p['رقم  الوحدة '] === 'TEST_001');
        if (propertyIndex !== -1) {
            properties[propertyIndex]['المالك'] = 'مالك محدث';
            if (typeof savePropertyToSupabase === 'function') {
                await savePropertyToSupabase(properties[propertyIndex]);
            }
            testResults.editProperty = true;
            console.log('✅ نجح اختبار تعديل العقار');
        }

        // اختبار البحث
        console.log('🔍 اختبار وظيفة البحث...');
        const searchResults = properties.filter(p =>
            p['اسم العقار'].includes('اختبار') ||
            p['رقم  الوحدة '].includes('TEST')
        );
        if (searchResults.length > 0) {
            testResults.search = true;
            console.log('✅ نجح اختبار البحث');
        }

        // اختبار الاتصال بـ Supabase
        console.log('☁️ اختبار الاتصال بـ Supabase...');
        if (typeof supabaseClient !== 'undefined' && supabaseClient) {
            try {
                const { data, error } = await supabaseClient
                    .from('properties')
                    .select('count', { count: 'exact', head: true });

                if (!error) {
                    testResults.supabaseSync = true;
                    console.log('✅ نجح اختبار الاتصال بـ Supabase');
                }
            } catch (supabaseError) {
                console.log('⚠️ Supabase غير متوفر أو غير مكون');
            }
        }

        // اختبار حذف العقار (تنظيف)
        console.log('🗑️ اختبار حذف العقار...');
        const deleteIndex = properties.findIndex(p => p['رقم  الوحدة '] === 'TEST_001');
        if (deleteIndex !== -1) {
            const unitToDelete = properties[deleteIndex];
            if (typeof deletePropertyFromSupabase === 'function') {
                await deletePropertyFromSupabase(unitToDelete);
            }
            properties.splice(deleteIndex, 1);
            testResults.deleteProperty = true;
            console.log('✅ نجح اختبار حذف العقار');
        }

        // حفظ البيانات
        saveDataLocally();

    } catch (error) {
        console.error('❌ خطأ في الاختبار:', error);
    }

    // عرض نتائج الاختبار
    const passedTests = Object.values(testResults).filter(result => result).length;
    const totalTests = Object.keys(testResults).length;

    console.log('📊 نتائج الاختبار:');
    console.log(`✅ نجح: ${passedTests}/${totalTests} اختبار`);
    console.log('تفاصيل النتائج:', testResults);

    // إظهار رسالة للمستخدم
    const testModal = document.createElement('div');
    testModal.className = 'modal-overlay';
    testModal.style.display = 'flex';
    testModal.innerHTML = `
        <div class="modal-box" style="max-width: 500px;">
            <div class="modal-header">
                <h3 style="color: #28a745; margin: 0;">
                    <i class="fas fa-check-circle"></i> نتائج اختبار النظام
                </h3>
            </div>
            <div class="modal-body" style="padding: 20px;">
                <div style="background: #d4edda; border: 1px solid #c3e6cb; border-radius: 8px; padding: 15px; margin-bottom: 20px;">
                    <p style="margin: 0; color: #155724; font-weight: 600; text-align: center;">
                        نجح ${passedTests} من ${totalTests} اختبار
                    </p>
                </div>
                <div style="background: #f8f9fa; border-radius: 8px; padding: 15px;">
                    <h4 style="margin: 0 0 10px 0;">تفاصيل الاختبارات:</h4>
                    <ul style="margin: 0; padding-right: 20px;">
                        <li style="color: ${testResults.addProperty ? '#28a745' : '#dc3545'}">
                            ${testResults.addProperty ? '✅' : '❌'} إضافة العقارات
                        </li>
                        <li style="color: ${testResults.editProperty ? '#28a745' : '#dc3545'}">
                            ${testResults.editProperty ? '✅' : '❌'} تعديل العقارات
                        </li>
                        <li style="color: ${testResults.deleteProperty ? '#28a745' : '#dc3545'}">
                            ${testResults.deleteProperty ? '✅' : '❌'} حذف العقارات
                        </li>
                        <li style="color: ${testResults.search ? '#28a745' : '#dc3545'}">
                            ${testResults.search ? '✅' : '❌'} البحث والفلترة
                        </li>
                        <li style="color: ${testResults.supabaseSync ? '#28a745' : '#dc3545'}">
                            ${testResults.supabaseSync ? '✅' : '❌'} التزامن مع Supabase
                        </li>
                    </ul>
                </div>
            </div>
            <div class="modal-actions">
                <button class="modal-action-btn print-btn" onclick="closeModal()"
                        style="background: #28a745; border-color: #28a745;">
                    <i class="fas fa-check"></i> موافق
                </button>
            </div>
        </div>
    `;

    document.body.appendChild(testModal);

    return testResults;
}

// ===== وظيفة تبديل ترتيب العرض =====
function toggleSortOrder() {
    // تبديل حالة الترتيب
    isReverseOrder = !isReverseOrder;

    // تحديث نص وأيقونة الزر
    const sortBtn = document.getElementById('sort-order-btn');
    if (sortBtn) {
        if (isReverseOrder) {
            sortBtn.innerHTML = '<i class="fas fa-sort-amount-down"></i> الأحدث أولاً';
            sortBtn.title = 'ترتيب عكسي - الأحدث أولاً';
        } else {
            sortBtn.innerHTML = '<i class="fas fa-sort-amount-up"></i> الأقدم أولاً';
            sortBtn.title = 'ترتيب طبيعي - الأقدم أولاً';
        }
    }

    // إعادة عرض البيانات بالترتيب الجديد
    renderData();

    // حفظ الإعداد في التخزين المحلي
    localStorage.setItem('sortOrder', isReverseOrder ? 'reverse' : 'normal');

    // إظهار رسالة تأكيد
    const message = isReverseOrder ? 'تم تغيير الترتيب إلى: الأحدث أولاً' : 'تم تغيير الترتيب إلى: الأقدم أولاً';
    showToast(message, 'success');
}

// تحميل إعداد الترتيب من التخزين المحلي
function loadSortOrderSetting() {
    const savedOrder = localStorage.getItem('sortOrder');
    if (savedOrder) {
        isReverseOrder = savedOrder === 'reverse';

        // تحديث الزر حسب الإعداد المحفوظ
        const sortBtn = document.getElementById('sort-order-btn');
        if (sortBtn) {
            if (isReverseOrder) {
                sortBtn.innerHTML = '<i class="fas fa-sort-amount-down"></i> الأحدث أولاً';
                sortBtn.title = 'ترتيب عكسي - الأحدث أولاً';
            } else {
                sortBtn.innerHTML = '<i class="fas fa-sort-amount-up"></i> الأقدم أولاً';
                sortBtn.title = 'ترتيب طبيعي - الأقدم أولاً';
            }
        }
    }
}

// ===== Advanced Database Diagnostics Tool =====
async function debugDatabaseSync() {
    console.log('🔍 Starting comprehensive database diagnostics...');

    if (!supabaseClient) {
        console.error('❌ Supabase client not available');
        showToast('Supabase غير متصل - لا يمكن تشخيص قاعدة البيانات', 'error');
        return;
    }

    try {
        // Show loading indicator
        const diagnosticsModal = document.createElement('div');
        diagnosticsModal.className = 'modal-overlay';
        diagnosticsModal.style.display = 'flex';
        diagnosticsModal.innerHTML = `
            <div class="modal-box" style="max-width: 90vw; max-height: 90vh; overflow-y: auto;">
                <div style="text-align: center; padding: 20px;">
                    <i class="fas fa-cog fa-spin" style="font-size: 2rem; color: #3b82f6; margin-bottom: 20px;"></i>
                    <h3>Running Database Diagnostics...</h3>
                    <div id="diagnostics-content">
                        <p>Analyzing database structure and content...</p>
                    </div>
                </div>
                <button onclick="this.parentElement.parentElement.remove()" style="position: absolute; top: 10px; right: 15px; background: none; border: none; font-size: 1.5rem; cursor: pointer;">×</button>
            </div>
        `;
        document.body.appendChild(diagnosticsModal);

        const contentDiv = diagnosticsModal.querySelector('#diagnostics-content');

        // Step 1: Test connection
        contentDiv.innerHTML += '<p>✅ Testing Supabase connection...</p>';
        const { data: connectionTest, error: connectionError } = await supabaseClient
            .from('properties')
            .select('count', { count: 'exact', head: true });

        if (connectionError) {
            throw new Error(`Connection failed: ${connectionError.message}`);
        }

        // Step 2: Get database schema
        contentDiv.innerHTML += '<p>✅ Fetching database schema...</p>';
        const { data: schemaData, error: schemaError } = await supabaseClient
            .from('properties')
            .select('*')
            .limit(1);

        if (schemaError) {
            throw new Error(`Schema fetch failed: ${schemaError.message}`);
        }

        const dbFields = schemaData.length > 0 ? Object.keys(schemaData[0]) : [];
        console.log('📊 Database schema fields:', dbFields);

        // Step 3: Get all properties from database
        contentDiv.innerHTML += '<p>✅ Fetching all database records...</p>';
        const { data: allDbProperties, error: fetchError } = await supabaseClient
            .from('properties')
            .select('*')
            .order('id', { ascending: false });

        if (fetchError) {
            throw new Error(`Data fetch failed: ${fetchError.message}`);
        }

        // Step 4: Analyze local vs database data
        contentDiv.innerHTML += '<p>✅ Analyzing data synchronization...</p>';

        const localCount = properties.length;
        const dbCount = allDbProperties.length;

        // Find potential matches and mismatches
        const localUnits = new Set(properties.map(p => p['رقم  الوحدة ']));
        const dbUnits = new Set(allDbProperties.map(p => p.unit_number));

        const onlyLocal = [...localUnits].filter(unit => !dbUnits.has(unit));
        const onlyDb = [...dbUnits].filter(unit => !localUnits.has(unit));
        const inBoth = [...localUnits].filter(unit => dbUnits.has(unit));

        // Generate comprehensive report
        const report = `
            <div style="text-align: left; font-family: monospace; background: #f5f5f5; padding: 15px; border-radius: 8px; margin: 10px 0;">
                <h4>🔍 Database Diagnostics Report</h4>

                <h5>📊 Data Counts:</h5>
                <ul>
                    <li>Local properties: ${localCount}</li>
                    <li>Database properties: ${dbCount}</li>
                    <li>Difference: ${Math.abs(localCount - dbCount)}</li>
                </ul>

                <h5>🏗️ Database Schema:</h5>
                <ul>
                    ${dbFields.map(field => `<li>${field}</li>`).join('')}
                </ul>

                <h5>🔄 Synchronization Analysis:</h5>
                <ul>
                    <li>Units in both local and database: ${inBoth.length}</li>
                    <li>Units only in local: ${onlyLocal.length}</li>
                    <li>Units only in database: ${onlyDb.length}</li>
                </ul>

                ${onlyLocal.length > 0 ? `
                <h5>⚠️ Units only in local storage:</h5>
                <ul>
                    ${onlyLocal.slice(0, 10).map(unit => `<li>${unit}</li>`).join('')}
                    ${onlyLocal.length > 10 ? `<li>... and ${onlyLocal.length - 10} more</li>` : ''}
                </ul>
                ` : ''}

                ${onlyDb.length > 0 ? `
                <h5>⚠️ Units only in database:</h5>
                <ul>
                    ${onlyDb.slice(0, 10).map(unit => `<li>${unit}</li>`).join('')}
                    ${onlyDb.length > 10 ? `<li>... and ${onlyDb.length - 10} more</li>` : ''}
                </ul>
                ` : ''}

                <h5>📋 Sample Database Records:</h5>
                <table style="width: 100%; border-collapse: collapse; margin: 10px 0;">
                    <tr style="background: #ddd;">
                        <th style="border: 1px solid #ccc; padding: 5px;">ID</th>
                        <th style="border: 1px solid #ccc; padding: 5px;">Unit Number</th>
                        <th style="border: 1px solid #ccc; padding: 5px;">Property Name</th>
                        <th style="border: 1px solid #ccc; padding: 5px;">City</th>
                    </tr>
                    ${allDbProperties.slice(0, 10).map(prop => `
                        <tr>
                            <td style="border: 1px solid #ccc; padding: 5px;">${prop.id}</td>
                            <td style="border: 1px solid #ccc; padding: 5px;">${prop.unit_number || 'N/A'}</td>
                            <td style="border: 1px solid #ccc; padding: 5px;">${prop.property_name || 'N/A'}</td>
                            <td style="border: 1px solid #ccc; padding: 5px;">${prop.city || 'N/A'}</td>
                        </tr>
                    `).join('')}
                </table>

                <h5>💡 Recommendations:</h5>
                <ul>
                    ${localCount !== dbCount ? '<li>Consider using "Reload from Cloud" to sync data</li>' : ''}
                    ${onlyLocal.length > 0 ? '<li>Some local data may need to be uploaded to database</li>' : ''}
                    ${onlyDb.length > 0 ? '<li>Some database records are not in local storage</li>' : ''}
                    <li>Use "Cleanup Database" to remove duplicates</li>
                </ul>
            </div>
        `;

        contentDiv.innerHTML = report;

        // Log detailed information to console
        console.log('📊 Diagnostics Summary:', {
            localCount,
            dbCount,
            dbFields,
            synchronization: {
                inBoth: inBoth.length,
                onlyLocal: onlyLocal.length,
                onlyDb: onlyDb.length
            }
        });

        console.log('📋 Sample database records:');
        console.table(allDbProperties.slice(0, 10));

        console.log('📋 Sample local records:');
        console.table(properties.slice(0, 10).map(p => ({
            unit_number: p['رقم  الوحدة '],
            property_name: p['اسم العقار'],
            city: p['المدينة'],
            tenant_name: p['اسم المستأجر']
        })));

        console.log('تم إكمال تشخيص قاعدة البيانات - راجع النتائج');

    } catch (error) {
        console.error('❌ Error during database diagnostics:', error);

        const errorModal = document.querySelector('.modal-overlay');
        if (errorModal) {
            errorModal.querySelector('#diagnostics-content').innerHTML = `
                <div style="color: red; text-align: center;">
                    <h4>❌ Diagnostics Failed</h4>
                    <p>Error: ${error.message}</p>
                    <p>Check console for detailed error information</p>
                </div>
            `;
        }

        showToast('فشل في تشخيص قاعدة البيانات - راجع وحدة التحكم', 'error');
    }
}

// ===== إعادة تحميل البيانات من Supabase =====
async function reloadFromSupabase() {
    console.log('🔄 إعادة تحميل البيانات من Supabase...');

    if (!supabaseClient) {
        alert('Supabase غير متصل');
        return;
    }

    try {
        // إظهار مؤشر التحميل
        const loadingModal = document.createElement('div');
        loadingModal.className = 'modal-overlay';
        loadingModal.style.display = 'flex';
        loadingModal.innerHTML = `
            <div class="modal-box" style="text-align: center; padding: 40px;">
                <i class="fas fa-spinner fa-spin" style="font-size: 2rem; color: #3b82f6; margin-bottom: 20px;"></i>
                <h3>جاري إعادة تحميل البيانات...</h3>
                <p>يرجى الانتظار، جاري تحميل البيانات من قاعدة البيانات</p>
            </div>
        `;
        document.body.appendChild(loadingModal);

        // تحميل البيانات من Supabase
        const { data: supabaseProperties, error } = await supabaseClient
            .from('properties')
            .select('*')
            .order('id', { ascending: false });

        if (error) {
            throw new Error(`خطأ في تحميل البيانات: ${error.message}`);
        }

        // تحويل البيانات إلى التنسيق المحلي
        properties = supabaseProperties.map(convertSupabaseToLocal);

        // حفظ البيانات محلياً
        saveDataLocally();

        // إعادة تحميل التطبيق
        initializeApp();

        // إزالة مؤشر التحميل
        loadingModal.remove();

        // إظهار رسالة نجاح
        showSuccessMessage(
            'تم إعادة تحميل البيانات بنجاح',
            `تم تحميل ${supabaseProperties.length} وحدة من قاعدة البيانات`
        );

        console.log(`✅ تم تحميل ${supabaseProperties.length} وحدة من Supabase`);

    } catch (error) {
        console.error('❌ خطأ في إعادة تحميل البيانات:', error);

        // إزالة مؤشر التحميل
        const loadingModal = document.querySelector('.modal-overlay');
        if (loadingModal) {
            loadingModal.remove();
        }

        // تم إزالة رسالة الخطأ حسب طلب المستخدم
        console.error('خطأ في إعادة التحميل:', error.message || 'حدث خطأ غير متوقع');
    }
}

// ===== تنظيف قاعدة البيانات =====
async function cleanupDatabase() {
    if (!confirm('هل أنت متأكد من تنظيف قاعدة البيانات؟\nسيتم حذف جميع البيانات المكررة والفارغة.')) {
        return;
    }

    console.log('🧹 بدء تنظيف قاعدة البيانات...');

    if (!supabaseClient) {
        alert('Supabase غير متصل');
        return;
    }

    try {
        // إظهار مؤشر التحميل
        const loadingModal = document.createElement('div');
        loadingModal.className = 'modal-overlay';
        loadingModal.style.display = 'flex';
        loadingModal.innerHTML = `
            <div class="modal-box" style="text-align: center; padding: 40px;">
                <i class="fas fa-broom fa-spin" style="font-size: 2rem; color: #e67e22; margin-bottom: 20px;"></i>
                <h3>جاري تنظيف قاعدة البيانات...</h3>
                <p>يرجى الانتظار، جاري حذف البيانات المكررة والفارغة</p>
            </div>
        `;
        document.body.appendChild(loadingModal);

        // جلب جميع البيانات
        const { data: allProperties, error } = await supabaseClient
            .from('properties')
            .select('*')
            .order('id', { ascending: true });

        if (error) {
            throw new Error(`خطأ في جلب البيانات: ${error.message}`);
        }

        console.log(`📊 تم جلب ${allProperties.length} وحدة للتنظيف`);

        // العثور على البيانات المكررة
        const duplicates = [];
        const seen = new Set();

        allProperties.forEach(property => {
            const key = `${property.unit_number}_${property.property_name}_${property.city}`;
            if (seen.has(key)) {
                duplicates.push(property.id);
            } else {
                seen.add(key);
            }
        });

        console.log(`🔍 تم العثور على ${duplicates.length} وحدة مكررة`);

        // حذف البيانات المكررة
        let deletedCount = 0;
        for (const id of duplicates) {
            try {
                const { error: deleteError } = await supabaseClient
                    .from('properties')
                    .delete()
                    .eq('id', id);

                if (!deleteError) {
                    deletedCount++;
                    console.log(`✅ تم حذف الوحدة المكررة ID: ${id}`);
                }
            } catch (deleteError) {
                console.error(`❌ فشل حذف الوحدة ${id}:`, deleteError);
            }
        }

        // إزالة مؤشر التحميل
        loadingModal.remove();

        // إظهار النتائج
        showSuccessMessage(
            'تم تنظيف قاعدة البيانات بنجاح',
            `تم حذف ${deletedCount} وحدة مكررة من أصل ${duplicates.length}`
        );

        console.log(`✅ تم تنظيف قاعدة البيانات - حذف ${deletedCount} وحدة مكررة`);

        // إعادة تحميل البيانات
        await reloadFromSupabase();

    } catch (error) {
        console.error('❌ خطأ في تنظيف قاعدة البيانات:', error);

        // إزالة مؤشر التحميل
        const loadingModal = document.querySelector('.modal-overlay');
        if (loadingModal) {
            loadingModal.remove();
        }

        // تم إزالة رسالة الخطأ حسب طلب المستخدم
        console.error('خطأ في التنظيف:', error.message || 'حدث خطأ غير متوقع');
    }
}

// ===== Database Sync Verification =====
async function verifyDatabaseSync() {
    console.log('🔍 Verifying database synchronization...');

    if (!supabaseClient) {
        showToast('Supabase غير متصل', 'error');
        return false;
    }

    try {
        // Get current database state
        const { data: dbProperties, error } = await supabaseClient
            .from('properties')
            .select('id, unit_number, property_name, city')
            .order('id', { ascending: false });

        if (error) {
            console.error('❌ Failed to fetch database properties:', error);
            return false;
        }

        // Compare with local data
        const localUnits = new Set(properties.map(p => p['رقم  الوحدة ']));
        const dbUnits = new Set(dbProperties.map(p => p.unit_number));

        const syncStatus = {
            localCount: properties.length,
            dbCount: dbProperties.length,
            inSync: localUnits.size === dbUnits.size,
            onlyLocal: [...localUnits].filter(unit => !dbUnits.has(unit)),
            onlyDb: [...dbUnits].filter(unit => !localUnits.has(unit))
        };

        console.log('📊 Sync verification result:', syncStatus);

        if (syncStatus.inSync && syncStatus.onlyLocal.length === 0 && syncStatus.onlyDb.length === 0) {
            showToast('قاعدة البيانات متزامنة بشكل صحيح', 'success');
            return true;
        } else {
            showToast(`عدم تزامن في البيانات - محلي: ${syncStatus.localCount}, قاعدة البيانات: ${syncStatus.dbCount}`, 'warning');
            return false;
        }

    } catch (error) {
        console.error('❌ Error verifying database sync:', error);
        showToast('خطأ في التحقق من تزامن قاعدة البيانات', 'error');
        return false;
    }
}

// ===== Enhanced Property Deletion with Verification =====
async function deletePropertyWithVerification(unitNumber, propertyName, city) {
    console.log('🗑️ Starting verified property deletion...');

    // Step 1: Verify the property exists locally
    const localProperty = properties.find(p =>
        p['رقم  الوحدة '] === unitNumber &&
        p['اسم العقار'] === propertyName
    );

    if (!localProperty) {
        console.error('❌ Property not found in local data');
        showToast('الوحدة غير موجودة في البيانات المحلية', 'error');
        return false;
    }

    // Step 2: Delete from Supabase first
    let dbDeletionSuccess = false;
    if (typeof deletePropertyFromSupabase === 'function') {
        const result = await deletePropertyFromSupabase(localProperty);
        dbDeletionSuccess = result.success;

        if (dbDeletionSuccess) {
            console.log('✅ Property deleted from database successfully');
        } else {
            console.warn('⚠️ Database deletion failed:', result.reason);
        }
    }

    // Step 3: Delete from local data
    const originalLength = properties.length;
    properties = properties.filter(p =>
        !(p['رقم  الوحدة '] === unitNumber && p['اسم العقار'] === propertyName)
    );

    const localDeletionSuccess = properties.length < originalLength;

    // Step 4: Save updated local data
    if (localDeletionSuccess) {
        saveDataLocally();
        renderData();
    }

    // Step 5: Verify deletion
    setTimeout(async () => {
        const isInSync = await verifyDatabaseSync();
        if (!isInSync && dbDeletionSuccess) {
            console.log('⚠️ Sync verification failed after deletion');
            showToast('تم الحذف ولكن قد تحتاج لإعادة تحميل البيانات', 'warning');
        }
    }, 2000);

    return {
        localSuccess: localDeletionSuccess,
        dbSuccess: dbDeletionSuccess,
        overall: localDeletionSuccess && dbDeletionSuccess
    };
}

// ===== Force Delete Specific Units =====
async function forceDeleteSpecificUnits() {
    const targetUnits = ['TEST_001', 'TEST_UNIT_003', 'TEST_UNIT_001'];

    if (!confirm(`هل أنت متأكد من حذف الوحدات التالية نهائياً؟\n${targetUnits.join('\n')}\n\nسيتم الحذف من قاعدة البيانات والبيانات المحلية.`)) {
        return;
    }

    console.log('🗑️ بدء الحذف القسري للوحدات المحددة:', targetUnits);

    // Show progress modal
    const progressModal = document.createElement('div');
    progressModal.className = 'modal-overlay';
    progressModal.style.display = 'flex';
    progressModal.innerHTML = `
        <div class="modal-box" style="text-align: center; padding: 40px; max-width: 600px;">
            <i class="fas fa-trash-alt fa-spin" style="font-size: 2rem; color: #e74c3c; margin-bottom: 20px;"></i>
            <h3>جاري حذف الوحدات المحددة...</h3>
            <div id="deletion-progress" style="text-align: left; background: #f5f5f5; padding: 15px; border-radius: 8px; margin: 20px 0; font-family: monospace;">
                <p>🔍 البحث عن الوحدات في قاعدة البيانات...</p>
            </div>
            <button onclick="this.parentElement.parentElement.remove()" style="position: absolute; top: 10px; right: 15px; background: none; border: none; font-size: 1.5rem; cursor: pointer;">×</button>
        </div>
    `;
    document.body.appendChild(progressModal);

    const progressDiv = progressModal.querySelector('#deletion-progress');
    let deletionResults = [];

    try {
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        // Step 1: Search for all target units in database
        progressDiv.innerHTML += '<p>📋 البحث عن الوحدات في قاعدة البيانات...</p>';

        const { data: allDbProperties, error: searchError } = await supabaseClient
            .from('properties')
            .select('*');

        if (searchError) {
            throw new Error(`خطأ في البحث: ${searchError.message}`);
        }

        progressDiv.innerHTML += `<p>✅ تم جلب ${allDbProperties.length} سجل من قاعدة البيانات</p>`;

        // Step 2: Find matching records for each target unit
        for (const targetUnit of targetUnits) {
            progressDiv.innerHTML += `<p>🔍 البحث عن الوحدة: ${targetUnit}</p>`;

            // Search with multiple strategies
            const matchingRecords = allDbProperties.filter(record => {
                return (
                    record.unit_number === targetUnit ||
                    record.property_name === targetUnit ||
                    record.tenant_name === targetUnit ||
                    record.contract_number === targetUnit ||
                    JSON.stringify(record).includes(targetUnit)
                );
            });

            if (matchingRecords.length > 0) {
                progressDiv.innerHTML += `<p style="color: orange;">📋 تم العثور على ${matchingRecords.length} سجل للوحدة ${targetUnit}</p>`;

                // Delete each matching record
                for (const record of matchingRecords) {
                    try {
                        const { error: deleteError } = await supabaseClient
                            .from('properties')
                            .delete()
                            .eq('id', record.id);

                        if (deleteError) {
                            progressDiv.innerHTML += `<p style="color: red;">❌ فشل حذف السجل ${record.id}: ${deleteError.message}</p>`;
                            deletionResults.push({ unit: targetUnit, id: record.id, success: false, error: deleteError.message });
                        } else {
                            progressDiv.innerHTML += `<p style="color: green;">✅ تم حذف السجل ${record.id} للوحدة ${targetUnit}</p>`;
                            deletionResults.push({ unit: targetUnit, id: record.id, success: true });
                        }
                    } catch (deleteError) {
                        progressDiv.innerHTML += `<p style="color: red;">❌ خطأ في حذف السجل ${record.id}: ${deleteError.message}</p>`;
                        deletionResults.push({ unit: targetUnit, id: record.id, success: false, error: deleteError.message });
                    }
                }
            } else {
                progressDiv.innerHTML += `<p style="color: gray;">ℹ️ لم يتم العثور على الوحدة ${targetUnit} في قاعدة البيانات</p>`;
                deletionResults.push({ unit: targetUnit, id: null, success: false, error: 'Not found in database' });
            }
        }

        // Step 3: Delete from local data
        progressDiv.innerHTML += '<p>🏠 حذف الوحدات من البيانات المحلية...</p>';

        const originalLength = properties.length;
        properties = properties.filter(property => {
            const unitNumber = property['رقم  الوحدة '];
            const propertyName = property['اسم العقار'];
            const tenantName = property['اسم المستأجر'];

            // Check if this property matches any target unit
            const shouldDelete = targetUnits.some(target =>
                unitNumber === target ||
                propertyName === target ||
                tenantName === target ||
                JSON.stringify(property).includes(target)
            );

            if (shouldDelete) {
                progressDiv.innerHTML += `<p style="color: green;">✅ تم حذف ${unitNumber || propertyName} من البيانات المحلية</p>`;
            }

            return !shouldDelete;
        });

        const localDeletedCount = originalLength - properties.length;
        progressDiv.innerHTML += `<p style="color: blue;">📊 تم حذف ${localDeletedCount} وحدة من البيانات المحلية</p>`;

        // Step 4: Save and refresh
        saveDataLocally();
        renderData();

        // Step 5: Show final results
        const successfulDeletions = deletionResults.filter(r => r.success).length;
        const totalAttempts = deletionResults.length;

        progressDiv.innerHTML += `
            <div style="margin-top: 20px; padding: 15px; background: #e8f5e8; border-radius: 8px;">
                <h4 style="color: #27ae60;">📊 ملخص النتائج:</h4>
                <ul style="text-align: right;">
                    <li>عمليات حذف ناجحة من قاعدة البيانات: ${successfulDeletions}</li>
                    <li>إجمالي المحاولات: ${totalAttempts}</li>
                    <li>حذف من البيانات المحلية: ${localDeletedCount} وحدة</li>
                </ul>
                <p style="color: #27ae60; font-weight: bold;">✅ تم إكمال عملية الحذف القسري</p>
            </div>
        `;

        // Auto-close modal after 10 seconds
        setTimeout(() => {
            if (progressModal.parentElement) {
                progressModal.remove();
            }
        }, 10000);

        showToast(`تم حذف ${successfulDeletions} سجل من قاعدة البيانات و ${localDeletedCount} من البيانات المحلية`, 'success');

    } catch (error) {
        console.error('❌ خطأ في الحذف القسري:', error);
        progressDiv.innerHTML += `<p style="color: red;">❌ خطأ خطير: ${error.message}</p>`;
        showToast('فشل في الحذف القسري - راجع التفاصيل', 'error');
    }
}

// ===== Nuclear Delete - Complete Cleanup =====
async function nuclearDeleteAllTestUnits() {
    if (!confirm('⚠️ تحذير: سيتم حذف جميع الوحدات التي تحتوي على "TEST" نهائياً!\n\nهذا الإجراء لا يمكن التراجع عنه.\n\nهل أنت متأكد؟')) {
        return;
    }

    if (!confirm('تأكيد نهائي: سيتم حذف جميع البيانات التي تحتوي على "TEST" من قاعدة البيانات والبيانات المحلية.\n\nاضغط موافق للمتابعة.')) {
        return;
    }

    console.log('💥 بدء الحذف الشامل لجميع وحدات TEST...');

    const progressModal = document.createElement('div');
    progressModal.className = 'modal-overlay';
    progressModal.style.display = 'flex';
    progressModal.innerHTML = `
        <div class="modal-box" style="text-align: center; padding: 40px; max-width: 700px;">
            <i class="fas fa-bomb fa-spin" style="font-size: 2rem; color: #e74c3c; margin-bottom: 20px;"></i>
            <h3 style="color: #e74c3c;">الحذف الشامل لوحدات TEST</h3>
            <div id="nuclear-progress" style="text-align: left; background: #f5f5f5; padding: 15px; border-radius: 8px; margin: 20px 0; font-family: monospace; max-height: 400px; overflow-y: auto;">
                <p>🚀 بدء عملية الحذف الشامل...</p>
            </div>
        </div>
    `;
    document.body.appendChild(progressModal);

    const progressDiv = progressModal.querySelector('#nuclear-progress');

    try {
        // Step 1: Delete from Supabase
        if (supabaseClient) {
            progressDiv.innerHTML += '<p>☁️ الاتصال بقاعدة البيانات...</p>';

            // Get all records
            const { data: allRecords, error: fetchError } = await supabaseClient
                .from('properties')
                .select('*');

            if (fetchError) {
                throw new Error(`خطأ في جلب البيانات: ${fetchError.message}`);
            }

            progressDiv.innerHTML += `<p>📋 تم جلب ${allRecords.length} سجل من قاعدة البيانات</p>`;

            // Find all TEST-related records
            const testRecords = allRecords.filter(record => {
                const recordString = JSON.stringify(record).toLowerCase();
                return recordString.includes('test');
            });

            progressDiv.innerHTML += `<p style="color: orange;">🎯 تم العثور على ${testRecords.length} سجل يحتوي على "TEST"</p>`;

            // Delete each TEST record
            let deletedFromDb = 0;
            for (const record of testRecords) {
                try {
                    const { error: deleteError } = await supabaseClient
                        .from('properties')
                        .delete()
                        .eq('id', record.id);

                    if (!deleteError) {
                        deletedFromDb++;
                        progressDiv.innerHTML += `<p style="color: green;">✅ حذف السجل ${record.id}: ${record.unit_number || record.property_name || 'غير محدد'}</p>`;
                    } else {
                        progressDiv.innerHTML += `<p style="color: red;">❌ فشل حذف السجل ${record.id}: ${deleteError.message}</p>`;
                    }
                } catch (error) {
                    progressDiv.innerHTML += `<p style="color: red;">❌ خطأ في حذف السجل ${record.id}: ${error.message}</p>`;
                }
            }

            progressDiv.innerHTML += `<p style="color: blue;">📊 تم حذف ${deletedFromDb} من أصل ${testRecords.length} سجل من قاعدة البيانات</p>`;
        }

        // Step 2: Delete from local data
        progressDiv.innerHTML += '<p>🏠 تنظيف البيانات المحلية...</p>';

        const originalLength = properties.length;
        properties = properties.filter(property => {
            const propertyString = JSON.stringify(property).toLowerCase();
            const containsTest = propertyString.includes('test');

            if (containsTest) {
                progressDiv.innerHTML += `<p style="color: green;">✅ حذف محلي: ${property['رقم  الوحدة '] || property['اسم العقار'] || 'غير محدد'}</p>`;
            }

            return !containsTest;
        });

        const localDeleted = originalLength - properties.length;
        progressDiv.innerHTML += `<p style="color: blue;">📊 تم حذف ${localDeleted} وحدة من البيانات المحلية</p>`;

        // Step 3: Clean localStorage
        progressDiv.innerHTML += '<p>💾 تنظيف التخزين المحلي...</p>';
        saveDataLocally();

        // Step 4: Refresh interface
        progressDiv.innerHTML += '<p>🔄 تحديث الواجهة...</p>';
        renderData();

        // Step 5: Final verification
        progressDiv.innerHTML += '<p>🔍 التحقق النهائي...</p>';

        setTimeout(async () => {
            if (supabaseClient) {
                const { data: remainingRecords } = await supabaseClient
                    .from('properties')
                    .select('*');

                const remainingTestRecords = remainingRecords?.filter(record =>
                    JSON.stringify(record).toLowerCase().includes('test')
                ) || [];

                progressDiv.innerHTML += `<p style="color: ${remainingTestRecords.length === 0 ? 'green' : 'orange'};">🔍 سجلات TEST المتبقية في قاعدة البيانات: ${remainingTestRecords.length}</p>`;
            }

            const localTestRecords = properties.filter(property =>
                JSON.stringify(property).toLowerCase().includes('test')
            );

            progressDiv.innerHTML += `<p style="color: ${localTestRecords.length === 0 ? 'green' : 'orange'};">🔍 سجلات TEST المتبقية محلياً: ${localTestRecords.length}</p>`;

            progressDiv.innerHTML += `
                <div style="margin-top: 20px; padding: 15px; background: #e8f5e8; border-radius: 8px;">
                    <h4 style="color: #27ae60;">💥 اكتمل الحذف الشامل!</h4>
                    <p style="color: #27ae60; font-weight: bold;">تم تنظيف جميع وحدات TEST من النظام</p>
                    <button onclick="location.reload()" style="background: #27ae60; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; margin-top: 10px;">
                        إعادة تحميل الصفحة للتأكد
                    </button>
                </div>
            `;

            showToast('تم الحذف الشامل لجميع وحدات TEST بنجاح!', 'success');
        }, 2000);

    } catch (error) {
        console.error('❌ خطأ في الحذف الشامل:', error);
        progressDiv.innerHTML += `<p style="color: red;">❌ خطأ خطير: ${error.message}</p>`;
        showToast('فشل في الحذف الشامل', 'error');
    }
}

// ===== Advanced Delete with Foreign Key Handling =====
async function advancedDeleteWithForeignKeys() {
    if (!confirm('⚠️ حذف متقدم: سيتم حذف الوحدات مع جميع السجلات المرتبطة!\n\nسيتم حذف:\n- الوحدات من جدول properties\n- السجلات من جدول activity_log\n- أي مرفقات مرتبطة\n\nهل أنت متأكد؟')) {
        return;
    }

    console.log('🔧 بدء الحذف المتقدم مع معالجة Foreign Keys...');

    const progressModal = document.createElement('div');
    progressModal.className = 'modal-overlay';
    progressModal.style.display = 'flex';
    progressModal.innerHTML = `
        <div class="modal-box" style="text-align: center; padding: 40px; max-width: 800px;">
            <i class="fas fa-cogs fa-spin" style="font-size: 2rem; color: #3498db; margin-bottom: 20px;"></i>
            <h3 style="color: #3498db;">الحذف المتقدم مع معالجة الروابط</h3>
            <div id="advanced-progress" style="text-align: left; background: #f5f5f5; padding: 15px; border-radius: 8px; margin: 20px 0; font-family: monospace; max-height: 500px; overflow-y: auto;">
                <p>🔧 بدء الحذف المتقدم...</p>
            </div>
        </div>
    `;
    document.body.appendChild(progressModal);

    const progressDiv = progressModal.querySelector('#advanced-progress');

    try {
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        // Step 1: Find all TEST records
        progressDiv.innerHTML += '<p>🔍 البحث عن جميع سجلات TEST...</p>';

        const { data: allRecords, error: fetchError } = await supabaseClient
            .from('properties')
            .select('*');

        if (fetchError) {
            throw new Error(`خطأ في جلب البيانات: ${fetchError.message}`);
        }

        const testRecords = allRecords.filter(record => {
            const recordString = JSON.stringify(record).toLowerCase();
            return recordString.includes('test');
        });

        progressDiv.innerHTML += `<p style="color: orange;">🎯 تم العثور على ${testRecords.length} سجل TEST</p>`;

        // Step 2: Delete related activity_log records first
        progressDiv.innerHTML += '<p>🗂️ حذف السجلات المرتبطة من activity_log...</p>';

        let deletedActivityLogs = 0;
        for (const record of testRecords) {
            try {
                const { data: activityLogs, error: activityError } = await supabaseClient
                    .from('activity_log')
                    .select('id')
                    .eq('property_id', record.id);

                if (!activityError && activityLogs && activityLogs.length > 0) {
                    progressDiv.innerHTML += `<p>📋 وجد ${activityLogs.length} سجل نشاط للوحدة ${record.id}</p>`;

                    const { error: deleteActivityError } = await supabaseClient
                        .from('activity_log')
                        .delete()
                        .eq('property_id', record.id);

                    if (!deleteActivityError) {
                        deletedActivityLogs += activityLogs.length;
                        progressDiv.innerHTML += `<p style="color: green;">✅ تم حذف ${activityLogs.length} سجل نشاط للوحدة ${record.id}</p>`;
                    } else {
                        progressDiv.innerHTML += `<p style="color: red;">❌ فشل حذف سجلات النشاط للوحدة ${record.id}: ${deleteActivityError.message}</p>`;
                    }
                }
            } catch (error) {
                progressDiv.innerHTML += `<p style="color: red;">❌ خطأ في معالجة سجلات النشاط للوحدة ${record.id}: ${error.message}</p>`;
            }
        }

        progressDiv.innerHTML += `<p style="color: blue;">📊 تم حذف ${deletedActivityLogs} سجل نشاط إجمالي</p>`;

        // Step 3: Delete related attachments
        progressDiv.innerHTML += '<p>📎 حذف المرفقات المرتبطة...</p>';

        let deletedAttachments = 0;
        for (const record of testRecords) {
            try {
                const { data: attachments, error: attachmentError } = await supabaseClient
                    .from('attachments')
                    .select('id')
                    .eq('property_id', record.id);

                if (!attachmentError && attachments && attachments.length > 0) {
                    progressDiv.innerHTML += `<p>📎 وجد ${attachments.length} مرفق للوحدة ${record.id}</p>`;

                    const { error: deleteAttachmentError } = await supabaseClient
                        .from('attachments')
                        .delete()
                        .eq('property_id', record.id);

                    if (!deleteAttachmentError) {
                        deletedAttachments += attachments.length;
                        progressDiv.innerHTML += `<p style="color: green;">✅ تم حذف ${attachments.length} مرفق للوحدة ${record.id}</p>`;
                    } else {
                        progressDiv.innerHTML += `<p style="color: red;">❌ فشل حذف المرفقات للوحدة ${record.id}: ${deleteAttachmentError.message}</p>`;
                    }
                }
            } catch (error) {
                progressDiv.innerHTML += `<p style="color: orange;">⚠️ تخطي المرفقات للوحدة ${record.id}: ${error.message}</p>`;
            }
        }

        progressDiv.innerHTML += `<p style="color: blue;">📊 تم حذف ${deletedAttachments} مرفق إجمالي</p>`;

        // Step 4: Now delete the main property records
        progressDiv.innerHTML += '<p>🏠 حذف سجلات الوحدات الرئيسية...</p>';

        let deletedProperties = 0;
        for (const record of testRecords) {
            try {
                const { error: deleteError } = await supabaseClient
                    .from('properties')
                    .delete()
                    .eq('id', record.id);

                if (!deleteError) {
                    deletedProperties++;
                    progressDiv.innerHTML += `<p style="color: green;">✅ تم حذف الوحدة ${record.unit_number || record.property_name || record.id}</p>`;
                } else {
                    progressDiv.innerHTML += `<p style="color: red;">❌ فشل حذف الوحدة ${record.id}: ${deleteError.message}</p>`;
                }
            } catch (error) {
                progressDiv.innerHTML += `<p style="color: red;">❌ خطأ في حذف الوحدة ${record.id}: ${error.message}</p>`;
            }
        }

        progressDiv.innerHTML += `<p style="color: blue;">📊 تم حذف ${deletedProperties} من أصل ${testRecords.length} وحدة من قاعدة البيانات</p>`;

        // Step 5: Clean local data
        progressDiv.innerHTML += '<p>🏠 تنظيف البيانات المحلية...</p>';

        const originalLength = properties.length;
        properties = properties.filter(property => {
            const propertyString = JSON.stringify(property).toLowerCase();
            const containsTest = propertyString.includes('test');

            if (containsTest) {
                progressDiv.innerHTML += `<p style="color: green;">✅ حذف محلي: ${property['رقم  الوحدة '] || property['اسم العقار'] || 'غير محدد'}</p>`;
            }

            return !containsTest;
        });

        const localDeleted = originalLength - properties.length;
        progressDiv.innerHTML += `<p style="color: blue;">📊 تم حذف ${localDeleted} وحدة من البيانات المحلية</p>`;

        // Step 6: Save and refresh
        saveDataLocally();
        renderData();

        // Step 7: Final verification
        progressDiv.innerHTML += '<p>🔍 التحقق النهائي...</p>';

        setTimeout(async () => {
            const { data: remainingRecords } = await supabaseClient
                .from('properties')
                .select('*');

            const remainingTestRecords = remainingRecords?.filter(record =>
                JSON.stringify(record).toLowerCase().includes('test')
            ) || [];

            progressDiv.innerHTML += `<p style="color: ${remainingTestRecords.length === 0 ? 'green' : 'orange'};">🔍 سجلات TEST المتبقية في قاعدة البيانات: ${remainingTestRecords.length}</p>`;

            const localTestRecords = properties.filter(property =>
                JSON.stringify(property).toLowerCase().includes('test')
            );

            progressDiv.innerHTML += `<p style="color: ${localTestRecords.length === 0 ? 'green' : 'orange'};">🔍 سجلات TEST المتبقية محلياً: ${localTestRecords.length}</p>`;

            progressDiv.innerHTML += `
                <div style="margin-top: 20px; padding: 15px; background: #e8f5e8; border-radius: 8px;">
                    <h4 style="color: #27ae60;">🎉 اكتمل الحذف المتقدم!</h4>
                    <ul style="text-align: right; color: #27ae60;">
                        <li>سجلات النشاط المحذوفة: ${deletedActivityLogs}</li>
                        <li>المرفقات المحذوفة: ${deletedAttachments}</li>
                        <li>الوحدات المحذوفة من قاعدة البيانات: ${deletedProperties}</li>
                        <li>الوحدات المحذوفة محلياً: ${localDeleted}</li>
                    </ul>
                    <button onclick="location.reload()" style="background: #27ae60; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; margin-top: 10px;">
                        إعادة تحميل الصفحة للتأكد النهائي
                    </button>
                </div>
            `;

            if (remainingTestRecords.length === 0) {
                showToast('تم حذف جميع وحدات TEST نهائياً!', 'success');
            } else {
                showToast(`تم حذف معظم الوحدات - ${remainingTestRecords.length} وحدة متبقية`, 'warning');
            }
        }, 2000);

    } catch (error) {
        console.error('❌ خطأ في الحذف المتقدم:', error);
        progressDiv.innerHTML += `<p style="color: red;">❌ خطأ خطير: ${error.message}</p>`;
        showToast('فشل في الحذف المتقدم', 'error');
    }
}

// ===== Universal Advanced Delete Function =====
async function universalAdvancedDelete(propertyData, showProgress = false) {
    console.log('🔧 Starting universal advanced delete...');

    if (!supabaseClient) {
        console.warn('⚠️ Supabase not available for advanced delete');
        return { success: false, reason: 'NO_CLIENT' };
    }

    try {
        let progressCallback = null;

        if (showProgress) {
            progressCallback = (message, type = 'info') => {
                console.log(`📋 ${message}`);
                showToast(message, type);
            };
        }

        // Step 1: Find the property in database
        if (progressCallback) progressCallback('البحث عن الوحدة في قاعدة البيانات...');

        const unitNumber = propertyData['رقم  الوحدة '];
        const propertyName = propertyData['اسم العقار'];

        console.log('🔍 البحث عن:', { unitNumber, propertyName });

        const { data: foundProperties, error: searchError } = await supabaseClient
            .from('properties')
            .select('*')
            .eq('unit_number', unitNumber)
            .eq('property_name', propertyName);

        if (searchError) {
            console.error('❌ Search error:', searchError);
            return { success: false, reason: 'SEARCH_ERROR', error: searchError.message };
        }

        if (!foundProperties || foundProperties.length === 0) {
            console.log('ℹ️ Property not found in database - trying alternative search...');

            // محاولة بحث بديلة باستخدام LIKE
            const { data: altFoundProperties, error: altSearchError } = await supabaseClient
                .from('properties')
                .select('*')
                .or(`unit_number.ilike.%${unitNumber}%,property_name.ilike.%${propertyName}%`);

            if (altSearchError || !altFoundProperties || altFoundProperties.length === 0) {
                console.log('ℹ️ Property not found in database with alternative search');
                return { success: false, reason: 'NOT_FOUND' };
            }

            foundProperties = altFoundProperties;
            console.log(`🔍 تم العثور على ${foundProperties.length} نتيجة بالبحث البديل`);
        }

        const property = foundProperties[0];
        if (progressCallback) progressCallback(`تم العثور على الوحدة: ${property.id}`);

        // Step 2: Delete related activity logs
        if (progressCallback) progressCallback('حذف سجلات النشاط المرتبطة...');

        const { data: activityLogs, error: activityError } = await supabaseClient
            .from('activity_log')
            .select('id')
            .eq('property_id', property.id);

        if (!activityError && activityLogs && activityLogs.length > 0) {
            const { error: deleteActivityError } = await supabaseClient
                .from('activity_log')
                .delete()
                .eq('property_id', property.id);

            if (!deleteActivityError) {
                if (progressCallback) progressCallback(`تم حذف ${activityLogs.length} سجل نشاط`);
            } else {
                console.warn('⚠️ Failed to delete activity logs:', deleteActivityError);
            }
        }

        // Step 3: Delete related attachments
        if (progressCallback) progressCallback('حذف المرفقات المرتبطة...');

        try {
            // البحث عن المرفقات بطرق متعددة
            let attachments = [];

            // البحث بـ property_id
            const { data: attachmentsByPropertyId, error: attachmentError1 } = await supabaseClient
                .from('attachments')
                .select('id, storage_path')
                .eq('property_id', property.id);

            if (!attachmentError1 && attachmentsByPropertyId) {
                attachments = [...attachments, ...attachmentsByPropertyId];
            }

            // البحث بـ property_key
            const propertyKey = `${propertyName}_${unitNumber}`;
            const { data: attachmentsByKey, error: attachmentError2 } = await supabaseClient
                .from('attachments')
                .select('id, storage_path')
                .eq('property_key', propertyKey);

            if (!attachmentError2 && attachmentsByKey) {
                attachments = [...attachments, ...attachmentsByKey];
            }

            // إزالة المكررات
            const uniqueAttachments = attachments.filter((attachment, index, self) =>
                index === self.findIndex(a => a.id === attachment.id)
            );

            if (uniqueAttachments.length > 0) {
                // حذف الملفات من التخزين أولاً
                for (const attachment of uniqueAttachments) {
                    if (attachment.storage_path) {
                        try {
                            await supabaseClient.storage
                                .from('attachments')
                                .remove([attachment.storage_path]);
                        } catch (storageError) {
                            console.warn('⚠️ Failed to delete file from storage:', storageError);
                        }
                    }
                }

                // حذف السجلات من قاعدة البيانات
                const attachmentIds = uniqueAttachments.map(a => a.id);
                const { error: deleteAttachmentError } = await supabaseClient
                    .from('attachments')
                    .delete()
                    .in('id', attachmentIds);

                if (!deleteAttachmentError) {
                    if (progressCallback) progressCallback(`تم حذف ${uniqueAttachments.length} مرفق`);
                } else {
                    console.warn('⚠️ Failed to delete attachments:', deleteAttachmentError);
                }
            }
        } catch (attachmentError) {
            console.warn('⚠️ Error handling attachments:', attachmentError);
        }

        // Step 4: Delete the main property record
        if (progressCallback) progressCallback('حذف سجل الوحدة الرئيسي...');

        const { error: deleteError } = await supabaseClient
            .from('properties')
            .delete()
            .eq('id', property.id);

        if (deleteError) {
            console.error('❌ Failed to delete property:', deleteError);
            return {
                success: false,
                reason: 'DELETE_ERROR',
                error: deleteError.message,
                propertyId: property.id
            };
        }

        if (progressCallback) progressCallback('تم حذف الوحدة نهائياً من قاعدة البيانات', 'success');

        return {
            success: true,
            deletedCount: 1,
            propertyId: property.id,
            message: 'Property and all related data deleted successfully'
        };

    } catch (error) {
        console.error('❌ Critical error in universal advanced delete:', error);
        return {
            success: false,
            reason: 'CRITICAL_ERROR',
            error: error.message
        };
    }
}

// ===== Enhanced Delete Unit Function =====
async function enhancedDeleteUnit(unitData) {
    console.log('🗑️ Starting enhanced unit deletion...');

    // Show progress to user
    showToast('جاري حذف الوحدة مع جميع البيانات المرتبطة...', 'info');

    try {
        // Use universal advanced delete
        const result = await universalAdvancedDelete(unitData, true);

        if (result.success) {
            // Remove from local data
            const originalLength = properties.length;
            properties = properties.filter(p =>
                !(p['رقم  الوحدة '] === unitData['رقم  الوحدة '] &&
                  p['اسم العقار'] === unitData['اسم العقار'])
            );

            const localDeleted = originalLength - properties.length;

            if (localDeleted > 0) {
                // حذف المرفقات المحلية أيضاً
                const propertyKey = `${unitData['اسم العقار']}_${unitData['رقم  الوحدة ']}`;

                // حذف مرفقات العقارات
                const propertyAttachments = JSON.parse(localStorage.getItem('propertyAttachments') || '{}');
                if (propertyAttachments[propertyKey]) {
                    delete propertyAttachments[propertyKey];
                    localStorage.setItem('propertyAttachments', JSON.stringify(propertyAttachments));
                    console.log('✅ تم حذف مرفقات العقار المحلية');
                }

                // حذف مرفقات البطاقات
                const cardAttachments = JSON.parse(localStorage.getItem('cardAttachments') || '{}');
                if (cardAttachments[propertyKey]) {
                    delete cardAttachments[propertyKey];
                    localStorage.setItem('cardAttachments', JSON.stringify(cardAttachments));
                    console.log('✅ تم حذف مرفقات البطاقة المحلية');
                }

                saveDataLocally();
                renderData();
                showToast('تم حذف الوحدة نهائياً من النظام', 'success');
            }

            return { success: true, localDeleted, cloudDeleted: 1 };
        } else {
            // Handle failure
            let message = 'فشل في حذف الوحدة من قاعدة البيانات';

            if (result.reason === 'NOT_FOUND') {
                message = 'الوحدة غير موجودة في قاعدة البيانات - سيتم الحذف محلياً فقط';

                // Still delete locally
                const originalLength = properties.length;
                properties = properties.filter(p =>
                    !(p['رقم  الوحدة '] === unitData['رقم  الوحدة '] &&
                      p['اسم العقار'] === unitData['اسم العقار'])
                );

                const localDeleted = originalLength - properties.length;

                if (localDeleted > 0) {
                    saveDataLocally();
                    renderData();
                }

                showToast(message, 'warning');
                return { success: true, localDeleted, cloudDeleted: 0 };
            }

            showToast(message, 'error');
            return { success: false, error: result.error };
        }

    } catch (error) {
        console.error('❌ Error in enhanced delete unit:', error);
        showToast('خطأ في حذف الوحدة', 'error');
        return { success: false, error: error.message };
    }
}

// ===== Show Deed Information for Selected Property in Mobile =====
function showDeedInfoForProperty(propertyName, city) {
    console.log(`📋 عرض معلومات الصك للعقار: ${propertyName} في ${city}`);

    // البحث عن العقار المحدد
    const relatedProperties = properties.filter(p =>
        p['اسم العقار'] === propertyName && p['المدينة'] === city
    );

    if (relatedProperties.length === 0) {
        console.warn('⚠️ لم يتم العثور على العقار المحدد');
        return;
    }

    // الحصول على معلومات الصك من أول وحدة تحتوي على البيانات
    const propertyWithDeed = relatedProperties.find(p =>
        p['رقم الصك'] || p['مساحةالصك'] || p['السجل العيني ']
    );

    if (!propertyWithDeed) {
        console.log('ℹ️ لا توجد معلومات صك لهذا العقار');
        return;
    }

    // إنشاء نافذة معلومات الصك
    const deedModal = document.createElement('div');
    deedModal.className = 'modal-overlay';
    deedModal.style.display = 'flex';
    deedModal.innerHTML = `
        <div class="modal-box deed-info-modal" style="max-width: ${isMobileDevice() ? '95vw' : '600px'}; padding: 30px;">
            <div class="deed-header" style="text-align: center; margin-bottom: 25px;">
                <i class="fas fa-file-contract" style="font-size: 3rem; color: #007bff; margin-bottom: 15px;"></i>
                <h2 style="color: #2c3e50; margin: 0;">معلومات الصك</h2>
                <p style="color: #6c757d; margin: 10px 0 0 0;">${propertyName} - ${city}</p>
            </div>

            <div class="deed-details" style="background: #f8f9fa; border-radius: 12px; padding: 20px;">
                ${propertyWithDeed['رقم الصك'] ? `
                <div class="deed-item" style="display: flex; align-items: center; margin-bottom: 15px; padding: 15px; background: white; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                    <div class="deed-icon" style="margin-left: 15px;">
                        <i class="fas fa-file-alt" style="font-size: 1.5rem; color: #dc3545;"></i>
                    </div>
                    <div class="deed-content" style="flex: 1;">
                        <div class="deed-label" style="font-weight: 600; color: #495057; margin-bottom: 5px;">رقم الصك</div>
                        <div class="deed-value" style="font-size: 1.1rem; color: #2c3e50;">${propertyWithDeed['رقم الصك']}</div>
                    </div>
                </div>
                ` : ''}

                ${propertyWithDeed['السجل العيني '] ? `
                <div class="deed-item" style="display: flex; align-items: center; margin-bottom: 15px; padding: 15px; background: white; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                    <div class="deed-icon" style="margin-left: 15px;">
                        <i class="fas fa-clipboard-list" style="font-size: 1.5rem; color: #28a745;"></i>
                    </div>
                    <div class="deed-content" style="flex: 1;">
                        <div class="deed-label" style="font-weight: 600; color: #495057; margin-bottom: 5px;">رقم السجل العقاري</div>
                        <div class="deed-value" style="font-size: 1.1rem; color: #2c3e50;">${propertyWithDeed['السجل العيني ']}</div>
                    </div>
                </div>
                ` : ''}

                ${propertyWithDeed['مساحةالصك'] ? `
                <div class="deed-item" style="display: flex; align-items: center; margin-bottom: 15px; padding: 15px; background: white; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                    <div class="deed-icon" style="margin-left: 15px;">
                        <i class="fas fa-ruler-combined" style="font-size: 1.5rem; color: #fd7e14;"></i>
                    </div>
                    <div class="deed-content" style="flex: 1;">
                        <div class="deed-label" style="font-weight: 600; color: #495057; margin-bottom: 5px;">مساحة الصك</div>
                        <div class="deed-value" style="font-size: 1.1rem; color: #2c3e50;">${parseFloat(propertyWithDeed['مساحةالصك']).toLocaleString()} م²</div>
                    </div>
                </div>
                ` : ''}
            </div>

            <div class="deed-actions" style="text-align: center; margin-top: 25px;">
                <button onclick="this.parentElement.parentElement.parentElement.remove()"
                        class="btn-primary"
                        style="padding: 12px 30px; font-size: 1.1rem; border-radius: 8px; background: linear-gradient(135deg, #007bff, #0056b3); border: none; color: white; cursor: pointer; transition: all 0.3s ease;">
                    <i class="fas fa-times"></i> إغلاق
                </button>
            </div>
        </div>
    `;

    document.body.appendChild(deedModal);

    // إضافة تأثير الإغلاق عند النقر خارج النافذة
    deedModal.addEventListener('click', function(e) {
        if (e.target === this) {
            this.remove();
        }
    });

    console.log('✅ تم عرض نافذة معلومات الصك');
}

// ===== Mobile Device Detection =====
function isMobileDevice() {
    // Check multiple indicators for mobile devices
    const userAgent = navigator.userAgent || (navigator.vendor || '') || (window.opera || '');

    // Check for mobile user agents
    const mobileRegex = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i;
    const isMobileUA = mobileRegex.test(userAgent.toLowerCase());

    // Check screen size
    const isSmallScreen = window.innerWidth <= 768;

    // Check touch capability
    const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;

    // Return true if any mobile indicator is present
    return isMobileUA || (isSmallScreen && isTouchDevice);
}

// ===== Enhanced Attachment Display for Mobile =====
function enhanceAttachmentDisplayForMobile() {
    console.log('📱 بدء تحسين عرض المرفقات للجوال...');

    // Force show all attachment elements with enhanced selectors
    const attachmentElements = document.querySelectorAll(`
        .attachments-list,
        .attachments-list-container,
        .card-attachments-list,
        .attachment-item,
        .mobile-enhanced-item,
        .desktop-enhanced-item,
        [id*="cardAttachmentsList"],
        [id*="attachmentsList"],
        [class*="attachment"],
        [class*="card-modal"]
    `);

    let enhancedCount = 0;

    attachmentElements.forEach(element => {
        // Force visibility
        element.style.display = element.classList.contains('attachment-item') ||
                                element.classList.contains('mobile-enhanced-item') ||
                                element.classList.contains('desktop-enhanced-item') ? 'flex' : 'block';
        element.style.visibility = 'visible';
        element.style.opacity = '1';
        element.style.position = 'relative';
        element.style.zIndex = 'auto';

        // Add mobile-specific classes and styles
        if (isMobileDevice()) {
            element.classList.add('mobile-optimized');

            // Enhanced mobile styles for attachment items
            if (element.classList.contains('attachment-item') ||
                element.classList.contains('mobile-enhanced-item')) {
                element.style.padding = '15px 10px';
                element.style.marginBottom = '10px';
                element.style.borderRadius = '8px';
                element.style.background = '#f8f9fa';
                element.style.border = '1px solid #e9ecef';
                element.style.transition = 'all 0.3s ease';
            }

            // Enhanced mobile styles for containers
            if (element.classList.contains('attachments-list-container')) {
                element.style.minHeight = '200px';
                element.style.maxHeight = '60vh';
                element.style.overflowY = 'auto';
                element.style.padding = '10px';
            }
        }

        enhancedCount++;
    });

    // Ensure attachment items use proper flex layout
    const attachmentItems = document.querySelectorAll('.attachment-item, .mobile-enhanced-item, .desktop-enhanced-item');
    attachmentItems.forEach(item => {
        item.style.display = 'flex';
        item.style.alignItems = 'center';
        item.style.visibility = 'visible';
        item.style.opacity = '1';
        item.style.position = 'relative';

        // Enhanced mobile layout
        if (isMobileDevice()) {
            item.style.flexDirection = 'row';
            item.style.gap = '10px';
            item.style.padding = '15px 10px';
        }
    });

    // Force show loading and error states
    const loadingElements = document.querySelectorAll('.loading-attachments, .loading-state, .error-loading-attachments');
    loadingElements.forEach(element => {
        element.style.display = 'flex';
        element.style.visibility = 'visible';
        element.style.opacity = '1';
    });

    // Enhanced mobile modal adjustments
    if (isMobileDevice()) {
        const cardModal = document.querySelector('.card-attachments-modal');
        if (cardModal) {
            cardModal.style.width = '95vw';
            cardModal.style.height = '90vh';
            cardModal.style.maxWidth = '95vw';
            cardModal.style.maxHeight = '90vh';
        }

        const modalContent = document.querySelector('.card-modal-content');
        if (modalContent) {
            modalContent.style.flexDirection = 'column';
            modalContent.style.gap = '15px';
            modalContent.style.padding = '15px';
        }
    }

    // Add enhanced CSS for mobile compatibility
    const enhancedStyle = document.createElement('style');
    enhancedStyle.id = 'mobile-attachment-enhancement';
    enhancedStyle.textContent = `
        /* Force visibility for all attachment elements */
        .attachments-list,
        .attachments-list-container,
        .card-attachments-list,
        .attachment-item,
        .mobile-enhanced-item,
        .desktop-enhanced-item,
        [id*="cardAttachmentsList"],
        [id*="attachmentsList"] {
            display: block !important;
            visibility: visible !important;
            opacity: 1 !important;
            position: relative !important;
        }

        .attachment-item,
        .mobile-enhanced-item,
        .desktop-enhanced-item {
            display: flex !important;
            align-items: center !important;
        }

        /* Mobile-specific enhancements */
        @media (max-width: 768px) {
            .mobile-enhanced-item {
                padding: 15px 10px !important;
                margin-bottom: 10px !important;
                background: #f8f9fa !important;
                border: 1px solid #e9ecef !important;
                border-radius: 8px !important;
                transition: all 0.3s ease !important;
            }

            .mobile-enhanced-item:hover {
                background: #e3f2fd !important;
                border-color: #007bff !important;
                transform: translateY(-1px) !important;
                box-shadow: 0 2px 8px rgba(0, 123, 255, 0.15) !important;
            }

            .attachments-list-container {
                min-height: 200px !important;
                max-height: 60vh !important;
                overflow-y: auto !important;
                padding: 10px !important;
            }

            .card-attachments-modal {
                width: 95vw !important;
                height: 90vh !important;
                max-width: 95vw !important;
                max-height: 90vh !important;
            }

            .card-modal-content {
                flex-direction: column !important;
                gap: 15px !important;
                padding: 15px !important;
            }
        }
    `;

    // Remove existing style if present
    const existingStyle = document.getElementById('mobile-attachment-enhancement');
    if (existingStyle) {
        existingStyle.remove();
    }

    document.head.appendChild(enhancedStyle);

    console.log(`📱 تم تحسين عرض ${enhancedCount} عنصر مرفقات للجوال`);
    console.log(`📱 تم تحسين ${attachmentItems.length} عنصر مرفق فردي`);

    // Force a repaint to ensure changes are applied
    setTimeout(() => {
        const allElements = document.querySelectorAll('[id*="cardAttachmentsList"], .attachment-item');
        allElements.forEach(el => {
            el.style.transform = 'translateZ(0)';
            setTimeout(() => {
                el.style.transform = '';
            }, 10);
        });
    }, 100);
}

// ===== Setup Attachments Scroll with Back to Top Button =====
function setupAttachmentsScroll(cardKey) {
    console.log('📜 إعداد اسكرول المرفقات مع زر العودة للأعلى...');

    const attachmentsList = document.getElementById(`cardAttachmentsList_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
    const scrollToTopBtn = document.getElementById(`scrollToTopBtn_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}`);

    if (!attachmentsList || !scrollToTopBtn) {
        console.warn('⚠️ لم يتم العثور على عناصر الاسكرول');
        return;
    }

    // إضافة حدث الاسكرول لإظهار/إخفاء زر العودة للأعلى
    attachmentsList.addEventListener('scroll', function() {
        const scrollTop = this.scrollTop;
        const scrollThreshold = 100; // إظهار الزر بعد التمرير 100px

        if (scrollTop > scrollThreshold) {
            scrollToTopBtn.classList.add('show');
        } else {
            scrollToTopBtn.classList.remove('show');
        }
    });

    // تحسين الاسكرول للجوال
    if (isMobileDevice()) {
        attachmentsList.style.webkitOverflowScrolling = 'touch';
        attachmentsList.style.scrollBehavior = 'smooth';
    }

    console.log('✅ تم إعداد اسكرول المرفقات بنجاح');
}

// ===== Scroll to Top Function for Attachments =====
function scrollToTopAttachments(cardKey) {
    console.log('⬆️ العودة لأعلى قائمة المرفقات...');

    const attachmentsList = document.getElementById(`cardAttachmentsList_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}`);

    if (attachmentsList) {
        // اسكرول سلس للأعلى
        attachmentsList.scrollTo({
            top: 0,
            behavior: 'smooth'
        });

        // تأثير بصري للزر
        const scrollToTopBtn = document.getElementById(`scrollToTopBtn_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
        if (scrollToTopBtn) {
            scrollToTopBtn.style.transform = 'scale(0.9)';
            setTimeout(() => {
                scrollToTopBtn.style.transform = 'scale(1)';
            }, 150);
        }

        console.log('✅ تم التمرير لأعلى قائمة المرفقات');
    } else {
        console.warn('⚠️ لم يتم العثور على قائمة المرفقات');
    }
}

// ===== Enhanced Scroll to Attachments (for large screens) =====
function scrollToAttachments() {
    console.log('📜 التمرير لقسم المرفقات...');

    // البحث عن قسم المرفقات في النافذة
    const attachmentsSection = document.querySelector('.attachments-main-section');
    const attachmentsList = document.querySelector('.scrollable-attachments');

    if (attachmentsSection) {
        // التمرير لقسم المرفقات
        attachmentsSection.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
        });

        console.log('✅ تم التمرير لقسم المرفقات');
    } else if (attachmentsList) {
        // التمرير لقائمة المرفقات كبديل
        attachmentsList.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
        });

        console.log('✅ تم التمرير لقائمة المرفقات');
    } else {
        console.warn('⚠️ لم يتم العثور على قسم المرفقات');
    }
}

// تحميل الوحدات للدمج
function loadUnitsForMerge() {
    const propertyName = document.getElementById('mergePropertyName').value;
    const container = document.getElementById('availableUnitsForMerge');

    if (!propertyName) {
        container.innerHTML = '<p>يرجى اختيار العقار أولاً</p>';
        return;
    }

    // الحصول على الوحدات الفارغة أو غير المرتبطة بعقد
    const availableUnits = properties.filter(p =>
        p['اسم العقار'] === propertyName &&
        (!p['رقم العقد'] || !p['اسم المستأجر'])
    );

    if (availableUnits.length === 0) {
        container.innerHTML = '<p>لا توجد وحدات متاحة للدمج في هذا العقار</p>';
        return;
    }

    container.innerHTML = availableUnits.map(unit => `
        <label class="unit-checkbox">
            <input type="checkbox" value="${unit['رقم  الوحدة ']}" name="mergeUnits">
            <span>${unit['رقم  الوحدة ']} - ${unit['المساحة'] ? unit['المساحة'] + ' م²' : 'غير محدد'}</span>
        </label>
    `).join('');
}

// دمج الوحدات المحددة
function mergeSelectedUnits() {
    const propertyName = document.getElementById('mergePropertyName').value;
    const contractNumber = document.getElementById('mergeContractNumber').value.trim();
    const selectedUnits = Array.from(document.querySelectorAll('input[name="mergeUnits"]:checked'))
        .map(checkbox => checkbox.value);

    if (!propertyName || !contractNumber) {
        alert('يرجى اختيار العقار وإدخال رقم العقد');
        return;
    }

    if (selectedUnits.length < 2) {
        alert('يرجى اختيار وحدتين على الأقل للدمج');
        return;
    }

    // التحقق من عدم وجود عقد بنفس الرقم
    const existingContract = properties.find(p => p['رقم العقد'] === contractNumber);
    if (existingContract) {
        alert('يوجد عقد بنفس الرقم بالفعل');
        return;
    }

    console.log('🔄 بدء عملية دمج الوحدات...');
    console.log(`📋 الوحدات المحددة للدمج: ${selectedUnits.join(', ')}`);
    console.log(`📄 رقم العقد الجديد: ${contractNumber}`);

    // تحديث الوحدات المحددة برقم العقد الجديد
    let mergedCount = 0;
    selectedUnits.forEach(unitNumber => {
        const unit = properties.find(p =>
            p['اسم العقار'] === propertyName && p['رقم  الوحدة '] === unitNumber
        );
        if (unit) {
            console.log(`🔗 دمج الوحدة ${unitNumber} تحت العقد ${contractNumber}`);
            unit['رقم العقد'] = contractNumber;
            mergedCount++;
        } else {
            console.warn(`⚠️ لم يتم العثور على الوحدة ${unitNumber}`);
        }
    });

    if (mergedCount === 0) {
        alert('فشل في دمج الوحدات - لم يتم العثور على أي وحدة');
        return;
    }

    // حفظ البيانات في localStorage
    console.log('💾 حفظ البيانات بعد الدمج...');
    try {
        localStorage.setItem('properties', JSON.stringify(properties));
        console.log('✅ تم حفظ البيانات محلياً بنجاح');
    } catch (error) {
        console.error('❌ خطأ في حفظ البيانات محلياً:', error);
        alert('تم الدمج ولكن فشل في الحفظ المحلي');
    }

    // حفظ في Supabase إذا كان متوفراً
    if (typeof supabaseClient !== 'undefined' && supabaseClient) {
        console.log('☁️ حفظ البيانات في Supabase...');
        try {
            selectedUnits.forEach(async (unitNumber) => {
                const unit = properties.find(p =>
                    p['اسم العقار'] === propertyName && p['رقم  الوحدة '] === unitNumber
                );
                if (unit && typeof savePropertyToSupabase === 'function') {
                    await savePropertyToSupabase(unit);
                }
            });
            console.log('✅ تم حفظ البيانات في Supabase');
        } catch (error) {
            console.error('❌ خطأ في حفظ البيانات في Supabase:', error);
        }
    }

    alert(`تم دمج ${mergedCount} وحدات تحت العقد رقم ${contractNumber} بنجاح!`);

    // تنظيف النموذج
    document.getElementById('mergePropertyName').value = '';
    document.getElementById('mergeContractNumber').value = '';
    document.getElementById('availableUnitsForMerge').innerHTML = '';

    // تحديث العرض
    const mergedDisplay = document.getElementById('mergedUnitsDisplay');
    if (mergedDisplay) {
        mergedDisplay.innerHTML = renderMergedUnits();
    }

    // إعادة تحميل البيانات لضمان التحديث
    setTimeout(() => {
        renderData();
        initializeApp();
    }, 500);

    console.log('🎉 تمت عملية الدمج بنجاح');
}

// ===== وظائف فصل وتحرير الوحدات المدموجة =====

// فصل الوحدات المدموجة
async function splitMergedContract(contractNumber, propertyName) {
    console.log(`🔓 بدء فصل الوحدات للعقد ${contractNumber} في العقار ${propertyName}`);

    // التأكد من رغبة المستخدم في الفصل
    if (!confirm(`هل أنت متأكد من فصل جميع الوحدات في العقد رقم ${contractNumber}؟\nسيتم إزالة رقم العقد من جميع الوحدات المرتبطة به.`)) {
        return;
    }

    // البحث عن جميع الوحدات المرتبطة بهذا العقد
    const contractUnits = properties.filter(p =>
        p['رقم العقد'] === contractNumber &&
        p['اسم العقار'] === propertyName
    );

    if (contractUnits.length === 0) {
        alert('لم يتم العثور على وحدات مرتبطة بهذا العقد');
        return;
    }

    console.log(`📋 تم العثور على ${contractUnits.length} وحدة مرتبطة بالعقد`);

    // إزالة رقم العقد من جميع الوحدات
    let splitCount = 0;
    contractUnits.forEach(unit => {
        console.log(`🔓 فصل الوحدة ${unit['رقم  الوحدة ']} من العقد ${contractNumber}`);
        unit['رقم العقد'] = ''; // إزالة رقم العقد
        splitCount++;
    });

    // حفظ البيانات في localStorage
    console.log('💾 حفظ البيانات بعد الفصل...');
    try {
        localStorage.setItem('properties', JSON.stringify(properties));
        console.log('✅ تم حفظ البيانات محلياً بنجاح');
    } catch (error) {
        console.error('❌ خطأ في حفظ البيانات محلياً:', error);
        alert('تم الفصل ولكن فشل في الحفظ المحلي');
    }

    // حفظ في Supabase إذا كان متوفراً
    if (typeof supabaseClient !== 'undefined' && supabaseClient && typeof savePropertyToSupabase === 'function') {
        console.log('☁️ حفظ البيانات في Supabase...');
        let supabaseErrors = 0;

        try {
            // استخدام Promise.all للحفظ المتزامن
            const savePromises = contractUnits.map(async (unit) => {
                try {
                    const result = await savePropertyToSupabase(unit);
                    if (result) {
                        console.log(`✅ تم حفظ فصل الوحدة ${unit['رقم  الوحدة ']} في Supabase`);
                        return true;
                    } else {
                        console.error(`❌ فشل حفظ فصل الوحدة ${unit['رقم  الوحدة ']} في Supabase`);
                        supabaseErrors++;
                        return false;
                    }
                } catch (error) {
                    console.error(`❌ خطأ في حفظ فصل الوحدة ${unit['رقم  الوحدة ']}:`, error);
                    supabaseErrors++;
                    return false;
                }
            });

            await Promise.all(savePromises);

            if (supabaseErrors === 0) {
                console.log('✅ تم حفظ جميع البيانات في Supabase بنجاح');
            } else {
                console.warn(`⚠️ فشل حفظ ${supabaseErrors} وحدة في Supabase`);
            }
        } catch (error) {
            console.error('❌ خطأ عام في حفظ البيانات في Supabase:', error);
            supabaseErrors = contractUnits.length;
        }
    }

    // إظهار رسالة النجاح مع تفاصيل الحفظ
    let message = `تم فصل ${splitCount} وحدة من العقد رقم ${contractNumber} بنجاح!`;
    if (typeof supabaseClient !== 'undefined' && supabaseClient) {
        if (supabaseErrors === 0) {
            message += `\n✅ تم حفظ جميع التغييرات في قاعدة البيانات السحابية`;
        } else if (supabaseErrors > 0) {
            message += `\n⚠️ تحذير: فشل حفظ ${supabaseErrors} وحدة في قاعدة البيانات السحابية`;
        }
    }
    alert(message);

    // تحديث العرض
    const mergedDisplay = document.getElementById('mergedUnitsDisplay');
    if (mergedDisplay) {
        mergedDisplay.innerHTML = renderMergedUnits();
    }

    // إعادة تحميل البيانات لضمان التحديث
    setTimeout(() => {
        renderData();
        initializeApp();
    }, 500);

    console.log('🎉 تمت عملية الفصل بنجاح');
}

// تحرير العقد المدموج
function editMergedContract(contractNumber, propertyName) {
    console.log(`✏️ تحرير العقد ${contractNumber} في العقار ${propertyName}`);

    // البحث عن جميع الوحدات المرتبطة بهذا العقد
    const contractUnits = properties.filter(p =>
        p['رقم العقد'] === contractNumber &&
        p['اسم العقار'] === propertyName
    );

    if (contractUnits.length === 0) {
        alert('لم يتم العثور على وحدات مرتبطة بهذا العقد');
        return;
    }

    // إنشاء نافذة التحرير
    const editModal = document.createElement('div');
    editModal.className = 'modal-overlay';
    editModal.innerHTML = `
        <div class="modal-box" style="max-width: 600px;">
            <div class="modal-header">
                <h3><i class="fas fa-edit"></i> تحرير العقد المدموج</h3>
                <button class="close-modal" onclick="this.closest('.modal-overlay').remove()">×</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label><strong>رقم العقد الحالي:</strong></label>
                    <input type="text" id="editContractNumber" value="${contractNumber}"
                           style="width: 100%; padding: 10px; border: 2px solid #ddd; border-radius: 5px; margin-bottom: 15px;">
                </div>

                <div class="form-group">
                    <label><strong>العقار:</strong></label>
                    <input type="text" value="${propertyName}" readonly
                           style="width: 100%; padding: 10px; border: 2px solid #ddd; border-radius: 5px; margin-bottom: 15px; background: #f5f5f5;">
                </div>

                <div class="form-group">
                    <label><strong>الوحدات المرتبطة (${contractUnits.length} وحدة):</strong></label>
                    <div style="max-height: 200px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; border-radius: 5px; background: #f9f9f9;">
                        ${contractUnits.map(unit => `
                            <div style="padding: 5px 0; border-bottom: 1px solid #eee;">
                                <label style="display: flex; align-items: center; cursor: pointer;">
                                    <input type="checkbox" name="editUnits" value="${unit['رقم  الوحدة ']}" checked
                                           style="margin-left: 10px;">
                                    <span>وحدة ${unit['رقم  الوحدة ']} - ${unit['اسم المستأجر'] || 'فارغ'}</span>
                                </label>
                            </div>
                        `).join('')}
                    </div>
                    <small style="color: #666; margin-top: 5px; display: block;">
                        <i class="fas fa-info-circle"></i> يمكنك إلغاء تحديد الوحدات التي تريد فصلها من العقد
                    </small>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn-primary" onclick="saveEditedContract('${contractNumber}', '${propertyName}')">
                    <i class="fas fa-save"></i> حفظ التغييرات
                </button>
                <button class="btn-secondary" onclick="this.closest('.modal-overlay').remove()">
                    <i class="fas fa-times"></i> إلغاء
                </button>
            </div>
        </div>
    `;

    document.body.appendChild(editModal);
}

// حفظ تعديلات العقد
async function saveEditedContract(oldContractNumber, propertyName) {
    const newContractNumber = document.getElementById('editContractNumber').value.trim();
    const selectedUnits = Array.from(document.querySelectorAll('input[name="editUnits"]:checked'))
        .map(checkbox => checkbox.value);

    if (!newContractNumber) {
        alert('يرجى إدخال رقم العقد');
        return;
    }

    console.log(`💾 حفظ تعديلات العقد ${oldContractNumber} -> ${newContractNumber}`);
    console.log(`📋 الوحدات المحددة: ${selectedUnits.join(', ')}`);

    // البحث عن جميع الوحدات المرتبطة بالعقد القديم
    const allContractUnits = properties.filter(p =>
        p['رقم العقد'] === oldContractNumber &&
        p['اسم العقار'] === propertyName
    );

    let updatedCount = 0;
    let removedCount = 0;

    // تحديث الوحدات
    allContractUnits.forEach(unit => {
        const unitNumber = unit['رقم  الوحدة '];

        if (selectedUnits.includes(unitNumber)) {
            // الوحدة محددة - تحديث رقم العقد
            unit['رقم العقد'] = newContractNumber;
            updatedCount++;
            console.log(`✅ تحديث الوحدة ${unitNumber} للعقد ${newContractNumber}`);
        } else {
            // الوحدة غير محددة - إزالة رقم العقد
            unit['رقم العقد'] = '';
            removedCount++;
            console.log(`🔓 فصل الوحدة ${unitNumber} من العقد`);
        }
    });

    // حفظ البيانات
    try {
        localStorage.setItem('properties', JSON.stringify(properties));
        console.log('✅ تم حفظ البيانات محلياً بنجاح');
    } catch (error) {
        console.error('❌ خطأ في حفظ البيانات محلياً:', error);
        alert('فشل في حفظ البيانات محلياً');
        return;
    }

    // حفظ في Supabase إذا كان متوفراً
    if (typeof supabaseClient !== 'undefined' && supabaseClient && typeof savePropertyToSupabase === 'function') {
        console.log('☁️ حفظ البيانات في Supabase...');
        let supabaseErrors = 0;

        try {
            // استخدام Promise.all للحفظ المتزامن
            const savePromises = allContractUnits.map(async (unit) => {
                try {
                    const result = await savePropertyToSupabase(unit);
                    if (result) {
                        console.log(`✅ تم حفظ تحديث الوحدة ${unit['رقم  الوحدة ']} في Supabase`);
                        return true;
                    } else {
                        console.error(`❌ فشل حفظ تحديث الوحدة ${unit['رقم  الوحدة ']} في Supabase`);
                        supabaseErrors++;
                        return false;
                    }
                } catch (error) {
                    console.error(`❌ خطأ في حفظ تحديث الوحدة ${unit['رقم  الوحدة ']}:`, error);
                    supabaseErrors++;
                    return false;
                }
            });

            await Promise.all(savePromises);

            if (supabaseErrors === 0) {
                console.log('✅ تم حفظ جميع البيانات في Supabase بنجاح');
            } else {
                console.warn(`⚠️ فشل حفظ ${supabaseErrors} وحدة في Supabase`);
            }
        } catch (error) {
            console.error('❌ خطأ عام في حفظ البيانات في Supabase:', error);
            supabaseErrors = allContractUnits.length;
        }
    }

    // إغلاق النافذة
    document.querySelector('.modal-overlay').remove();

    // رسالة النجاح مع تفاصيل الحفظ
    let message = `تم تحديث العقد بنجاح!\n`;
    if (updatedCount > 0) {
        message += `- تم تحديث ${updatedCount} وحدة للعقد رقم ${newContractNumber}\n`;
    }
    if (removedCount > 0) {
        message += `- تم فصل ${removedCount} وحدة من العقد\n`;
    }

    if (typeof supabaseClient !== 'undefined' && supabaseClient) {
        if (supabaseErrors === 0) {
            message += `✅ تم حفظ جميع التغييرات في قاعدة البيانات السحابية`;
        } else if (supabaseErrors > 0) {
            message += `⚠️ تحذير: فشل حفظ ${supabaseErrors} وحدة في قاعدة البيانات السحابية`;
        }
    }

    alert(message);

    // تحديث العرض
    const mergedDisplay = document.getElementById('mergedUnitsDisplay');
    if (mergedDisplay) {
        mergedDisplay.innerHTML = renderMergedUnits();
    }

    // إعادة تحميل البيانات لضمان التحديث
    setTimeout(() => {
        renderData();
        initializeApp();
    }, 500);

    console.log('🎉 تمت عملية التحرير بنجاح');
}

// البحث في الوحدات
function searchUnits() {
    const searchTerm = document.getElementById('unitsSearchInput').value.toLowerCase();
    const propertyFilter = document.getElementById('unitsFilterProperty').value;

    let filteredUnits = properties;

    // تطبيق فلتر العقار
    if (propertyFilter) {
        filteredUnits = filteredUnits.filter(p => p['اسم العقار'] === propertyFilter);
    }

    // تطبيق البحث النصي
    if (searchTerm) {
        filteredUnits = filteredUnits.filter(p =>
            (p['رقم  الوحدة '] && p['رقم  الوحدة '].toLowerCase().includes(searchTerm)) ||
            (p['اسم المستأجر'] && p['اسم المستأجر'].toLowerCase().includes(searchTerm)) ||
            (p['رقم العقد'] && p['رقم العقد'].toLowerCase().includes(searchTerm))
        );
    }

    displayUnitsResults(filteredUnits);
}

// فلترة الوحدات حسب العقار
function filterUnitsByProperty() {
    searchUnits(); // استخدام نفس منطق البحث
}

// عرض نتائج البحث في الوحدات
function displayUnitsResults(units) {
    const container = document.getElementById('unitsResults');

    if (units.length === 0) {
        container.innerHTML = '<p class="no-data">لا توجد وحدات تطابق البحث</p>';
        return;
    }

    container.innerHTML = units.map(unit => `
        <div class="unit-result-item">
            <div class="unit-info">
                <h4>${unit['رقم  الوحدة ']}</h4>
                <p><strong>العقار:</strong> ${unit['اسم العقار']}</p>
                <p><strong>المدينة:</strong> ${unit['المدينة']}</p>
                <p><strong>المساحة:</strong> ${unit['المساحة'] ? unit['المساحة'] + ' م²' : 'غير محدد'}</p>
                <p><strong>المستأجر:</strong> ${unit['اسم المستأجر'] || 'فارغ'}</p>
                <p><strong>رقم العقد:</strong> ${unit['رقم العقد'] || 'غير محدد'}</p>
            </div>
            <div class="unit-actions">
                <button onclick="editUnit('${unit['رقم  الوحدة ']}', '${unit['اسم العقار']}')" class="btn-edit">
                    <i class="fas fa-edit"></i> تحرير
                </button>
                <button onclick="showUnitDetails('${unit['رقم  الوحدة ']}', '${unit['اسم العقار']}', '${unit['رقم العقد'] || ''}')" class="btn-view">
                    <i class="fas fa-eye"></i> عرض
                </button>
                <button onclick="deleteUnit('${unit['رقم  الوحدة ']}', '${unit['اسم العقار']}')" class="btn-delete">
                    <i class="fas fa-trash"></i> حذف
                </button>
            </div>
        </div>
    `).join('');
}

// تحميل نتائج الوحدات عند فتح التبويب
function loadUnitsResults() {
    displayUnitsResults(properties);
}

// ==================== وظائف المرفقات والتحرير للبطاقات ====================

// Enhanced card attachments modal with real-time cross-device synchronization
function showCardAttachmentsModal(city, propertyName, contractNumber, unitNumber) {
    console.log('🎯 فتح نافذة مرفقات البطاقة...', { city, propertyName, contractNumber, unitNumber });

    // منع التمرير في الخلفية
    document.body.style.overflow = 'hidden';
    document.body.style.position = 'fixed';
    document.body.style.width = '100%';
    document.body.style.height = '100%';
    document.documentElement.style.overflow = 'hidden';

    // إغلاق أي نوافذ موجودة مسبقاً
    closeModal();

    // التحقق من صلاحيات المستخدم
    const canDelete = isAuthorizedUser();
    const canUpload = isAuthorizedUser();

    // إنشاء مفتاح فريد للبطاقة
    let cardKey;
    if (contractNumber) {
        cardKey = `${city}_${propertyName}_contract_${contractNumber}`;
    } else if (unitNumber) {
        cardKey = `${city}_${propertyName}_unit_${unitNumber}`;
    } else {
        cardKey = `${city}_${propertyName}_general`;
    }

    // Try to get attachments from Supabase first, fallback to local
    async function loadCardAttachments() {
        let cardAttachments = [];
        let isFromCloud = false;

        // Try Supabase first
        if (typeof getCardAttachmentsEnhanced === 'function' && supabaseClient) {
            try {
                console.log(`☁️ جلب مرفقات البطاقة ${cardKey} من السحابة...`);
                cardAttachments = await getCardAttachmentsEnhanced(cardKey);
                isFromCloud = true;
                console.log(`✅ تم جلب ${cardAttachments.length} مرفق من السحابة`);
            } catch (error) {
                console.warn('⚠️ فشل في جلب مرفقات البطاقة من السحابة:', error);
            }
        }

        // Fallback to local attachments if no cloud data
        if (!isFromCloud || cardAttachments.length === 0) {
            cardAttachments = (window.cardAttachments && window.cardAttachments[cardKey]) || [];
            console.log(`💾 تم جلب ${cardAttachments.length} مرفق محلي للبطاقة`);
        }

        return { cardAttachments, isFromCloud };
    }

    // تصميم مختلف للجوال والشاشات الكبيرة
    const isMobile = isMobileDevice();

    let html;

    if (isMobile) {
        // تصميم مضغوط للجوال
        html = `
        <div class="modal-overlay mobile-attachments-overlay" style="display:flex;">
            <div class="modal-box mobile-attachments-modal compact">
                <!-- رأس مضغوط - صف واحد -->
                <div class="mobile-compact-header">
                    <div class="header-content">
                        <span class="header-title"><i class="fas fa-paperclip"></i> مرفقات البطاقة</span>
                        <span class="header-separator">|</span>
                        <span class="header-info"><i class="fas fa-building"></i> ${propertyName}</span>
                        <span class="header-separator">|</span>
                        <span class="header-info"><i class="fas fa-map-marker-alt"></i> ${city}</span>
                        ${contractNumber ? `<span class="header-separator">|</span><span class="header-info"><i class="fas fa-file-contract"></i> ${contractNumber}</span>` : ''}
                        ${unitNumber ? `<span class="header-separator">|</span><span class="header-info"><i class="fas fa-home"></i> ${unitNumber}</span>` : ''}
                    </div>

                </div>

                <!-- رسالة للمستخدمين محدودي الصلاحية -->
                ${!canUpload && !canDelete ? `
                <div class="limited-user-notice" style="background: #e3f2fd; border: 1px solid #2196f3; border-radius: 6px; padding: 12px; margin-bottom: 15px; text-align: center;">
                    <i class="fas fa-info-circle" style="color: #2196f3; margin-left: 8px;"></i>
                    <span style="color: #1976d2; font-size: 0.9rem;">يمكنك عرض وتحميل المرفقات فقط</span>
                </div>
                ` : ''}

                <!-- قائمة المرفقات الموسعة -->
                <div class="mobile-attachments-section expanded">
                    <div class="mobile-attachments-header-small">
                        <span><i class="fas fa-folder-open"></i> المرفقات الموجودة</span>
                        <span class="mobile-attachments-count" id="mobileAttachmentsCount_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}">جاري التحميل...</span>
                    </div>
                    <div id="cardAttachmentsList_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}" class="mobile-attachments-list">
                        <div class="mobile-loading" style="text-align: center; padding: 20px; color: #666;">
                            <i class="fas fa-spinner fa-spin" style="font-size: 1.5rem; margin-bottom: 10px;"></i>
                            <p style="font-size: 0.9rem;">جاري تحميل المرفقات...</p>
                        </div>
                    </div>
                </div>

                <!-- أزرار الأسفل - مثل الشاشات الكبيرة -->
                <div class="bottom-buttons-row">
                    ${canUpload ? `
                    <button class="bottom-action-btn upload drag-drop-zone"
                            onclick="document.getElementById('cardFileInput_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}').click()"
                            ondragover="handleDragOver(event)"
                            ondragenter="handleDragEnter(event)"
                            ondragleave="handleDragLeave(event)"
                            ondrop="handleDrop(event, 'cardFileInput_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}')">
                        <i class="fas fa-plus"></i> إرفاق
                    </button>
                    ` : ''}
                    <button class="bottom-action-btn cancel" onclick="closeModal()">
                        <i class="fas fa-times"></i> إلغاء
                    </button>
                </div>

                <!-- حقل الرفع المخفي -->
                ${canUpload ? `
                <input type="file" id="cardFileInput_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}" multiple style="display:none" onchange="handleCardFileUploadEnhanced(event, '${cardKey}')">
                ` : ''}
            </div>
        </div>`;
    } else {
        // تصميم مضغوط للشاشات الكبيرة
        html = `
        <div class="modal-overlay enhanced-modal-overlay" style="display:flex;">
            <div class="modal-box attachments-modal enhanced compact">
                <!-- رأس مضغوط - صف واحد مع زر الإغلاق -->
                <div class="compact-header-row">
                    <div class="header-content-inline">
                        <span class="header-title"><i class="fas fa-paperclip"></i> مرفقات البطاقة</span>
                        <span class="header-separator">|</span>
                        <span class="header-info"><i class="fas fa-building"></i> ${propertyName}</span>
                        <span class="header-separator">|</span>
                        <span class="header-info"><i class="fas fa-map-marker-alt"></i> ${city}</span>
                        ${contractNumber ? `<span class="header-separator">|</span><span class="header-info"><i class="fas fa-file-contract"></i> عقد: ${contractNumber}</span>` : ''}
                        ${unitNumber ? `<span class="header-separator">|</span><span class="header-info"><i class="fas fa-home"></i> وحدة: ${unitNumber}</span>` : ''}
                    </div>
                    <button class="header-close-btn" onclick="closeModal()" title="إغلاق النافذة">
                        <i class="fas fa-times"></i>
                    </button>
                </div>

                <!-- رسالة للمستخدمين محدودي الصلاحية -->
                ${!canUpload && !canDelete ? `
                <div class="limited-user-notice" style="background: #e3f2fd; border: 1px solid #2196f3; border-radius: 8px; padding: 15px; margin-bottom: 20px; text-align: center;">
                    <i class="fas fa-info-circle" style="color: #2196f3; margin-left: 10px; font-size: 1.2rem;"></i>
                    <span style="color: #1976d2; font-size: 1rem; font-weight: 500;">يمكنك عرض وتحميل المرفقات فقط</span>
                </div>
                ` : ''}

                <!-- قائمة المرفقات الموسعة -->
                <div class="attachments-main-section" style="width: 100%;">
                    <div class="attachments-header">
                        <h3><i class="fas fa-folder-open"></i> المرفقات الموجودة</h3>
                    </div>
                    <div id="cardAttachmentsList_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}" class="attachments-list expanded">
                        <div class="loading-attachments" style="text-align: center; padding: 20px; color: #666;">
                            <i class="fas fa-spinner fa-spin" style="font-size: 2rem; margin-bottom: 10px;"></i>
                            <p>جاري تحميل المرفقات...</p>
                        </div>
                    </div>
                </div>

                <!-- أزرار الأسفل -->
                <div class="bottom-buttons-row">
                    ${canUpload ? `
                    <button class="bottom-action-btn upload drag-drop-zone"
                            onclick="document.getElementById('cardFileInput_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}').click()"
                            ondragover="handleDragOver(event)"
                            ondragenter="handleDragEnter(event)"
                            ondragleave="handleDragLeave(event)"
                            ondrop="handleDrop(event, 'cardFileInput_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}')">
                        <i class="fas fa-plus"></i> إرفاق
                    </button>
                    ` : ''}
                    <button class="bottom-action-btn cancel" onclick="closeModal()">
                        <i class="fas fa-times"></i> إلغاء
                    </button>
                </div>

                <!-- حقل الرفع المخفي -->
                ${canUpload ? `
                <input type="file" id="cardFileInput_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}" multiple style="display:none" onchange="handleCardFileUploadEnhanced(event, '${cardKey}')">
                ` : ''}
            </div>
        </div>`;
    }

    // إدراج النافذة في الصفحة
    document.body.insertAdjacentHTML('beforeend', html);

    // 🎯 تحميل المرفقات بعد إنشاء النافذة (التصميم السابق)
    loadCardAttachments().then(({ cardAttachments, isFromCloud }) => {
        console.log(`📎 تم تحميل ${cardAttachments.length} مرفق للبطاقة ${cardKey} (${isFromCloud ? 'من السحابة' : 'محلي'})`);

        const listContainer = document.getElementById(`cardAttachmentsList_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
        if (listContainer) {
            // Force visibility with enhanced mobile support
            listContainer.style.display = 'block';
            listContainer.style.visibility = 'visible';
            listContainer.style.opacity = '1';

            // Add mobile-specific classes
            if (isMobileDevice()) {
                listContainer.classList.add('mobile-list', 'mobile-optimized');
                listContainer.style.minHeight = '300px';
                listContainer.style.maxHeight = '60vh';
                listContainer.style.overflowY = 'auto';
            }

            // Render attachments with layout specific to device type
            if (isMobileDevice()) {
                listContainer.innerHTML = renderMobileCardAttachmentsList(cardKey, cardAttachments);

                // Update mobile attachments count
                const mobileCountBadge = document.getElementById(`mobileAttachmentsCount_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
                if (mobileCountBadge) {
                    mobileCountBadge.textContent = `${cardAttachments.length} مرفق`;
                }
            } else {
                listContainer.innerHTML = renderCardAttachmentsList(cardKey, cardAttachments);

                // Enhanced mobile display optimization
                enhanceAttachmentDisplayForMobile();
            }

            // إعداد اسكرول المرفقات بعد التحميل
            setTimeout(() => {
                setupAttachmentsScroll(cardKey);
            }, 100);

            // إضافة سكرول للأعلى لإظهار المرفقات (للشاشات الكبيرة فقط)
            if (!isMobileDevice()) {
                setTimeout(() => {
                    scrollToAttachments();
                }, 300);
            }

            console.log('✅ تم عرض المرفقات في النافذة مع تحسينات الجوال');

            // تطبيق التكيف التلقائي مع المحتوى
            adjustModalSizeBasedOnContent(cardAttachments.length);

            // Initialize search functionality
            setTimeout(() => {
                initCardAttachmentsSearch(cardKey);
            }, 200);
        } else {
            console.error('❌ لم يتم العثور على حاوية قائمة المرفقات');
        }
    }).catch(error => {
        console.error('❌ خطأ في تحميل مرفقات البطاقة:', error);

        const listContainer = document.getElementById(`cardAttachmentsList_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
        if (listContainer) {
            listContainer.innerHTML = `
                <div class="error-loading-attachments enhanced-error" style="text-align: center; padding: ${isMobileDevice() ? '40px 20px' : '20px'}; color: #dc3545;">
                    <i class="fas fa-exclamation-triangle" style="font-size: ${isMobileDevice() ? '3rem' : '2rem'}; margin-bottom: ${isMobileDevice() ? '20px' : '10px'};"></i>
                    <p style="font-size: ${isMobileDevice() ? '1.2rem' : '1rem'};">خطأ في تحميل المرفقات</p>
                    <button onclick="refreshCardAttachmentsList('${cardKey}')" class="btn-primary" style="margin-top: ${isMobileDevice() ? '15px' : '10px'}; padding: ${isMobileDevice() ? '12px 20px' : '8px 16px'}; font-size: ${isMobileDevice() ? '1.1rem' : '0.9rem'};">
                        <i class="fas fa-refresh"></i> إعادة المحاولة
                    </button>
                </div>
            `;
        }
    });

    // إضافة أحداث السحب والإفلات
    setupCardDragAndDrop(cardKey);

    // إعداد اسكرول المرفقات مع زر العودة للأعلى
    setupAttachmentsScroll(cardKey);

    // 🔧 إضافة CSS إصلاحي لضمان إظهار المرفقات
    const fixStyle = document.createElement('style');
    fixStyle.textContent = `
        .attachments-list,
        .card-attachments-list,
        .attachment-item,
        [id*="cardAttachmentsList"] {
            display: block !important;
            visibility: visible !important;
            opacity: 1 !important;
        }

        .attachment-item {
            display: flex !important;
        }

        .loading-attachments,
        .error-loading-attachments {
            display: block !important;
            visibility: visible !important;
        }
    `;
    document.head.appendChild(fixStyle);

    // إضافة حدث إغلاق للمودال (التصميم السابق)
    document.querySelector('.modal-overlay:last-child').addEventListener('click', function(e) {
        if (e.target === this) {
            closeModal();
        }
    });
}

// دالة السكرول للأعلى لإظهار المرفقات
function scrollToAttachments() {
    try {
        // البحث عن قسم المرفقات
        const attachmentsSection = document.querySelector('.attachments-main-section');
        const attachmentsList = document.querySelector('.compact-list');

        if (attachmentsSection) {
            // سكرول النافذة للأعلى لإظهار المرفقات
            attachmentsSection.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });

            // سكرول قائمة المرفقات للأعلى
            if (attachmentsList) {
                attachmentsList.scrollTop = 0;
            }

            console.log('📜 تم السكرول لإظهار المرفقات');
        }
    } catch (error) {
        console.error('❌ خطأ في السكرول:', error);
    }
}

// عرض قائمة مرفقات البطاقة
function renderCardAttachmentsList(cardKey, attachments = null) {
    // Use provided attachments or fallback to local storage
    const cardFiles = attachments || cardAttachments[cardKey] || [];

    if (cardFiles.length === 0) {
        return '<p class="no-attachments">لا توجد مرفقات لهذه البطاقة</p>';
    }

    // Check if mobile device for responsive design
    const isMobile = isMobileDevice();

    // التحقق من صلاحيات المستخدم
    const canDelete = isAuthorizedUser();

    return cardFiles.map(file => {
        // Handle both local and cloud file formats
        const fileName = file.file_name || file.name;
        const fileSize = formatFileSize(file.file_size || file.size);
        const fileType = file.file_type || file.type;
        const uploadDate = new Date(file.created_at || file.uploadDate).toLocaleDateString('ar-SA');
        const fileIcon = getFileIcon(fileName);

        // Determine if file is local or cloud-based
        const isLocal = file.isLocal || !file.id || file.id.toString().startsWith('local_');
        const storageIcon = isLocal ? '💾' : '☁️';
        const storageTitle = isLocal ? 'محفوظ محلياً' : 'محفوظ في السحابة';

        // Use enhanced layout for mobile and desktop
        return `
        <div class="attachment-item ${isMobile ? 'mobile-enhanced-item' : 'desktop-enhanced-item'}" data-name="${fileName}">
            <div class="file-icon-enhanced">${fileIcon}</div>
            <div class="file-info-enhanced">
                <div class="file-name-enhanced" title="${fileName}">
                    <span class="file-name-text">${fileName}</span>
                </div>
            </div>
            <div class="attachment-actions-enhanced">
                ${isLocal ?
                    `<button onclick="downloadCardAttachment('${cardKey}', '${fileName}')" class="btn-enhanced btn-download" title="تحميل">
                        <i class="fas fa-download"></i>
                        <span>تحميل</span>
                    </button>
                    ${canDelete ? `<button onclick="deleteCardAttachment('${cardKey}', '${fileName}')" class="btn-enhanced btn-delete" title="حذف">
                        <i class="fas fa-trash"></i>
                        <span>حذف</span>
                    </button>` : ''}` :
                    `<button onclick="downloadAttachmentFromSupabase('${file.file_url}', '${fileName}')" class="btn-enhanced btn-download" title="تحميل">
                        <i class="fas fa-download"></i>
                        <span>تحميل</span>
                    </button>
                    ${canDelete ? `<button onclick="deleteCardAttachmentFromSupabase('${file.id}', '${cardKey}')" class="btn-enhanced btn-delete" title="حذف">
                        <i class="fas fa-trash"></i>
                        <span>حذف</span>
                    </button>` : ''}`
                }
            </div>
        </div>
        `;
    }).join('');
}

// ===== Render Mobile Card Attachments List =====
function renderMobileCardAttachmentsList(cardKey, attachments) {
    console.log(`📱 عرض ${attachments.length} مرفق للجوال - البطاقة: ${cardKey}`);

    // التحقق من صلاحيات المستخدم
    const canDelete = isAuthorizedUser();

    if (!attachments || attachments.length === 0) {
        return `
            <div class="mobile-no-attachments" style="text-align: center; padding: 30px 20px; color: #6c757d;">
                <i class="fas fa-folder-open" style="font-size: 2rem; margin-bottom: 10px; opacity: 0.5;"></i>
                <p style="margin: 0; font-size: 0.9rem;">لا توجد مرفقات</p>
                <small style="opacity: 0.7;">${canDelete ? 'استخدم زر "إضافة مرفق" لرفع الملفات' : 'لا توجد مرفقات للعرض'}</small>
            </div>
        `;
    }

    let html = '';

    attachments.forEach((file, index) => {
        // Handle both local and cloud file formats
        const fileName = file.file_name || file.name;
        const fileSize = formatFileSize(file.file_size || file.size);
        const uploadDate = new Date(file.created_at || file.uploadDate).toLocaleDateString('ar-SA');
        const fileIcon = getFileIcon(fileName);

        // Determine file source
        const isCloudFile = file.file_url || file.url;
        const sourceIcon = isCloudFile ? '☁️' : '💾';
        const sourceText = isCloudFile ? 'سحابي' : 'محلي';

        html += `
            <div class="mobile-attachment-item" data-file-index="${index}">
                <!-- أيقونة الملف -->
                <div class="mobile-file-icon" style="color: ${getFileIconColor(fileName)};">
                    ${fileIcon}
                </div>

                <!-- معلومات الملف -->
                <div class="mobile-file-info">
                    <div class="mobile-file-name" title="${fileName}">
                        ${fileName}
                    </div>
                    <!-- أزرار العمليات أسفل اسم الملف مباشرة -->
                    <div class="mobile-file-actions" style="margin-top: 8px;">
                        ${isCloudFile ?
                            `<button class="mobile-action-btn download" onclick="downloadAttachmentFromSupabase('${file.file_url || file.url}', '${fileName}')" title="تحميل">
                                <i class="fas fa-download"></i>
                                <span>تحميل</span>
                            </button>
                            ${canDelete ? `<button class="mobile-action-btn delete" onclick="deleteCardAttachmentFromSupabase('${file.id}', '${cardKey}')" title="حذف">
                                <i class="fas fa-trash"></i>
                                <span>حذف</span>
                            </button>` : ''}` :
                            `<button class="mobile-action-btn download" onclick="downloadCardAttachment('${cardKey}', ${index})" title="تحميل">
                                <i class="fas fa-download"></i>
                                <span>تحميل</span>
                            </button>
                            ${canDelete ? `<button class="mobile-action-btn delete" onclick="deleteCardAttachment('${cardKey}', ${index})" title="حذف">
                                <i class="fas fa-trash"></i>
                                <span>حذف</span>
                            </button>` : ''}`
                        }
                    </div>
                </div>
            </div>
        `;
    });

    console.log(`✅ تم إنشاء قائمة المرفقات للجوال - ${attachments.length} عنصر`);
    return html;
}

// معالجة رفع ملفات البطاقة (Legacy - redirects to enhanced version)
function handleCardFileUpload(event, cardKey) {
    console.log('🔄 تحويل من الوظيفة القديمة إلى المحسنة...');

    // Redirect to enhanced version for consistency and real-time sync
    handleCardFileUploadEnhanced(event, cardKey);
}

// Enhanced card file upload with Supabase integration
async function handleCardFileUploadEnhanced(event, cardKey) {
    const files = event.target.files;

    // Get notes from the correct element ID
    const notesElement = document.getElementById(`cardUploadNotes_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}`) ||
                        document.getElementById('cardUploadNotes');
    const notes = notesElement?.value || '';

    if (files.length === 0) return;

    // Show enhanced upload progress modal
    const progressModal = document.createElement('div');
    progressModal.className = 'modal-overlay';
    progressModal.innerHTML = `
        <div class="modal-box upload-progress-modal" style="text-align: center; padding: 40px; max-width: 500px;">
            <div class="upload-header">
                <i class="fas fa-cloud-upload-alt" style="font-size: 3rem; color: #17a2b8; margin-bottom: 1rem;"></i>
                <h3>رفع مرفقات البطاقة</h3>
            </div>
            <div class="upload-progress">
                <div class="progress-bar-container">
                    <div class="progress-bar">
                        <div class="progress-fill" id="cardProgressFill" style="width: 0%;"></div>
                    </div>
                    <div class="progress-text">
                        <span id="cardProgressText">0 من ${files.length} ملف</span>
                        <span id="cardProgressPercentage">0%</span>
                    </div>
                </div>
                <div class="upload-details">
                    <p id="cardUploadStatus">جاري التحقق من الاتصال...</p>
                    <p id="cardCurrentFile" style="font-size: 0.9rem; color: #666;"></p>
                </div>
            </div>
            <div class="device-sync-info" style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px;">
                <i class="fas fa-sync-alt" style="color: #17a2b8;"></i>
                <small>سيتم مزامنة مرفقات البطاقة تلقائياً مع جميع الأجهزة</small>
            </div>
        </div>
    `;
    document.body.appendChild(progressModal);

    try {
        // Check if Supabase is available and working
        const supabaseAvailable = await checkSupabaseAvailability();

        if (supabaseAvailable) {
            document.getElementById('cardUploadStatus').textContent = 'جاري رفع مرفقات البطاقة إلى السحابة...';

            // Upload files with progress tracking
            await handleCardFilesEnhancedWithProgress(files, cardKey, notes);

            // Remove progress modal
            progressModal.remove();

            // 🎯 تحديث قائمة المرفقات فوراً بعد الرفع الناجح
            setTimeout(() => {
                refreshCardAttachmentsList(cardKey);

                // Force show any hidden elements
                const allAttachmentElements = document.querySelectorAll('[id*="cardAttachments"], [class*="attachment"]');
                allAttachmentElements.forEach(el => {
                    if (el.style.display === 'none') {
                        el.style.display = 'block';
                        console.log('🔧 تم إظهار عنصر مخفي:', el);
                    }
                    if (el.style.visibility === 'hidden') {
                        el.style.visibility = 'visible';
                        console.log('🔧 تم إظهار عنصر مخفي:', el);
                    }
                });
            }, 500);

            // تنظيف النموذج
            event.target.value = '';
            const notesElement = document.getElementById(`cardUploadNotes_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
            if (notesElement) {
                notesElement.value = '';
            }

            // Show success message with cross-device info
            const successModal = document.createElement('div');
            successModal.className = 'modal-overlay';
            successModal.innerHTML = `
                <div class="modal-box success-modal" style="text-align: center; padding: 40px;">
                    <div class="success-animation">
                        <i class="fas fa-check-circle" style="font-size: 3rem; color: #28a745; margin-bottom: 1rem;"></i>
                    </div>
                    <h3>تم رفع مرفقات البطاقة بنجاح!</h3>
                    <div class="success-details">
                        <p>تم رفع ${files.length} ملف إلى السحابة</p>
                        <div class="sync-status" style="margin: 20px 0; padding: 15px; background: #d4edda; border-radius: 8px; color: #155724;">
                            <i class="fas fa-globe" style="margin-left: 8px;"></i>
                            <strong>متزامن عبر جميع الأجهزة</strong>
                            <br>
                            <small>مرفقات البطاقة متاحة الآن على جميع الأجهزة والمتصفحات</small>
                        </div>
                    </div>
                    <div class="modal-actions">
                        <button class="btn-primary" onclick="closeModal(); refreshCardAttachmentsList('${cardKey}')">
                            <i class="fas fa-eye"></i> عرض المرفقات
                        </button>
                        <button class="btn-secondary" onclick="closeModal()">
                            <i class="fas fa-times"></i> إغلاق
                        </button>
                    </div>
                </div>
            `;
            document.body.appendChild(successModal);

            // Auto-close success modal after 5 seconds
            setTimeout(() => {
                if (document.body.contains(successModal)) {
                    successModal.remove();
                }
            }, 5000);

        } else {
            throw new Error('Supabase غير متوفر');
        }

    } catch (error) {
        console.error('❌ خطأ في رفع مرفقات البطاقة:', error);

        // Update status
        document.getElementById('cardUploadStatus').textContent = 'جاري الحفظ محلياً...';

        // Fallback to local upload
        await handleCardFilesLocal(files, cardKey, notes);

        // Remove progress modal
        progressModal.remove();

        // 🎯 تحديث قائمة المرفقات حتى في حالة الحفظ المحلي
        setTimeout(() => {
            refreshCardAttachmentsList(cardKey);
        }, 500);

        // Show fallback message with sync options
        const fallbackModal = document.createElement('div');
        fallbackModal.className = 'modal-overlay';
        fallbackModal.innerHTML = `
            <div class="modal-box fallback-modal" style="text-align: center; padding: 40px;">
                <i class="fas fa-exclamation-triangle" style="font-size: 3rem; color: #ffc107; margin-bottom: 1rem;"></i>
                <h3>تم حفظ مرفقات البطاقة محلياً</h3>
                <div class="fallback-details">
                    <p>لم يتمكن من الرفع للسحابة، تم حفظ الملفات محلياً</p>
                    <div class="local-storage-info" style="margin: 20px 0; padding: 15px; background: #fff3cd; border-radius: 8px; color: #856404;">
                        <i class="fas fa-laptop" style="margin-left: 8px;"></i>
                        <strong>محفوظ على هذا الجهاز فقط</strong>
                        <br>
                        <small>يمكنك المزامنة لاحقاً عند توفر الاتصال</small>
                    </div>
                </div>
                <div class="modal-actions">
                    <button class="btn-primary" onclick="closeModal(); refreshCardAttachmentsList('${cardKey}')">
                        <i class="fas fa-eye"></i> عرض المرفقات
                    </button>
                    <button class="btn-warning" onclick="closeModal(); retryCardUploadToSupabase('${cardKey}')">
                        <i class="fas fa-sync"></i> إعادة المحاولة
                    </button>
                    <button class="btn-secondary" onclick="closeModal()">
                        <i class="fas fa-times"></i> إغلاق
                    </button>
                </div>
            </div>
        `;
        document.body.appendChild(fallbackModal);
    }
}

// Handle card files upload with progress
async function handleCardFilesEnhancedWithProgress(files, cardKey, notes) {
    let uploadedCount = 0;
    const totalFiles = files.length;

    for (let i = 0; i < files.length; i++) {
        const file = files[i];

        // Update progress
        const progressFill = document.getElementById('cardProgressFill');
        const progressText = document.getElementById('cardProgressText');
        const progressPercentage = document.getElementById('cardProgressPercentage');
        const currentFileElement = document.getElementById('cardCurrentFile');

        if (currentFileElement) {
            currentFileElement.textContent = `جاري رفع: ${file.name}`;
        }

        try {
            if (typeof uploadCardFileToSupabase === 'function') {
                const result = await uploadCardFileToSupabase(file, cardKey, notes);

                if (result) {
                    uploadedCount++;

                    // Update progress
                    const progress = Math.round((uploadedCount / totalFiles) * 100);
                    if (progressFill) progressFill.style.width = progress + '%';
                    if (progressText) progressText.textContent = `${uploadedCount} من ${totalFiles} ملف`;
                    if (progressPercentage) progressPercentage.textContent = progress + '%';

                    console.log(`✅ تم رفع ملف البطاقة: ${file.name}`);

                    // 🎯 إطلاق حدث real-time للمزامنة الفورية
                    window.dispatchEvent(new CustomEvent('cardAttachmentAdded', {
                        detail: { cardKey, attachment: result }
                    }));

                    // إطلاق حدث عام للمرفقات
                    window.dispatchEvent(new CustomEvent('attachmentAdded', {
                        detail: {
                            type: 'card',
                            cardKey,
                            attachment: result,
                            propertyKey: cardKey // للتوافق مع النظام العام
                        }
                    }));
                } else {
                    throw new Error('لم يتم إرجاع بيانات الملف');
                }
            } else {
                throw new Error('وظيفة uploadCardFileToSupabase غير متوفرة');
            }
        } catch (error) {
            console.error(`❌ خطأ في رفع ملف البطاقة ${file.name}:`, error);
            throw error;
        }
    }
}

// Handle card files local storage fallback
async function handleCardFilesLocal(files, cardKey, notes) {
    const cardFiles = [];

    for (const file of files) {
        const reader = new FileReader();

        await new Promise((resolve) => {
            reader.onload = function(e) {
                const fileData = {
                    name: file.name,
                    size: file.size,
                    type: file.type,
                    data: e.target.result,
                    uploadDate: new Date().toISOString(),
                    notes: notes
                };

                cardFiles.push(fileData);
                resolve();
            };
            reader.readAsDataURL(file);
        });
    }

    // Save to localStorage
    if (!window.cardAttachments) {
        window.cardAttachments = {};
    }

    if (!window.cardAttachments[cardKey]) {
        window.cardAttachments[cardKey] = [];
    }

    window.cardAttachments[cardKey].push(...cardFiles);
    localStorage.setItem('cardAttachments', JSON.stringify(window.cardAttachments));

    console.log(`💾 تم حفظ ${cardFiles.length} ملف بطاقة محلياً`);
}

// إعداد السحب والإفلات لمرفقات البطاقة
function setupCardDragAndDrop(cardKey) {
    const uploadArea = document.getElementById(`cardUploadArea_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
    if (!uploadArea) return;

    uploadArea.addEventListener('dragover', function(e) {
        e.preventDefault();
        uploadArea.classList.add('drag-over');
    });

    uploadArea.addEventListener('dragleave', function(e) {
        e.preventDefault();
        uploadArea.classList.remove('drag-over');
    });

    uploadArea.addEventListener('drop', function(e) {
        e.preventDefault();
        uploadArea.classList.remove('drag-over');

        const files = Array.from(e.dataTransfer.files);
        const fileInput = document.getElementById(`cardFileInput_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}`);

        if (fileInput && files.length > 0) {
            // محاكاة اختيار الملفات
            const dt = new DataTransfer();
            files.forEach(file => dt.items.add(file));
            fileInput.files = dt.files;

            // تشغيل حدث التغيير
            const event = new Event('change', { bubbles: true });
            fileInput.dispatchEvent(event);
        }
    });
}

// تحميل مرفق البطاقة - Enhanced for all file types
function downloadCardAttachment(cardKey, fileName) {
    const cardFiles = cardAttachments[cardKey] || [];
    const file = cardFiles.find(f => f.name === fileName);

    if (!file) {
        alert('لم يتم العثور على الملف');
        return;
    }

    try {
        console.log(`📥 بدء تحميل مرفق البطاقة: ${file.name}`);

        // إظهار مؤشر التحميل
        showDownloadProgress(file.name, true);

        // تحويل base64 إلى blob إذا لزم الأمر
        let downloadUrl = file.data;
        let shouldRevoke = false;

        if (file.data.startsWith('data:')) {
            // تحويل data URL إلى blob للتحميل الصحيح
            const response = fetch(file.data);
            response.then(res => res.blob()).then(blob => {
                downloadUrl = window.URL.createObjectURL(blob);
                shouldRevoke = true;
                performDownload();
            });
        } else {
            performDownload();
        }

        function performDownload() {
            // إنشاء رابط التحميل
            const link = document.createElement('a');
            link.href = downloadUrl;
            link.download = file.name;
            link.style.display = 'none';

            // إضافة الرابط للصفحة وتفعيله
            document.body.appendChild(link);
            link.click();

            // تنظيف الموارد
            document.body.removeChild(link);
            if (shouldRevoke) {
                window.URL.revokeObjectURL(downloadUrl);
            }

            // إخفاء مؤشر التحميل وإظهار رسالة نجاح
            showDownloadProgress(file.name, false);
            showMiniIconNotification('📥', '#28a745', 2000);

            console.log(`✅ تم تحميل مرفق البطاقة بنجاح: ${file.name}`);
        }

    } catch (error) {
        console.error(`❌ خطأ في تحميل مرفق البطاقة ${file.name}:`, error);

        // إخفاء مؤشر التحميل وإظهار رسالة خطأ
        showDownloadProgress(file.name, false);
        showMiniIconNotification('❌', '#dc3545', 3000);

        // محاولة التحميل المباشر كبديل
        const link = document.createElement('a');
        link.href = file.data;
        link.download = file.name;
        link.style.display = 'none';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
}

// عرض مرفق البطاقة
function viewCardAttachment(cardKey, fileIndex) {
    const cardFiles = cardAttachments[cardKey] || [];
    const file = cardFiles[fileIndex];

    if (!file) {
        alert('لم يتم العثور على الملف');
        return;
    }

    // فتح الملف في نافذة جديدة
    const newWindow = window.open('', '_blank');
    newWindow.document.write(`
        <html>
            <head>
                <title>${file.name}</title>
                <style>
                    body { margin: 0; padding: 20px; font-family: Arial, sans-serif; }
                    img { max-width: 100%; height: auto; }
                    .file-info { background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px; }
                </style>
            </head>
            <body>
                <div class="file-info">
                    <h2>${file.name}</h2>
                    <p>الحجم: ${formatFileSize(file.size)}</p>
                    <p>تاريخ الرفع: ${new Date(file.uploadDate).toLocaleDateString('ar-SA')}</p>
                    ${file.notes ? `<p>ملاحظات: ${file.notes}</p>` : ''}
                </div>
                ${file.type.startsWith('image/') ?
                    `<img src="${file.data}" alt="${file.name}">` :
                    `<p>لا يمكن عرض هذا النوع من الملفات. <a href="${file.data}" download="${file.name}">تحميل الملف</a></p>`
                }
            </body>
        </html>
    `);
}

// حذف مرفق البطاقة
function deleteCardAttachment(cardKey, fileName) {
    if (!confirm('هل أنت متأكد من حذف هذا المرفق؟')) return;

    cardAttachments[cardKey] = (cardAttachments[cardKey] || []).filter(f => f.name !== fileName);
    localStorage.setItem('cardAttachments', JSON.stringify(cardAttachments));

    // تحديث القائمة
    const listContainer = document.getElementById(`cardAttachmentsList_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}`);
    if (listContainer) {
        if (isMobileDevice()) {
            listContainer.innerHTML = renderMobileCardAttachmentsList(cardKey, cardAttachments[cardKey] || []);
        } else {
            listContainer.innerHTML = renderCardAttachmentsList(cardKey);
        }
    }
}

// Enhanced delete card attachment from Supabase
async function deleteCardAttachmentFromSupabase(attachmentId, cardKey) {
    try {
        if (typeof deleteCardAttachmentEnhanced === 'function') {
            const success = await deleteCardAttachmentEnhanced(attachmentId);

            if (success) {
                // Refresh the attachments list
                await refreshCardAttachmentsList(cardKey);

                // Show success notification
                showConnectionNotification('تم حذف مرفق البطاقة بنجاح', 'success');
            }
        } else {
            throw new Error('وظيفة deleteCardAttachmentEnhanced غير متوفرة');
        }
    } catch (error) {
        console.error('❌ خطأ في حذف مرفق البطاقة:', error);
        // تم إزالة رسالة الخطأ حسب طلب المستخدم
    }
}

// Setup enhanced drag and drop for card attachments
function setupCardDragAndDropEnhanced(cardKey) {
    const uploadZone = document.querySelector('.upload-zone.enhanced');
    if (!uploadZone) return;

    uploadZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadZone.style.borderColor = '#007bff';
        uploadZone.style.background = 'linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%)';
    });

    uploadZone.addEventListener('dragleave', (e) => {
        e.preventDefault();
        uploadZone.style.borderColor = '#17a2b8';
        uploadZone.style.background = 'linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%)';
    });

    uploadZone.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadZone.style.borderColor = '#17a2b8';
        uploadZone.style.background = 'linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%)';

        const files = e.dataTransfer.files;
        if (files.length > 0) {
            const fileInput = document.getElementById('cardFileInput');
            if (fileInput) {
                fileInput.files = files;
                handleCardFileUploadEnhanced({ target: { files } }, cardKey);
            }
        }
    });
}

// Setup real-time updates for card modal
function setupCardModalRealTimeUpdates(cardKey) {
    // Listen for card attachment changes
    window.addEventListener('cardAttachmentAdded', (event) => {
        if (event.detail.cardKey === cardKey) {
            console.log(`🔄 تحديث مرفقات البطاقة: ${cardKey} - ملف جديد`);
            refreshCardAttachmentsList(cardKey);

            // Show notification if not from current user
            if (!isCurrentUserAction(event.detail.attachment)) {
                showConnectionNotification(`تم إضافة ملف جديد للبطاقة: ${event.detail.attachment.file_name}`, 'info');
            }
        }
    });

    window.addEventListener('cardAttachmentDeleted', (event) => {
        if (event.detail.cardKey === cardKey) {
            console.log(`🔄 تحديث مرفقات البطاقة: ${cardKey} - حذف ملف`);
            refreshCardAttachmentsList(cardKey);

            // Show notification if not from current user
            if (!isCurrentUserAction(event.detail.attachment)) {
                showConnectionNotification(`تم حذف ملف من البطاقة: ${event.detail.attachment.file_name}`, 'warning');
            }
        }
    });

    // Listen for general attachment events (for compatibility)
    window.addEventListener('attachmentAdded', (event) => {
        if (event.detail.type === 'card' && event.detail.cardKey === cardKey) {
            console.log(`🔄 تحديث عام لمرفقات البطاقة: ${cardKey}`);
            refreshCardAttachmentsList(cardKey);
        }
    });
}

// Update card sync status
function updateCardSyncStatus() {
    const syncStatus = document.getElementById('cardSyncStatus');
    if (!syncStatus) return;

    if (supabaseClient && typeof getCardAttachmentsEnhanced === 'function') {
        syncStatus.innerHTML = '<i class="fas fa-sync-alt" style="color: #28a745;"></i> متزامن';
        syncStatus.title = 'متزامن مع السحابة';
    } else {
        syncStatus.innerHTML = '<i class="fas fa-wifi-slash" style="color: #ffc107;"></i> محلي فقط';
        syncStatus.title = 'غير متصل - البيانات محلية فقط';
    }
}

// Filter card attachments list
function filterCardAttachmentsList(event) {
    const searchTerm = event.target.value.toLowerCase();
    const attachmentItems = document.querySelectorAll('.card-attachments-list .attachment-item');

    attachmentItems.forEach(item => {
        const fileName = item.getAttribute('data-name') || '';
        const isVisible = fileName.includes(searchTerm);
        item.style.display = isVisible ? 'flex' : 'none';
    });
}

// Refresh card attachments list in modal
async function refreshCardAttachmentsList(cardKey) {
    try {
        console.log(`🔄 تحديث قائمة مرفقات البطاقة: ${cardKey}`);

        // Try multiple selectors to find the list container
        const possibleSelectors = [
            `cardAttachmentsList_${cardKey.replace(/[^a-zA-Z0-9]/g, '_')}`,
            'cardAttachmentsList',
            'attachmentsList'
        ];

        let listContainer = null;
        for (const selector of possibleSelectors) {
            listContainer = document.getElementById(selector);
            if (listContainer) {
                console.log(`✅ تم العثور على الحاوية: #${selector}`);
                break;
            }
        }

        if (!listContainer) {
            console.warn('⚠️ لم يتم العثور على حاوية قائمة المرفقات');
            console.log('🔍 العناصر المتاحة:');
            possibleSelectors.forEach(selector => {
                console.log(`- #${selector}:`, document.getElementById(selector));
            });
            return;
        }

        // Get updated attachments
        let attachments = [];

        // Try to get from Supabase first
        if (typeof getCardAttachmentsEnhanced === 'function') {
            try {
                attachments = await getCardAttachmentsEnhanced(cardKey);
                console.log(`☁️ تم جلب ${attachments.length} مرفق من السحابة`);
            } catch (error) {
                console.warn('⚠️ فشل في جلب المرفقات من السحابة:', error);
            }
        }

        // Fallback to local storage if no cloud attachments
        if (attachments.length === 0) {
            const localAttachments = window.cardAttachments?.[cardKey] || [];
            attachments = localAttachments.map(att => ({
                id: 'local_' + Date.now(),
                file_name: att.name,
                file_size: att.size,
                file_type: att.type,
                created_at: att.uploadDate,
                notes: att.notes,
                isLocal: true
            }));
            console.log(`💾 تم جلب ${attachments.length} مرفق محلي`);
        }

        // Force visibility before updating
        listContainer.style.display = 'block';
        listContainer.style.visibility = 'visible';
        listContainer.style.opacity = '1';

        // Update the list
        listContainer.innerHTML = renderCardAttachmentsList(cardKey, attachments);

        // Force visibility of all attachment items
        setTimeout(() => {
            const attachmentItems = listContainer.querySelectorAll('.attachment-item');
            attachmentItems.forEach(item => {
                item.style.display = 'flex';
                item.style.visibility = 'visible';
                item.style.opacity = '1';
            });

            // Force visibility of the entire container again
            listContainer.style.display = 'block';
            listContainer.style.visibility = 'visible';
            listContainer.style.opacity = '1';

            console.log(`🔧 تم إجبار إظهار ${attachmentItems.length} عنصر مرفق`);
        }, 100);

        // Update attachment count badge if exists
        const countBadge = document.querySelector(`[data-card-key="${cardKey}"] .attachment-count`);
        if (countBadge) {
            countBadge.textContent = `${attachments.length} مرفق`;
        }

        console.log(`✅ تم تحديث قائمة مرفقات البطاقة: ${attachments.length} مرفق`);

    } catch (error) {
        console.error('❌ خطأ في تحديث قائمة مرفقات البطاقة:', error);
    }
}

// Check Supabase availability for card attachments
async function checkSupabaseAvailability() {
    try {
        if (!supabaseClient || typeof getCardAttachmentsEnhanced !== 'function') {
            return false;
        }

        // Test connection with a simple query
        const { error } = await supabaseClient
            .from('card_attachments')
            .select('count', { count: 'exact', head: true });

        return !error;
    } catch (error) {
        console.warn('⚠️ Supabase غير متوفر للبطاقات:', error);
        return false;
    }
}

// Retry card upload to Supabase
async function retryCardUploadToSupabase(cardKey) {
    try {
        const localAttachments = window.cardAttachments?.[cardKey] || [];

        if (localAttachments.length === 0) {
            alert('لا توجد مرفقات محلية للمزامنة');
            return;
        }

        // Show progress modal
        const progressModal = document.createElement('div');
        progressModal.className = 'modal-overlay';
        progressModal.innerHTML = `
            <div class="modal-box" style="text-align: center; padding: 40px;">
                <i class="fas fa-sync-alt fa-spin" style="font-size: 3rem; color: #17a2b8; margin-bottom: 1rem;"></i>
                <h3>مزامنة مرفقات البطاقة</h3>
                <p>جاري رفع المرفقات المحلية إلى السحابة...</p>
                <div class="progress-info">
                    <span id="syncProgress">0 من ${localAttachments.length}</span>
                </div>
            </div>
        `;
        document.body.appendChild(progressModal);

        let syncedCount = 0;
        const progressElement = document.getElementById('syncProgress');

        for (const attachment of localAttachments) {
            try {
                // Convert data URL back to file
                const response = await fetch(attachment.data);
                const blob = await response.blob();
                const file = new File([blob], attachment.name, { type: attachment.type });

                // Upload to Supabase
                if (typeof uploadCardFileToSupabase === 'function') {
                    await uploadCardFileToSupabase(file, cardKey, attachment.notes);
                    syncedCount++;

                    if (progressElement) {
                        progressElement.textContent = `${syncedCount} من ${localAttachments.length}`;
                    }
                }
            } catch (error) {
                console.error(`❌ فشل في مزامنة ${attachment.name}:`, error);
            }
        }

        // Remove progress modal
        progressModal.remove();

        if (syncedCount > 0) {
            // Clear local attachments after successful sync
            delete window.cardAttachments[cardKey];
            localStorage.setItem('cardAttachments', JSON.stringify(window.cardAttachments));

            // Refresh the list
            await refreshCardAttachmentsList(cardKey);

            alert(`تم مزامنة ${syncedCount} من ${localAttachments.length} ملف بنجاح`);
        } else {
            alert('فشل في مزامنة المرفقات. تحقق من الاتصال وحاول مرة أخرى.');
        }

    } catch (error) {
        console.error('❌ خطأ في إعادة المحاولة:', error);
        // تم إزالة رسالة الخطأ حسب طلب المستخدم
    }
}

// عرض نافذة تحرير البطاقة
function showCardEditModal(contractNumber, propertyName, unitNumber) {
    console.log('🔍 بدء البحث عن الوحدة للتعديل:', { contractNumber, propertyName, unitNumber });

    // التحقق من وجود البيانات أولاً
    if (!properties || !Array.isArray(properties)) {
        console.error('❌ مصفوفة properties غير موجودة في showCardEditModal:', properties);
        // تم إزالة رسالة الخطأ حسب طلب المستخدم
        return;
    }

    console.log('✅ البيانات متوفرة في showCardEditModal، عدد العقارات:', properties.length);

    // البحث عن البيانات المطلوب تحريرها مع تسجيل مفصل
    let property;
    let searchMethod = '';

    if (contractNumber && propertyName) {
        // البحث بناءً على رقم العقد واسم العقار
        searchMethod = 'contract_and_property';
        property = properties.find(p =>
            p['رقم العقد'] === contractNumber && p['اسم العقار'] === propertyName
        );
        console.log(`🔍 البحث بالعقد والعقار: العقد="${contractNumber}", العقار="${propertyName}" → ${property ? 'موجود' : 'غير موجود'}`);
    }

    if (!property && unitNumber && propertyName) {
        // البحث بناءً على رقم الوحدة واسم العقار
        searchMethod = 'unit_and_property';
        property = properties.find(p =>
            p['رقم  الوحدة '] === unitNumber && p['اسم العقار'] === propertyName
        );
        console.log(`🔍 البحث بالوحدة والعقار: الوحدة="${unitNumber}", العقار="${propertyName}" → ${property ? 'موجود' : 'غير موجود'}`);
    }

    // إذا لم يتم العثور على الوحدة، جرب بحث أوسع
    if (!property && unitNumber) {
        searchMethod = 'unit_only';
        property = properties.find(p => p['رقم  الوحدة '] === unitNumber);
        console.log(`🔍 البحث بالوحدة فقط: الوحدة="${unitNumber}" → ${property ? 'موجود' : 'غير موجود'}`);

        if (property) {
            console.log(`⚠️ تم العثور على الوحدة بالرقم فقط، لكن العقار مختلف: "${property['اسم العقار']}" بدلاً من "${propertyName}"`);
        }
    }

    if (!property) {
        console.error('❌ فشل في العثور على الوحدة بجميع طرق البحث');
        console.log('📊 جميع الوحدات المتاحة:');
        properties.forEach((p, index) => {
            console.log(`   ${index}: وحدة="${p['رقم  الوحدة ']}", عقار="${p['اسم العقار']}", عقد="${p['رقم العقد']}"`);
        });

        alert('❌ لم يتم العثور على البيانات المطلوبة\n\nتفاصيل البحث:\n' +
              `- رقم العقد: ${contractNumber || 'غير محدد'}\n` +
              `- اسم العقار: ${propertyName || 'غير محدد'}\n` +
              `- رقم الوحدة: ${unitNumber || 'غير محدد'}\n\n` +
              'يرجى التحقق من صحة البيانات أو إعادة تحميل الصفحة.');
        return;
    }

    console.log(`✅ تم العثور على الوحدة بطريقة: ${searchMethod}`);
    console.log('📋 بيانات الوحدة الموجودة:', {
        unitNumber: property['رقم  الوحدة '],
        propertyName: property['اسم العقار'],
        contractNumber: property['رقم العقد'],
        tenant: property['اسم المستأجر']
    });

    // ✅ البحث عن جميع الوحدات المرتبطة (نفس العقد أو نفس المستأجر) مع تجنب التكرار
    let relatedUnits = [];

    if (contractNumber && contractNumber.trim() !== '') {
        // البحث بناءً على رقم العقد مع تجنب التكرار
        const uniqueUnits = new Map();
        const candidateUnits = properties.filter(p =>
            p['رقم العقد'] === contractNumber &&
            p['اسم العقار'] === propertyName
        );

        // إزالة التكرار بناءً على رقم الوحدة
        candidateUnits.forEach(unit => {
            const unitKey = `${unit['اسم العقار']}_${unit['رقم  الوحدة ']}`;
            if (!uniqueUnits.has(unitKey)) {
                uniqueUnits.set(unitKey, unit);
            }
        });

        relatedUnits = Array.from(uniqueUnits.values());
        console.log(`🔗 تم العثور على ${relatedUnits.length} وحدة فريدة مرتبطة بالعقد "${contractNumber}" (من أصل ${candidateUnits.length})`);
    } else if (property['اسم المستأجر'] && property['اسم المستأجر'].trim() !== '') {
        // البحث بناءً على اسم المستأجر مع تجنب التكرار
        const uniqueUnits = new Map();
        const candidateUnits = properties.filter(p =>
            p['اسم المستأجر'] === property['اسم المستأجر'] &&
            p['اسم العقار'] === propertyName
        );

        // إزالة التكرار بناءً على رقم الوحدة
        candidateUnits.forEach(unit => {
            const unitKey = `${unit['اسم العقار']}_${unit['رقم  الوحدة ']}`;
            if (!uniqueUnits.has(unitKey)) {
                uniqueUnits.set(unitKey, unit);
            }
        });

        relatedUnits = Array.from(uniqueUnits.values());
        console.log(`🔗 تم العثور على ${relatedUnits.length} وحدة فريدة مرتبطة بالمستأجر "${property['اسم المستأجر']}" (من أصل ${candidateUnits.length})`);
    } else {
        // وحدة واحدة فقط
        relatedUnits = [property];
        console.log(`📋 وحدة واحدة فقط (لا يوجد عقد أو مستأجر)`);
    }

    // إذا كان هناك أكثر من وحدة، استخدم نافذة التحرير المتعددة
    if (relatedUnits.length > 1) {
        console.log(`🎯 عرض نافذة التحرير المتعددة لـ ${relatedUnits.length} وحدة`);
        showMultiUnitEditModal(relatedUnits, property);
        return;
    }

    // إذا كانت وحدة واحدة فقط، استخدم النافذة العادية
    console.log(`📝 عرض نافذة التحرير العادية لوحدة واحدة`);
    showSingleUnitEditModal(property, contractNumber, propertyName, unitNumber);
}

// عرض نافذة تحرير محسنة للوحدات المتعددة - نسخة طبق الأصل من الفردية
function showMultiUnitEditModal(relatedUnits, primaryUnit) {
    console.log(`🎯 إنشاء نافذة تحرير محسنة لـ ${relatedUnits.length} وحدة`);

    // التحقق من وجود البيانات أولاً
    if (!ensurePropertiesLoaded('showMultiUnitEditModal')) {
        return;
    }

    const contractNumber = primaryUnit['رقم العقد'] || '';
    const propertyName = primaryUnit['اسم العقار'] || '';
    const tenantName = primaryUnit['اسم المستأجر'] || '';
    const unitNumber = primaryUnit['رقم  الوحدة '] || '';

    let html = `
    <div class="modal-overlay" style="display:flex;">
        <div class="modal-box property-edit-modal">
            <button class="close-modal" onclick="closeModal()">×</button>
            <div class="edit-modal-header">
                <h2><i class="fas fa-edit"></i> تحرير عدة وحدات</h2>
                <p>${propertyName} - ${contractNumber ? 'عقد رقم: ' + contractNumber : 'مستأجر: ' + tenantName}</p>
                <div class="units-summary">
                    <span class="units-count"><i class="fas fa-home"></i> ${relatedUnits.length} وحدة</span>
                    <span class="units-list">${relatedUnits.map(u => u['رقم  الوحدة '] || 'غير محدد').join(', ')}</span>
                </div>
            </div>
            <div class="edit-modal-content">
                <form id="multiUnitEditForm" onsubmit="saveMultiUnitEdit(event)">
                    <!-- نوع العملية - حقل إجباري -->
                    <div class="operation-type-section">
                        <h3><i class="fas fa-cogs"></i> نوع العملية *</h3>
                        <div class="form-group">
                            <label for="operationType">اختر نوع العملية:</label>
                            <select id="operationType" name="operationType" required class="operation-type-select">
                                <option value="">-- اختر نوع العملية --</option>
                                <option value="${OPERATION_TYPES.EDIT_DATA}">تعديل بيانات موجودة</option>
                                <option value="${OPERATION_TYPES.NEW_CLIENT}">عميل جديد</option>
                                <option value="${OPERATION_TYPES.RENEW_CONTRACT}">تجديد عقد</option>
                                <option value="${OPERATION_TYPES.EMPTY_UNIT}">إفراغ وحدة</option>
                            </select>
                            <small class="field-note">يجب اختيار نوع العملية قبل الحفظ</small>
                        </div>
                    </div>

                    <!-- الحقول المخفية للبيانات الأصلية -->
                    <input type="hidden" name="originalContractNumber" value="${contractNumber}">
                    <input type="hidden" name="originalPropertyName" value="${propertyName}">
                    <input type="hidden" name="originalUnitNumber" value="${unitNumber}">
                    <input type="hidden" name="unitsCount" value="${relatedUnits.length}">

                    <div class="edit-form-sections">
                        <!-- المعلومات الأساسية -->
                        <div class="edit-section">
                            <h3><i class="fas fa-info-circle"></i> المعلومات الأساسية</h3>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>اسم المستأجر:</label>
                                    <input type="text" name="اسم المستأجر" value="${primaryUnit['اسم المستأجر'] || ''}" placeholder="اسم المستأجر">
                                </div>
                                <div class="form-group">
                                    <label>رقم جوال المستأجر:</label>
                                    <input type="tel" name="رقم جوال المستأجر" value="${primaryUnit['رقم جوال المستأجر'] || ''}" placeholder="05xxxxxxxx" pattern="[0-9]{10}" maxlength="10">
                                    <small class="field-note">أدخل رقم الجوال بدون مسافات (10 أرقام)</small>
                                </div>
                                <div class="form-group">
                                    <label>رقم جوال إضافي:</label>
                                    <input type="tel" name="رقم جوال إضافي" value="${primaryUnit['رقم جوال إضافي'] || ''}" placeholder="05xxxxxxxx" pattern="[0-9]{10}" maxlength="10">
                                    <small class="field-note">رقم جوال ثاني للمستأجر (اختياري)</small>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>المالك:</label>
                                    <select name="المالك" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                                        <option value="">-- اختر المالك --</option>
                                        <option value="أبو خالد" ${(primaryUnit['المالك'] === 'أبو خالد') ? 'selected' : ''}>أبو خالد</option>
                                        <option value="أبو تميم" ${(primaryUnit['المالك'] === 'أبو تميم') ? 'selected' : ''}>أبو تميم</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>رقم العقد:</label>
                                    <input type="text" name="رقم العقد" value="${primaryUnit['رقم العقد'] || ''}" placeholder="رقم العقد">
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>نوع العقد:</label>
                                    <select name="نوع العقد">
                                        <option value="سكني" ${primaryUnit['نوع العقد'] === 'سكني' ? 'selected' : ''}>سكني</option>
                                        <option value="ضريبي" ${primaryUnit['نوع العقد'] === 'ضريبي' ? 'selected' : ''}>ضريبي</option>
                                        <option value="راكض" ${primaryUnit['نوع العقد'] === 'راكض' ? 'selected' : ''}>راكض</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>نوع العقار:</label>
                                    <select name="نوع العقار" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                                        <option value="">-- اختر نوع العقار --</option>
                                        <option value="مستودع" ${primaryUnit['نوع العقار'] === 'مستودع' ? 'selected' : ''}>مستودع</option>
                                        <option value="بيت" ${primaryUnit['نوع العقار'] === 'بيت' ? 'selected' : ''}>بيت</option>
                                        <option value="استراحة" ${primaryUnit['نوع العقار'] === 'استراحة' ? 'selected' : ''}>استراحة</option>
                                        <option value="مصنع" ${primaryUnit['نوع العقار'] === 'مصنع' ? 'selected' : ''}>مصنع</option>
                                        <option value="شقة" ${primaryUnit['نوع العقار'] === 'شقة' ? 'selected' : ''}>شقة</option>
                                        <option value="غرفة" ${primaryUnit['نوع العقار'] === 'غرفة' ? 'selected' : ''}>غرفة</option>
                                        <option value="معرض" ${primaryUnit['نوع العقار'] === 'معرض' ? 'selected' : ''}>معرض</option>
                                        <option value="محل" ${primaryUnit['نوع العقار'] === 'محل' ? 'selected' : ''}>محل</option>
                                        <option value="حوش" ${primaryUnit['نوع العقار'] === 'حوش' ? 'selected' : ''}>حوش</option>
                                        <option value="مزرعة" ${primaryUnit['نوع العقار'] === 'مزرعة' ? 'selected' : ''}>مزرعة</option>
                                        <option value="فلة" ${primaryUnit['نوع العقار'] === 'فلة' ? 'selected' : ''}>فلة</option>
                                        <option value="ورشة" ${primaryUnit['نوع العقار'] === 'ورشة' ? 'selected' : ''}>ورشة</option>
                                        <option value="أرض" ${primaryUnit['نوع العقار'] === 'أرض' ? 'selected' : ''}>أرض</option>
                                        <option value="عمارة" ${primaryUnit['نوع العقار'] === 'عمارة' ? 'selected' : ''}>عمارة</option>
                                        <option value="مكتب" ${primaryUnit['نوع العقار'] === 'مكتب' ? 'selected' : ''}>مكتب</option>
                                    </select>
                                    <small class="field-note">اختر نوع العقار لتصنيف أفضل</small>
                                </div>
                            </div>
                        </div>

                        <!-- معلومات العقار والصك -->
                        <div class="edit-section">
                            <h3><i class="fas fa-building"></i> معلومات العقار والصك</h3>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>اسم العقار:</label>
                                    <input type="text" name="اسم العقار" value="${primaryUnit['اسم العقار'] || ''}" placeholder="اسم العقار" readonly style="background-color: #f8f9fa;">
                                    <small class="field-note">لتغيير اسم العقار، استخدم "تحرير العقار" من الإحصائيات</small>
                                </div>
                                <div class="form-group">
                                    <label>المدينة:</label>
                                    <input type="text" name="المدينة" value="${primaryUnit['المدينة'] || ''}" placeholder="المدينة" readonly style="background-color: #f8f9fa;">
                                    <small class="field-note">لتغيير المدينة، استخدم "تحرير العقار" من الإحصائيات</small>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>رقم الوحدة:</label>
                                    <input type="text" name="رقم  الوحدة " value="${primaryUnit['رقم  الوحدة '] || ''}" placeholder="رقم الوحدة">
                                    <small class="field-note">رقم الوحدة يجب أن يكون فريداً</small>
                                </div>
                                <div class="form-group">
                                    <label>رقم الصك:</label>
                                    <input type="text" name="رقم الصك" value="${primaryUnit['رقم الصك'] || ''}" placeholder="رقم الصك">
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>مساحة الصك (م²):</label>
                                    <input type="number" name="مساحةالصك" value="${primaryUnit['مساحةالصك'] || ''}" step="0.01" placeholder="مساحة الصك بالمتر المربع">
                                </div>
                                <div class="form-group">
                                    <label>السجل العيني:</label>
                                    <input type="text" name="السجل العيني " value="${primaryUnit['السجل العيني '] || ''}" placeholder="رقم السجل العيني">
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group full-width">
                                    <label>موقع العقار:</label>
                                    <input type="url" name="موقع العقار" value="${primaryUnit['موقع العقار'] || ''}" placeholder="رابط موقع العقار على الخريطة">
                                    <small class="field-note">يمكنك إدخال رابط خرائط جوجل أو أي رابط آخر للموقع</small>
                                </div>
                            </div>
                        </div>

                        <!-- التواريخ -->
                        <div class="edit-section">
                            <h3><i class="fas fa-calendar-alt"></i> التواريخ</h3>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>تاريخ البداية:</label>
                                    <input type="date" name="تاريخ البداية" value="${formatDateForInput(primaryUnit['تاريخ البداية'])}">
                                </div>
                                <div class="form-group">
                                    <label>تاريخ النهاية:</label>
                                    <input type="date" name="تاريخ النهاية" value="${formatDateForInput(primaryUnit['تاريخ النهاية'])}">
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>تاريخ نهاية القسط:</label>
                                    <input type="date" name="تاريخ نهاية القسط" value="${formatDateForInput(primaryUnit['تاريخ نهاية القسط'])}">
                                </div>
                                <div class="form-group">
                                    <label>عدد الأقساط المتبقية:</label>
                                    <input type="number" name="عدد الاقساط المتبقية" value="${primaryUnit['عدد الاقساط المتبقية'] || ''}" min="0">
                                </div>
                            </div>
                        </div>

                        <!-- المبالغ المالية -->
                        <div class="edit-section">
                            <h3><i class="fas fa-money-bill-wave"></i> المبالغ المالية</h3>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>قيمة الإيجار:</label>
                                    <input type="number" name="قيمة  الايجار " value="${primaryUnit['قيمة  الايجار '] || ''}" step="0.01" placeholder="قيمة الإيجار">
                                </div>
                                <div class="form-group">
                                    <label>الإجمالي:</label>
                                    <input type="number" name="الاجمالى" value="${primaryUnit['الاجمالى'] || ''}" step="0.01" placeholder="المبلغ الإجمالي">
                                </div>
                            </div>
                        </div>

                        <!-- إدارة الأقساط -->
                        <div class="edit-section">
                            <h3><i class="fas fa-calendar-check"></i> إدارة الأقساط</h3>
                            <div class="installments-management">
                                <div class="installments-header">
                                    <p class="section-description">يمكنك إضافة وتعديل أقساط العقد مع تواريخها ومبالغها</p>
                                    <div class="total-display" style="background: linear-gradient(135deg, #e3f2fd, #bbdefb); padding: 10px; border-radius: 6px; margin: 10px 0; text-align: center; font-weight: bold; color: #1976d2;">
                                        ${(() => {
                                            const yearlyData = calculateYearlyTotal(primaryUnit);
                                            return `الإجمالي: ${yearlyData.total.toLocaleString()} ريال (${yearlyData.count} أقساط)`;
                                        })()}
                                    </div>
                                    <button type="button" onclick="addNewInstallment()" class="btn-add-installment">
                                        <i class="fas fa-plus"></i> إضافة قسط جديد
                                    </button>
                                </div>
                                <div id="installmentsContainer" class="installments-container">
                                    ${renderInstallmentsForEdit(primaryUnit)}
                                </div>
                            </div>
                        </div>

                        <!-- تفاصيل الوحدة -->
                        <div class="edit-section">
                            <h3><i class="fas fa-home"></i> تفاصيل الوحدة</h3>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>مساحة الوحدة (م²):</label>
                                    <input type="number" name="المساحة" value="${primaryUnit['المساحة'] || ''}" step="0.01" placeholder="مساحة الوحدة بالمتر المربع">
                                    <small class="field-note">مساحة الوحدة الفعلية (قد تختلف عن مساحة الصك)</small>
                                </div>
                                <div class="form-group">
                                    <label>رقم حساب الكهرباء:</label>
                                    <input type="text" name="رقم حساب الكهرباء" value="${primaryUnit['رقم حساب الكهرباء'] || ''}" placeholder="رقم حساب الكهرباء">
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>الارتفاع:</label>
                                    <input type="text" name="الارتفاع" value="${primaryUnit['الارتفاع'] || ''}" placeholder="ارتفاع الوحدة">
                                </div>
                                <div class="form-group">
                                    <label>ملاحظات الوحدة:</label>
                                    <input type="text" name="ملاحظات الوحدة" value="${primaryUnit['ملاحظات الوحدة'] || ''}" placeholder="أي ملاحظات خاصة بالوحدة">
                                </div>
                            </div>
                        </div>

                        <!-- قسم الملاحظات والتعليقات -->
                        <div class="edit-section">
                            <h3><i class="fas fa-sticky-note"></i> ملاحظات وتعليقات البطاقة</h3>
                            <div class="form-row">
                                <div class="form-group full-width">
                                    <label>ملاحظات عامة:</label>
                                    <textarea name="notes" rows="4" placeholder="أضف ملاحظات أو تعليقات عامة حول هذه البطاقة...">${primaryUnit['notes'] || ''}</textarea>
                                    <small class="field-note">يمكنك إضافة أي ملاحظات أو تعليقات مهمة حول هذه البطاقة</small>
                                </div>
                            </div>
                        </div>

                        <!-- ربط الوحدات -->
                        <div class="edit-section">
                            <h3><i class="fas fa-link"></i> ربط الوحدات</h3>
                            <div class="units-linking-section">
                                <p class="section-description">يمكنك ربط وحدات إضافية بهذه البطاقة لتجميعها تحت عقد واحد</p>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label>الوحدات المتاحة للربط:</label>
                                        <div id="availableUnitsForLinking" class="units-linking-list">
                                            ${renderAvailableUnitsForLinking(propertyName, contractNumber, unitNumber)}
                                        </div>
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label>الوحدات المرتبطة حالياً:</label>
                                        <div id="linkedUnitsDisplay" class="linked-units-display">
                                            ${renderLinkedUnits(propertyName, contractNumber)}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- الحقول المخفية الإضافية -->
                    <input type="hidden" name="originalContractNumber" value="${contractNumber || ''}">
                    <input type="hidden" name="originalPropertyName" value="${propertyName}">
                    <input type="hidden" name="originalUnitNumber" value="${unitNumber || ''}">

                    <!-- أزرار الحفظ والإلغاء -->
                    <div class="edit-modal-actions">
                        <div class="action-group primary-actions">
                            <button type="submit" class="btn-primary">
                                <i class="fas fa-save"></i> حفظ التغييرات
                            </button>
                            <button type="button" onclick="emptyUnit('${contractNumber || ''}', '${propertyName}', '${unitNumber || ''}')" class="btn-danger">
                                <i class="fas fa-broom"></i> إفراغ الوحدة
                            </button>
                            <button type="button" onclick="closeModal()" class="btn-secondary">
                                <i class="fas fa-times"></i> إلغاء
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>`;

    document.body.insertAdjacentHTML('beforeend', html);

    // إضافة حدث إغلاق للمودال
    document.querySelector('.modal-overlay:last-child').addEventListener('click', function(e) {
        if (e.target === this) {
            closeModal();
        }
    });

    // حفظ بيانات الوحدات للاستخدام في الدوال الأخرى
    window.currentEditingUnits = relatedUnits;
    window.currentPrimaryUnit = primaryUnit;
}

// تحديث قائمة الوحدات المتاحة للربط - محسن مع قائمة اختيار
function updateAvailableUnitsForLinking() {
    const availableUnitsDiv = document.getElementById('availableUnitsForLinking');
    if (!availableUnitsDiv) return;

    // الحصول على جميع الوحدات في نفس العقار
    const currentPropertyName = window.currentPrimaryUnit['اسم العقار'];
    const currentLinkedUnits = window.currentEditingUnits.map(u => u['رقم  الوحدة ']);

    const allUnitsInProperty = window.allData.filter(unit =>
        unit['اسم العقار'] === currentPropertyName &&
        !currentLinkedUnits.includes(unit['رقم  الوحدة '])
    );

    if (allUnitsInProperty.length === 0) {
        availableUnitsDiv.innerHTML = `
            <div class="no-units-message">
                <i class="fas fa-info-circle"></i>
                لا توجد وحدات متاحة للربط في عقار "${currentPropertyName}"
            </div>`;
        return;
    }

    // إنشاء قائمة اختيار محسنة + عرض الوحدات
    availableUnitsDiv.innerHTML = `
        <div class="unit-linking-section">
            <!-- قسم الاختيار السريع -->
            <div class="quick-selection-section">
                <h4><i class="fas fa-mouse-pointer"></i> اختيار سريع للوحدات:</h4>
                <div class="selection-controls">
                    <div class="dropdown-selection">
                        <label for="unitSelector">اختر وحدة للربط:</label>
                        <select id="unitSelector" class="unit-selector">
                            <option value="">-- اختر وحدة --</option>
                            ${allUnitsInProperty.map(unit => `
                                <option value="${unit['رقم  الوحدة ']}"
                                        data-tenant="${unit['اسم المستأجر'] || ''}"
                                        data-status="${calculateStatus(unit).final || 'غير محدد'}">
                                    وحدة ${unit['رقم  الوحدة ']} ${unit['اسم المستأجر'] ? '- ' + unit['اسم المستأجر'] : '- فارغ'}
                                </option>
                            `).join('')}
                        </select>
                        <button type="button" onclick="linkSelectedUnit()" class="btn-link-selected" title="ربط الوحدة المختارة">
                            <i class="fas fa-link"></i> ربط الوحدة المختارة
                        </button>
                    </div>

                    <div class="bulk-actions">
                        <button type="button" onclick="showBulkLinkingOptions()" class="btn-bulk-link" title="ربط متعدد">
                            <i class="fas fa-layer-group"></i> ربط متعدد
                        </button>
                        <button type="button" onclick="linkAllEmptyUnits()" class="btn-link-all-empty" title="ربط جميع الوحدات الفارغة">
                            <i class="fas fa-link"></i> ربط جميع الفارغة
                        </button>
                    </div>
                </div>
            </div>

            <!-- قسم عرض الوحدات التفصيلي -->
            <div class="detailed-units-section">
                <h4><i class="fas fa-list"></i> جميع الوحدات المتاحة (${allUnitsInProperty.length} وحدة):</h4>
                <div class="units-grid">
                    ${allUnitsInProperty.map(unit => `
                        <div class="available-unit-item" data-unit-number="${unit['رقم  الوحدة ']}">
                            <div class="unit-info">
                                <div class="unit-header">
                                    <i class="fas fa-home"></i>
                                    <span class="unit-number">وحدة ${unit['رقم  الوحدة '] || 'غير محدد'}</span>
                                    <span class="unit-status ${getUnitStatusClass(unit)}">${calculateStatus(unit).final || 'غير محدد'}</span>
                                </div>
                                <div class="unit-details">
                                    <span class="unit-tenant">
                                        <i class="fas fa-user"></i>
                                        ${unit['اسم المستأجر'] ? unit['اسم المستأجر'] : 'فارغ'}
                                    </span>
                                    ${unit['قيمة  الايجار '] ? `
                                        <span class="unit-rent">
                                            <i class="fas fa-money-bill-wave"></i>
                                            ${parseFloat(unit['قيمة  الايجار ']).toLocaleString()} ريال
                                        </span>
                                    ` : ''}
                                    ${unit['المساحة'] ? `
                                        <span class="unit-area">
                                            <i class="fas fa-expand-arrows-alt"></i>
                                            ${unit['المساحة']} م²
                                        </span>
                                    ` : ''}
                                </div>
                            </div>
                            <div class="unit-actions">
                                <button type="button" onclick="linkUnitToGroup('${unit['رقم  الوحدة ']}')"
                                        class="btn-link-unit ${!unit['اسم المستأجر'] ? 'empty-unit' : 'occupied-unit'}"
                                        title="ربط هذه الوحدة">
                                    <i class="fas fa-link"></i> ربط
                                </button>
                                <button type="button" onclick="previewUnitLinking('${unit['رقم  الوحدة ']}')"
                                        class="btn-preview-unit" title="معاينة الربط">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
        </div>
    `;

    // إضافة مستمع للتغيير في قائمة الاختيار
    const unitSelector = document.getElementById('unitSelector');
    if (unitSelector) {
        unitSelector.addEventListener('change', function() {
            const selectedOption = this.options[this.selectedIndex];
            const linkButton = document.querySelector('.btn-link-selected');

            if (this.value) {
                linkButton.disabled = false;
                linkButton.innerHTML = `<i class="fas fa-link"></i> ربط وحدة ${this.value}`;

                // إضافة معلومات إضافية
                const tenant = selectedOption.getAttribute('data-tenant');
                const status = selectedOption.getAttribute('data-status');

                linkButton.title = `ربط وحدة ${this.value} - ${tenant || 'فارغ'} - ${status}`;
            } else {
                linkButton.disabled = true;
                linkButton.innerHTML = '<i class="fas fa-link"></i> ربط الوحدة المختارة';
                linkButton.title = 'اختر وحدة أولاً';
            }
        });
    }
}

// تحديث قائمة الوحدات المتاحة
function refreshAvailableUnits() {
    console.log('🔄 تحديث قائمة الوحدات المتاحة');
    updateAvailableUnitsForLinking();
}

// ربط الوحدة المختارة من القائمة المنسدلة
function linkSelectedUnit() {
    const unitSelector = document.getElementById('unitSelector');
    if (!unitSelector || !unitSelector.value) {
        alert('يرجى اختيار وحدة أولاً');
        return;
    }

    const selectedUnitNumber = unitSelector.value;
    console.log(`🔗 ربط الوحدة المختارة: ${selectedUnitNumber}`);

    // استدعاء دالة الربط
    linkUnitToGroup(selectedUnitNumber);

    // إعادة تعيين القائمة بعد الربط
    setTimeout(() => {
        unitSelector.value = '';
        const linkButton = document.querySelector('.btn-link-selected');
        if (linkButton) {
            linkButton.disabled = true;
            linkButton.innerHTML = '<i class="fas fa-link"></i> ربط الوحدة المختارة';
        }
    }, 1000);
}

// معاينة ربط الوحدة قبل التنفيذ
function previewUnitLinking(unitNumber) {
    const unitToPreview = window.allData.find(unit =>
        unit['رقم  الوحدة '] === unitNumber &&
        unit['اسم العقار'] === window.currentPrimaryUnit['اسم العقار']
    );

    if (!unitToPreview) {
        alert('لم يتم العثور على الوحدة');
        return;
    }

    const primaryUnit = window.currentPrimaryUnit;

    const previewMessage = `🔍 معاينة ربط الوحدة

🏠 الوحدة المراد ربطها: ${unitNumber}
📍 العقار: ${unitToPreview['اسم العقار']}
👤 المستأجر الحالي: ${unitToPreview['اسم المستأجر'] || 'فارغ'}
📄 العقد الحالي: ${unitToPreview['رقم العقد'] || 'فارغ'}

⬇️ ستصبح بعد الربط:
👤 المستأجر الجديد: ${primaryUnit['اسم المستأجر'] || 'فارغ'}
📄 العقد الجديد: ${primaryUnit['رقم العقد'] || 'فارغ'}
💰 الإيجار: ${primaryUnit['قيمة  الايجار '] ? parseFloat(primaryUnit['قيمة  الايجار ']).toLocaleString() + ' ريال' : 'غير محدد'}

هل تريد المتابعة مع الربط؟`;

    if (confirm(previewMessage)) {
        linkUnitToGroup(unitNumber);
    }
}

// إظهار خيارات الربط المتعدد
function showBulkLinkingOptions() {
    const currentPropertyName = window.currentPrimaryUnit['اسم العقار'];
    const currentLinkedUnits = window.currentEditingUnits.map(u => u['رقم  الوحدة ']);

    const availableUnits = window.allData.filter(unit =>
        unit['اسم العقار'] === currentPropertyName &&
        !currentLinkedUnits.includes(unit['رقم  الوحدة '])
    );

    if (availableUnits.length === 0) {
        alert('لا توجد وحدات متاحة للربط');
        return;
    }

    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.innerHTML = `
        <div class="modal-content" style="max-width: 700px;">
            <div class="modal-header">
                <h2><i class="fas fa-layer-group"></i> ربط متعدد للوحدات</h2>
                <p>اختر الوحدات التي تريد ربطها مع الوحدة الأساسية</p>
            </div>
            <div class="modal-body">
                <div class="bulk-selection-info">
                    <p><strong>الوحدة الأساسية:</strong> ${window.currentPrimaryUnit['رقم  الوحدة ']}</p>
                    <p><strong>المستأجر:</strong> ${window.currentPrimaryUnit['اسم المستأجر'] || 'فارغ'}</p>
                    <p><strong>العقد:</strong> ${window.currentPrimaryUnit['رقم العقد'] || 'فارغ'}</p>
                </div>

                <div class="units-selection">
                    <h4>اختر الوحدات للربط:</h4>
                    <div class="selection-controls">
                        <button type="button" onclick="selectAllUnits()" class="btn-select-all">
                            <i class="fas fa-check-square"></i> تحديد الكل
                        </button>
                        <button type="button" onclick="selectEmptyUnits()" class="btn-select-empty">
                            <i class="fas fa-square"></i> تحديد الفارغة فقط
                        </button>
                        <button type="button" onclick="clearAllSelections()" class="btn-clear-all">
                            <i class="fas fa-times"></i> إلغاء التحديد
                        </button>
                    </div>

                    <div class="units-checklist">
                        ${availableUnits.map(unit => `
                            <div class="unit-checkbox-item">
                                <label class="checkbox-label">
                                    <input type="checkbox" value="${unit['رقم  الوحدة ']}" class="unit-checkbox">
                                    <span class="checkmark"></span>
                                    <div class="unit-info">
                                        <span class="unit-number">وحدة ${unit['رقم  الوحدة ']}</span>
                                        <span class="unit-details">
                                            ${unit['اسم المستأجر'] ? unit['اسم المستأجر'] : 'فارغ'} -
                                            ${calculateStatus(unit).final || 'غير محدد'}
                                        </span>
                                    </div>
                                </label>
                            </div>
                        `).join('')}
                    </div>
                </div>
            </div>
            <div class="modal-actions">
                <button class="btn-primary" onclick="executeBulkLinking()">
                    <i class="fas fa-link"></i> ربط الوحدات المختارة
                </button>
                <button class="btn-secondary" onclick="closeModal()">
                    <i class="fas fa-times"></i> إلغاء
                </button>
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    // إغلاق النافذة عند النقر خارجها
    modal.addEventListener('click', function(e) {
        if (e.target === this) closeModal();
    });
}

// ربط جميع الوحدات الفارغة
async function linkAllEmptyUnits() {
    const currentPropertyName = window.currentPrimaryUnit['اسم العقار'];
    const currentLinkedUnits = window.currentEditingUnits.map(u => u['رقم  الوحدة ']);

    const emptyUnits = window.allData.filter(unit =>
        unit['اسم العقار'] === currentPropertyName &&
        !currentLinkedUnits.includes(unit['رقم  الوحدة ']) &&
        (!unit['اسم المستأجر'] || unit['اسم المستأجر'].trim() === '')
    );

    if (emptyUnits.length === 0) {
        alert('لا توجد وحدات فارغة متاحة للربط');
        return;
    }

    const confirmMessage = `هل تريد ربط جميع الوحدات الفارغة؟

عدد الوحدات: ${emptyUnits.length} وحدة
الوحدات: ${emptyUnits.map(u => u['رقم  الوحدة ']).join(', ')}

سيتم نسخ بيانات المستأجر والعقد من الوحدة الأساسية إلى جميع هذه الوحدات.`;

    if (!confirm(confirmMessage)) {
        return;
    }

    console.log(`🔗 بدء ربط ${emptyUnits.length} وحدة فارغة...`);

    let successCount = 0;
    let failCount = 0;
    const results = [];

    for (const unit of emptyUnits) {
        try {
            console.log(`🔗 ربط الوحدة ${unit['رقم  الوحدة ']}...`);
            await linkUnitToGroup(unit['رقم  الوحدة ']);
            successCount++;
            results.push({ unit: unit['رقم  الوحدة '], success: true });
        } catch (error) {
            console.error(`❌ فشل ربط الوحدة ${unit['رقم  الوحدة ']}:`, error);
            failCount++;
            results.push({ unit: unit['رقم  الوحدة '], success: false, error: error.message });
        }

        // توقف قصير بين كل ربط
        await new Promise(resolve => setTimeout(resolve, 500));
    }

    const resultMessage = `🎉 اكتمل ربط الوحدات الفارغة!

✅ نجح: ${successCount} وحدة
❌ فشل: ${failCount} وحدة

${results.map(r => `${r.success ? '✅' : '❌'} ${r.unit}`).join('\n')}

${successCount > 0 ? '🔗 تم حفظ جميع الوحدات الناجحة في Supabase' : ''}`;

    alert(resultMessage);
    showToast(`تم ربط ${successCount} وحدة من أصل ${emptyUnits.length}`, successCount > 0 ? 'success' : 'error');
}

// دوال مساعدة للربط المتعدد
function selectAllUnits() {
    const checkboxes = document.querySelectorAll('.unit-checkbox');
    checkboxes.forEach(checkbox => checkbox.checked = true);
}

function selectEmptyUnits() {
    const checkboxes = document.querySelectorAll('.unit-checkbox');
    checkboxes.forEach(checkbox => {
        const unitNumber = checkbox.value;
        const unit = window.allData.find(u => u['رقم  الوحدة '] === unitNumber);
        checkbox.checked = !unit['اسم المستأجر'] || unit['اسم المستأجر'].trim() === '';
    });
}

function clearAllSelections() {
    const checkboxes = document.querySelectorAll('.unit-checkbox');
    checkboxes.forEach(checkbox => checkbox.checked = false);
}

// تنفيذ الربط المتعدد
async function executeBulkLinking() {
    const selectedCheckboxes = document.querySelectorAll('.unit-checkbox:checked');

    if (selectedCheckboxes.length === 0) {
        alert('يرجى اختيار وحدة واحدة على الأقل');
        return;
    }

    const selectedUnits = Array.from(selectedCheckboxes).map(cb => cb.value);

    const confirmMessage = `هل تريد ربط الوحدات المختارة؟

عدد الوحدات: ${selectedUnits.length} وحدة
الوحدات: ${selectedUnits.join(', ')}

سيتم نسخ بيانات المستأجر والعقد من الوحدة الأساسية إلى جميع هذه الوحدات.`;

    if (!confirm(confirmMessage)) {
        return;
    }

    // إغلاق النافذة
    closeModal();

    console.log(`🔗 بدء الربط المتعدد لـ ${selectedUnits.length} وحدة...`);

    let successCount = 0;
    let failCount = 0;
    const results = [];

    // تعطيل الواجهة أثناء المعالجة
    const loadingMessage = document.createElement('div');
    loadingMessage.className = 'loading-overlay';
    loadingMessage.innerHTML = `
        <div class="loading-content">
            <i class="fas fa-spinner fa-spin"></i>
            <h3>جاري ربط الوحدات...</h3>
            <p>تم ربط <span id="progressCount">0</span> من ${selectedUnits.length} وحدة</p>
        </div>
    `;
    document.body.appendChild(loadingMessage);

    for (let i = 0; i < selectedUnits.length; i++) {
        const unitNumber = selectedUnits[i];
        try {
            console.log(`🔗 ربط الوحدة ${unitNumber} (${i + 1}/${selectedUnits.length})...`);

            // تحديث العداد
            const progressCount = document.getElementById('progressCount');
            if (progressCount) {
                progressCount.textContent = i;
            }

            await linkUnitToGroup(unitNumber);
            successCount++;
            results.push({ unit: unitNumber, success: true });

            console.log(`✅ نجح ربط الوحدة ${unitNumber}`);
        } catch (error) {
            console.error(`❌ فشل ربط الوحدة ${unitNumber}:`, error);
            failCount++;
            results.push({ unit: unitNumber, success: false, error: error.message });
        }

        // توقف قصير بين كل ربط
        await new Promise(resolve => setTimeout(resolve, 800));
    }

    // إزالة رسالة التحميل
    document.body.removeChild(loadingMessage);

    const resultMessage = `🎉 اكتمل الربط المتعدد!

✅ نجح: ${successCount} وحدة
❌ فشل: ${failCount} وحدة

النتائج التفصيلية:
${results.map(r => `${r.success ? '✅' : '❌'} وحدة ${r.unit}${r.error ? ' - ' + r.error : ''}`).join('\n')}

${successCount > 0 ? '🔗 تم حفظ جميع الوحدات الناجحة في Supabase' : ''}`;

    alert(resultMessage);
    showToast(`تم ربط ${successCount} وحدة من أصل ${selectedUnits.length}`, successCount > 0 ? 'success' : 'error');
}

// إضافة الدوال للنطاق العام
window.linkSelectedUnit = linkSelectedUnit;
window.previewUnitLinking = previewUnitLinking;
window.showBulkLinkingOptions = showBulkLinkingOptions;
window.linkAllEmptyUnits = linkAllEmptyUnits;
window.selectAllUnits = selectAllUnits;
window.selectEmptyUnits = selectEmptyUnits;
window.clearAllSelections = clearAllSelections;
window.executeBulkLinking = executeBulkLinking;

// ربط وحدة جديدة للمجموعة - محسن مع حفظ في Supabase
async function linkUnitToGroup(unitNumber) {
    if (!unitNumber) {
        alert('رقم الوحدة غير صحيح');
        return;
    }

    console.log(`🔗 بدء ربط الوحدة ${unitNumber} بالمجموعة...`);

    // البحث عن الوحدة في البيانات
    const unitToLink = window.allData.find(unit =>
        unit['رقم  الوحدة '] === unitNumber &&
        unit['اسم العقار'] === window.currentPrimaryUnit['اسم العقار']
    );

    if (!unitToLink) {
        alert('لم يتم العثور على الوحدة');
        return;
    }

    // التحقق من عدم وجود الوحدة مسبقاً
    const alreadyLinked = window.currentEditingUnits.some(unit =>
        unit['رقم  الوحدة '] === unitNumber
    );

    if (alreadyLinked) {
        alert('هذه الوحدة مرتبطة بالفعل');
        return;
    }

    try {
        // 🔧 إصلاح جديد: نسخ البيانات من الوحدة الأساسية إلى الوحدة المربوطة
        const primaryUnit = window.currentPrimaryUnit;
        if (primaryUnit) {
            console.log(`📝 نسخ البيانات من الوحدة الأساسية ${primaryUnit['رقم  الوحدة ']} إلى الوحدة المربوطة ${unitNumber}`);

            // نسخ جميع البيانات المهمة من الوحدة الأساسية
            const fieldsToSync = [
                'اسم المستأجر',
                'رقم العقد',
                'نوع العقد',
                'قيمة  الايجار ',
                'تاريخ البداية',
                'تاريخ النهاية',
                'الاجمالى',
                'المالك',
                'رقم الصك',
                'السجل العيني ',
                'رقم حساب الكهرباء',
                'عدد الاقساط المتبقية',
                'تاريخ القسط الاول',
                'مبلغ القسط الاول',
                'تاريخ القسط الثاني',
                'مبلغ القسط الثاني',
                'تاريخ انتهاء الاقساط'
            ];

            fieldsToSync.forEach(field => {
                if (primaryUnit[field] !== undefined && primaryUnit[field] !== null) {
                    unitToLink[field] = primaryUnit[field];
                }
            });

            // تحديث البيانات المحلية فوراً
            updateLocalDataForUnit(unitToLink);
            console.log(`✅ تم نسخ البيانات إلى الوحدة ${unitNumber}`);
        }

        // إضافة الوحدة للمجموعة
        window.currentEditingUnits.push(unitToLink);

        console.log(`🔗 تم ربط الوحدة ${unitNumber} بالمجموعة محلياً`);

        // 🚀 محسن: حفظ الربط في Supabase باستخدام الطريقة المحسنة
        console.log(`☁️ بدء حفظ ربط الوحدة ${unitNumber} في Supabase...`);

        let supabaseSuccess = false;
        let supabaseError = null;

        if (!supabaseClient) {
            supabaseError = 'Supabase غير متصل';
            console.error(`❌ ${supabaseError}`);
        } else {
            try {
                // استخدام نفس منطق linkRealUnitsInSupabase للحفظ المباشر
                console.log(`📋 تحضير بيانات الوحدة ${unitNumber} للحفظ...`);

                // البحث عن الوحدة في Supabase
                const { data: existingUnit, error: searchError } = await supabaseClient
                    .from('properties')
                    .select('*')
                    .eq('unit_number', unitNumber)
                    .eq('property_name', unitToLink['اسم العقار'])
                    .single();

                if (searchError) {
                    throw new Error(`خطأ في البحث عن الوحدة: ${searchError.message}`);
                }

                if (!existingUnit) {
                    throw new Error(`لم يتم العثور على الوحدة ${unitNumber} في Supabase`);
                }

                // تحضير البيانات المحدثة
                const updatedData = {
                    tenant_name: unitToLink['اسم المستأجر'] || '',
                    contract_number: unitToLink['رقم العقد'] || '',
                    rent_value: parseFloat(unitToLink['قيمة  الايجار ']) || null,
                    contract_type: unitToLink['نوع العقد'] || 'سكني',
                    start_date: unitToLink['تاريخ البداية'] || null,
                    end_date: unitToLink['تاريخ النهاية'] || null,
                    total_amount: parseFloat(unitToLink['الاجمالى']) || null,
                    owner: unitToLink['المالك'] || '',
                    deed_number: unitToLink['رقم الصك'] || '',
                    real_estate_registry: unitToLink['السجل العيني '] || '',
                    electricity_account: unitToLink['رقم حساب الكهرباء'] || '',
                    remaining_installments: parseInt(unitToLink['عدد الاقساط المتبقية']) || null,
                    first_installment_date: unitToLink['تاريخ القسط الاول'] || null,
                    first_installment_amount: parseFloat(unitToLink['مبلغ القسط الاول']) || null,
                    second_installment_date: unitToLink['تاريخ القسط الثاني'] || null,
                    second_installment_amount: parseFloat(unitToLink['مبلغ القسط الثاني']) || null,
                    installment_end_date: unitToLink['تاريخ انتهاء الاقساط'] || null,
                    updated_at: new Date().toISOString()
                };

                console.log(`📋 البيانات المحضرة للحفظ:`, {
                    unit_number: unitNumber,
                    tenant_name: updatedData.tenant_name,
                    contract_number: updatedData.contract_number,
                    rent_value: updatedData.rent_value
                });

                // تحديث الوحدة في Supabase
                const { data: updatedUnit, error: updateError } = await supabaseClient
                    .from('properties')
                    .update(updatedData)
                    .eq('id', existingUnit.id)
                    .select();

                if (updateError) {
                    throw new Error(`خطأ في تحديث الوحدة: ${updateError.message}`);
                }

                if (!updatedUnit || updatedUnit.length === 0) {
                    throw new Error('لم يتم إرجاع بيانات من عملية التحديث');
                }

                console.log(`✅ تم حفظ ربط الوحدة ${unitNumber} في Supabase بنجاح - ID: ${updatedUnit[0].id}`);
                supabaseSuccess = true;

            } catch (error) {
                supabaseError = error.message;
                console.error(`❌ خطأ في حفظ ربط الوحدة ${unitNumber} في Supabase:`, error);
            }
        }

        // تحديث العرض
        updateLinkedUnitsDisplay();
        updateAvailableUnitsForLinking();

        // إظهار رسالة نجاح مع تفاصيل الحفظ
        const message = supabaseSuccess
            ? `✅ تم ربط الوحدة ${unitNumber} بنجاح!\n\n☁️ تم الحفظ في قاعدة البيانات السحابية\n📱 تم تحديث البيانات المحلية\n\n🔗 يمكنك التحقق من الحفظ في Supabase Dashboard`
            : `⚠️ تم ربط الوحدة ${unitNumber} محلياً فقط\n\n❌ فشل الحفظ السحابي: ${supabaseError}\n📱 تم تحديث البيانات المحلية\n\n💡 يمكنك المحاولة مرة أخرى لاحقاً`;

        alert(message);

        // إظهار toast للتأكيد
        const toastMessage = supabaseSuccess
            ? `تم ربط الوحدة ${unitNumber} وحفظها في Supabase بنجاح`
            : `تم ربط الوحدة ${unitNumber} محلياً فقط - فشل الحفظ السحابي`;

        showToast(toastMessage, supabaseSuccess ? 'success' : 'warning');

        console.log(`🎉 اكتمل ربط الوحدة ${unitNumber} - حفظ سحابي: ${supabaseSuccess ? 'نجح' : 'فشل'}`);

    } catch (error) {
        console.error(`❌ خطأ في ربط الوحدة ${unitNumber}:`, error);
        alert(`❌ فشل في ربط الوحدة ${unitNumber}:\n\n${error.message}`);
        showToast(`فشل في ربط الوحدة ${unitNumber}`, 'error');
    }
}

// الحصول على البيانات الحالية من النموذج
function getCurrentFormData() {
    try {
        // البحث عن النموذج النشط (سواء فردي أو متعدد)
        const multiForm = document.getElementById('multiUnitEditForm');
        const singleForm = document.getElementById('propertyEditForm');

        const activeForm = multiForm || singleForm;

        if (!activeForm) {
            console.warn('⚠️ لم يتم العثور على نموذج نشط');
            return null;
        }

        const formData = new FormData(activeForm);
        console.log('📋 تم الحصول على البيانات من النموذج النشط');
        return formData;
    } catch (error) {
        console.error('❌ خطأ في الحصول على بيانات النموذج:', error);
        return null;
    }
}

// تطبيق بيانات النموذج على وحدة معينة
function applyFormDataToUnit(unit, formData) {
    try {
        console.log(`📝 تطبيق البيانات على الوحدة ${unit['رقم  الوحدة ']}`);

        // قائمة الحقول التي يجب تطبيقها (البيانات الشخصية والعقد)
        const fieldsToApply = [
            'اسم المستأجر',
            'رقم جوال المستأجر',
            'رقم جوال إضافي',
            'المالك',
            'رقم العقد',
            'نوع العقد',
            'تاريخ البداية',
            'تاريخ النهاية',
            'تاريخ نهاية القسط',
            'عدد الاقساط المتبقية',
            'قيمة  الايجار ',
            'الاجمالى',
            'رقم الصك',
            'مساحةالصك',
            'السجل العيني ',
            'موقع العقار',
            'المساحة',
            'رقم حساب الكهرباء',
            'الارتفاع',
            'ملاحظات الوحدة'
        ];

        // تطبيق البيانات من النموذج
        fieldsToApply.forEach(field => {
            const value = formData.get(field);
            if (value !== null && value !== undefined) {
                unit[field] = value;
                console.log(`   ✅ ${field}: "${value}"`);
            }
        });

        // الاحتفاظ برقم الوحدة الأصلي (مهم جداً!)
        const originalUnitNumber = unit['رقم  الوحدة '];

        // إضافة معلومات التحديث
        unit['تاريخ آخر تحديث'] = new Date().toLocaleDateString('ar-SA');
        unit['نوع التحديث'] = 'ربط وحدة مع تطبيق البيانات';
        unit['المسؤول عن التحديث'] = getCurrentUser();

        console.log(`✅ تم تطبيق البيانات على الوحدة ${originalUnitNumber} بنجاح`);

    } catch (error) {
        console.error('❌ خطأ في تطبيق البيانات على الوحدة:', error);
    }
}

// تحديث البيانات المحلية للوحدة
function updateLocalDataForUnit(unit) {
    try {
        const unitNumber = unit['رقم  الوحدة '];
        const propertyName = unit['اسم العقار'];

        // تحديث في مصفوفة properties الرئيسية
        const propertiesIndex = properties.findIndex(p =>
            p['رقم  الوحدة '] === unitNumber &&
            p['اسم العقار'] === propertyName
        );

        if (propertiesIndex !== -1) {
            properties[propertiesIndex] = { ...unit };
            console.log(`✅ تم تحديث البيانات المحلية للوحدة ${unitNumber} في properties`);
        }

        // تحديث في مصفوفة allData إذا كانت موجودة
        if (window.allData && Array.isArray(window.allData)) {
            const allDataIndex = window.allData.findIndex(p =>
                p['رقم  الوحدة '] === unitNumber &&
                p['اسم العقار'] === propertyName
            );

            if (allDataIndex !== -1) {
                window.allData[allDataIndex] = { ...unit };
                console.log(`✅ تم تحديث البيانات المحلية للوحدة ${unitNumber} في allData`);
            }
        }

        // حفظ في localStorage
        localStorage.setItem('propertyData', JSON.stringify(properties));
        console.log(`💾 تم حفظ البيانات المحدثة في localStorage`);

    } catch (error) {
        console.error('❌ خطأ في تحديث البيانات المحلية:', error);
    }
}

// فصل وحدة من المجموعة
async function unlinkUnitFromGroup(unitNumber) {
    if (!unitNumber) {
        console.error('رقم الوحدة غير صحيح');
        return;
    }

    if (window.currentEditingUnits.length <= 1) {
        console.error('لا يمكن فصل الوحدة الوحيدة في المجموعة');
        return;
    }

    const confirmMessage = `هل أنت متأكد من فصل الوحدة ${unitNumber} من المجموعة؟

⚠️ سيتم إفراغ جميع بيانات الوحدة:
• اسم المستأجر
• رقم العقد
• قيمة الإيجار
• تواريخ العقد
• بيانات الأقساط
• جميع البيانات الأخرى

☁️ سيتم حفظ الإفراغ فوراً في Supabase
📱 وتحديث البيانات المحلية

هل تريد المتابعة؟`;
    if (!confirm(confirmMessage)) {
        return;
    }

    // البحث عن الوحدة المراد فصلها
    const unitToUnlink = window.currentEditingUnits.find(unit =>
        unit['رقم  الوحدة '] === unitNumber
    );

    if (!unitToUnlink) {
        console.error('لم يتم العثور على الوحدة في المجموعة');
        return;
    }

    console.log(`🔓 بدء فصل الوحدة ${unitNumber} من المجموعة...`);

    try {
        // 1. إفراغ بيانات الوحدة في Supabase مباشرة
        console.log('☁️ إفراغ بيانات الوحدة في Supabase...');

        // التحقق من اتصال Supabase
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        // البحث عن الوحدة في Supabase
        const { data: unitInSupabase, error: searchError } = await supabaseClient
            .from('properties')
            .select('*')
            .eq('unit_number', unitNumber)
            .eq('property_name', unitToUnlink['اسم العقار'])
            .single();

        if (searchError) {
            throw new Error(`خطأ في البحث عن الوحدة: ${searchError.message}`);
        }

        if (!unitInSupabase) {
            throw new Error(`لم يتم العثور على الوحدة ${unitNumber} في Supabase`);
        }

        // إفراغ جميع بيانات المستأجر والعقد
        const emptyData = {
            tenant_name: '',
            contract_number: '',
            rent_value: null,
            contract_type: null,
            start_date: null,
            end_date: null,
            total_amount: null,
            owner: '',
            deed_number: '',
            real_estate_registry: '',
            electricity_account: '',
            remaining_installments: null,
            first_installment_date: null,
            first_installment_amount: null,
            second_installment_date: null,
            second_installment_amount: null,
            installment_end_date: null,
            updated_at: new Date().toISOString()
        };

        console.log(`📋 إفراغ البيانات للوحدة ${unitNumber}...`);

        // تحديث الوحدة في Supabase بالبيانات الفارغة
        const { data: updatedUnit, error: updateError } = await supabaseClient
            .from('properties')
            .update(emptyData)
            .eq('id', unitInSupabase.id)
            .select();

        if (updateError) {
            throw new Error(`فشل في إفراغ بيانات الوحدة: ${updateError.message}`);
        }

        if (!updatedUnit || updatedUnit.length === 0) {
            throw new Error('لم يتم إرجاع بيانات من عملية الإفراغ');
        }

        console.log(`✅ تم إفراغ بيانات الوحدة ${unitNumber} في Supabase بنجاح`);

        // 2. حماية الوحدة من إعادة الكتابة
        if (typeof protectUnlinkedUnit === 'function') {
            protectUnlinkedUnit(unitNumber, unitToUnlink['اسم العقار']);
            console.log(`🔒 تم تفعيل حماية الوحدة ${unitNumber} من إعادة الكتابة`);
        }

        // 3. تحديث البيانات المحلية لتطابق البيانات المفرغة
        const localUnitIndex = properties.findIndex(p =>
            p['رقم  الوحدة '] === unitNumber &&
            p['اسم العقار'] === unitToUnlink['اسم العقار']
        );

        if (localUnitIndex !== -1) {
            // إفراغ جميع البيانات المحلية
            properties[localUnitIndex]['اسم المستأجر'] = '';
            properties[localUnitIndex]['رقم العقد'] = '';
            properties[localUnitIndex]['قيمة  الايجار '] = '';
            properties[localUnitIndex]['نوع العقد'] = '';
            properties[localUnitIndex]['تاريخ البداية'] = '';
            properties[localUnitIndex]['تاريخ النهاية'] = '';
            properties[localUnitIndex]['الاجمالى'] = '';
            properties[localUnitIndex]['المالك'] = '';
            properties[localUnitIndex]['رقم الصك'] = '';
            properties[localUnitIndex]['السجل العيني '] = '';
            properties[localUnitIndex]['رقم حساب الكهرباء'] = '';
            properties[localUnitIndex]['عدد الاقساط المتبقية'] = '';
            properties[localUnitIndex]['تاريخ القسط الاول'] = '';
            properties[localUnitIndex]['مبلغ القسط الاول'] = '';
            properties[localUnitIndex]['تاريخ القسط الثاني'] = '';
            properties[localUnitIndex]['مبلغ القسط الثاني'] = '';
            properties[localUnitIndex]['تاريخ انتهاء الاقساط'] = '';

            saveDataLocally();
            console.log('✅ تم إفراغ جميع البيانات المحلية للوحدة');
        }

        // 4. إزالة الوحدة من المجموعة
        window.currentEditingUnits = window.currentEditingUnits.filter(unit =>
            unit['رقم  الوحدة '] !== unitNumber
        );

        console.log(`✅ تم فصل الوحدة ${unitNumber} من المجموعة نهائياً مع الحماية`);

        // 4. تحديث العرض
        updateLinkedUnitsDisplay();
        updateAvailableUnitsForLinking();

        // 5. إظهار رسالة نجاح مفصلة
        const successMessage = `🎉 تم فصل الوحدة ${unitNumber} بنجاح!

✅ تم إفراغ جميع البيانات:
• اسم المستأجر: تم الإفراغ
• رقم العقد: تم الإفراغ
• قيمة الإيجار: تم الإفراغ
• تواريخ العقد: تم الإفراغ
• بيانات الأقساط: تم الإفراغ

☁️ تم حفظ الإفراغ في Supabase
📱 تم تحديث البيانات المحلية
🔓 الوحدة أصبحت فارغة ومتاحة للربط

🔗 يمكنك التحقق من النتيجة في Supabase Dashboard`;

        alert(successMessage);
        showToast(`تم فصل وإفراغ الوحدة ${unitNumber} بنجاح!`, 'success');

    } catch (error) {
        console.error('❌ خطأ في فصل الوحدة:', error);
        // تم إزالة رسالة الخطأ حسب طلب المستخدم
        console.error('فشل في فصل الوحدة:', error.message);
    }
}

// فصل جميع الوحدات
function unlinkAllUnits() {
    if (window.currentEditingUnits.length <= 1) {
        alert('لا توجد وحدات متعددة للفصل');
        return;
    }

    const confirmMessage = `هل أنت متأكد من فصل جميع الوحدات؟\n\nسيتم الاحتفاظ بالوحدة الأساسية فقط.`;
    if (!confirm(confirmMessage)) {
        return;
    }

    // الاحتفاظ بالوحدة الأساسية فقط
    const primaryUnit = window.currentPrimaryUnit;
    window.currentEditingUnits = [primaryUnit];

    console.log('🔓 تم فصل جميع الوحدات');

    // تحديث العرض
    updateLinkedUnitsDisplay();
    updateAvailableUnitsForLinking();

    // إظهار رسالة نجاح
    showSuccessMessage('تم الفصل بنجاح', 'تم فصل جميع الوحدات والاحتفاظ بالوحدة الأساسية فقط');
}

// تحديث عرض الوحدات المرتبطة
function updateLinkedUnitsDisplay() {
    const linkedUnitsDiv = document.getElementById('linkedUnitsDisplay');
    if (!linkedUnitsDiv) return;

    const relatedUnits = window.currentEditingUnits;

    linkedUnitsDiv.innerHTML = relatedUnits.map((unit, index) => `
        <div class="linked-unit-item" data-unit-number="${unit['رقم  الوحدة ']}" data-unit-index="${index}">
            <div class="unit-info">
                <i class="fas fa-home"></i>
                <span class="unit-number">وحدة ${unit['رقم  الوحدة '] || 'غير محدد'}</span>
                <span class="unit-tenant">${unit['اسم المستأجر'] ? ` - ${unit['اسم المستأجر']}` : ' - فارغ'}</span>
                <span class="unit-status ${getUnitStatusClass(unit)}">${calculateStatus(unit).final || 'غير محدد'}</span>
            </div>
            <div class="unit-actions">
                <button type="button" onclick="clearUnitData('${unit['رقم  الوحدة ']}')" class="btn-clear-unit" title="إفراغ بيانات هذه الوحدة">
                    <i class="fas fa-trash-alt"></i> إفراغ
                </button>
                ${relatedUnits.length > 1 ? `
                    <button type="button" onclick="unlinkUnitFromGroup('${unit['رقم  الوحدة ']}')" class="btn-unlink-unit" title="فصل هذه الوحدة">
                        <i class="fas fa-unlink"></i> فصل
                    </button>
                ` : `
                    <span class="primary-unit-badge">الوحدة الأساسية</span>
                `}
            </div>
        </div>
    `).join('');

    // تحديث عداد الوحدات في العنوان
    const label = linkedUnitsDiv.previousElementSibling;
    if (label && label.tagName === 'LABEL') {
        label.textContent = `الوحدات المرتبطة حالياً (${relatedUnits.length} وحدة):`;
    }
}

// إظهار نافذة ربط الوحدات
function showUnitLinkingModal() {
    // تحديث القائمة أولاً
    updateAvailableUnitsForLinking();

    // التمرير إلى قسم الوحدات المتاحة
    const availableUnitsDiv = document.getElementById('availableUnitsForLinking');
    if (availableUnitsDiv) {
        availableUnitsDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });

        // إضافة تأثير بصري
        availableUnitsDiv.style.border = '2px solid #007bff';
        availableUnitsDiv.style.borderRadius = '8px';
        availableUnitsDiv.style.padding = '10px';

        setTimeout(() => {
            availableUnitsDiv.style.border = '';
            availableUnitsDiv.style.borderRadius = '';
            availableUnitsDiv.style.padding = '';
        }, 3000);
    }
}

// حفظ تعديلات الوحدات المتعددة - مع معالجة خاصة لرقم الوحدة
async function saveMultiUnitEdit(event) {
    event.preventDefault();

    const form = event.target;
    const formData = new FormData(form);
    const operationType = formData.get('operationType');

    if (!operationType) {
        alert('يجب اختيار نوع العملية قبل الحفظ');
        return;
    }

    // التحقق من وجود البيانات أولاً
    if (!ensurePropertiesLoaded('saveMultiUnitEdit')) {
        return;
    }

    console.log(`💾 بدء حفظ تغييرات ${window.currentEditingUnits.length} وحدة`);

    // الحصول على رقم الوحدة الجديد من النموذج
    const newUnitNumber = formData.get('رقم  الوحدة ');
    const primaryUnit = window.currentPrimaryUnit;

    // إظهار شريط التقدم (بدون شاشة التحميل الرئيسية)
    showProgressModal(`جاري حفظ ${window.currentEditingUnits.length} وحدة...`, async function(updateProgress) {
        try {
            let successCount = 0;
            let errorCount = 0;

            console.log(`📋 الوحدات المراد حفظها: ${window.currentEditingUnits.length}`);
            console.log('📝 قائمة الوحدات:', window.currentEditingUnits.map(u => u['رقم  الوحدة ']));

            // تطبيق العملية على كل وحدة
            for (let i = 0; i < window.currentEditingUnits.length; i++) {
                const unit = window.currentEditingUnits[i];
                const isPrimaryUnit = (unit === primaryUnit);
                const progress = Math.round(((i + 1) / window.currentEditingUnits.length) * 100);

                updateProgress(progress, `حفظ الوحدة ${unit['رقم  الوحدة '] || (i + 1)}...`);

                // التحقق من حماية الوحدة المفصولة
                const unitNumber = unit['رقم  الوحدة '];
                const propertyName = unit['اسم العقار'];

                if (typeof isUnitProtected === 'function' && isUnitProtected(unitNumber, propertyName)) {
                    console.log(`🔒 تخطي الوحدة المحمية: ${unitNumber} (تم فصلها مؤخراً)`);
                    successCount++;
                    continue; // تخطي هذه الوحدة
                }

                try {
                    // إنشاء نسخة من formData للوحدة الحالية
                    const unitFormData = new FormData();

                    // نسخ جميع البيانات من النموذج الأصلي
                    for (let [key, value] of formData.entries()) {
                        // معالجة خاصة لرقم الوحدة
                        if (key === 'رقم  الوحدة ') {
                            if (isPrimaryUnit) {
                                // للوحدة الأساسية: استخدم الرقم الجديد من النموذج
                                unitFormData.append(key, newUnitNumber);
                                console.log(`📝 الوحدة الأساسية: تحديث رقم الوحدة إلى "${newUnitNumber}"`);
                            } else {
                                // للوحدات الأخرى: احتفظ برقم الوحدة الأصلي
                                unitFormData.append(key, unit['رقم  الوحدة '] || '');
                                console.log(`📝 الوحدة ${unit['رقم  الوحدة ']}: الاحتفاظ برقم الوحدة الأصلي`);
                            }
                        } else {
                            // باقي الحقول: نفس القيمة لجميع الوحدات
                            unitFormData.append(key, value);
                        }
                    }

                    // 🔧 إصلاح إضافي: التأكد من تطبيق البيانات على الوحدة قبل الحفظ
                    if (!isPrimaryUnit) {
                        console.log(`🔄 تطبيق البيانات النهائية على الوحدة المربوطة ${unit['رقم  الوحدة ']}`);
                        applyFormDataToUnit(unit, unitFormData);
                    }

                    // حفظ الوحدة مع البيانات المخصصة لها
                    await savePropertyEditForUnit(unit, unitFormData, operationType, isPrimaryUnit);
                    successCount++;
                } catch (error) {
                    console.error(`❌ خطأ في حفظ الوحدة ${unit['رقم  الوحدة ']}:`, error);
                    errorCount++;
                }

                // تأخير قصير بين الحفظات
                await new Promise(resolve => setTimeout(resolve, 100));
            }

            // حساب الوحدات المحمية
            const protectedCount = window.currentEditingUnits.filter(unit => {
                const unitNumber = unit['رقم  الوحدة '];
                const propertyName = unit['اسم العقار'];
                return typeof isUnitProtected === 'function' && isUnitProtected(unitNumber, propertyName);
            }).length;

            let message = `تم حفظ ${successCount} وحدة بنجاح`;

            if (protectedCount > 0) {
                message += `\n🔒 تم تخطي ${protectedCount} وحدة مفصولة (محمية من إعادة الكتابة)`;
            }

            if (errorCount > 0) {
                message += `\nفشل حفظ ${errorCount} وحدة`;
            }

            return {
                success: errorCount === 0,
                message: message
            };
        } catch (error) {
            return {
                success: false,
                message: `خطأ في حفظ الوحدات: ${error.message}`
            };
        }
    }, function(result) {
        if (result.success) {
            showSuccessMessage('تم حفظ جميع الوحدات!', result.message);
            closeModal();
            if (typeof displayProperties === 'function') {
                displayProperties();
            }
            // تحديث العرض بدون إظهار شاشة التحميل الرئيسية
            renderData();
            updateTotalStats();
        } else {
            // تم إزالة رسالة الخطأ حسب طلب المستخدم
            console.error('خطأ في الحفظ:', result.message);
        }
    });
}

// حفظ وحدة واحدة باستخدام منطق النافذة الفردية
async function savePropertyEditForUnit(unit, formData, operationType) {
    const originalContractNumber = unit['رقم العقد'] || '';
    const originalPropertyName = unit['اسم العقار'] || '';
    const originalUnitNumber = unit['رقم  الوحدة '] || '';

    // التحقق من وجود البيانات أولاً
    if (!ensurePropertiesLoaded('savePropertyEditForUnit')) {
        return;
    }

    // البحث عن الوحدة في المصفوفة
    const propertyIndex = properties.findIndex(p =>
        p['رقم العقد'] === originalContractNumber &&
        p['اسم العقار'] === originalPropertyName &&
        p['رقم  الوحدة '] === originalUnitNumber
    );

    if (propertyIndex === -1) {
        throw new Error(`لم يتم العثور على الوحدة ${originalUnitNumber}`);
    }

    // حفظ البيانات الأصلية للمقارنة
    const originalData = { ...properties[propertyIndex] };

    // تحديث البيانات
    const updatedProperty = { ...properties[propertyIndex] };

    // تحديث الحقول من النموذج (نفس منطق النافذة الفردية)
    for (let [key, value] of formData.entries()) {
        if (key.startsWith('original') || key === 'operationType' || key === 'unitsCount') continue;

        // تحويل التواريخ
        if (key.includes('تاريخ') && value && !key.includes('القسط')) {
            const dateParts = value.split('-');
            if (dateParts.length === 3 && dateParts[0].length === 4) {
                const year = parseInt(dateParts[0]);
                const month = parseInt(dateParts[1]);
                const day = parseInt(dateParts[2]);

                if (year >= 1900 && year <= 2100 && month >= 1 && month <= 12 && day >= 1 && day <= 31) {
                    const testDate = new Date(year, month - 1, day, 12, 0, 0);
                    if (testDate.getFullYear() === year && testDate.getMonth() === (month - 1) && testDate.getDate() === day) {
                        value = `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}/${year}`;
                    } else {
                        value = null;
                    }
                } else {
                    value = null;
                }
            }
        }

        // تحويل الأرقام
        if (['المساحة', 'قيمة  الايجار ', 'الاجمالى', 'عدد الاقساط المتبقية'].includes(key) && value) {
            value = parseFloat(value) || 0;
        }

        if (key === 'عدد الاقساط المتبقية') {
            value = parseInt(value) || 0;
        }

        // تحديث القيمة
        updatedProperty[key] = value || '';
    }

    // إضافة معلومات التحديث
    updatedProperty['تاريخ آخر تحديث'] = new Date().toLocaleDateString('ar-SA');
    updatedProperty['نوع التحديث'] = operationType || 'تحرير متعدد';
    updatedProperty['المسؤول عن التحديث'] = getCurrentUser();

    // تحديث البيانات في المصفوفة
    properties[propertyIndex] = updatedProperty;

    // 🔧 تحديث جميع الوحدات المربوطة إذا كان هناك عقد
    if (updatedProperty['رقم العقد'] && updatedProperty['رقم العقد'].trim() !== '') {
        console.log(`🔄 تحديث الوحدات المربوطة بالعقد ${updatedProperty['رقم العقد']}...`);
        try {
            await updateLinkedUnitsOnEdit(updatedProperty);
        } catch (error) {
            console.error(`❌ خطأ في تحديث الوحدات المربوطة:`, error);
        }
    }

    // حفظ في التخزين المحلي
    localStorage.setItem('propertyData', JSON.stringify(properties));

    // حفظ في السحابة
    if (window.supabaseEnabled && typeof saveToSupabase === 'function') {
        await saveToSupabase(updatedProperty);
    }

    // إضافة سجل التتبع للوحدة المحدثة
    try {
        const changes = compareDataAndCreateChanges(originalData, updatedProperty);

        let additionalInfo = {
            originalData: originalData,
            newData: updatedProperty,
            editMethod: 'single_unit_edit'
        };

        // معلومات إضافية حسب نوع العملية
        if (operationType === OPERATION_TYPES.NEW_CLIENT) {
            additionalInfo.previousTenant = originalData['اسم المستأجر'];
            additionalInfo.newTenant = updatedProperty['اسم المستأجر'];
        } else if (operationType === OPERATION_TYPES.EMPTY_UNIT) {
            additionalInfo.previousTenant = originalData['اسم المستأجر'];
            additionalInfo.reason = 'إفراغ وحدة';
        } else if (operationType === OPERATION_TYPES.RENEW_CONTRACT) {
            additionalInfo.previousTenant = originalData['اسم المستأجر'];
            additionalInfo.newTenant = updatedProperty['اسم المستأجر'];
        }

        await addChangeLog(operationType, updatedProperty, changes, additionalInfo);
        console.log('📝 تم إضافة سجل التتبع للوحدة المفردة:', operationType);

        // إنشاء سجلات تتبع للوحدات المرتبطة إذا كان هناك تغيير في أي بيانات
        if (updatedProperty['رقم العقد'] && updatedProperty['اسم العقار']) {
            const hasAnyChanges = Object.keys(changes).length > 0 ||
                                 JSON.stringify(originalData) !== JSON.stringify(updatedProperty);

            console.log('🔍 فحص التغييرات للوحدات المرتبطة (وحدة مفردة):', {
                hasChanges: hasAnyChanges,
                changesCount: Object.keys(changes).length,
                contractNumber: updatedProperty['رقم العقد'],
                propertyName: updatedProperty['اسم العقار'],
                unitNumber: updatedProperty['رقم  الوحدة ']
            });

            if (hasAnyChanges) {
                try {
                    console.log('📝 بدء إنشاء سجلات التتبع للوحدات المرتبطة (من وحدة مفردة)...');
                    const result = await createTrackingLogsForLinkedUnits(
                        updatedProperty['رقم العقد'],
                        updatedProperty['اسم العقار'],
                        updatedProperty['رقم  الوحدة '],
                        `تحديث بيانات مرتبطة - ${operationType}`
                    );

                    if (result && result.success) {
                        console.log(`✅ تم إنشاء ${result.createdCount} سجل تتبع للوحدات المرتبطة (من وحدة مفردة)`);
                        if (result.failedCount > 0) {
                            console.warn(`⚠️ فشل في إنشاء ${result.failedCount} سجل تتبع`);
                        }
                    } else {
                        console.log('ℹ️ لا توجد وحدات مرتبطة أو لم يتم إنشاء سجلات');
                    }
                } catch (linkedError) {
                    console.warn('⚠️ فشل في إنشاء سجلات التتبع للوحدات المرتبطة (من وحدة مفردة):', linkedError);
                }
            } else {
                console.log('ℹ️ لا توجد تغييرات، تخطي إنشاء سجلات التتبع للوحدات المرتبطة (من وحدة مفردة)');
            }
        }

    } catch (trackingError) {
        console.warn('⚠️ فشل في إضافة سجل التتبع للوحدة المفردة:', trackingError);
    }

    console.log(`✅ تم حفظ الوحدة ${originalUnitNumber} بنجاح`);
}

// تطبيق العملية على وحدة واحدة
async function applyOperationToUnit(unit, operationType, formData) {
    const contractNumber = unit['رقم العقد'] || '';
    const propertyName = unit['اسم العقار'] || '';
    const unitNumber = unit['رقم  الوحدة '] || '';

    // التحقق من وجود البيانات أولاً
    if (!ensurePropertiesLoaded('applyOperationToUnit')) {
        return;
    }

    switch (operationType) {
        case OPERATION_TYPES.EDIT_DATA:
            // تعديل البيانات الموجودة - تطبيق البيانات من النموذج
            console.log(`📝 تعديل بيانات الوحدة ${unitNumber}`);
            await updateUnitWithFormData(unit, formData);
            break;

        case OPERATION_TYPES.NEW_CLIENT:
            // عميل جديد - مسح بيانات المستأجر والعقد
            await setNewClient(contractNumber, propertyName, unitNumber);
            break;

        case OPERATION_TYPES.RENEW_CONTRACT:
            // تجديد العقد
            await renewContract(contractNumber, propertyName, unitNumber);
            break;

        case OPERATION_TYPES.EMPTY_UNIT:
            // إفراغ الوحدة
            await emptyUnit(contractNumber, propertyName, unitNumber);
            break;

        default:
            throw new Error(`نوع عملية غير معروف: ${operationType}`);
    }
}

// تحديث بيانات الوحدة من النموذج
async function updateUnitWithFormData(unit, formData) {
    const originalContractNumber = unit['رقم العقد'] || '';
    const originalPropertyName = unit['اسم العقار'] || '';
    const originalUnitNumber = unit['رقم  الوحدة '] || '';

    // التحقق من وجود البيانات أولاً
    if (!properties || !Array.isArray(properties)) {
        console.error('❌ مصفوفة properties غير موجودة في updateUnitWithFormData:', properties);
        // تم إزالة رسالة الخطأ حسب طلب المستخدم
        return false;
    }

    console.log('✅ البيانات متوفرة في updateUnitWithFormData، عدد العقارات:', properties.length);

    // إنشاء كائن البيانات المحدثة
    const updatedData = {
        'اسم المستأجر': formData.get('اسم المستأجر') || '',
        'المالك': formData.get('المالك') || '',
        'رقم العقد': formData.get('رقم العقد') || '',
        'نوع العقد': formData.get('نوع العقد') || '',
        'اسم العقار': formData.get('اسم العقار') || '',
        'المدينة': formData.get('المدينة') || '',
        'رقم الصك': formData.get('رقم الصك') || '',
        'مساحةالصك': formData.get('مساحةالصك') || '',
        'السجل العيني ': formData.get('السجل العيني ') || '',
        'موقع العقار': formData.get('موقع العقار') || '',
        'تاريخ البداية': formData.get('تاريخ البداية') || '',
        'تاريخ النهاية': formData.get('تاريخ النهاية') || '',
        'تاريخ نهاية القسط': formData.get('تاريخ نهاية القسط') || '',
        'عدد الاقساط المتبقية': formData.get('عدد الاقساط المتبقية') || '',
        'قيمة  الايجار ': formData.get('قيمة  الايجار ') || '',
        'الاجمالى': formData.get('الاجمالى') || '',
        'المساحة': formData.get('المساحة') || '',
        'رقم حساب الكهرباء': formData.get('رقم حساب الكهرباء') || '',
        'الارتفاع': formData.get('الارتفاع') || '',
        'ملاحظات الوحدة': formData.get('ملاحظات الوحدة') || ''
    };

    // الاحتفاظ برقم الوحدة الأصلي
    updatedData['رقم  الوحدة '] = originalUnitNumber;

    // تحديث البيانات محلياً
    const unitIndex = window.allData.findIndex(u =>
        u['رقم العقد'] === originalContractNumber &&
        u['اسم العقار'] === originalPropertyName &&
        u['رقم  الوحدة '] === originalUnitNumber
    );

    if (unitIndex !== -1) {
        // تحديث البيانات المحلية
        Object.assign(window.allData[unitIndex], updatedData);

        // حفظ في التخزين المحلي
        localStorage.setItem('propertyData', JSON.stringify(window.allData));

        // حفظ في السحابة
        if (window.supabaseEnabled) {
            try {
                await saveToSupabase(window.allData[unitIndex]);
                console.log(`✅ تم حفظ الوحدة ${originalUnitNumber} في السحابة`);
            } catch (error) {
                console.error(`❌ خطأ في حفظ الوحدة ${originalUnitNumber} في السحابة:`, error);
                throw error;
            }
        }
    }
}

// إفراغ جميع الوحدات
async function emptyAllUnits() {
    if (!window.currentEditingUnits || window.currentEditingUnits.length === 0) {
        alert('لا توجد وحدات للإفراغ');
        return;
    }

    const confirmMessage = `هل أنت متأكد من إفراغ جميع الوحدات (${window.currentEditingUnits.length} وحدة)؟\n\nسيتم حذف جميع بيانات المستأجرين والعقود!`;

    if (!confirm(confirmMessage)) {
        return;
    }

    console.log(`🧹 بدء إفراغ ${window.currentEditingUnits.length} وحدة`);

    // إظهار شريط التقدم
    showProgressModal(`جاري إفراغ ${window.currentEditingUnits.length} وحدة...`, async function(updateProgress) {
        try {
            let successCount = 0;
            let errorCount = 0;

            for (let i = 0; i < window.currentEditingUnits.length; i++) {
                const unit = window.currentEditingUnits[i];
                const progress = Math.round(((i + 1) / window.currentEditingUnits.length) * 100);

                updateProgress(progress, `إفراغ الوحدة ${unit['رقم  الوحدة '] || (i + 1)}...`);

                try {
                    const contractNumber = unit['رقم العقد'] || '';
                    const propertyName = unit['اسم العقار'] || '';
                    const unitNumber = unit['رقم  الوحدة '] || '';

                    await emptyUnit(contractNumber, propertyName, unitNumber);
                    successCount++;
                } catch (error) {
                    console.error(`❌ خطأ في إفراغ الوحدة ${unit['رقم  الوحدة ']}:`, error);
                    errorCount++;
                }

                // تأخير قصير بين العمليات
                await new Promise(resolve => setTimeout(resolve, 300));
            }

            return {
                success: errorCount === 0,
                message: `تم إفراغ ${successCount} وحدة بنجاح` +
                        (errorCount > 0 ? `\nفشل إفراغ ${errorCount} وحدة` : '')
            };
        } catch (error) {
            return {
                success: false,
                message: `خطأ في إفراغ الوحدات: ${error.message}`
            };
        }
    }, function(result) {
        if (result.success) {
            showSuccessMessage('تم إفراغ جميع الوحدات!', result.message);
            closeModal();
            renderData();
            updateTotalStats();
        } else {
            // تم إزالة رسالة الخطأ حسب طلب المستخدم
            console.error('خطأ في الإفراغ:', result.message);
        }
    });
}

// الحصول على فئة حالة الوحدة للتبويب
function getUnitStatusClass(unit) {
    const status = calculateStatus(unit);
    if (status.final === 'فعال') return 'status-active';
    if (status.final === 'منتهى') return 'status-expired';
    if (status.final === 'على وشك') return 'status-pending';
    if (status.final === 'فارغ') return 'status-empty';
    return 'status-unknown';
}

// تبديل التبويب النشط
function switchUnitTab(tabIndex) {
    // إزالة الفئة النشطة من جميع التبويبات
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));

    // إضافة الفئة النشطة للتبويب المحدد
    document.querySelector(`[data-tab="${tabIndex}"]`).classList.add('active');
    document.querySelector(`[data-tab-content="${tabIndex}"]`).classList.add('active');

    console.log(`🔄 تم التبديل إلى تبويب الوحدة ${tabIndex}`);
}

// إنشاء نموذج تحرير كامل لوحدة واحدة (نفس تنسيق الوحدة الفردية)
function generateFullUnitEditForm(unit, unitIndex) {
    const contractNumber = unit['رقم العقد'] || '';
    const propertyName = unit['اسم العقار'] || '';
    const unitNumber = unit['رقم  الوحدة '] || '';

    return `
        <form id="unitEditForm_${unitIndex}" class="unit-edit-form" data-unit-index="${unitIndex}">
            <!-- نوع العملية - حقل إجباري -->
            <div class="operation-type-section">
                <h3><i class="fas fa-cogs"></i> نوع العملية *</h3>
                <div class="form-group">
                    <label for="operationType_${unitIndex}">اختر نوع العملية:</label>
                    <select id="operationType_${unitIndex}" name="operationType" required class="operation-type-select">
                        <option value="">-- اختر نوع العملية --</option>
                        <option value="${OPERATION_TYPES.EDIT_DATA}">تعديل بيانات موجودة</option>
                        <option value="${OPERATION_TYPES.NEW_CLIENT}">عميل جديد</option>
                        <option value="${OPERATION_TYPES.RENEW_CONTRACT}">تجديد عقد</option>
                        <option value="${OPERATION_TYPES.EMPTY_UNIT}">إفراغ وحدة</option>
                    </select>
                    <small class="field-note">يجب اختيار نوع العملية قبل الحفظ</small>
                </div>
            </div>

            <!-- الحقول المخفية للبيانات الأصلية -->
            <input type="hidden" name="originalContractNumber" value="${contractNumber}">
            <input type="hidden" name="originalPropertyName" value="${propertyName}">
            <input type="hidden" name="originalUnitNumber" value="${unitNumber}">

            <div class="edit-form-sections">
                <div class="edit-section">
                    <h3><i class="fas fa-info-circle"></i> المعلومات الأساسية</h3>
                    <div class="form-row">
                        <div class="form-group">
                            <label>اسم المستأجر:</label>
                            <input type="text" name="اسم المستأجر" value="${unit['اسم المستأجر'] || ''}" placeholder="اسم المستأجر">
                        </div>
                        <div class="form-group">
                            <label>المالك:</label>
                            <select name="المالك" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                                <option value="">-- اختر المالك --</option>
                                <option value="أبو خالد" ${(unit['المالك'] === 'أبو خالد') ? 'selected' : ''}>أبو خالد</option>
                                <option value="أبو تميم" ${(unit['المالك'] === 'أبو تميم') ? 'selected' : ''}>أبو تميم</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>رقم العقد:</label>
                            <input type="text" name="رقم العقد" value="${unit['رقم العقد'] || ''}" placeholder="رقم العقد">
                        </div>
                        <div class="form-group">
                            <label>نوع العقد:</label>
                            <select name="نوع العقد">
                                <option value="سكني" ${unit['نوع العقد'] === 'سكني' ? 'selected' : ''}>سكني</option>
                                <option value="ضريبي" ${unit['نوع العقد'] === 'ضريبي' ? 'selected' : ''}>ضريبي</option>
                                <option value="راكض" ${unit['نوع العقد'] === 'راكض' ? 'selected' : ''}>راكض</option>
                            </select>
                        </div>
                    </div>
                </div>

                <div class="edit-section">
                    <h3><i class="fas fa-building"></i> معلومات العقار والصك</h3>
                    <div class="form-row">
                        <div class="form-group">
                            <label>اسم العقار:</label>
                            <input type="text" name="اسم العقار" value="${unit['اسم العقار'] || ''}" placeholder="اسم العقار" readonly style="background-color: #f8f9fa;">
                            <small class="field-note">لتغيير اسم العقار، استخدم "تحرير العقار" من الإحصائيات</small>
                        </div>
                        <div class="form-group">
                            <label>المدينة:</label>
                            <input type="text" name="المدينة" value="${unit['المدينة'] || ''}" placeholder="المدينة" readonly style="background-color: #f8f9fa;">
                            <small class="field-note">لتغيير المدينة، استخدم "تحرير العقار" من الإحصائيات</small>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>رقم الوحدة:</label>
                            <input type="text" name="رقم  الوحدة " value="${unit['رقم  الوحدة '] || ''}" placeholder="رقم الوحدة">
                            <small class="field-note">رقم الوحدة يجب أن يكون فريداً</small>
                        </div>
                        <div class="form-group">
                            <label>رقم الصك:</label>
                            <input type="text" name="رقم الصك" value="${unit['رقم الصك'] || ''}" placeholder="رقم الصك">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>مساحة الصك (م²):</label>
                            <input type="number" name="مساحةالصك" value="${unit['مساحةالصك'] || ''}" step="0.01" placeholder="مساحة الصك بالمتر المربع">
                        </div>
                        <div class="form-group">
                            <label>السجل العيني:</label>
                            <input type="text" name="السجل العيني " value="${unit['السجل العيني '] || ''}" placeholder="رقم السجل العيني">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group full-width">
                            <label>موقع العقار:</label>
                            <input type="url" name="موقع العقار" value="${unit['موقع العقار'] || ''}" placeholder="رابط موقع العقار على الخريطة">
                            <small class="field-note">يمكنك إدخال رابط خرائط جوجل أو أي رابط آخر للموقع</small>
                        </div>
                    </div>
                </div>

                <div class="edit-section">
                    <h3><i class="fas fa-calendar-alt"></i> التواريخ</h3>
                    <div class="form-row">
                        <div class="form-group">
                            <label>تاريخ البداية:</label>
                            <input type="date" name="تاريخ البداية" value="${formatDateForInput(unit['تاريخ البداية'])}">
                        </div>
                        <div class="form-group">
                            <label>تاريخ النهاية:</label>
                            <input type="date" name="تاريخ النهاية" value="${formatDateForInput(unit['تاريخ النهاية'])}">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>تاريخ نهاية القسط:</label>
                            <input type="date" name="تاريخ نهاية القسط" value="${formatDateForInput(unit['تاريخ نهاية القسط'])}">
                        </div>
                        <div class="form-group">
                            <label>عدد الأقساط المتبقية:</label>
                            <input type="number" name="عدد الاقساط المتبقية" value="${unit['عدد الاقساط المتبقية'] || ''}" min="0">
                        </div>
                    </div>
                </div>

                <div class="edit-section">
                    <h3><i class="fas fa-money-bill-wave"></i> المبالغ المالية</h3>
                    <div class="form-row">
                        <div class="form-group">
                            <label>قيمة الإيجار:</label>
                            <input type="number" name="قيمة  الايجار " value="${unit['قيمة  الايجار '] || ''}" step="0.01" placeholder="قيمة الإيجار">
                        </div>
                        <div class="form-group">
                            <label>الإجمالي:</label>
                            <input type="number" name="الاجمالى" value="${unit['الاجمالى'] || ''}" step="0.01" placeholder="المبلغ الإجمالي">
                        </div>
                    </div>
                </div>

                <div class="edit-section">
                    <h3><i class="fas fa-home"></i> تفاصيل الوحدة</h3>
                    <div class="form-row">
                        <div class="form-group">
                            <label>مساحة الوحدة (م²):</label>
                            <input type="number" name="المساحة" value="${unit['المساحة'] || ''}" step="0.01" placeholder="مساحة الوحدة بالمتر المربع">
                            <small class="field-note">مساحة الوحدة الفعلية (قد تختلف عن مساحة الصك)</small>
                        </div>
                        <div class="form-group">
                            <label>رقم حساب الكهرباء:</label>
                            <input type="text" name="رقم حساب الكهرباء" value="${unit['رقم حساب الكهرباء'] || ''}" placeholder="رقم حساب الكهرباء">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>الارتفاع:</label>
                            <input type="text" name="الارتفاع" value="${unit['الارتفاع'] || ''}" placeholder="ارتفاع الوحدة">
                        </div>
                        <div class="form-group">
                            <label>ملاحظات الوحدة:</label>
                            <input type="text" name="ملاحظات الوحدة" value="${unit['ملاحظات الوحدة'] || ''}" placeholder="أي ملاحظات خاصة بالوحدة">
                        </div>
                    </div>
                </div>
            </div>
        </form>
    `;
}

// إنشاء نموذج تحرير مبسط لوحدة واحدة (النسخة القديمة)
function generateSingleUnitEditForm(unit, unitIndex) {
    const contractNumber = unit['رقم العقد'] || '';
    const propertyName = unit['اسم العقار'] || '';
    const unitNumber = unit['رقم  الوحدة '] || '';

    return `
        <form id="unitEditForm_${unitIndex}" class="unit-edit-form" data-unit-index="${unitIndex}">
            <!-- نوع العملية -->
            <div class="operation-type-section">
                <h4><i class="fas fa-cogs"></i> نوع العملية *</h4>
                <div class="form-group">
                    <select name="operationType" required class="operation-type-select">
                        <option value="">-- اختر نوع العملية --</option>
                        <option value="${OPERATION_TYPES.EDIT_DATA}">تعديل بيانات موجودة</option>
                        <option value="${OPERATION_TYPES.NEW_CLIENT}">عميل جديد</option>
                        <option value="${OPERATION_TYPES.RENEW_CONTRACT}">تجديد عقد</option>
                        <option value="${OPERATION_TYPES.EMPTY_UNIT}">إفراغ وحدة</option>
                    </select>
                </div>
            </div>

            <!-- الحقول المخفية -->
            <input type="hidden" name="originalContractNumber" value="${contractNumber}">
            <input type="hidden" name="originalPropertyName" value="${propertyName}">
            <input type="hidden" name="originalUnitNumber" value="${unitNumber}">

            <!-- المعلومات الأساسية -->
            <div class="edit-section">
                <h4><i class="fas fa-info-circle"></i> المعلومات الأساسية</h4>
                <div class="form-row">
                    <div class="form-group">
                        <label>اسم المستأجر:</label>
                        <input type="text" name="اسم المستأجر" value="${unit['اسم المستأجر'] || ''}" placeholder="اسم المستأجر">
                    </div>
                    <div class="form-group">
                        <label>رقم العقد:</label>
                        <input type="text" name="رقم العقد" value="${unit['رقم العقد'] || ''}" placeholder="رقم العقد">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>رقم الوحدة:</label>
                        <input type="text" name="رقم  الوحدة " value="${unit['رقم  الوحدة '] || ''}" placeholder="رقم الوحدة">
                    </div>
                    <div class="form-group">
                        <label>نوع العقد:</label>
                        <select name="نوع العقد">
                            <option value="سكني" ${unit['نوع العقد'] === 'سكني' ? 'selected' : ''}>سكني</option>
                            <option value="ضريبي" ${unit['نوع العقد'] === 'ضريبي' ? 'selected' : ''}>ضريبي</option>
                            <option value="راكض" ${unit['نوع العقد'] === 'راكض' ? 'selected' : ''}>راكض</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- التواريخ -->
            <div class="edit-section">
                <h4><i class="fas fa-calendar-alt"></i> التواريخ</h4>
                <div class="form-row">
                    <div class="form-group">
                        <label>تاريخ البداية:</label>
                        <input type="date" name="تاريخ البداية" value="${formatDateForInput(unit['تاريخ البداية'])}">
                    </div>
                    <div class="form-group">
                        <label>تاريخ النهاية:</label>
                        <input type="date" name="تاريخ النهاية" value="${formatDateForInput(unit['تاريخ النهاية'])}">
                    </div>
                </div>
            </div>

            <!-- المبالغ المالية -->
            <div class="edit-section">
                <h4><i class="fas fa-money-bill-wave"></i> المبالغ المالية</h4>
                <div class="form-row">
                    <div class="form-group">
                        <label>قيمة الإيجار:</label>
                        <input type="number" name="قيمة  الايجار " value="${unit['قيمة  الايجار '] || ''}" step="0.01" placeholder="قيمة الإيجار">
                    </div>
                    <div class="form-group">
                        <label>الإجمالي:</label>
                        <input type="number" name="الاجمالى" value="${unit['الاجمالى'] || ''}" step="0.01" placeholder="المبلغ الإجمالي">
                    </div>
                </div>
            </div>

            <!-- تفاصيل الوحدة -->
            <div class="edit-section">
                <h4><i class="fas fa-home"></i> تفاصيل الوحدة</h4>
                <div class="form-row">
                    <div class="form-group">
                        <label>مساحة الوحدة (م²):</label>
                        <input type="number" name="المساحة" value="${unit['المساحة'] || ''}" step="0.01" placeholder="مساحة الوحدة">
                    </div>
                    <div class="form-group">
                        <label>رقم حساب الكهرباء:</label>
                        <input type="text" name="رقم حساب الكهرباء" value="${unit['رقم حساب الكهرباء'] || ''}" placeholder="رقم حساب الكهرباء">
                    </div>
                </div>
            </div>


        </form>
    `;
}

// حفظ تغييرات جميع الوحدات
async function saveAllUnitsChanges() {
    if (!window.currentEditingUnits || window.currentEditingUnits.length === 0) {
        alert('لا توجد وحدات للحفظ');
        return;
    }

    console.log(`💾 بدء حفظ تغييرات ${window.currentEditingUnits.length} وحدة`);

    let successCount = 0;
    let errorCount = 0;
    const errors = [];

    // إظهار شريط التقدم
    showProgressModal(`جاري حفظ ${window.currentEditingUnits.length} وحدة...`, async function(updateProgress) {
        try {
            for (let i = 0; i < window.currentEditingUnits.length; i++) {
                const unit = window.currentEditingUnits[i];
                const progress = Math.round(((i + 1) / window.currentEditingUnits.length) * 100);

                updateProgress(progress, `حفظ الوحدة ${unit['رقم  الوحدة '] || (i + 1)}...`);

                try {
                    const form = document.getElementById(`unitEditForm_${i}`);
                    if (form) {
                        const formData = new FormData(form);
                        await saveIndividualUnitChanges(formData, i);
                        successCount++;
                    }
                } catch (error) {
                    console.error(`❌ خطأ في حفظ الوحدة ${unit['رقم  الوحدة ']}:`, error);
                    errorCount++;
                    errors.push(`الوحدة ${unit['رقم  الوحدة ']}: ${error.message}`);
                }

                // تأخير قصير بين الحفظات
                await new Promise(resolve => setTimeout(resolve, 300));
            }

            return {
                success: errorCount === 0,
                message: `تم حفظ ${successCount} وحدة بنجاح` +
                        (errorCount > 0 ? `\nفشل حفظ ${errorCount} وحدة` : '')
            };
        } catch (error) {
            return {
                success: false,
                message: `خطأ في حفظ الوحدات: ${error.message}`
            };
        }
    }, function(result) {
        if (result.success) {
            showSuccessMessage('تم حفظ جميع الوحدات!', result.message);
            closeModal();
            renderData();
            updateTotalStats();
        } else {
            // تم إزالة رسالة الخطأ حسب طلب المستخدم
            console.error('خطأ في الحفظ:', result.message);
        }
    });
}

// حفظ تغييرات الوحدة الحالية فقط
async function saveCurrentUnitChanges() {
    const activeTab = document.querySelector('.tab-btn.active');
    if (!activeTab) {
        alert('لا توجد وحدة نشطة للحفظ');
        return;
    }

    const tabIndex = parseInt(activeTab.getAttribute('data-tab'));
    const form = document.getElementById(`unitEditForm_${tabIndex}`);

    if (!form) {
        alert('لم يتم العثور على نموذج الوحدة');
        return;
    }

    const unit = window.currentEditingUnits[tabIndex];
    console.log(`💾 حفظ تغييرات الوحدة ${unit['رقم  الوحدة ']}`);

    try {
        const formData = new FormData(form);
        await saveIndividualUnitChanges(formData, tabIndex);

        showSuccessMessage('تم الحفظ!', `تم حفظ تغييرات الوحدة ${unit['رقم  الوحدة ']} بنجاح`);

        // تحديث التبويب لإظهار التغييرات
        const updatedUnit = window.currentEditingUnits[tabIndex];
        const tabBtn = document.querySelector(`[data-tab="${tabIndex}"]`);
        if (tabBtn) {
            const statusSpan = tabBtn.querySelector('.tab-status');
            if (statusSpan) {
                const newStatus = calculateStatus(updatedUnit);
                statusSpan.textContent = newStatus.final || 'غير محدد';
                statusSpan.className = `tab-status ${getUnitStatusClass(updatedUnit)}`;
            }
        }

    } catch (error) {
        console.error(`❌ خطأ في حفظ الوحدة:`, error);
        // تم إزالة رسالة الخطأ حسب طلب المستخدم
    }
}

// حفظ تغييرات وحدة فردية
async function saveIndividualUnitChanges(formData, unitIndex) {
    const unit = window.currentEditingUnits[unitIndex];
    const originalContractNumber = formData.get('originalContractNumber');
    const originalPropertyName = formData.get('originalPropertyName');
    const originalUnitNumber = formData.get('originalUnitNumber');

    // التحقق من وجود البيانات أولاً
    if (!properties || !Array.isArray(properties)) {
        console.error('❌ مصفوفة properties غير موجودة في saveIndividualUnitChanges:', properties);
        // تم إزالة رسالة الخطأ حسب طلب المستخدم
        return false;
    }

    console.log('✅ البيانات متوفرة في saveIndividualUnitChanges، عدد العقارات:', properties.length);

    // العثور على الوحدة في المصفوفة الأساسية
    const propertyIndex = properties.findIndex(p =>
        p['رقم العقد'] === originalContractNumber &&
        p['اسم العقار'] === originalPropertyName &&
        p['رقم  الوحدة '] === originalUnitNumber
    );

    if (propertyIndex === -1) {
        console.error('❌ لم يتم العثور على الوحدة للتحديث:', {
            contractNumber: originalContractNumber,
            propertyName: originalPropertyName,
            unitNumber: originalUnitNumber
        });
        throw new Error(`لم يتم العثور على الوحدة ${originalUnitNumber} في البيانات`);
    }

    console.log(`✅ تم العثور على الوحدة في الفهرس: ${propertyIndex}`);

    // تحديث البيانات (تحديث الوحدة الموجودة بدلاً من إنشاء جديدة)
    const updatedProperty = { ...properties[propertyIndex] };

    // تحديث الحقول من النموذج
    for (let [key, value] of formData.entries()) {
        if (key.startsWith('original')) continue;

        // تحويل التواريخ
        if (key.includes('تاريخ') && value) {
            const dateParts = value.split('-');
            if (dateParts.length === 3 && dateParts[0].length === 4) {
                const year = parseInt(dateParts[0]);
                const month = parseInt(dateParts[1]);
                const day = parseInt(dateParts[2]);

                if (year >= 1900 && year <= 2100 && month >= 1 && month <= 12 && day >= 1 && day <= 31) {
                    value = `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}/${year}`;
                }
            }
        }

        // تحويل الأرقام
        if (['المساحة', 'قيمة  الايجار ', 'الاجمالى'].includes(key) && value) {
            value = parseFloat(value) || 0;
        }

        updatedProperty[key] = value || '';
    }

    // إضافة معلومات التحديث
    updatedProperty['تاريخ آخر تحديث'] = new Date().toLocaleDateString('ar-SA');
    updatedProperty['نوع التحديث'] = formData.get('operationType') || 'تحرير';
    updatedProperty['المسؤول عن التحديث'] = getCurrentUser();

    // حفظ التحديث
    properties[propertyIndex] = updatedProperty;
    window.currentEditingUnits[unitIndex] = updatedProperty;

    // حفظ محلياً
    saveDataLocally();

    // حفظ في Supabase
    if (typeof savePropertyToSupabase === 'function') {
        try {
            await savePropertyToSupabase(updatedProperty);
        } catch (error) {
            console.warn('تحذير: فشل حفظ الوحدة في Supabase:', error);
        }
    }

    console.log(`✅ تم حفظ الوحدة ${updatedProperty['رقم  الوحدة ']} بنجاح`);
}

// العمليات المشتركة لجميع الوحدات
async function setNewClientForAllUnits() {
    if (!window.currentEditingUnits || window.currentEditingUnits.length === 0) {
        alert('لا توجد وحدات للتعديل');
        return;
    }

    const newTenantName = prompt('أدخل اسم المستأجر الجديد:');
    if (!newTenantName || newTenantName.trim() === '') {
        return;
    }

    const newContractNumber = prompt('أدخل رقم العقد الجديد:');
    if (!newContractNumber || newContractNumber.trim() === '') {
        return;
    }

    console.log(`👥 تطبيق عميل جديد على ${window.currentEditingUnits.length} وحدة`);

    try {
        // تحديث جميع النماذج
        for (let i = 0; i < window.currentEditingUnits.length; i++) {
            const form = document.getElementById(`unitEditForm_${i}`);
            if (form) {
                form.querySelector('[name="اسم المستأجر"]').value = newTenantName;
                form.querySelector('[name="رقم العقد"]').value = newContractNumber;
                form.querySelector('[name="operationType"]').value = OPERATION_TYPES.NEW_CLIENT;
            }
        }

        showSuccessMessage('تم التحديث!', `تم تطبيق العميل الجديد "${newTenantName}" على جميع الوحدات`);
    } catch (error) {
        // تم إزالة رسالة الخطأ حسب طلب المستخدم
        console.error('فشل في تطبيق العميل الجديد:', error.message);
    }
}

async function renewContractForAllUnits() {
    if (!window.currentEditingUnits || window.currentEditingUnits.length === 0) {
        alert('لا توجد وحدات للتعديل');
        return;
    }

    const startDate = prompt('أدخل تاريخ بداية العقد الجديد (dd/mm/yyyy):');
    if (!startDate) return;

    const endDate = prompt('أدخل تاريخ نهاية العقد الجديد (dd/mm/yyyy):');
    if (!endDate) return;

    console.log(`🔄 تجديد العقد لـ ${window.currentEditingUnits.length} وحدة`);

    try {
        // تحويل التواريخ لصيغة input
        const startDateForInput = convertDateToInputFormat(startDate);
        const endDateForInput = convertDateToInputFormat(endDate);

        // تحديث جميع النماذج
        for (let i = 0; i < window.currentEditingUnits.length; i++) {
            const form = document.getElementById(`unitEditForm_${i}`);
            if (form) {
                form.querySelector('[name="تاريخ البداية"]').value = startDateForInput;
                form.querySelector('[name="تاريخ النهاية"]').value = endDateForInput;
                form.querySelector('[name="operationType"]').value = OPERATION_TYPES.RENEW_CONTRACT;
            }
        }

        showSuccessMessage('تم التحديث!', `تم تجديد العقد لجميع الوحدات من ${startDate} إلى ${endDate}`);
    } catch (error) {
        // تم إزالة رسالة الخطأ حسب طلب المستخدم
        console.error('فشل في تجديد العقد:', error.message);
    }
}

async function emptyAllUnits() {
    if (!window.currentEditingUnits || window.currentEditingUnits.length === 0) {
        alert('لا توجد وحدات للتعديل');
        return;
    }

    const confirm = window.confirm(`هل أنت متأكد من إفراغ جميع الوحدات (${window.currentEditingUnits.length} وحدة)؟\n\nسيتم حذف معلومات المستأجر والعقد من جميع الوحدات.`);
    if (!confirm) return;

    console.log(`🧹 إفراغ ${window.currentEditingUnits.length} وحدة`);

    try {
        // تحديث جميع النماذج
        for (let i = 0; i < window.currentEditingUnits.length; i++) {
            const form = document.getElementById(`unitEditForm_${i}`);
            if (form) {
                form.querySelector('[name="اسم المستأجر"]').value = '';
                form.querySelector('[name="رقم العقد"]').value = '';
                form.querySelector('[name="تاريخ البداية"]').value = '';
                form.querySelector('[name="تاريخ النهاية"]').value = '';
                form.querySelector('[name="قيمة  الايجار "]').value = '';
                form.querySelector('[name="الاجمالى"]').value = '';
                form.querySelector('[name="operationType"]').value = OPERATION_TYPES.EMPTY_UNIT;
            }
        }

        showSuccessMessage('تم الإفراغ!', 'تم إفراغ جميع الوحدات من معلومات المستأجر والعقد');
    } catch (error) {
        // تم إزالة رسالة الخطأ حسب طلب المستخدم
        console.error('فشل في إفراغ الوحدات:', error.message);
    }
}

async function syncDeedInfoForAllUnits() {
    if (!window.currentEditingUnits || window.currentEditingUnits.length === 0) {
        alert('لا توجد وحدات للتعديل');
        return;
    }

    // الحصول على معلومات الصك من الوحدة الأولى
    const primaryUnit = window.currentEditingUnits[0];
    const form0 = document.getElementById('unitEditForm_0');

    if (!form0) {
        alert('لم يتم العثور على نموذج الوحدة الأولى');
        return;
    }

    const deedInfo = {
        'رقم الصك': form0.querySelector('[name="رقم الصك"]')?.value || primaryUnit['رقم الصك'] || '',
        'مساحةالصك': form0.querySelector('[name="مساحةالصك"]')?.value || primaryUnit['مساحةالصك'] || '',
        'السجل العيني ': form0.querySelector('[name="السجل العيني "]')?.value || primaryUnit['السجل العيني '] || '',
        'موقع العقار': form0.querySelector('[name="موقع العقار"]')?.value || primaryUnit['موقع العقار'] || '',
        'المالك': form0.querySelector('[name="المالك"]')?.value || primaryUnit['المالك'] || ''
    };

    console.log(`🔄 مزامنة معلومات الصك لـ ${window.currentEditingUnits.length} وحدة`);

    try {
        // تطبيق معلومات الصك على جميع النماذج
        for (let i = 1; i < window.currentEditingUnits.length; i++) {
            const form = document.getElementById(`unitEditForm_${i}`);
            if (form) {
                Object.keys(deedInfo).forEach(field => {
                    const input = form.querySelector(`[name="${field}"]`);
                    if (input) {
                        input.value = deedInfo[field];
                    }
                });
            }
        }

        showSuccessMessage('تم التزامن!', 'تم مزامنة معلومات الصك لجميع الوحدات');
    } catch (error) {
        // تم إزالة رسالة الخطأ حسب طلب المستخدم
        console.error('فشل في مزامنة معلومات الصك:', error.message);
    }
}

// العمليات الفردية للوحدات
async function setNewClientForUnit(unitIndex) {
    const unit = window.currentEditingUnits[unitIndex];
    const newTenantName = prompt(`أدخل اسم المستأجر الجديد للوحدة ${unit['رقم  الوحدة ']}:`);
    if (!newTenantName || newTenantName.trim() === '') return;

    const newContractNumber = prompt('أدخل رقم العقد الجديد:');
    if (!newContractNumber || newContractNumber.trim() === '') return;

    try {
        const form = document.getElementById(`unitEditForm_${unitIndex}`);
        if (form) {
            form.querySelector('[name="اسم المستأجر"]').value = newTenantName;
            form.querySelector('[name="رقم العقد"]').value = newContractNumber;
            form.querySelector('[name="operationType"]').value = OPERATION_TYPES.NEW_CLIENT;
        }

        showSuccessMessage('تم التحديث!', `تم تطبيق العميل الجديد على الوحدة ${unit['رقم  الوحدة ']}`);
    } catch (error) {
        // تم إزالة رسالة الخطأ حسب طلب المستخدم
        console.error('فشل في تطبيق العميل الجديد:', error.message);
    }
}

async function renewContractForUnit(unitIndex) {
    const unit = window.currentEditingUnits[unitIndex];
    const startDate = prompt(`أدخل تاريخ بداية العقد الجديد للوحدة ${unit['رقم  الوحدة ']} (dd/mm/yyyy):`);
    if (!startDate) return;

    const endDate = prompt('أدخل تاريخ نهاية العقد الجديد (dd/mm/yyyy):');
    if (!endDate) return;

    try {
        const startDateForInput = convertDateToInputFormat(startDate);
        const endDateForInput = convertDateToInputFormat(endDate);

        const form = document.getElementById(`unitEditForm_${unitIndex}`);
        if (form) {
            form.querySelector('[name="تاريخ البداية"]').value = startDateForInput;
            form.querySelector('[name="تاريخ النهاية"]').value = endDateForInput;
            form.querySelector('[name="operationType"]').value = OPERATION_TYPES.RENEW_CONTRACT;
        }

        showSuccessMessage('تم التحديث!', `تم تجديد العقد للوحدة ${unit['رقم  الوحدة ']}`);
    } catch (error) {
        // تم إزالة رسالة الخطأ حسب طلب المستخدم
        console.error('فشل في تجديد العقد:', error.message);
    }
}

// دالة مساعدة لتحويل التاريخ
function convertDateToInputFormat(dateStr) {
    if (!dateStr) return '';

    const parts = dateStr.split('/');
    if (parts.length !== 3) return '';

    const day = parseInt(parts[0]);
    const month = parseInt(parts[1]);
    const year = parseInt(parts[2]);

    if (isNaN(day) || isNaN(month) || isNaN(year)) return '';

    return `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
}

// 🧹 تنظيف البيانات المكررة
async function cleanDuplicateUnits() {
    console.log('🧹 بدء تنظيف البيانات المكررة...');

    try {
        // 1. تنظيف localStorage
        const cleanedLocalData = removeDuplicateUnitsFromArray(properties);
        const removedLocalCount = properties.length - cleanedLocalData.length;

        if (removedLocalCount > 0) {
            properties.length = 0; // مسح المصفوفة
            properties.push(...cleanedLocalData); // إضافة البيانات المنظفة
            saveDataLocally();
            console.log(`✅ تم حذف ${removedLocalCount} وحدة مكررة من localStorage`);
        }

        // 2. تنظيف Supabase
        if (typeof cleanDuplicateUnitsFromSupabase === 'function') {
            await cleanDuplicateUnitsFromSupabase();
        }

        // 3. إعادة تحميل البيانات
        await loadDataFromSupabase();

        showSuccessMessage('تم التنظيف!', `تم حذف ${removedLocalCount} وحدة مكررة من النظام`);

    } catch (error) {
        console.error('❌ خطأ في تنظيف البيانات:', error);
        // تم إزالة رسالة الخطأ حسب طلب المستخدم
    }
}

// إزالة الوحدات المكررة من مصفوفة (نسخة محسنة وآمنة)
function removeDuplicateUnitsFromArray(unitsArray) {
    if (!unitsArray || unitsArray.length === 0) {
        console.log('⚠️ لا توجد بيانات للتنظيف');
        return [];
    }

    const uniqueUnits = new Map();
    const duplicates = [];

    unitsArray.forEach((unit) => {
        // التأكد من وجود البيانات الأساسية
        if (!unit['اسم العقار'] || !unit['رقم  الوحدة ']) {
            console.warn('⚠️ وحدة بدون اسم عقار أو رقم وحدة:', unit);
            return; // تجاهل الوحدات الناقصة
        }

        const unitKey = `${unit['اسم العقار']}_${unit['رقم  الوحدة ']}`;

        if (uniqueUnits.has(unitKey)) {
            // وحدة مكررة - احتفظ بالأحدث أو الأكثر اكتمالاً
            const existingUnit = uniqueUnits.get(unitKey);

            // مقارنة التواريخ
            const existingDate = new Date(existingUnit['تاريخ آخر تحديث'] || existingUnit.created_at || '1900-01-01');
            const currentDate = new Date(unit['تاريخ آخر تحديث'] || unit.created_at || '1900-01-01');

            // مقارنة اكتمال البيانات
            const existingCompleteness = Object.values(existingUnit).filter(v => v && v !== '').length;
            const currentCompleteness = Object.values(unit).filter(v => v && v !== '').length;

            let shouldReplace = false;

            if (currentDate > existingDate) {
                shouldReplace = true;
            } else if (currentDate.getTime() === existingDate.getTime() && currentCompleteness > existingCompleteness) {
                shouldReplace = true;
            }

            if (shouldReplace) {
                duplicates.push(existingUnit);
                uniqueUnits.set(unitKey, unit);
                console.log(`🔄 استبدال وحدة مكررة: ${unitKey} (أحدث أو أكثر اكتمالاً)`);
            } else {
                duplicates.push(unit);
                console.log(`🗑️ حذف وحدة مكررة قديمة: ${unitKey}`);
            }
        } else {
            uniqueUnits.set(unitKey, unit);
        }
    });

    console.log(`📊 إحصائيات التنظيف الآمن: ${uniqueUnits.size} وحدة فريدة، ${duplicates.length} وحدة مكررة`);

    // عرض تفاصيل الوحدات المكررة للمراجعة
    if (duplicates.length > 0) {
        console.group('🔍 تفاصيل الوحدات المكررة:');
        duplicates.forEach(dup => {
            console.log(`- ${dup['اسم العقار']} - ${dup['رقم  الوحدة ']} (${dup['تاريخ آخر تحديث'] || 'بدون تاريخ'})`);
        });
        console.groupEnd();
    }

    return Array.from(uniqueUnits.values());
}

// تنظيف الوحدات المكررة من Supabase
async function cleanDuplicateUnitsFromSupabase() {
    if (!supabaseClient) {
        console.warn('⚠️ Supabase غير متاح للتنظيف');
        return;
    }

    try {
        console.log('🔍 البحث عن الوحدات المكررة في Supabase...');

        // جلب جميع البيانات من Supabase
        const { data: allUnits, error } = await supabaseClient
            .from('properties')
            .select('*');

        if (error) {
            throw new Error(`خطأ في جلب البيانات: ${error.message}`);
        }

        if (!allUnits || allUnits.length === 0) {
            console.log('📭 لا توجد بيانات في Supabase للتنظيف');
            return;
        }

        // تحديد الوحدات المكررة
        const uniqueUnits = new Map();
        const duplicatesToDelete = [];

        allUnits.forEach(unit => {
            const unitKey = `${unit['اسم العقار']}_${unit['رقم  الوحدة ']}`;

            if (uniqueUnits.has(unitKey)) {
                // وحدة مكررة - احتفظ بالأحدث
                const existingUnit = uniqueUnits.get(unitKey);
                const existingDate = new Date(existingUnit['تاريخ آخر تحديث'] || existingUnit.created_at || '1900-01-01');
                const currentDate = new Date(unit['تاريخ آخر تحديث'] || unit.created_at || '1900-01-01');

                if (currentDate > existingDate) {
                    duplicatesToDelete.push(existingUnit.id);
                    uniqueUnits.set(unitKey, unit);
                } else {
                    duplicatesToDelete.push(unit.id);
                }
            } else {
                uniqueUnits.set(unitKey, unit);
            }
        });

        // حذف الوحدات المكررة
        if (duplicatesToDelete.length > 0) {
            console.log(`🗑️ حذف ${duplicatesToDelete.length} وحدة مكررة من Supabase...`);

            const { error: deleteError } = await supabaseClient
                .from('properties')
                .delete()
                .in('id', duplicatesToDelete);

            if (deleteError) {
                throw new Error(`خطأ في حذف الوحدات المكررة: ${deleteError.message}`);
            }

            console.log(`✅ تم حذف ${duplicatesToDelete.length} وحدة مكررة من Supabase`);
        } else {
            console.log('✅ لا توجد وحدات مكررة في Supabase');
        }

    } catch (error) {
        console.error('❌ خطأ في تنظيف Supabase:', error);
        throw error;
    }
}

// عرض نافذة تحرير وحدة واحدة (النافذة الأصلية)
function showSingleUnitEditModal(property, contractNumber, propertyName, unitNumber) {
    // إنشاء نافذة التحرير
    let html = `
    <div class="modal-overlay" style="display:flex;">
        <div class="modal-box property-edit-modal">
            <button class="close-modal" onclick="closeModal()">×</button>
            <div class="edit-modal-header">
                <h2><i class="fas fa-edit"></i> تحرير بيانات العقار</h2>
                <p>${propertyName} - ${contractNumber ? 'عقد رقم: ' + contractNumber : 'وحدة رقم: ' + unitNumber}</p>
            </div>
            <div class="edit-modal-content">
                <form id="propertyEditForm" onsubmit="savePropertyEdit(event)">
                    <!-- نوع العملية - حقل إجباري -->
                    <div class="operation-type-section">
                        <h3><i class="fas fa-cogs"></i> نوع العملية *</h3>
                        <div class="form-group">
                            <label for="operationType">اختر نوع العملية:</label>
                            <select id="operationType" name="operationType" required class="operation-type-select">
                                <option value="">-- اختر نوع العملية --</option>
                                <option value="${OPERATION_TYPES.EDIT_DATA}">تعديل بيانات موجودة</option>
                                <option value="${OPERATION_TYPES.NEW_CLIENT}">عميل جديد</option>
                                <option value="${OPERATION_TYPES.RENEW_CONTRACT}">تجديد عقد</option>
                                <option value="${OPERATION_TYPES.EMPTY_UNIT}">إفراغ وحدة</option>
                            </select>
                            <small class="field-note">يجب اختيار نوع العملية قبل الحفظ</small>
                        </div>
                    </div>

                    <!-- الحقول المخفية للبيانات الأصلية -->
                    <input type="hidden" name="originalContractNumber" value="${contractNumber || ''}">
                    <input type="hidden" name="originalPropertyName" value="${propertyName || ''}">
                    <input type="hidden" name="originalUnitNumber" value="${unitNumber || ''}">

                    <div class="edit-form-sections">
                        <div class="edit-section">
                            <h3><i class="fas fa-info-circle"></i> المعلومات الأساسية</h3>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>اسم المستأجر:</label>
                                    <input type="text" name="اسم المستأجر" value="${property['اسم المستأجر'] || ''}" placeholder="اسم المستأجر">
                                </div>
                                <div class="form-group">
                                    <label>رقم جوال المستأجر:</label>
                                    <input type="tel" name="رقم جوال المستأجر" value="${property['رقم جوال المستأجر'] || ''}" placeholder="05xxxxxxxx" pattern="[0-9]{10}" maxlength="10">
                                    <small class="field-note">أدخل رقم الجوال بدون مسافات (10 أرقام)</small>
                                </div>
                                <div class="form-group">
                                    <label>رقم جوال إضافي:</label>
                                    <input type="tel" name="رقم جوال إضافي" value="${property['رقم جوال إضافي'] || ''}" placeholder="05xxxxxxxx" pattern="[0-9]{10}" maxlength="10">
                                    <small class="field-note">رقم جوال ثاني للمستأجر (اختياري)</small>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>المالك:</label>
                                    <select name="المالك" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                                        <option value="">-- اختر المالك --</option>
                                        <option value="أبو خالد" ${(property['المالك'] === 'أبو خالد') ? 'selected' : ''}>أبو خالد</option>
                                        <option value="أبو تميم" ${(property['المالك'] === 'أبو تميم') ? 'selected' : ''}>أبو تميم</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>رقم العقد:</label>
                                    <input type="text" name="رقم العقد" value="${property['رقم العقد'] || ''}" placeholder="رقم العقد">
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>نوع العقد:</label>
                                    <select name="نوع العقد">
                                        <option value="سكني" ${property['نوع العقد'] === 'سكني' ? 'selected' : ''}>سكني</option>
                                        <option value="ضريبي" ${property['نوع العقد'] === 'ضريبي' ? 'selected' : ''}>ضريبي</option>
                                        <option value="راكض" ${property['نوع العقد'] === 'راكض' ? 'selected' : ''}>راكض</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>نوع العقار:</label>
                                    <select name="نوع العقار" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                                        <option value="">-- اختر نوع العقار --</option>
                                        <option value="مستودع" ${property['نوع العقار'] === 'مستودع' ? 'selected' : ''}>مستودع</option>
                                        <option value="بيت" ${property['نوع العقار'] === 'بيت' ? 'selected' : ''}>بيت</option>
                                        <option value="استراحة" ${property['نوع العقار'] === 'استراحة' ? 'selected' : ''}>استراحة</option>
                                        <option value="مصنع" ${property['نوع العقار'] === 'مصنع' ? 'selected' : ''}>مصنع</option>
                                        <option value="شقة" ${property['نوع العقار'] === 'شقة' ? 'selected' : ''}>شقة</option>
                                        <option value="غرفة" ${property['نوع العقار'] === 'غرفة' ? 'selected' : ''}>غرفة</option>
                                        <option value="معرض" ${property['نوع العقار'] === 'معرض' ? 'selected' : ''}>معرض</option>
                                        <option value="محل" ${property['نوع العقار'] === 'محل' ? 'selected' : ''}>محل</option>
                                        <option value="حوش" ${property['نوع العقار'] === 'حوش' ? 'selected' : ''}>حوش</option>
                                        <option value="ورشة" ${property['نوع العقار'] === 'ورشة' ? 'selected' : ''}>ورشة</option>
                                        <option value="فلة" ${property['نوع العقار'] === 'فلة' ? 'selected' : ''}>فلة</option>
                                        <option value="مزرعة" ${property['نوع العقار'] === 'مزرعة' ? 'selected' : ''}>مزرعة</option>
                                        <option value="أرض" ${property['نوع العقار'] === 'أرض' ? 'selected' : ''}>أرض</option>
                                        <option value="عمارة" ${property['نوع العقار'] === 'عمارة' ? 'selected' : ''}>عمارة</option>
                                        <option value="مكتب" ${property['نوع العقار'] === 'مكتب' ? 'selected' : ''}>مكتب</option>
                                    </select>
                                    <small class="field-note">اختر نوع العقار لتصنيف أفضل</small>
                                </div>
                            </div>
                        </div>

                        <div class="edit-section">
                            <h3><i class="fas fa-building"></i> معلومات العقار والصك</h3>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>اسم العقار:</label>
                                    <input type="text" name="اسم العقار" value="${property['اسم العقار'] || ''}" placeholder="اسم العقار" readonly style="background-color: #f8f9fa;">
                                    <small class="field-note">لتغيير اسم العقار، استخدم "تحرير العقار" من الإحصائيات</small>
                                </div>
                                <div class="form-group">
                                    <label>المدينة:</label>
                                    <input type="text" name="المدينة" value="${property['المدينة'] || ''}" placeholder="المدينة" readonly style="background-color: #f8f9fa;">
                                    <small class="field-note">لتغيير المدينة، استخدم "تحرير العقار" من الإحصائيات</small>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>رقم الوحدة:</label>
                                    <input type="text" name="رقم  الوحدة " value="${property['رقم  الوحدة '] || ''}" placeholder="رقم الوحدة">
                                    <small class="field-note">رقم الوحدة يجب أن يكون فريداً</small>
                                </div>
                                <div class="form-group">
                                    <label>رقم الصك:</label>
                                    <input type="text" name="رقم الصك" value="${property['رقم الصك'] || ''}" placeholder="رقم الصك">
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>مساحة الصك (م²):</label>
                                    <input type="number" name="مساحةالصك" value="${property['مساحةالصك'] || ''}" step="0.01" placeholder="مساحة الصك بالمتر المربع">
                                </div>
                                <div class="form-group">
                                    <label>السجل العيني:</label>
                                    <input type="text" name="السجل العيني " value="${property['السجل العيني '] || ''}" placeholder="رقم السجل العيني">
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group full-width">
                                    <label>موقع العقار:</label>
                                    <input type="url" name="موقع العقار" value="${property['موقع العقار'] || ''}" placeholder="رابط موقع العقار على الخريطة">
                                    <small class="field-note">يمكنك إدخال رابط خرائط جوجل أو أي رابط آخر للموقع</small>
                                </div>
                            </div>
                        </div>

                        <div class="edit-section">
                            <h3><i class="fas fa-calendar-alt"></i> التواريخ</h3>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>تاريخ البداية:</label>
                                    <input type="date" name="تاريخ البداية" value="${formatDateForInput(property['تاريخ البداية'])}">
                                </div>
                                <div class="form-group">
                                    <label>تاريخ النهاية:</label>
                                    <input type="date" name="تاريخ النهاية" value="${formatDateForInput(property['تاريخ النهاية'])}">
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>تاريخ نهاية القسط:</label>
                                    <input type="date" name="تاريخ نهاية القسط" value="${formatDateForInput(property['تاريخ نهاية القسط'])}">
                                </div>
                                <div class="form-group">
                                    <label>عدد الأقساط المتبقية:</label>
                                    <input type="number" name="عدد الاقساط المتبقية" value="${property['عدد الاقساط المتبقية'] || ''}" min="0">
                                </div>
                            </div>
                        </div>

                        <div class="edit-section">
                            <h3><i class="fas fa-money-bill-wave"></i> المبالغ المالية</h3>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>قيمة الإيجار:</label>
                                    <input type="number" name="قيمة  الايجار " value="${property['قيمة  الايجار '] || ''}" step="0.01" placeholder="قيمة الإيجار">
                                </div>
                                <div class="form-group">
                                    <label>الإجمالي:</label>
                                    <input type="number" name="الاجمالى" value="${property['الاجمالى'] || ''}" step="0.01" placeholder="المبلغ الإجمالي">
                                    <small style="color: #28a745; font-size: 0.8em; margin-top: 4px; display: block;">
                                        💰 المبلغ المكتوب هنا سيتم الاحتفاظ به دائماً ولن يتم تغييره
                                    </small>
                                </div>
                            </div>
                        </div>

                        <div class="edit-section">
                            <h3><i class="fas fa-calendar-check"></i> إدارة الأقساط</h3>
                            <div class="installments-management">
                                <div class="installments-header">
                                    <p class="section-description">يمكنك إضافة وتعديل أقساط العقد مع تواريخها ومبالغها</p>
                                    <div class="total-display" style="background: linear-gradient(135deg, #e3f2fd, #bbdefb); padding: 10px; border-radius: 6px; margin: 10px 0; text-align: center; font-weight: bold; color: #1976d2;">
                                        ${(() => {
                                            const yearlyData = calculateYearlyTotal(property);
                                            return `الإجمالي: ${yearlyData.total.toLocaleString()} ريال (${yearlyData.count} أقساط)`;
                                        })()}
                                    </div>
                                    <button type="button" onclick="addNewInstallment()" class="btn-add-installment">
                                        <i class="fas fa-plus"></i> إضافة قسط جديد
                                    </button>
                                </div>
                                <div id="installmentsContainer" class="installments-container">
                                    ${renderInstallmentsForEdit(property)}
                                </div>
                            </div>
                        </div>

                        <div class="edit-section">
                            <h3><i class="fas fa-home"></i> تفاصيل الوحدة</h3>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>مساحة الوحدة (م²):</label>
                                    <input type="number" name="المساحة" value="${property['المساحة'] || ''}" step="0.01" placeholder="مساحة الوحدة بالمتر المربع">
                                    <small class="field-note">مساحة الوحدة الفعلية (قد تختلف عن مساحة الصك)</small>
                                </div>
                                <div class="form-group">
                                    <label>رقم حساب الكهرباء:</label>
                                    <input type="text" name="رقم حساب الكهرباء" value="${property['رقم حساب الكهرباء'] || ''}" placeholder="رقم حساب الكهرباء">
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>الارتفاع:</label>
                                    <input type="text" name="الارتفاع" value="${property['الارتفاع'] || ''}" placeholder="ارتفاع الوحدة">
                                </div>
                                <div class="form-group">
                                    <label>ملاحظات الوحدة:</label>
                                    <input type="text" name="ملاحظات الوحدة" value="${property['ملاحظات الوحدة'] || ''}" placeholder="أي ملاحظات خاصة بالوحدة">
                                </div>
                            </div>
                        </div>

                        <!-- قسم الملاحظات والتعليقات -->
                        <div class="edit-section">
                            <h3><i class="fas fa-sticky-note"></i> ملاحظات وتعليقات البطاقة</h3>
                            <div class="form-row">
                                <div class="form-group full-width">
                                    <label>ملاحظات عامة:</label>
                                    <textarea name="notes" rows="4" placeholder="أضف ملاحظات أو تعليقات عامة حول هذه البطاقة...">${property['notes'] || ''}</textarea>
                                    <small class="field-note">يمكنك إضافة أي ملاحظات أو تعليقات مهمة حول هذه البطاقة</small>
                                </div>
                            </div>
                        </div>

                        <div class="edit-section">
                            <h3><i class="fas fa-link"></i> ربط الوحدات</h3>
                            <div class="units-linking-section">
                                <p class="section-description">يمكنك ربط وحدات إضافية بهذه البطاقة لتجميعها تحت عقد واحد</p>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label>الوحدات المتاحة للربط:</label>
                                        <div id="availableUnitsForLinking" class="units-linking-list">
                                            ${renderAvailableUnitsForLinking(propertyName, contractNumber, unitNumber)}
                                        </div>
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                        <label>الوحدات المرتبطة حالياً:</label>
                                        <div id="linkedUnitsDisplay" class="linked-units-display">
                                            ${renderLinkedUnits(propertyName, contractNumber)}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <input type="hidden" name="originalContractNumber" value="${contractNumber || ''}">
                    <input type="hidden" name="originalPropertyName" value="${propertyName}">
                    <input type="hidden" name="originalUnitNumber" value="${unitNumber || ''}">

                    <div class="edit-modal-actions">
                        <div class="action-group primary-actions">
                            <button type="submit" class="btn-primary">
                                <i class="fas fa-save"></i> حفظ التغييرات
                            </button>

                            <button type="button" onclick="emptyUnit('${contractNumber || ''}', '${propertyName}', '${unitNumber || ''}')" class="btn-danger">
                                <i class="fas fa-broom"></i> إفراغ الوحدة
                            </button>
                            <button type="button" onclick="closeModal()" class="btn-secondary">
                                <i class="fas fa-times"></i> إلغاء
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>`;

    document.body.insertAdjacentHTML('beforeend', html);

    // إضافة حدث إغلاق للمودال
    document.querySelector('.modal-overlay:last-child').addEventListener('click', function(e) {
        if (e.target === this) {
            closeModal();
        }
    });
}

// تنسيق التاريخ للإدخال في حقل التاريخ - محسن لمنع تغيير التواريخ
function formatDateForInput(dateStr) {
    if (!dateStr) return '';

    // إزالة أي نص إضافي (مثل النص العربي)
    let datePart = dateStr.split(' ')[0];
    if (datePart.includes('(')) {
        datePart = datePart.split('(')[0].trim();
    }

    let parts = datePart.includes('/') ? datePart.split('/') : datePart.split('-');

    if (parts.length !== 3) return '';

    let day, month, year;

    // تحديد صيغة التاريخ
    if (parts[0].length === 4) {
        // صيغة yyyy-mm-dd (already in correct format for input)
        year = parseInt(parts[0]);
        month = parseInt(parts[1]);
        day = parseInt(parts[2]);
    } else {
        // صيغة dd/mm/yyyy أو dd-mm-yyyy
        day = parseInt(parts[0]);
        month = parseInt(parts[1]);
        year = parseInt(parts[2]);
    }

    // التحقق من صحة التاريخ
    if (isNaN(year) || isNaN(month) || isNaN(day) ||
        year < 1900 || year > 2100 ||
        month < 1 || month > 12 ||
        day < 1 || day > 31) {
        console.warn(`تاريخ غير صحيح في formatDateForInput: ${dateStr}`);
        return '';
    }

    // التحقق من صحة التاريخ باستخدام Date object (تجنب timezone issues)
    const testDate = new Date(year, month - 1, day, 12, 0, 0); // استخدام منتصف النهار لتجنب timezone issues
    if (testDate.getFullYear() !== year || testDate.getMonth() !== (month - 1) || testDate.getDate() !== day) {
        console.warn(`تاريخ غير صالح في formatDateForInput: ${dateStr}`);
        return '';
    }

    // إرجاع التاريخ بصيغة yyyy-mm-dd للـ HTML input
    return `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
}



// التحقق من وجود تغييرات في حقول معلومات الصك
function checkDeedFieldChanges(originalProperty, updatedProperty, deedFields) {
    console.log(`🔍 فحص التغييرات في حقول معلومات الصك...`);

    const changedFields = [];
    let hasChanges = false;

    deedFields.forEach(field => {
        const originalValue = originalProperty[field] || '';
        const updatedValue = updatedProperty[field] || '';

        // مقارنة القيم (تجاهل الفراغات الزائدة)
        const originalTrimmed = String(originalValue).trim();
        const updatedTrimmed = String(updatedValue).trim();

        if (originalTrimmed !== updatedTrimmed) {
            hasChanges = true;
            changedFields.push({
                field: field,
                oldValue: originalTrimmed || 'فارغ',
                newValue: updatedTrimmed || 'فارغ'
            });

            console.log(`   ✏️ ${field}: "${originalTrimmed}" → "${updatedTrimmed}"`);
        } else {
            console.log(`   ✅ ${field}: لم يتغير ("${originalTrimmed}")`);
        }
    });

    if (hasChanges) {
        console.log(`📝 تم اكتشاف ${changedFields.length} تغيير في معلومات الصك`);
    } else {
        console.log(`ℹ️ لا توجد تغييرات في معلومات الصك`);
    }

    return {
        hasChanges: hasChanges,
        changedFields: changedFields,
        totalChanges: changedFields.length
    };
}

// مزامنة معلومات الصك عبر جميع وحدات العقار
async function syncDeedInfoAcrossUnits(propertyName, updatedProperty, deedFields) {
    console.log(`🔄 بدء مزامنة معلومات الصك للعقار "${propertyName}" عبر جميع الوحدات...`);

    // البحث عن جميع الوحدات في نفس العقار
    const relatedUnits = properties.filter(p => p['اسم العقار'] === propertyName);

    if (relatedUnits.length <= 1) {
        console.log(`ℹ️ العقار "${propertyName}" يحتوي على وحدة واحدة فقط، لا حاجة للمزامنة`);
        return { updatedCount: 0, message: 'وحدة واحدة فقط' };
    }

    console.log(`📊 تم العثور على ${relatedUnits.length} وحدة في العقار "${propertyName}"`);

    // تحديد الحقول التي تغيرت
    const changedFields = [];
    deedFields.forEach(field => {
        const newValue = updatedProperty[field];
        changedFields.push({
            field: field,
            newValue: newValue || 'غير محدد'
        });
    });

    console.log(`📝 معلومات الصك الجديدة:`, changedFields);

    // تحديث جميع الوحدات الأخرى محلياً
    let updatedCount = 0;
    const errors = [];

    relatedUnits.forEach((unit) => {
        try {
            const unitIndex = properties.findIndex(p =>
                p['اسم العقار'] === unit['اسم العقار'] &&
                p['رقم  الوحدة '] === unit['رقم  الوحدة ']
            );

            if (unitIndex !== -1) {
                // تحديث معلومات الصك فقط (عدم تأثير على معلومات الوحدة الخاصة)
                deedFields.forEach(field => {
                    const oldValue = properties[unitIndex][field];
                    const newValue = updatedProperty[field];

                    if (oldValue !== newValue) {
                        properties[unitIndex][field] = newValue;
                        console.log(`   ✅ الوحدة ${unit['رقم  الوحدة ']}: ${field} = "${newValue}"`);
                    }
                });

                // تحديث معلومات التحديث
                properties[unitIndex]['تاريخ آخر تحديث'] = new Date().toLocaleDateString('ar-SA');
                properties[unitIndex]['نوع التحديث'] = 'مزامنة معلومات الصك';
                properties[unitIndex]['المسؤول عن التحديث'] = getCurrentUser();

                updatedCount++;
            }
        } catch (error) {
            console.error(`❌ خطأ في تحديث الوحدة ${unit['رقم  الوحدة ']}:`, error);
            errors.push({
                unitNumber: unit['رقم  الوحدة '],
                error: error.message
            });
        }
    });

    console.log(`✅ تم تحديث ${updatedCount} وحدة محلياً`);

    // مزامنة مع Supabase
    let supabaseSuccess = 0;
    let supabaseErrors = [];

    if (typeof savePropertyToSupabase === 'function') {
        console.log(`☁️ بدء مزامنة ${updatedCount} وحدة مع Supabase...`);

        try {
            // مزامنة كل وحدة بشكل فردي لضمان النجاح
            for (const unit of relatedUnits) {
                const unitIndex = properties.findIndex(p =>
                    p['اسم العقار'] === unit['اسم العقار'] &&
                    p['رقم  الوحدة '] === unit['رقم  الوحدة ']
                );

                if (unitIndex !== -1) {
                    const result = await savePropertyToSupabase(properties[unitIndex]);

                    if (result) {
                        supabaseSuccess++;
                        console.log(`✅ تم حفظ الوحدة ${unit['رقم  الوحدة ']} في Supabase`);
                    } else {
                        console.error(`❌ فشل حفظ الوحدة ${unit['رقم  الوحدة ']} في Supabase`);
                        supabaseErrors.push(`فشل حفظ الوحدة ${unit['رقم  الوحدة ']}`);
                    }

                    // تأخير قصير بين الحفظات لتجنب إرهاق الخادم
                    await new Promise(resolve => setTimeout(resolve, 200));
                }
            }

            console.log(`✅ تم حفظ ${supabaseSuccess} من ${relatedUnits.length} وحدة في Supabase`);

        } catch (error) {
            console.error(`❌ خطأ في مزامنة الوحدات مع Supabase:`, error);
            supabaseErrors.push(error.message);
        }
    } else {
        console.warn(`⚠️ دالة savePropertyToSupabase غير متوفرة`);
    }

    return {
        updatedCount: updatedCount,
        supabaseSuccess: supabaseSuccess,
        errors: errors,
        supabaseErrors: supabaseErrors,
        changedFields: changedFields,
        propertyName: propertyName
    };
}

// حفظ تعديلات العقار
async function savePropertyEdit(event) {
    event.preventDefault();

    const form = event.target;
    const formData = new FormData(form);

    // 🔄 حفظ حالة الفلاتر الحالية قبل التحديث
    const savedFilters = {
        currentCountry: currentCountry,
        currentProperty: currentProperty,
        currentPropertyTypeFilter: currentPropertyTypeFilter,
        filterStatus: filterStatus
    };
    console.log('💾 حفظ حالة الفلاتر قبل التحديث:', savedFilters);

    // التحقق من نوع العملية
    const operationType = formData.get('operationType');
    if (!operationType) {
        alert('يرجى اختيار نوع العملية قبل الحفظ');
        return;
    }

    // الحصول على البيانات الأصلية
    const originalContractNumber = formData.get('originalContractNumber');
    const originalPropertyName = formData.get('originalPropertyName');
    const originalUnitNumber = formData.get('originalUnitNumber');

    // التحقق من وجود البيانات أولاً
    if (!properties || !Array.isArray(properties)) {
        console.error('❌ مصفوفة properties غير موجودة أو غير صحيحة:', properties);
        // تم إزالة رسالة الخطأ حسب طلب المستخدم
        return;
    }

    console.log('✅ البيانات متوفرة، عدد العقارات:', properties.length);

    // البحث عن العقار المطلوب تحديثه مع تسجيل مفصل
    let propertyIndex = -1;
    let searchMethod = '';

    console.log('🔍 بدء البحث عن الوحدة للتحديث في savePropertyEdit:', {
        originalContractNumber,
        originalPropertyName,
        originalUnitNumber
    });

    if (originalContractNumber && originalPropertyName) {
        searchMethod = 'contract_and_property';
        propertyIndex = properties.findIndex(p =>
            p['رقم العقد'] === originalContractNumber && p['اسم العقار'] === originalPropertyName
        );
        console.log(`🔍 البحث بالعقد والعقار: فهرس=${propertyIndex}`);
    }

    if (propertyIndex === -1 && originalUnitNumber && originalPropertyName) {
        searchMethod = 'unit_and_property';
        propertyIndex = properties.findIndex(p =>
            p['رقم  الوحدة '] === originalUnitNumber && p['اسم العقار'] === originalPropertyName
        );
        console.log(`🔍 البحث بالوحدة والعقار: فهرس=${propertyIndex}`);
    }

    // إذا لم يتم العثور على الوحدة، جرب بحث أوسع
    if (propertyIndex === -1 && originalUnitNumber) {
        searchMethod = 'unit_only';
        propertyIndex = properties.findIndex(p => p['رقم  الوحدة '] === originalUnitNumber);
        console.log(`🔍 البحث بالوحدة فقط: فهرس=${propertyIndex}`);

        if (propertyIndex !== -1) {
            const foundProperty = properties[propertyIndex];
            console.log(`⚠️ تم العثور على الوحدة بالرقم فقط، لكن العقار مختلف: "${foundProperty['اسم العقار']}" بدلاً من "${originalPropertyName}"`);
        }
    }

    if (propertyIndex === -1) {
        console.error('❌ فشل في العثور على الوحدة للتحديث بجميع طرق البحث');
        console.log('📊 جميع الوحدات المتاحة:');
        properties.forEach((p, index) => {
            console.log(`   ${index}: وحدة="${p['رقم  الوحدة ']}", عقار="${p['اسم العقار']}", عقد="${p['رقم العقد']}"`);
        });

        alert('❌ لم يتم العثور على العقار المطلوب تحديثه\n\n' +
              'هذا قد يؤدي إلى إنشاء وحدة جديدة بدلاً من تعديل الموجودة!\n\n' +
              'تفاصيل البحث:\n' +
              `- رقم العقد الأصلي: ${originalContractNumber || 'غير محدد'}\n` +
              `- اسم العقار الأصلي: ${originalPropertyName || 'غير محدد'}\n` +
              `- رقم الوحدة الأصلي: ${originalUnitNumber || 'غير محدد'}\n\n` +
              'يرجى إعادة تحميل الصفحة والمحاولة مرة أخرى.');
        return;
    }

    console.log(`✅ تم العثور على الوحدة للتحديث بطريقة: ${searchMethod}, فهرس: ${propertyIndex}`);

    // التحقق من عدم وجود تكرار قبل التحديث
    const preUpdateDuplicateCheck = checkForDuplicateUnits(originalUnitNumber, originalPropertyName);
    if (preUpdateDuplicateCheck.hasDuplicates) {
        console.warn(`⚠️ تم اكتشاف ${preUpdateDuplicateCheck.count} نسخة من الوحدة قبل التحديث`);
        // إصلاح التكرار قبل المتابعة
        fixDuplicateUnits(originalUnitNumber, originalPropertyName);
    }

    // حفظ البيانات الأصلية للمقارنة
    const originalData = { ...properties[propertyIndex] };

    // تحديث البيانات
    const updatedProperty = { ...properties[propertyIndex] };

    // تحديث الحقول من النموذج
    console.log(`🔄 بدء معالجة حقول النموذج...`);

    // تعريف حقول معلومات الصك
    const deedFields = ['رقم الصك', 'مساحةالصك', 'السجل العيني ', 'المالك', 'موقع العقار'];

    for (let [key, value] of formData.entries()) {
        if (key.startsWith('original')) continue; // تجاهل الحقول المخفية

        // تسجيل خاص لحقول معلومات الصك
        if (deedFields.includes(key)) {
            console.log(`📝 معالجة حقل معلومات الصك: ${key}`);
            console.log(`   القيمة الأصلية: "${originalData[key]}"`);
            console.log(`   القيمة الجديدة: "${value}"`);
        }

        // تحويل التواريخ إلى الصيغة المطلوبة - معالجة محسنة لمنع التواريخ العشوائية
        if (key.includes('تاريخ') && value && !key.includes('القسط')) {
            // تحويل من yyyy-mm-dd إلى dd/mm/yyyy للتواريخ العادية فقط
            const dateParts = value.split('-');
            if (dateParts.length === 3 && dateParts[0].length === 4) {
                // تأكد من أن التاريخ صحيح قبل التحويل
                const year = parseInt(dateParts[0]);
                const month = parseInt(dateParts[1]);
                const day = parseInt(dateParts[2]);

                // التحقق من صحة التاريخ
                if (year >= 1900 && year <= 2100 && month >= 1 && month <= 12 && day >= 1 && day <= 31) {
                    // التحقق الإضافي باستخدام Date object لتجنب تواريخ مثل 31 فبراير
                    const testDate = new Date(year, month - 1, day, 12, 0, 0);
                    if (testDate.getFullYear() === year && testDate.getMonth() === (month - 1) && testDate.getDate() === day) {
                        value = `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}/${year}`;
                        console.log(`✅ تم تحويل التاريخ بنجاح: ${key} = ${value}`);
                    } else {
                        console.warn(`تاريخ غير صالح تم تجاهله: ${value} للحقل: ${key}`);
                        value = null;
                    }
                } else {
                    console.warn(`تاريخ غير صحيح تم تجاهله: ${value} للحقل: ${key}`);
                    value = null; // إزالة التاريخ غير الصحيح
                }
            }
        }

        // معالجة خاصة لتواريخ الأقساط - احتفظ بالصيغة الأصلية
        if (key.includes('القسط') && key.includes('تاريخ') && value) {
            // إذا كانت بصيغة yyyy-mm-dd، حولها إلى dd/mm/yyyy
            const dateParts = value.split('-');
            if (dateParts.length === 3 && dateParts[0].length === 4) {
                const year = parseInt(dateParts[0]);
                const month = parseInt(dateParts[1]);
                const day = parseInt(dateParts[2]);

                // التحقق من صحة التاريخ
                if (year >= 1900 && year <= 2100 && month >= 1 && month <= 12 && day >= 1 && day <= 31) {
                    // التحقق الإضافي باستخدام Date object
                    const testDate = new Date(year, month - 1, day, 12, 0, 0);
                    if (testDate.getFullYear() === year && testDate.getMonth() === (month - 1) && testDate.getDate() === day) {
                        value = `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}/${year}`;
                        console.log(`✅ تم تحويل تاريخ القسط بنجاح: ${key} = ${value}`);
                    } else {
                        console.warn(`تاريخ قسط غير صالح تم تجاهله: ${value} للحقل: ${key}`);
                        value = null;
                    }
                } else {
                    console.warn(`تاريخ قسط غير صحيح تم تجاهله: ${value} للحقل: ${key}`);
                    value = null;
                }
            }
        }

        // تحويل الأرقام
        if (['المساحة', 'قيمة  الايجار ', 'الاجمالى', 'عدد الاقساط المتبقية'].includes(key) && value) {
            value = parseFloat(value) || 0;
        }

        // تحديث خاص لعدد الأقساط المتبقية
        if (key === 'عدد الاقساط المتبقية') {
            value = parseInt(value) || 0;
        }

        // معالجة خاصة لملاحظات الوحدة
        if (key === 'ملاحظات الوحدة') {
            console.log(`📝 معالجة ملاحظات الوحدة:`);
            console.log(`   القيمة الأصلية: "${originalData[key]}"`);
            console.log(`   القيمة الجديدة: "${value}"`);

            // حفظ ملاحظات الوحدة (حتى لو كانت فارغة)
            updatedProperty[key] = value || '';
            console.log(`   ✅ تم حفظ ملاحظات الوحدة: "${updatedProperty[key]}"`);
        }
        // معالجة محسنة للحقول - استبدال القديم بالجديد
        else if (value === '' || value === null || value === undefined) {
            // للحقول النصية، احفظ القيمة الفارغة (استبدال القديم بفارغ)
            if (typeof updatedProperty[key] === 'string' || key.includes('رقم') || key.includes('اسم') || key.includes('موقع') || key.includes('المالك') || key.includes('السجل')) {
                updatedProperty[key] = value || '';
                if (deedFields.includes(key)) {
                    console.log(`   🔄 استبدال القيمة القديمة "${originalData[key]}" بالقيمة الجديدة "${value || ''}"`);
                }
            } else {
                // للحقول الرقمية، استخدم null
                updatedProperty[key] = null;
            }
        } else {
            // إذا كانت هناك قيمة، احفظها (استبدال القديم بالجديد)
            updatedProperty[key] = value;
            if (deedFields.includes(key)) {
                console.log(`   ✅ استبدال القيمة القديمة "${originalData[key]}" بالقيمة الجديدة "${value}"`);
            }
        }

        // تسجيل إضافي لحقول معلومات الصك
        if (deedFields.includes(key)) {
            console.log(`   القيمة النهائية المحفوظة: "${updatedProperty[key]}"`);
        }
    }

    // تحديث عدد الأقساط بناءً على الأقساط الموجودة فعلياً
    let actualInstallmentCount = 0;
    for (let i = 1; i <= 10; i++) {
        const dateKey = i === 1 ? 'تاريخ القسط الاول' :
                       i === 2 ? 'تاريخ القسط الثاني' :
                       `تاريخ القسط ${getArabicNumber(i)}`;
        const amountKey = i === 1 ? 'مبلغ القسط الاول' :
                         i === 2 ? 'مبلغ القسط الثاني' :
                         `مبلغ القسط ${getArabicNumber(i)}`;

        if (updatedProperty[dateKey] || updatedProperty[amountKey]) {
            actualInstallmentCount = i;
        }
    }

    // تحديث عدد الأقساط في البيانات
    updatedProperty['عدد الاقساط'] = actualInstallmentCount;

    // إضافة معلومات التحديث
    updatedProperty['تاريخ آخر تحديث'] = new Date().toLocaleDateString('ar-SA');
    updatedProperty['نوع التحديث'] = operationType || 'تحرير';
    updatedProperty['المسؤول عن التحديث'] = getCurrentUser();

    console.log(`✅ تم تحديث عدد الأقساط إلى: ${actualInstallmentCount}`);

    // إذا تم تحديث رقم العقد، تحديث جميع الوحدات المرتبطة
    const newContractNumber = formData.get('رقم العقد');
    if (originalContractNumber && newContractNumber && originalContractNumber !== newContractNumber) {
        // تحديث جميع الوحدات التي تحمل نفس رقم العقد القديم
        properties.forEach((property, index) => {
            if (property['رقم العقد'] === originalContractNumber && property['اسم العقار'] === originalPropertyName) {
                properties[index] = { ...properties[index], 'رقم العقد': newContractNumber };
            }
        });
    }

    // ✅ معالجة خاصة لتعديل رقم الوحدة - حذف الوحدة القديمة وإنشاء جديدة
    const newUnitNumber = formData.get('رقم  الوحدة ');
    if (originalUnitNumber && newUnitNumber && originalUnitNumber !== newUnitNumber) {
        console.log(`🔄 تم تعديل رقم الوحدة من "${originalUnitNumber}" إلى "${newUnitNumber}"`);

        // التحقق من عدم وجود وحدة أخرى بنفس الرقم الجديد
        const existingUnitWithNewNumber = properties.find(p =>
            p['رقم  الوحدة '] === newUnitNumber &&
            p['اسم العقار'] === originalPropertyName &&
            properties.indexOf(p) !== propertyIndex
        );

        if (existingUnitWithNewNumber) {
            // تم إزالة رسالة الخطأ حسب طلب المستخدم
            console.error(`خطأ: يوجد وحدة أخرى برقم "${newUnitNumber}" في نفس العقار!`);
            return;
        }

        // نهج جديد: حذف الوحدة القديمة من Supabase أولاً، ثم تحديث البيانات المحلية
        console.log(`🔄 تعديل رقم الوحدة: "${originalUnitNumber}" → "${newUnitNumber}"`);

        // 1. حفظ بيانات الوحدة القديمة للحذف من Supabase
        const oldUnitDataForSupabase = { ...properties[propertyIndex] };

        // 2. حذف الوحدة القديمة من Supabase أولاً
        if (typeof deletePropertyFromSupabase === 'function') {
            try {
                console.log(`☁️ حذف الوحدة القديمة برقم "${originalUnitNumber}" من Supabase...`);
                const deleteResult = await deletePropertyFromSupabase(oldUnitDataForSupabase);
                if (deleteResult && deleteResult.success) {
                    console.log(`✅ تم حذف الوحدة القديمة من Supabase بنجاح`);
                } else {
                    console.warn(`⚠️ تحذير: ${deleteResult ? deleteResult.message : 'فشل حذف الوحدة القديمة من Supabase'}`);
                }
            } catch (error) {
                console.error(`❌ خطأ في حذف الوحدة القديمة من Supabase:`, error);
            }
        }

        // 3. تحديث الوحدة المحلية برقم الوحدة الجديد
        const newUnitData = { ...updatedProperty, 'رقم  الوحدة ': newUnitNumber };
        properties[propertyIndex] = newUnitData;

        console.log(`✅ تم استبدال الوحدة "${originalUnitNumber}" بـ "${newUnitNumber}" بنجاح`);

        console.log(`✅ تم تحديث رقم الوحدة بنجاح: "${originalUnitNumber}" → "${newUnitNumber}"`);

        // تحديث updatedProperty برقم الوحدة الجديد لضمان الاتساق
        updatedProperty['رقم  الوحدة '] = newUnitNumber;
    } else {
        // حفظ التحديث العادي (بدون تعديل رقم الوحدة)
        properties[propertyIndex] = updatedProperty;
    }

    // تسجيل تفصيلي لحقول معلومات الصك بعد الحفظ
    console.log(`📊 حالة حقول معلومات الصك بعد الحفظ:`);
    deedFields.forEach(field => {
        console.log(`   ${field}: "${properties[propertyIndex][field]}"`);
    });

    // التحقق من وجود تغييرات في معلومات الصك قبل المزامنة
    const deedChanges = checkDeedFieldChanges(originalData, updatedProperty, deedFields);

    if (deedChanges.hasChanges) {
        console.log(`🔄 تم اكتشاف تغييرات في معلومات الصك، بدء المزامنة...`);
        console.log(`📝 الحقول المتغيرة:`, deedChanges.changedFields);

        // مزامنة معلومات الصك مع جميع وحدات العقار
        const syncResult = await syncDeedInfoAcrossUnits(originalPropertyName, updatedProperty, deedFields);

        // حفظ نتيجة المزامنة لعرضها في رسالة النجاح
        window.lastSyncResult = syncResult;
    } else {
        console.log(`ℹ️ لم يتم تعديل معلومات الصك، تخطي المزامنة`);
        // مسح أي نتيجة مزامنة سابقة
        window.lastSyncResult = null;
    }

    // حساب الإجمالي الجديد بناءً على الأقساط المحدثة
    console.log('💰 بدء حساب الإجمالي بناءً على البيانات المحدثة...');

    // التحقق من وجود قيمة إجمالي مدخلة يدوياً في النموذج
    const manualTotal = formData.get('الاجمالى');

    if (manualTotal && manualTotal !== '' && parseFloat(manualTotal) > 0) {
        // إذا تم إدخال إجمالي يدوياً، استخدمه واحفظه دائماً
        updatedProperty['الاجمالى'] = parseFloat(manualTotal);
        console.log(`💰 تم حفظ الإجمالي المدخل يدوياً: ${manualTotal} (سيتم الاحتفاظ به دائماً)`);
    } else if (manualTotal === '' || manualTotal === '0') {
        // إذا تم حذف الإجمالي يدوياً (قيمة فارغة أو صفر)
        updatedProperty['الاجمالى'] = null;
        console.log(`🗑️ تم حذف الإجمالي يدوياً من النموذج`);
    } else if (property['الاجمالى'] && property['الاجمالى'] !== null && property['الاجمالى'] !== 0) {
        // إذا كان هناك إجمالي موجود مسبقاً، احتفظ به ولا تغيره
        updatedProperty['الاجمالى'] = property['الاجمالى'];
        console.log(`💰 تم الاحتفاظ بالإجمالي الموجود: ${property['الاجمالى']} (لن يتم تغييره)`);
    } else {
        // فقط إذا لم يكن هناك إجمالي موجود، احسبه من الأقساط
        const yearlyData = calculateYearlyTotal(updatedProperty);
        if (yearlyData.count > 0) {
            updatedProperty['الاجمالى'] = yearlyData.total;
            console.log(`💰 تم حساب الإجمالي تلقائياً: ${yearlyData.total} (بناءً على ${yearlyData.count} قسط)`);
        } else {
            // إذا لم توجد أقساط، احذف الإجمالي
            updatedProperty['الاجمالى'] = null;
            console.log(`🗑️ تم حذف الإجمالي لعدم وجود أقساط`);
        }
    }

    // تحديث البيانات في المصفوفة
    properties[propertyIndex] = updatedProperty;

    // تحديث فوري للعرض لإظهار الإجمالي المحدث
    console.log('🔄 تحديث فوري للعرض...');
    renderData();
    updateTotalStats();

    // إغلاق النافذة أولاً
    closeModal();

    // إظهار شريط التقدم أثناء الحفظ (بدون شاشة التحميل الرئيسية)
    showProgressModal('جاري حفظ التغييرات...', async function(updateProgress) {
        try {
            console.log('✅ شريط التقدم بدأ بنجاح');

            // المرحلة 1: بدء الحفظ
            updateProgress(10, 'بدء عملية الحفظ...');
            await new Promise(resolve => setTimeout(resolve, 300));

            // المرحلة 2: حفظ محلي
            updateProgress(25, 'حفظ البيانات محلياً...');
            saveDataLocally();
            await new Promise(resolve => setTimeout(resolve, 400));

            // المرحلة 3: إعادة حساب الحالات
            updateProgress(40, 'إعادة حساب الحالات...');
            initializeApp();
            await new Promise(resolve => setTimeout(resolve, 300));

            // المرحلة 4: حفظ سحابي
            updateProgress(55, 'الاتصال بقاعدة البيانات السحابية...');
            await new Promise(resolve => setTimeout(resolve, 500));

            let supabaseResult = null;
            if (typeof savePropertyToSupabase === 'function') {
                try {
                    updateProgress(70, 'حفظ في قاعدة البيانات السحابية...');
                    supabaseResult = await savePropertyToSupabase(updatedProperty);
                    console.log('📊 نتيجة حفظ Supabase:', supabaseResult);
                    await new Promise(resolve => setTimeout(resolve, 600));
                } catch (error) {
                    console.error('خطأ في حفظ Supabase:', error);
                    supabaseResult = {
                        success: false,
                        message: `خطأ في الاتصال: ${error.message}`
                    };
                }
            }

            // المرحلة 5: مزامنة (إذا لزم الأمر)
            if (window.lastSyncResult && window.lastSyncResult.updatedCount > 0) {
                updateProgress(85, `مزامنة معلومات الصك في ${window.lastSyncResult.updatedCount} وحدة...`);
                await new Promise(resolve => setTimeout(resolve, 700));

                updateProgress(95, 'حفظ الوحدات المزامنة في السحابة...');
                await new Promise(resolve => setTimeout(resolve, 400));
            } else {
                updateProgress(90, 'التحقق من المزامنة...');
                await new Promise(resolve => setTimeout(resolve, 300));
            }

            updateProgress(100, 'تم الحفظ بنجاح!');
            await new Promise(resolve => setTimeout(resolve, 400));

            // بناء رسالة النجاح
            let message = 'تم حفظ التغييرات بنجاح!';

            // إضافة معلومات مزامنة معلومات الصك
            if (window.lastSyncResult && window.lastSyncResult.updatedCount > 0) {
                message += `\n🔄 تم تحديث معلومات الصك في ${window.lastSyncResult.updatedCount} وحدة`;

                if (window.lastSyncResult.changedFields && window.lastSyncResult.changedFields.length > 0) {
                    message += '\n📝 معلومات الصك المحدثة:';
                    window.lastSyncResult.changedFields.forEach(change => {
                        message += `\n• ${change.field}: ${change.newValue}`;
                    });
                }

                if (window.lastSyncResult.supabaseSuccess > 0) {
                    message += `\n☁️ تم حفظ ${window.lastSyncResult.supabaseSuccess} وحدة في السحابة`;
                }

                if (window.lastSyncResult.errors && window.lastSyncResult.errors.length > 0) {
                    message += `\n⚠️ تحذير: فشل تحديث ${window.lastSyncResult.errors.length} وحدة`;
                }
            } else if (window.lastSyncResult === null) {
                message += '\n💡 تم حفظ تعديلات الوحدة فقط (لم تتغير معلومات الصك)';
            }

            // إضافة معلومات حفظ Supabase
            if (typeof supabaseClient !== 'undefined' && supabaseClient) {
                if (supabaseResult && supabaseResult.success) {
                    message += '\n✅ تم حفظ التغييرات في قاعدة البيانات السحابية';
                } else {
                    const errorMsg = supabaseResult ? supabaseResult.message : 'فشل في الحفظ';
                    message += `\n⚠️ تحذير: ${errorMsg}`;
                }
            }

            // إضافة سجل التتبع (داخل شريط التقدم)
            try {
                const changes = compareDataAndCreateChanges(originalData, updatedProperty);

                let additionalInfo = {
                    originalData: originalData,
                    newData: updatedProperty
                };

                // معلومات إضافية حسب نوع العملية
                if (operationType === OPERATION_TYPES.NEW_CLIENT) {
                    additionalInfo.previousTenant = originalData['اسم المستأجر'];
                    additionalInfo.newTenant = updatedProperty['اسم المستأجر'];
                } else if (operationType === OPERATION_TYPES.EMPTY_UNIT) {
                    additionalInfo.previousTenant = originalData['اسم المستأجر'];
                    additionalInfo.reason = 'إفراغ وحدة';
                } else if (operationType === OPERATION_TYPES.RENEW_CONTRACT) {
                    additionalInfo.previousTenant = originalData['اسم المستأجر'];
                    additionalInfo.newTenant = updatedProperty['اسم المستأجر'];
                }

                await addChangeLog(operationType, updatedProperty, changes, additionalInfo);
                console.log('📝 تم إضافة سجل التتبع للعملية:', operationType);

                // إنشاء سجلات تتبع للوحدات المرتبطة إذا كان هناك تغيير في أي بيانات
                if (updatedProperty['رقم العقد'] && updatedProperty['اسم العقار']) {
                    // التحقق من وجود أي تغييرات في البيانات (ليس فقط الحقول المشتركة)
                    const hasAnyChanges = Object.keys(changes).length > 0 ||
                                         JSON.stringify(originalData) !== JSON.stringify(updatedProperty);

                    console.log('🔍 فحص التغييرات للوحدات المرتبطة:', {
                        hasChanges: hasAnyChanges,
                        changesCount: Object.keys(changes).length,
                        contractNumber: updatedProperty['رقم العقد'],
                        propertyName: updatedProperty['اسم العقار'],
                        unitNumber: updatedProperty['رقم  الوحدة ']
                    });

                    if (hasAnyChanges) {
                        try {
                            console.log('📝 بدء إنشاء سجلات التتبع للوحدات المرتبطة...');
                            const result = await createTrackingLogsForLinkedUnits(
                                updatedProperty['رقم العقد'],
                                updatedProperty['اسم العقار'],
                                updatedProperty['رقم  الوحدة '],
                                `تحديث بيانات مرتبطة - ${operationType}`
                            );

                            if (result && result.success) {
                                console.log(`✅ تم إنشاء ${result.createdCount} سجل تتبع للوحدات المرتبطة`);
                                if (result.failedCount > 0) {
                                    console.warn(`⚠️ فشل في إنشاء ${result.failedCount} سجل تتبع`);
                                }
                            } else {
                                console.log('ℹ️ لا توجد وحدات مرتبطة أو لم يتم إنشاء سجلات');
                            }
                        } catch (linkedError) {
                            console.warn('⚠️ فشل في إنشاء سجلات التتبع للوحدات المرتبطة:', linkedError);
                        }
                    } else {
                        console.log('ℹ️ لا توجد تغييرات، تخطي إنشاء سجلات التتبع للوحدات المرتبطة');
                    }
                }
            } catch (error) {
                console.warn('⚠️ خطأ في إضافة سجل التتبع (لن يؤثر على الحفظ):', error);
            }

            return { success: true, message: message };
        } catch (error) {
            console.error('خطأ في الحفظ:', error);
            return { success: false, message: 'حدث خطأ أثناء حفظ التغييرات' };
        }
    }, function(result) {
        // بعد انتهاء شريط التقدم، إظهار رسالة النجاح (بدون شاشة التحميل الرئيسية)
        console.log('🎯 callback شريط التقدم تم استدعاؤه، النتيجة:', result);

        if (result && result.success) {
            if (typeof showSuccessMessageWithCallback === 'function') {
                showSuccessMessageWithCallback('تم حفظ التغييرات بنجاح!', result.message, function() {
                    // تحديث إضافي بعد تأكيد المستخدم (بدون شاشة التحميل الرئيسية)
                    console.log('🔄 تحديث إضافي بعد تأكيد المستخدم...');
                    renderData();
                    updateTotalStats();

                    // مسح نتيجة المزامنة
                    window.lastSyncResult = null;
                });
            } else {
                // fallback إلى alert عادي
                alert(result.message);

                // تحديث إضافي (بدون شاشة التحميل الرئيسية)
                console.log('🔄 تحديث إضافي مع الاحتفاظ بالفلاتر...');

                // 🔄 استعادة الفلاتر المحفوظة
                if (savedFilters) {
                    console.log('🔄 استعادة الفلاتر المحفوظة:', savedFilters);

                    // استعادة المدينة
                    if (savedFilters.currentCountry) {
                        currentCountry = savedFilters.currentCountry;
                    }

                    // استعادة فلتر نوع العقار (مباني/أراضي)
                    if (savedFilters.currentPropertyTypeFilter) {
                        currentPropertyTypeFilter = savedFilters.currentPropertyTypeFilter;
                        console.log(`🏗️ استعادة فلتر نوع العقار: ${currentPropertyTypeFilter}`);
                    }

                    // استعادة فلتر الحالة
                    if (savedFilters.filterStatus) {
                        filterStatus = savedFilters.filterStatus;
                    }

                    // 🎯 تحديد السلوك حسب الحالة
                    if (savedFilters.currentPropertyTypeFilter && !savedFilters.currentProperty) {
                        // الحالة 1: عرض جميع وحدات النوع في المدينة (مثل: أراضي الرياض)
                        currentProperty = null; // لا يوجد عقار محدد
                        // ✅ التأكد من الاحتفاظ بفلتر المدينة
                        console.log(`🔄 عرض جميع وحدات ${currentPropertyTypeFilter === 'buildings' ? 'المباني' : 'الأراضي'} في ${currentCountry} فقط`);
                        console.log(`🏙️ المدينة النشطة: ${currentCountry}`);
                        console.log(`🏗️ نوع العقار النشط: ${currentPropertyTypeFilter}`);
                    } else if (savedFilters.currentProperty) {
                        // الحالة 2: عقار محدد مفتوح (مثل: عقار الصحراء)
                        currentProperty = savedFilters.currentProperty;
                        console.log(`🎯 العقار ${currentProperty} يبقى مفتوح مع وحداته في ${currentCountry}`);
                    }

                    // فلتر نوع العقار يبقى نشط في كلا الحالتين
                    if (savedFilters.currentPropertyTypeFilter) {
                        console.log(`✅ فلتر ${currentPropertyTypeFilter === 'buildings' ? 'المباني' : 'الأراضي'} يبقى نشط للمدينة ${currentCountry}`);
                    }

                    console.log('✅ تم استعادة الفلاتر بنجاح');
                }

                // 🔄 تحديث قائمة العقارات أولاً لتظهر عقارات المدينة النشطة فقط
                console.log(`🏙️ تحديث قائمة العقارات للمدينة الحالية: ${currentCountry || 'الكل'}`);
                initPropertyList(currentCountry);

                // تأخير صغير لضمان تحديث قائمة العقارات قبل عرض البيانات
                setTimeout(() => {
                    renderData();
                    updateTotalStats();

                    // تحديث حالة أزرار الفلاتر
                    updatePropertyTypeFiltersState();
                    updateActiveFiltersDisplay();

                    // حفظ الحالة النهائية
                    saveAppState();
                }, 50);

                window.lastSyncResult = null;
            }
        } else {
            const errorMessage = result ? result.message : 'حدث خطأ أثناء حفظ التغييرات';
            // تم إزالة رسالة الخطأ حسب طلب المستخدم
            console.error('خطأ في الحفظ:', errorMessage);
        }
    });
}

// ==================== وظائف مساعدة إضافية ====================

// تحرير عقار من قائمة العقارات
function editProperty(propertyName) {
    // البحث عن أول عقار بهذا الاسم
    const property = properties.find(p => p['اسم العقار'] === propertyName);
    if (!property) {
        alert('لم يتم العثور على العقار');
        return;
    }

    showCardEditModal(property['رقم العقد'] || '', propertyName, property['رقم  الوحدة '] || '');
}

// عرض وحدات العقار
function viewPropertyUnits(propertyName) {
    const propertyUnits = properties.filter(p => p['اسم العقار'] === propertyName);

    if (propertyUnits.length === 0) {
        alert('لا توجد وحدات في هذا العقار');
        return;
    }

    let html = `
    <div class="modal-overlay" style="display:flex;">
        <div class="modal-box property-units-modal">
            <button class="close-modal" onclick="closeModal()">×</button>
            <div class="units-modal-header">
                <h2><i class="fas fa-home"></i> وحدات العقار: ${propertyName}</h2>
                <p>إجمالي الوحدات: ${propertyUnits.length}</p>
            </div>
            <div class="units-modal-content">
                <div class="units-grid">
                    ${propertyUnits.map(unit => {
                        const status = calculateStatus(unit);
                        let statusClass = '';
                        if (status.final === 'فعال') statusClass = 'unit-active';
                        else if (status.final === 'منتهى') statusClass = 'unit-expired';
                        else if (status.final === 'على وشك') statusClass = 'unit-pending';
                        else if (status.final === 'فارغ') statusClass = 'unit-empty';

                        return `
                        <div class="unit-card ${statusClass}">
                            <div class="unit-header">
                                <h4>${unit['رقم  الوحدة '] || 'غير محدد'}</h4>
                                <span class="unit-status">${status.final || 'غير محدد'}</span>
                            </div>
                            <div class="unit-details">
                                <p><strong>المستأجر:</strong> ${unit['اسم المستأجر'] || 'فارغ'}</p>
                                <p><strong>المساحة:</strong> ${unit['المساحة'] ? unit['المساحة'] + ' م²' : 'غير محدد'}</p>
                                <p><strong>رقم العقد:</strong> ${unit['رقم العقد'] || 'غير محدد'}</p>
                                <p><strong>الإيجار:</strong> ${unit['قيمة  الايجار '] ? parseFloat(unit['قيمة  الايجار ']).toLocaleString() + ' ريال' : 'غير محدد'}</p>
                            </div>
                            <div class="unit-actions">
                                <button onclick="showCardEditModal('${unit['رقم العقد'] || ''}', '${propertyName}', '${unit['رقم  الوحدة '] || ''}')" class="btn-edit">
                                    <i class="fas fa-edit"></i> تحرير
                                </button>
                                <button onclick="showUnitDetails('${unit['رقم  الوحدة ']}', '${propertyName}', '${unit['رقم العقد'] || ''}')" class="btn-view">
                                    <i class="fas fa-eye"></i> عرض
                                </button>
                                <button onclick="deleteUnit('${unit['رقم  الوحدة ']}', '${propertyName}')" class="btn-delete">
                                    <i class="fas fa-trash"></i> حذف
                                </button>
                            </div>
                        </div>
                        `;
                    }).join('')}
                </div>
            </div>
        </div>
    </div>`;

    document.body.insertAdjacentHTML('beforeend', html);

    // إضافة حدث إغلاق للمودال
    document.querySelector('.modal-overlay:last-child').addEventListener('click', function(e) {
        if (e.target === this) {
            closeModal();
        }
    });
}

// ==================== وظائف ربط الوحدات المحسنة ====================

// إنشاء سجلات تتبع لجميع الوحدات المرتبطة
async function createTrackingLogsForLinkedUnits(contractNumber, propertyName, excludeUnitNumber, operationType) {
    try {
        console.log(`📝 إنشاء سجلات تتبع للوحدات المرتبطة بالعقد ${contractNumber}...`);

        if (!contractNumber || contractNumber.trim() === '') {
            console.warn('⚠️ رقم العقد فارغ، تخطي إنشاء سجلات التتبع');
            return { success: false, reason: 'رقم العقد فارغ' };
        }

        // البحث عن جميع الوحدات المرتبطة بنفس العقد (باستثناء الوحدة المستثناة)
        const linkedUnits = properties.filter(p =>
            p['رقم العقد'] === contractNumber &&
            p['اسم العقار'] === propertyName &&
            p['رقم  الوحدة '] !== excludeUnitNumber
        );

        if (linkedUnits.length === 0) {
            console.log('ℹ️ لا توجد وحدات أخرى مربوطة لإنشاء سجلات التتبع');
            return { success: true, createdCount: 0, reason: 'لا توجد وحدات أخرى' };
        }

        console.log(`📋 تم العثور على ${linkedUnits.length} وحدة مربوطة لإنشاء سجلات التتبع`);

        let createdCount = 0;
        let failedCount = 0;

        // إنشاء سجل تتبع لكل وحدة مرتبطة
        for (const unit of linkedUnits) {
            try {
                // إنشاء سجل التتبع مع معلومات إضافية
                const additionalInfo = {
                    contractNumber: contractNumber,
                    propertyName: propertyName,
                    newLinkedUnit: excludeUnitNumber,
                    reason: `تم ربط وحدة جديدة (${excludeUnitNumber}) بنفس العقد`,
                    relatedOperation: 'unit_linking_notification',
                    affectedUnits: linkedUnits.map(u => u['رقم  الوحدة ']),
                    totalLinkedUnits: linkedUnits.length + 1
                };

                await addChangeLog(operationType, unit, {}, additionalInfo);
                createdCount++;
                console.log(`📝 تم إنشاء سجل تتبع للوحدة ${unit['رقم  الوحدة ']}`);

                // تأخير قصير لتجنب تحميل قاعدة البيانات
                await new Promise(resolve => setTimeout(resolve, 100));

            } catch (logError) {
                console.warn(`⚠️ فشل في إنشاء سجل التتبع للوحدة ${unit['رقم  الوحدة ']}:`, logError);
                failedCount++;
            }
        }

        // مسح كاش سجلات التتبع لضمان ظهور السجلات الجديدة
        if (typeof clearTrackingLogsCache === 'function') {
            clearTrackingLogsCache();
        }

        console.log(`✅ تم إنشاء ${createdCount} سجل تتبع للوحدات المرتبطة`);
        if (failedCount > 0) {
            console.warn(`⚠️ فشل في إنشاء ${failedCount} سجل تتبع`);
        }

        // إرسال إشعار للمستخدم
        if (createdCount > 0) {
            showToast(`تم إنشاء ${createdCount} سجل تتبع للوحدات المرتبطة`, 'success');
        }

        return {
            success: true,
            createdCount,
            failedCount,
            totalUnits: linkedUnits.length
        };

    } catch (error) {
        console.error('❌ خطأ في إنشاء سجلات التتبع للوحدات المرتبطة:', error);
        showToast('خطأ في إنشاء سجلات التتبع للوحدات المرتبطة', 'error');
        return { success: false, reason: error.message };
    }
}

// إنشاء سجلات تتبع لجميع الوحدات المرتبطة
async function createTrackingLogsForLinkedUnits(contractNumber, propertyName, excludeUnitNumber, operationType) {
    try {
        console.log(`📝 إنشاء سجلات تتبع للوحدات المرتبطة بالعقد ${contractNumber}...`);

        if (!contractNumber || contractNumber.trim() === '') {
            console.warn('⚠️ رقم العقد فارغ، تخطي إنشاء سجلات التتبع');
            return { success: false, reason: 'رقم العقد فارغ' };
        }

        // البحث عن جميع الوحدات المرتبطة بنفس العقد (باستثناء الوحدة المستثناة)
        const linkedUnits = properties.filter(p =>
            p['رقم العقد'] === contractNumber &&
            p['اسم العقار'] === propertyName &&
            p['رقم  الوحدة '] !== excludeUnitNumber
        );

        if (linkedUnits.length === 0) {
            console.log('ℹ️ لا توجد وحدات أخرى مربوطة لإنشاء سجلات التتبع');
            return { success: true, createdCount: 0, reason: 'لا توجد وحدات أخرى' };
        }

        console.log(`📋 تم العثور على ${linkedUnits.length} وحدة مربوطة لإنشاء سجلات التتبع`);

        let createdCount = 0;

        // إنشاء سجل تتبع لكل وحدة مرتبطة
        for (const unit of linkedUnits) {
            try {
                await addChangeLog(
                    operationType,
                    unit,
                    {}, // لا توجد تغييرات فعلية، فقط إشعار بالربط
                    {
                        contractNumber: contractNumber,
                        propertyName: propertyName,
                        newLinkedUnit: excludeUnitNumber,
                        reason: `تم ربط وحدة جديدة (${excludeUnitNumber}) بنفس العقد`,
                        relatedOperation: 'unit_linking_notification'
                    }
                );
                createdCount++;
                console.log(`📝 تم إنشاء سجل تتبع للوحدة ${unit['رقم  الوحدة ']}`);

                // مسح كاش سجلات التتبع لضمان ظهور السجلات الجديدة
                if (typeof clearTrackingLogsCache === 'function') {
                    clearTrackingLogsCache();
                }
            } catch (logError) {
                console.warn(`⚠️ فشل في إنشاء سجل التتبع للوحدة ${unit['رقم  الوحدة ']}:`, logError);
            }
        }

        console.log(`✅ تم إنشاء ${createdCount} سجل تتبع للوحدات المرتبطة`);

        return {
            success: true,
            createdCount,
            totalUnits: linkedUnits.length
        };

    } catch (error) {
        console.error('❌ خطأ في إنشاء سجلات التتبع للوحدات المرتبطة:', error);
        return { success: false, reason: error.message };
    }
}

// 🔧 دالة مشاركة البيانات بين الوحدات المربوطة
async function syncLinkedUnitsData(contractNumber, propertyName, sourceUnitData, operationType = 'link') {
    try {
        console.log(`🔄 مزامنة بيانات الوحدات المربوطة للعقد ${contractNumber}...`);

        if (!contractNumber || contractNumber.trim() === '') {
            console.warn('⚠️ رقم العقد فارغ، تخطي المزامنة');
            return { success: false, reason: 'رقم العقد فارغ' };
        }

        // البحث عن جميع الوحدات المربوطة بنفس العقد
        const linkedUnits = properties.filter(p =>
            p['رقم العقد'] === contractNumber &&
            p['اسم العقار'] === propertyName
        );

        if (linkedUnits.length <= 1) {
            console.log('ℹ️ لا توجد وحدات أخرى مربوطة للمزامنة');
            return { success: true, updatedCount: 0, reason: 'وحدة واحدة فقط' };
        }

        console.log(`📋 تم العثور على ${linkedUnits.length} وحدة مربوطة للمزامنة`);

        // البيانات المشتركة التي يجب مزامنتها
        const sharedData = {
            // بيانات المستأجر
            'اسم المستأجر': sourceUnitData['اسم المستأجر'] || '',
            'رقم الجوال': sourceUnitData['رقم الجوال'] || '',
            'رقم الجوال الاضافي': sourceUnitData['رقم الجوال الاضافي'] || '',

            // بيانات العقد
            'رقم العقد': sourceUnitData['رقم العقد'] || '',
            'تاريخ البداية': sourceUnitData['تاريخ البداية'] || '',
            'تاريخ النهاية': sourceUnitData['تاريخ النهاية'] || '',
            'قيمة  الايجار ': sourceUnitData['قيمة  الايجار '] || '',
            'نوع العقد': sourceUnitData['نوع العقد'] || 'سكني',

            // بيانات الأقساط (من الأول إلى العاشر)
            'تاريخ القسط الاول': sourceUnitData['تاريخ القسط الاول'] || '',
            'مبلغ القسط الاول': sourceUnitData['مبلغ القسط الاول'] || '',
            'تاريخ القسط الثاني': sourceUnitData['تاريخ القسط الثاني'] || '',
            'مبلغ القسط الثاني': sourceUnitData['مبلغ القسط الثاني'] || '',
            'تاريخ القسط الثالث': sourceUnitData['تاريخ القسط الثالث'] || '',
            'مبلغ القسط الثالث': sourceUnitData['مبلغ القسط الثالث'] || '',
            'تاريخ القسط الرابع': sourceUnitData['تاريخ القسط الرابع'] || '',
            'مبلغ القسط الرابع': sourceUnitData['مبلغ القسط الرابع'] || '',
            'تاريخ القسط الخامس': sourceUnitData['تاريخ القسط الخامس'] || '',
            'مبلغ القسط الخامس': sourceUnitData['مبلغ القسط الخامس'] || '',
            'تاريخ القسط السادس': sourceUnitData['تاريخ القسط السادس'] || '',
            'مبلغ القسط السادس': sourceUnitData['مبلغ القسط السادس'] || '',
            'تاريخ القسط السابع': sourceUnitData['تاريخ القسط السابع'] || '',
            'مبلغ القسط السابع': sourceUnitData['مبلغ القسط السابع'] || '',
            'تاريخ القسط الثامن': sourceUnitData['تاريخ القسط الثامن'] || '',
            'مبلغ القسط الثامن': sourceUnitData['مبلغ القسط الثامن'] || '',
            'تاريخ القسط التاسع': sourceUnitData['تاريخ القسط التاسع'] || '',
            'مبلغ القسط التاسع': sourceUnitData['مبلغ القسط التاسع'] || '',
            'تاريخ القسط العاشر': sourceUnitData['تاريخ القسط العاشر'] || '',
            'مبلغ القسط العاشر': sourceUnitData['مبلغ القسط العاشر'] || '',
            'تاريخ نهاية القسط': sourceUnitData['تاريخ نهاية القسط'] || '',

            // معلومات التحديث
            'تاريخ آخر تحديث': new Date().toLocaleDateString('ar-SA'),
            'نوع التحديث': `مزامنة بيانات العقد - ${operationType}`,
            'المسؤول عن التحديث': getCurrentUser()
        };

        let updatedCount = 0;
        let supabaseUpdates = [];

        // تطبيق البيانات المشتركة على جميع الوحدات المربوطة
        for (const unit of linkedUnits) {
            const unitIndex = properties.findIndex(p =>
                p['رقم  الوحدة '] === unit['رقم  الوحدة '] &&
                p['اسم العقار'] === unit['اسم العقار']
            );

            if (unitIndex !== -1) {
                // الحفاظ على البيانات الخاصة بكل وحدة
                const preservedData = {
                    'رقم  الوحدة ': properties[unitIndex]['رقم  الوحدة '],
                    'اسم العقار': properties[unitIndex]['اسم العقار'],
                    'المساحة': properties[unitIndex]['المساحة'],
                    'ملاحظات الوحدة': properties[unitIndex]['ملاحظات الوحدة'],
                    'المدينة': properties[unitIndex]['المدينة'],
                    'رقم الصك': properties[unitIndex]['رقم الصك'],
                    'مساحة الصك': properties[unitIndex]['مساحة الصك'],
                    'السجل العيني ': properties[unitIndex]['السجل العيني '],
                    'المالك': properties[unitIndex]['المالك'],
                    'موقع العقار': properties[unitIndex]['موقع العقار']
                };

                // دمج البيانات المشتركة مع البيانات المحفوظة
                properties[unitIndex] = {
                    ...properties[unitIndex],
                    ...sharedData,
                    ...preservedData // إعادة كتابة البيانات الخاصة للتأكد من عدم تغييرها
                };

                updatedCount++;
                console.log(`✅ تم تحديث الوحدة ${unit['رقم  الوحدة ']} بالبيانات المشتركة`);

                // إنشاء سجل تتبع لكل وحدة مرتبطة
                try {
                    const changes = {};
                    // تسجيل التغييرات المهمة
                    if (sharedData['اسم المستأجر'] !== unit['اسم المستأجر']) {
                        changes['اسم المستأجر'] = {
                            old: unit['اسم المستأجر'] || 'فارغ',
                            new: sharedData['اسم المستأجر'] || 'فارغ',
                            fieldName: 'اسم المستأجر'
                        };
                    }
                    if (sharedData['رقم العقد'] !== unit['رقم العقد']) {
                        changes['رقم العقد'] = {
                            old: unit['رقم العقد'] || 'فارغ',
                            new: sharedData['رقم العقد'] || 'فارغ',
                            fieldName: 'رقم العقد'
                        };
                    }
                    if (sharedData['قيمة  الايجار '] !== unit['قيمة  الايجار ']) {
                        changes['قيمة  الايجار '] = {
                            old: unit['قيمة  الايجار '] || '0',
                            new: sharedData['قيمة  الايجار '] || '0',
                            fieldName: 'قيمة الإيجار'
                        };
                    }

                    // إضافة سجل تتبع للوحدة المرتبطة
                    if (typeof addChangeLog === 'function') {
                        await addChangeLog(
                            operationType === 'link' ? 'ربط وحدة' : 'مزامنة بيانات الوحدات المرتبطة',
                            properties[unitIndex],
                            changes,
                            {
                                contractNumber: contractNumber,
                                propertyName: propertyName,
                                operationType: operationType,
                                syncedFields: Object.keys(sharedData).length,
                                reason: `مزامنة مع الوحدات المرتبطة بالعقد ${contractNumber}`
                            }
                        );
                        console.log(`📝 تم إنشاء سجل تتبع للوحدة ${unit['رقم  الوحدة ']}`);
                    }
                } catch (logError) {
                    console.warn(`⚠️ فشل في إنشاء سجل التتبع للوحدة ${unit['رقم  الوحدة ']}:`, logError);
                }

                // إضافة للقائمة للحفظ في Supabase
                supabaseUpdates.push(properties[unitIndex]);
            }
        }

        // حفظ التحديثات في Supabase
        let supabaseSuccessCount = 0;
        if (typeof savePropertyToSupabase === 'function') {
            for (const updatedUnit of supabaseUpdates) {
                try {
                    const result = await savePropertyToSupabase(updatedUnit);
                    if (result && result.success) {
                        supabaseSuccessCount++;
                        console.log(`☁️ تم حفظ الوحدة ${updatedUnit['رقم  الوحدة ']} في Supabase`);
                    }
                } catch (error) {
                    console.error(`❌ فشل حفظ الوحدة ${updatedUnit['رقم  الوحدة ']} في Supabase:`, error);
                }
            }
        }

        // حفظ البيانات محلياً
        saveDataLocally();

        console.log(`🎉 تمت مزامنة ${updatedCount} وحدة، تم حفظ ${supabaseSuccessCount} في Supabase`);

        return {
            success: true,
            updatedCount,
            supabaseSuccessCount,
            totalUnits: linkedUnits.length,
            sharedFields: Object.keys(sharedData).length
        };

    } catch (error) {
        console.error('❌ خطأ في مزامنة بيانات الوحدات المربوطة:', error);
        return { success: false, reason: error.message };
    }
}

// 🔧 دالة تحديث جميع الوحدات المربوطة عند تعديل البيانات
async function updateLinkedUnitsOnEdit(editedUnitData) {
    try {
        const contractNumber = editedUnitData['رقم العقد'];
        const propertyName = editedUnitData['اسم العقار'];

        if (!contractNumber || contractNumber.trim() === '') {
            console.log('ℹ️ لا يوجد رقم عقد، تخطي تحديث الوحدات المربوطة');
            return { success: true, reason: 'لا يوجد عقد' };
        }

        console.log(`🔄 تحديث جميع الوحدات المربوطة بالعقد ${contractNumber}...`);

        // البحث عن جميع الوحدات المربوطة بنفس العقد
        const linkedUnits = properties.filter(p =>
            p['رقم العقد'] === contractNumber &&
            p['اسم العقار'] === propertyName
        );

        if (linkedUnits.length <= 1) {
            console.log('ℹ️ لا توجد وحدات أخرى مربوطة للتحديث');
            return { success: true, updatedCount: 0, reason: 'وحدة واحدة فقط' };
        }

        console.log(`📋 تم العثور على ${linkedUnits.length} وحدة مربوطة للتحديث`);

        // الحقول المشتركة التي يجب تحديثها
        const sharedFields = [
            'اسم المستأجر', 'رقم الجوال', 'رقم الجوال الاضافي',
            'تاريخ البداية', 'تاريخ النهاية', 'قيمة  الايجار ', 'نوع العقد',
            'تاريخ القسط الاول', 'مبلغ القسط الاول',
            'تاريخ القسط الثاني', 'مبلغ القسط الثاني',
            'تاريخ القسط الثالث', 'مبلغ القسط الثالث',
            'تاريخ القسط الرابع', 'مبلغ القسط الرابع',
            'تاريخ القسط الخامس', 'مبلغ القسط الخامس',
            'تاريخ القسط السادس', 'مبلغ القسط السادس',
            'تاريخ القسط السابع', 'مبلغ القسط السابع',
            'تاريخ القسط الثامن', 'مبلغ القسط الثامن',
            'تاريخ القسط التاسع', 'مبلغ القسط التاسع',
            'تاريخ القسط العاشر', 'مبلغ القسط العاشر',
            'تاريخ نهاية القسط'
        ];

        let updatedCount = 0;
        let supabaseUpdates = [];

        // تحديث جميع الوحدات المربوطة
        for (const unit of linkedUnits) {
            const unitIndex = properties.findIndex(p =>
                p['رقم  الوحدة '] === unit['رقم  الوحدة '] &&
                p['اسم العقار'] === unit['اسم العقار']
            );

            if (unitIndex !== -1) {
                // تحديث الحقول المشتركة فقط
                let hasChanges = false;
                for (const field of sharedFields) {
                    if (editedUnitData[field] !== undefined &&
                        properties[unitIndex][field] !== editedUnitData[field]) {
                        properties[unitIndex][field] = editedUnitData[field];
                        hasChanges = true;
                    }
                }

                if (hasChanges) {
                    // إضافة معلومات التحديث
                    properties[unitIndex]['تاريخ آخر تحديث'] = new Date().toLocaleDateString('ar-SA');
                    properties[unitIndex]['نوع التحديث'] = 'تحديث بيانات العقد المشتركة';
                    properties[unitIndex]['المسؤول عن التحديث'] = getCurrentUser();

                    updatedCount++;
                    console.log(`✅ تم تحديث الوحدة ${unit['رقم  الوحدة ']} بالبيانات المشتركة`);

                    // إنشاء سجل تتبع للوحدة المحدثة
                    try {
                        const changes = {};
                        // تسجيل التغييرات المهمة فقط
                        for (const field of sharedFields) {
                            if (editedUnitData[field] !== undefined &&
                                unit[field] !== editedUnitData[field]) {
                                changes[field] = {
                                    old: unit[field] || 'فارغ',
                                    new: editedUnitData[field] || 'فارغ',
                                    fieldName: field
                                };
                            }
                        }

                        // إضافة سجل تتبع للوحدة المرتبطة
                        if (typeof addChangeLog === 'function' && Object.keys(changes).length > 0) {
                            await addChangeLog(
                                'تحديث بيانات الوحدات المرتبطة',
                                properties[unitIndex],
                                changes,
                                {
                                    contractNumber: contractNumber,
                                    propertyName: propertyName,
                                    updatedFields: Object.keys(changes),
                                    reason: `تحديث تلقائي للوحدات المرتبطة بالعقد ${contractNumber}`
                                }
                            );
                            console.log(`📝 تم إنشاء سجل تتبع للوحدة ${unit['رقم  الوحدة ']}`);
                        }
                    } catch (logError) {
                        console.warn(`⚠️ فشل في إنشاء سجل التتبع للوحدة ${unit['رقم  الوحدة ']}:`, logError);
                    }

                    // إضافة للقائمة للحفظ في Supabase
                    supabaseUpdates.push(properties[unitIndex]);
                }
            }
        }

        // حفظ التحديثات في Supabase
        let supabaseSuccessCount = 0;
        if (typeof savePropertyToSupabase === 'function') {
            for (const updatedUnit of supabaseUpdates) {
                try {
                    const result = await savePropertyToSupabase(updatedUnit);
                    if (result && result.success) {
                        supabaseSuccessCount++;
                        console.log(`☁️ تم حفظ الوحدة ${updatedUnit['رقم  الوحدة ']} في Supabase`);
                    }
                } catch (error) {
                    console.error(`❌ فشل حفظ الوحدة ${updatedUnit['رقم  الوحدة ']} في Supabase:`, error);
                }
            }
        }

        // حفظ البيانات محلياً
        saveDataLocally();

        if (updatedCount > 0) {
            console.log(`🎉 تم تحديث ${updatedCount} وحدة مربوطة، تم حفظ ${supabaseSuccessCount} في Supabase`);

            // إظهار رسالة للمستخدم
            showToast(`تم تحديث ${updatedCount} وحدة مربوطة بنفس البيانات`, 'success');
        }

        return {
            success: true,
            updatedCount,
            supabaseSuccessCount,
            totalUnits: linkedUnits.length
        };

    } catch (error) {
        console.error('❌ خطأ في تحديث الوحدات المربوطة:', error);
        return { success: false, reason: error.message };
    }
}

// عرض الوحدات المتاحة للربط - محسن مع واجهة اختيار
function renderAvailableUnitsForLinking(propertyName, currentContractNumber, currentUnitNumber) {
    // التحقق من وجود البيانات أولاً
    if (!ensurePropertiesLoaded('renderAvailableUnitsForLinking')) {
        return '<p class="no-units">خطأ: البيانات غير متوفرة</p>';
    }

    // الحصول على الوحدات الفارغة فقط في نفس العقار
    const allUnitsInProperty = properties.filter(p =>
        p['اسم العقار'] === propertyName &&
        p['رقم  الوحدة '] !== currentUnitNumber &&
        (!p['رقم العقد'] || p['رقم العقد'] !== currentContractNumber) &&
        (!p['اسم المستأجر'] || p['اسم المستأجر'].trim() === '')
    );

    if (allUnitsInProperty.length === 0) {
        return `<div class="no-units-message">
            <i class="fas fa-info-circle"></i>
            لا توجد وحدات فارغة متاحة للربط في عقار "${propertyName}"
        </div>`;
    }

    // واجهة بسيطة للوحدات الفارغة فقط مع زر ربط فعال
    return `
        <div class="simple-unit-linking">
            ${allUnitsInProperty.map(unit => `
                <div class="empty-unit-item" data-unit-number="${unit['رقم  الوحدة ']}">
                    <div class="unit-info">
                        <i class="fas fa-home"></i>
                        <span class="unit-number">وحدة ${unit['رقم  الوحدة ']}</span>
                        ${unit['المساحة'] ? `<span class="unit-area">${unit['المساحة']} م²</span>` : ''}
                    </div>
                    <button type="button" onclick="performRealUnitLinking('${unit['رقم  الوحدة ']}')"
                            class="btn-link-empty-unit"
                            title="ربط هذه الوحدة الفارغة">
                        <i class="fas fa-link"></i> ربط
                    </button>
                </div>
            `).join('')}
        </div>
    `;
}

// دالة مساعدة للحصول على نص حالة الوحدة
function getUnitStatusText(unit) {
    if (unit['اسم المستأجر'] && unit['اسم المستأجر'].trim() !== '') {
        return 'مشغولة';
    } else {
        return 'فارغة';
    }
}

// دالة الربط الحقيقي المبسطة للوحدات الفارغة
async function performRealUnitLinking(unitNumber) {
    if (!unitNumber) {
        alert('رقم الوحدة غير صحيح');
        return;
    }

    console.log(`🔗 بدء الربط الحقيقي للوحدة ${unitNumber}...`);

    try {
        // الحصول على معلومات النموذج الحالي
        const form = document.getElementById('propertyEditForm') || document.getElementById('multiUnitEditForm');
        if (!form) {
            throw new Error('لم يتم العثور على النموذج');
        }

        const formData = new FormData(form);
        const currentPropertyName = formData.get('propertyName') || formData.get('اسم العقار');
        const currentTenant = formData.get('tenantName') || formData.get('اسم المستأجر');
        const currentContract = formData.get('contractNumber') || formData.get('رقم العقد');
        const currentRent = formData.get('rentValue') || formData.get('قيمة  الايجار ');
        const currentOwner = formData.get('owner') || formData.get('المالك');
        const currentDeed = formData.get('deedNumber') || formData.get('رقم الصك');

        if (!currentPropertyName) {
            throw new Error('لم يتم العثور على اسم العقار');
        }

        // التحقق من اتصال Supabase
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        // البحث عن الوحدة في Supabase
        console.log(`📋 البحث عن الوحدة ${unitNumber} في Supabase...`);
        const { data: unitData, error: searchError } = await supabaseClient
            .from('properties')
            .select('*')
            .eq('unit_number', unitNumber)
            .eq('property_name', currentPropertyName)
            .single();

        if (searchError) {
            throw new Error(`خطأ في البحث عن الوحدة: ${searchError.message}`);
        }

        if (!unitData) {
            throw new Error(`لم يتم العثور على الوحدة ${unitNumber} في Supabase`);
        }

        // التأكد من أن الوحدة فارغة
        if (unitData.tenant_name && unitData.tenant_name.trim() !== '') {
            throw new Error(`الوحدة ${unitNumber} مشغولة بالفعل بالمستأجر: ${unitData.tenant_name}`);
        }

        // تأكيد العملية
        const confirmMessage = `هل تريد ربط الوحدة الفارغة ${unitNumber}؟

🏠 العقار: ${currentPropertyName}
👤 سيتم ربطها بالمستأجر: ${currentTenant || 'غير محدد'}
📄 رقم العقد: ${currentContract || 'غير محدد'}
💰 الإيجار: ${currentRent ? parseFloat(currentRent).toLocaleString() + ' ريال' : 'غير محدد'}

سيتم حفظ التغييرات في Supabase فوراً.`;

        if (!confirm(confirmMessage)) {
            return;
        }

        // تعطيل الزر أثناء المعالجة
        const linkButton = document.querySelector(`[onclick="performRealUnitLinking('${unitNumber}')"]`);
        if (linkButton) {
            linkButton.disabled = true;
            linkButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> جاري الربط...';
        }

        // تحضير البيانات للتحديث
        const updateData = {
            tenant_name: currentTenant || '',
            contract_number: currentContract || '',
            rent_value: currentRent ? parseFloat(currentRent) : null,
            owner: currentOwner || '',
            deed_number: currentDeed || '',
            updated_at: new Date().toISOString()
        };

        console.log(`☁️ تحديث الوحدة ${unitNumber} في Supabase...`);

        // تحديث الوحدة في Supabase
        const { data: updatedData, error: updateError } = await supabaseClient
            .from('properties')
            .update(updateData)
            .eq('id', unitData.id)
            .select();

        if (updateError) {
            throw new Error(`فشل في تحديث الوحدة: ${updateError.message}`);
        }

        if (!updatedData || updatedData.length === 0) {
            throw new Error('لم يتم إرجاع بيانات من عملية التحديث');
        }

        console.log(`✅ تم ربط الوحدة ${unitNumber} بنجاح في Supabase`);

        // تحديث البيانات المحلية
        if (properties && Array.isArray(properties)) {
            const localUnitIndex = properties.findIndex(p =>
                p['رقم  الوحدة '] === unitNumber &&
                p['اسم العقار'] === currentPropertyName
            );

            if (localUnitIndex !== -1) {
                properties[localUnitIndex]['اسم المستأجر'] = currentTenant || '';
                properties[localUnitIndex]['رقم العقد'] = currentContract || '';
                properties[localUnitIndex]['قيمة  الايجار '] = currentRent || '';
                properties[localUnitIndex]['المالك'] = currentOwner || '';
                properties[localUnitIndex]['رقم الصك'] = currentDeed || '';

                // حفظ في localStorage
                localStorage.setItem('propertyData', JSON.stringify(properties));
                console.log('✅ تم تحديث البيانات المحلية');
            }
        }

        // إعادة تحميل قسم الوحدات المتاحة
        const availableUnitsDiv = document.getElementById('availableUnitsForLinking');
        if (availableUnitsDiv) {
            availableUnitsDiv.innerHTML = renderAvailableUnitsForLinking(
                currentPropertyName,
                currentContract,
                formData.get('unitNumber') || formData.get('رقم  الوحدة ')
            );
        }

        // رسالة النجاح
        const successMessage = `🎉 تم ربط الوحدة بنجاح!

✅ الوحدة: ${unitNumber}
🏠 العقار: ${currentPropertyName}
👤 المستأجر: ${currentTenant || 'غير محدد'}
📄 العقد: ${currentContract || 'غير محدد'}
☁️ تم الحفظ في Supabase
📱 تم تحديث البيانات المحلية

🔗 يمكنك التحقق من النتيجة في Supabase Dashboard`;

        alert(successMessage);
        showToast(`تم ربط الوحدة ${unitNumber} بنجاح!`, 'success');

    } catch (error) {
        console.error(`❌ خطأ في ربط الوحدة ${unitNumber}:`, error);

        const errorMessage = `❌ فشل في ربط الوحدة ${unitNumber}!

الخطأ: ${error.message}

💡 تحقق من:
• اتصال الإنترنت
• صلاحيات Supabase
• أن الوحدة فارغة فعلاً`;

        alert(errorMessage);
        showToast(`فشل في ربط الوحدة ${unitNumber}`, 'error');

        // إعادة تفعيل الزر
        const linkButton = document.querySelector(`[onclick="performRealUnitLinking('${unitNumber}')"]`);
        if (linkButton) {
            linkButton.disabled = false;
            linkButton.innerHTML = '<i class="fas fa-link"></i> ربط';
        }
    }
}

function linkUnitFromModal(unitNumber) {
    if (!unitNumber) {
        alert('رقم الوحدة غير صحيح');
        return;
    }

    console.log(`🔗 بدء ربط الوحدة ${unitNumber} من النافذة...`);

    // الحصول على معلومات النافذة الحالية
    const form = document.getElementById('propertyEditForm') || document.getElementById('multiUnitEditForm');
    if (!form) {
        alert('لم يتم العثور على النموذج');
        return;
    }

    const formData = new FormData(form);
    const currentPropertyName = formData.get('propertyName') || formData.get('اسم العقار');
    const currentContractNumber = formData.get('contractNumber') || formData.get('رقم العقد');

    if (!currentPropertyName) {
        alert('لم يتم العثور على اسم العقار');
        return;
    }

    // البحث عن الوحدة في البيانات
    const unitToLink = properties.find(unit =>
        unit['رقم  الوحدة '] === unitNumber &&
        unit['اسم العقار'] === currentPropertyName
    );

    if (!unitToLink) {
        alert('لم يتم العثور على الوحدة');
        return;
    }

    // تأكيد العملية
    const confirmMessage = `هل تريد ربط الوحدة ${unitNumber}؟

🏠 العقار: ${currentPropertyName}
👤 المستأجر الحالي: ${unitToLink['اسم المستأجر'] || 'فارغ'}
📄 العقد الحالي: ${unitToLink['رقم العقد'] || 'فارغ'}

سيتم نسخ بيانات المستأجر والعقد من الوحدة الأساسية.`;

    if (!confirm(confirmMessage)) {
        return;
    }

    // تنفيذ الربط باستخدام toggleUnitLinking
    toggleUnitLinking(unitNumber, currentPropertyName, currentContractNumber);
}

function previewUnitLinkingFromModal(unitNumber) {
    const form = document.getElementById('propertyEditForm') || document.getElementById('multiUnitEditForm');
    if (!form) {
        alert('لم يتم العثور على النموذج');
        return;
    }

    const formData = new FormData(form);
    const currentPropertyName = formData.get('propertyName') || formData.get('اسم العقار');
    const currentTenant = formData.get('tenantName') || formData.get('اسم المستأجر');
    const currentContract = formData.get('contractNumber') || formData.get('رقم العقد');
    const currentRent = formData.get('rentValue') || formData.get('قيمة  الايجار ');

    const unitToPreview = properties.find(unit =>
        unit['رقم  الوحدة '] === unitNumber &&
        unit['اسم العقار'] === currentPropertyName
    );

    if (!unitToPreview) {
        alert('لم يتم العثور على الوحدة');
        return;
    }

    const previewMessage = `🔍 معاينة ربط الوحدة

🏠 الوحدة المراد ربطها: ${unitNumber}
📍 العقار: ${unitToPreview['اسم العقار']}
👤 المستأجر الحالي: ${unitToPreview['اسم المستأجر'] || 'فارغ'}
📄 العقد الحالي: ${unitToPreview['رقم العقد'] || 'فارغ'}

⬇️ ستصبح بعد الربط:
👤 المستأجر الجديد: ${currentTenant || 'فارغ'}
📄 العقد الجديد: ${currentContract || 'فارغ'}
💰 الإيجار: ${currentRent ? parseFloat(currentRent).toLocaleString() + ' ريال' : 'غير محدد'}

هل تريد المتابعة مع الربط؟`;

    if (confirm(previewMessage)) {
        linkUnitFromModal(unitNumber);
    }
}

function showBulkLinkingFromModal() {
    alert('ميزة الربط المتعدد ستكون متوفرة قريباً!\n\nيمكنك حالياً ربط الوحدات واحدة تلو الأخرى.');
}

function linkAllEmptyUnitsFromModal() {
    const form = document.getElementById('propertyEditForm') || document.getElementById('multiUnitEditForm');
    if (!form) {
        alert('لم يتم العثور على النموذج');
        return;
    }

    const formData = new FormData(form);
    const currentPropertyName = formData.get('propertyName') || formData.get('اسم العقار');
    const currentContractNumber = formData.get('contractNumber') || formData.get('رقم العقد');
    const currentUnitNumber = formData.get('unitNumber') || formData.get('رقم  الوحدة ');

    // البحث عن الوحدات الفارغة
    const emptyUnits = properties.filter(unit =>
        unit['اسم العقار'] === currentPropertyName &&
        unit['رقم  الوحدة '] !== currentUnitNumber &&
        (!unit['رقم العقد'] || unit['رقم العقد'] !== currentContractNumber) &&
        (!unit['اسم المستأجر'] || unit['اسم المستأجر'].trim() === '')
    );

    if (emptyUnits.length === 0) {
        alert('لا توجد وحدات فارغة متاحة للربط');
        return;
    }

    const confirmMessage = `هل تريد ربط جميع الوحدات الفارغة؟

عدد الوحدات: ${emptyUnits.length} وحدة
الوحدات: ${emptyUnits.map(u => u['رقم  الوحدة ']).join(', ')}

سيتم نسخ بيانات المستأجر والعقد إلى جميع هذه الوحدات.`;

    if (!confirm(confirmMessage)) {
        return;
    }

    // ربط جميع الوحدات الفارغة
    let successCount = 0;
    emptyUnits.forEach((unit, index) => {
        setTimeout(() => {
            try {
                toggleUnitLinking(unit['رقم  الوحدة '], currentPropertyName, currentContractNumber);
                successCount++;

                if (index === emptyUnits.length - 1) {
                    // آخر وحدة
                    setTimeout(() => {
                        alert(`تم ربط ${successCount} وحدة من أصل ${emptyUnits.length} وحدة بنجاح!`);
                    }, 500);
                }
            } catch (error) {
                console.error(`خطأ في ربط الوحدة ${unit['رقم  الوحدة ']}:`, error);
            }
        }, index * 500); // توقف نصف ثانية بين كل ربط
    });
}

// إضافة الدالة الجديدة للنطاق العام
window.performRealUnitLinking = performRealUnitLinking;

// دالة اختبار سريعة للواجهة الجديدة
function testNewLinkingInterface() {
    console.log('🧪 اختبار الواجهة الجديدة لربط الوحدات...');

    try {
        // التحقق من وجود البيانات
        if (!properties || properties.length === 0) {
            throw new Error('لا توجد بيانات عقارات');
        }

        // البحث عن عقار يحتوي على وحدات فارغة
        const propertyNames = [...new Set(properties.map(p => p['اسم العقار']))];
        let testProperty = null;
        let emptyUnits = [];

        for (const propertyName of propertyNames) {
            const unitsInProperty = properties.filter(p => p['اسم العقار'] === propertyName);
            const emptyUnitsInProperty = unitsInProperty.filter(p =>
                !p['اسم المستأجر'] || p['اسم المستأجر'].trim() === ''
            );

            if (emptyUnitsInProperty.length > 0) {
                testProperty = propertyName;
                emptyUnits = emptyUnitsInProperty;
                break;
            }
        }

        if (!testProperty || emptyUnits.length === 0) {
            throw new Error('لا توجد وحدات فارغة للاختبار');
        }

        // اختبار دالة renderAvailableUnitsForLinking
        console.log(`📋 اختبار عرض الوحدات الفارغة في عقار: ${testProperty}`);
        const renderedHTML = renderAvailableUnitsForLinking(testProperty, '', emptyUnits[0]['رقم  الوحدة ']);

        if (!renderedHTML || renderedHTML.includes('لا توجد وحدات فارغة')) {
            throw new Error('فشل في عرض الوحدات الفارغة');
        }

        // التحقق من وجود العناصر المطلوبة في HTML
        const requiredElements = [
            'unitSelector',
            'btn-link-selected',
            'linkSelectedUnitFromModal',
            'الوحدات الفارغة المتاحة للربط'
        ];

        let missingElements = [];
        requiredElements.forEach(element => {
            if (!renderedHTML.includes(element)) {
                missingElements.push(element);
            }
        });

        if (missingElements.length > 0) {
            throw new Error(`عناصر مفقودة في HTML: ${missingElements.join(', ')}`);
        }

        // النتيجة النهائية
        const successMessage = `🎉 نجح اختبار الواجهة الجديدة!

✅ تم العثور على عقار للاختبار: ${testProperty}
✅ عدد الوحدات الفارغة: ${emptyUnits.length} وحدة
✅ تم إنشاء HTML الواجهة بنجاح
✅ جميع العناصر المطلوبة موجودة

📋 الوحدات الفارغة المتاحة:
${emptyUnits.map(u => `• وحدة ${u['رقم  الوحدة ']} - ${u['المساحة'] ? u['المساحة'] + ' م²' : 'مساحة غير محددة'}`).join('\n')}

🎯 الواجهة جاهزة للاستخدام!
💡 افتح نافذة تحرير لأي بطاقة لرؤية الواجهة الجديدة`;

        alert(successMessage);
        showToast('🎉 نجح اختبار الواجهة الجديدة!', 'success');
        console.log('✅ نجح اختبار الواجهة الجديدة لربط الوحدات');

        return {
            success: true,
            testProperty,
            emptyUnitsCount: emptyUnits.length,
            emptyUnits: emptyUnits.map(u => u['رقم  الوحدة '])
        };

    } catch (error) {
        console.error('❌ فشل اختبار الواجهة الجديدة:', error);

        const errorMessage = `❌ فشل اختبار الواجهة الجديدة!

الخطأ: ${error.message}

💡 تحقق من:
• وجود بيانات العقارات
• وجود وحدات فارغة للاختبار
• تحميل جميع الملفات المطلوبة`;

        alert(errorMessage);
        showToast('❌ فشل اختبار الواجهة الجديدة', 'error');

        return { success: false, error: error.message };
    }
}

// إضافة الدالة للنطاق العام
window.testNewLinkingInterface = testNewLinkingInterface;

// دالة اختبار سريعة للواجهة المبسطة
function testSimpleLinkingInterface() {
    console.log('🧪 اختبار الواجهة المبسطة للوحدات الفارغة...');

    try {
        // التحقق من وجود البيانات
        if (!properties || properties.length === 0) {
            throw new Error('لا توجد بيانات عقارات');
        }

        // البحث عن وحدات فارغة
        const emptyUnits = properties.filter(p =>
            !p['اسم المستأجر'] || p['اسم المستأجر'].trim() === ''
        );

        if (emptyUnits.length === 0) {
            throw new Error('لا توجد وحدات فارغة للاختبار');
        }

        // اختبار دالة renderAvailableUnitsForLinking
        const testProperty = emptyUnits[0]['اسم العقار'];
        const testUnit = emptyUnits[0]['رقم  الوحدة '];

        console.log(`📋 اختبار عرض الوحدات الفارغة في عقار: ${testProperty}`);
        const renderedHTML = renderAvailableUnitsForLinking(testProperty, '', testUnit);

        if (!renderedHTML || renderedHTML.includes('لا توجد وحدات فارغة')) {
            throw new Error('فشل في عرض الوحدات الفارغة');
        }

        // التحقق من وجود العناصر المطلوبة
        const requiredElements = [
            'simple-unit-linking',
            'empty-unit-item',
            'performRealUnitLinking',
            'btn-link-empty-unit'
        ];

        let missingElements = [];
        requiredElements.forEach(element => {
            if (!renderedHTML.includes(element)) {
                missingElements.push(element);
            }
        });

        if (missingElements.length > 0) {
            throw new Error(`عناصر مفقودة في HTML: ${missingElements.join(', ')}`);
        }

        // النتيجة النهائية
        const successMessage = `🎉 نجح اختبار الواجهة المبسطة!

✅ تم العثور على ${emptyUnits.length} وحدة فارغة
✅ تم إنشاء HTML الواجهة المبسطة بنجاح
✅ جميع العناصر المطلوبة موجودة
✅ دالة performRealUnitLinking جاهزة

📋 مثال على الوحدات الفارغة:
${emptyUnits.slice(0, 5).map(u => `• وحدة ${u['رقم  الوحدة ']} في ${u['اسم العقار']}`).join('\n')}

🎯 الواجهة المبسطة جاهزة للاستخدام!
💡 افتح نافذة تحرير لأي بطاقة لرؤية الوحدات الفارغة فقط مع أزرار الربط`;

        alert(successMessage);
        showToast('🎉 نجح اختبار الواجهة المبسطة!', 'success');
        console.log('✅ نجح اختبار الواجهة المبسطة للوحدات الفارغة');

        return {
            success: true,
            emptyUnitsCount: emptyUnits.length,
            testProperty,
            sampleUnits: emptyUnits.slice(0, 5).map(u => u['رقم  الوحدة '])
        };

    } catch (error) {
        console.error('❌ فشل اختبار الواجهة المبسطة:', error);

        const errorMessage = `❌ فشل اختبار الواجهة المبسطة!

الخطأ: ${error.message}

💡 تحقق من:
• وجود بيانات العقارات
• وجود وحدات فارغة للاختبار
• تحميل جميع الملفات المطلوبة`;

        alert(errorMessage);
        showToast('❌ فشل اختبار الواجهة المبسطة', 'error');

        return { success: false, error: error.message };
    }
}

// إضافة الدالة للنطاق العام
window.testSimpleLinkingInterface = testSimpleLinkingInterface;

// دالة اختبار فصل وإفراغ الوحدات
async function testUnitUnlinkingAndClearing() {
    console.log('🧪 اختبار فصل وإفراغ الوحدات...');

    try {
        // التحقق من المتطلبات الأساسية
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        if (!properties || properties.length === 0) {
            throw new Error('لا توجد بيانات عقارات');
        }

        // البحث عن وحدة مربوطة للاختبار
        const linkedUnits = properties.filter(p =>
            p['اسم المستأجر'] && p['اسم المستأجر'].trim() !== '' &&
            p['رقم العقد'] && p['رقم العقد'].trim() !== ''
        );

        if (linkedUnits.length === 0) {
            throw new Error('لا توجد وحدات مربوطة للاختبار');
        }

        const testUnit = linkedUnits[0];
        const unitNumber = testUnit['رقم  الوحدة '];
        const propertyName = testUnit['اسم العقار'];

        console.log(`🔗 اختبار فصل الوحدة: ${unitNumber} في عقار: ${propertyName}`);

        // 1. التحقق من البيانات قبل الفصل
        console.log('📋 فحص البيانات قبل الفصل...');
        const { data: beforeData, error: beforeError } = await supabaseClient
            .from('properties')
            .select('*')
            .eq('unit_number', unitNumber)
            .eq('property_name', propertyName)
            .single();

        if (beforeError || !beforeData) {
            throw new Error('فشل في جلب بيانات الوحدة قبل الفصل');
        }

        if (!beforeData.tenant_name || beforeData.tenant_name.trim() === '') {
            throw new Error('الوحدة فارغة بالفعل - لا يمكن اختبار الفصل');
        }

        console.log('✅ الوحدة مربوطة ومناسبة للاختبار:', {
            tenant: beforeData.tenant_name,
            contract: beforeData.contract_number,
            rent: beforeData.rent_value
        });

        // 2. محاكاة عملية الفصل (بدون تأكيد المستخدم)
        console.log('🔓 تنفيذ عملية الفصل والإفراغ...');

        // إفراغ البيانات مباشرة في Supabase
        const emptyData = {
            tenant_name: '',
            contract_number: '',
            rent_value: null,
            contract_type: null,
            start_date: null,
            end_date: null,
            total_amount: null,
            owner: '',
            deed_number: '',
            real_estate_registry: '',
            electricity_account: '',
            remaining_installments: null,
            first_installment_date: null,
            first_installment_amount: null,
            second_installment_date: null,
            second_installment_amount: null,
            installment_end_date: null,
            updated_at: new Date().toISOString()
        };

        const { data: afterData, error: updateError } = await supabaseClient
            .from('properties')
            .update(emptyData)
            .eq('id', beforeData.id)
            .select();

        if (updateError) {
            throw new Error(`فشل في إفراغ البيانات: ${updateError.message}`);
        }

        if (!afterData || afterData.length === 0) {
            throw new Error('لم يتم إرجاع بيانات من عملية الإفراغ');
        }

        console.log('✅ تم إفراغ البيانات في Supabase بنجاح');

        // 3. التحقق من الإفراغ
        console.log('🔍 التحقق من إفراغ البيانات...');
        const clearedData = afterData[0];

        const fieldsToCheck = [
            'tenant_name', 'contract_number', 'rent_value', 'contract_type',
            'start_date', 'end_date', 'total_amount', 'owner', 'deed_number',
            'real_estate_registry', 'electricity_account', 'remaining_installments',
            'first_installment_date', 'first_installment_amount',
            'second_installment_date', 'second_installment_amount', 'installment_end_date'
        ];

        let notClearedFields = [];
        fieldsToCheck.forEach(field => {
            const value = clearedData[field];
            if (value !== null && value !== '' && value !== undefined) {
                notClearedFields.push(`${field}: ${value}`);
            }
        });

        if (notClearedFields.length > 0) {
            throw new Error(`بعض البيانات لم يتم إفراغها: ${notClearedFields.join(', ')}`);
        }

        console.log('✅ تم التحقق من إفراغ جميع البيانات بنجاح');

        // 4. إعادة ربط الوحدة للحفاظ على البيانات الأصلية
        console.log('🔄 إعادة ربط الوحدة بالبيانات الأصلية...');
        const restoreData = {
            tenant_name: beforeData.tenant_name,
            contract_number: beforeData.contract_number,
            rent_value: beforeData.rent_value,
            contract_type: beforeData.contract_type,
            start_date: beforeData.start_date,
            end_date: beforeData.end_date,
            total_amount: beforeData.total_amount,
            owner: beforeData.owner,
            deed_number: beforeData.deed_number,
            real_estate_registry: beforeData.real_estate_registry,
            electricity_account: beforeData.electricity_account,
            remaining_installments: beforeData.remaining_installments,
            first_installment_date: beforeData.first_installment_date,
            first_installment_amount: beforeData.first_installment_amount,
            second_installment_date: beforeData.second_installment_date,
            second_installment_amount: beforeData.second_installment_amount,
            installment_end_date: beforeData.installment_end_date,
            updated_at: new Date().toISOString()
        };

        const { error: restoreError } = await supabaseClient
            .from('properties')
            .update(restoreData)
            .eq('id', beforeData.id);

        if (restoreError) {
            console.warn('⚠️ فشل في إعادة ربط البيانات الأصلية:', restoreError.message);
        } else {
            console.log('✅ تم إعادة ربط البيانات الأصلية بنجاح');
        }

        // النتيجة النهائية
        const successMessage = `🎉 نجح اختبار فصل وإفراغ الوحدات!

✅ جميع الخطوات نجحت:
🔗 الوحدة المختبرة: ${unitNumber}
🏠 العقار: ${propertyName}
👤 المستأجر الأصلي: ${beforeData.tenant_name}
📄 العقد الأصلي: ${beforeData.contract_number}

🔓 تم الفصل والإفراغ بنجاح:
• تم إفراغ جميع البيانات في Supabase
• تم التحقق من الإفراغ الكامل
• تم إعادة ربط البيانات الأصلية

🎯 نظام الفصل والإفراغ يعمل بشكل مثالي!`;

        alert(successMessage);
        showToast('🎉 نجح اختبار فصل وإفراغ الوحدات!', 'success');
        console.log('✅ نجح اختبار فصل وإفراغ الوحدات');

        return {
            success: true,
            testedUnit: unitNumber,
            originalData: beforeData,
            clearedSuccessfully: true,
            restoredSuccessfully: !restoreError
        };

    } catch (error) {
        console.error('❌ فشل اختبار فصل وإفراغ الوحدات:', error);

        const errorMessage = `❌ فشل اختبار فصل وإفراغ الوحدات!

الخطأ: ${error.message}

💡 تحقق من:
• اتصال Supabase
• وجود وحدات مربوطة للاختبار
• صلاحيات قاعدة البيانات`;

        alert(errorMessage);
        showToast('❌ فشل اختبار فصل وإفراغ الوحدات', 'error');

        return { success: false, error: error.message };
    }
}

// إضافة الدالة للنطاق العام
window.testUnitUnlinkingAndClearing = testUnitUnlinkingAndClearing;

// دالة إفراغ بيانات الوحدة (تعمل من نافذة التحرير)
async function clearUnitData(unitNumber) {
    if (!unitNumber) {
        alert('رقم الوحدة غير صحيح');
        return;
    }

    console.log(`🗑️ بدء إفراغ بيانات الوحدة ${unitNumber} من نافذة التحرير...`);

    // البحث عن الوحدة في البيانات
    let unitToClear = null;
    let propertyName = null;

    // البحث في المجموعة الحالية أولاً (نافذة التحرير)
    if (window.currentEditingUnits && window.currentEditingUnits.length > 0) {
        unitToClear = window.currentEditingUnits.find(unit =>
            unit['رقم  الوحدة '] === unitNumber
        );
        if (unitToClear) {
            propertyName = unitToClear['اسم العقار'];
        }
    }

    // البحث في البيانات العامة إذا لم توجد
    if (!unitToClear && properties && Array.isArray(properties)) {
        unitToClear = properties.find(unit =>
            unit['رقم  الوحدة '] === unitNumber
        );
        if (unitToClear) {
            propertyName = unitToClear['اسم العقار'];
        }
    }

    if (!unitToClear || !propertyName) {
        alert('لم يتم العثور على الوحدة أو اسم العقار');
        return;
    }

    console.log(`📋 تم العثور على الوحدة: ${unitNumber} في عقار: ${propertyName}`);

    // رسالة تأكيد مفصلة
    const confirmMessage = `هل أنت متأكد من إفراغ بيانات الوحدة ${unitNumber}؟

🗑️ سيتم إفراغ البيانات التالية:
• اسم المستأجر
• رقم العقد
• قيمة الإيجار
• نوع العقد
• تواريخ العقد (البداية والنهاية)
• الإجمالي
• رقم حساب الكهرباء
• جميع بيانات الأقساط (التواريخ والمبالغ)

✅ سيتم الاحتفاظ بالبيانات التالية:
• رقم الوحدة
• اسم العقار
• المدينة
• المساحة
• المالك ورقم الصك
• السجل العيني

☁️ سيتم حفظ الإفراغ فوراً في Supabase
📱 وتحديث البيانات المحلية

هل تريد المتابعة؟`;

    if (!confirm(confirmMessage)) {
        return;
    }

    try {
        // التحقق من اتصال Supabase
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        // البحث عن الوحدة في Supabase
        console.log(`📋 البحث عن الوحدة ${unitNumber} في عقار ${propertyName} في Supabase...`);
        const { data: unitInSupabase, error: searchError } = await supabaseClient
            .from('properties')
            .select('*')
            .eq('unit_number', unitNumber)
            .eq('property_name', propertyName)
            .single();

        if (searchError) {
            throw new Error(`خطأ في البحث عن الوحدة: ${searchError.message}`);
        }

        if (!unitInSupabase) {
            throw new Error(`لم يتم العثور على الوحدة ${unitNumber} في Supabase`);
        }

        console.log(`✅ تم العثور على الوحدة في Supabase - ID: ${unitInSupabase.id}`);

        // إعداد البيانات للإفراغ التام - نهج شامل
        const emptyData = {};

        // قائمة بجميع الحقول التي يجب إفراغها
        const fieldsToEmpty = [
            // بيانات المستأجر والعقد
            'tenant_name', 'contract_number', 'rent_value', 'contract_type',
            'start_date', 'end_date', 'total_amount', 'electricity_account',
            'remaining_installments', 'installment_count', 'installment_end_date',

            // جميع الأقساط (1-10)
            'first_installment_date', 'first_installment_amount',
            'second_installment_date', 'second_installment_amount',
            'third_installment_date', 'third_installment_amount',
            'fourth_installment_date', 'fourth_installment_amount',
            'fifth_installment_date', 'fifth_installment_amount',
            'sixth_installment_date', 'sixth_installment_amount',
            'seventh_installment_date', 'seventh_installment_amount',
            'eighth_installment_date', 'eighth_installment_amount',
            'ninth_installment_date', 'ninth_installment_amount',
            'tenth_installment_date', 'tenth_installment_amount',

            // أقساط بصيغة أخرى
            'installment_1_date', 'installment_1_amount',
            'installment_2_date', 'installment_2_amount',
            'installment_3_date', 'installment_3_amount',
            'installment_4_date', 'installment_4_amount',
            'installment_5_date', 'installment_5_amount',
            'installment_6_date', 'installment_6_amount',
            'installment_7_date', 'installment_7_amount',
            'installment_8_date', 'installment_8_amount',
            'installment_9_date', 'installment_9_amount',
            'installment_10_date', 'installment_10_amount',

            // حقول إضافية
            'notes', 'status', 'payment_method', 'bank_account'
        ];

        // إضافة الحقول الموجودة فعلاً في البيانات
        fieldsToEmpty.forEach(field => {
            if (unitInSupabase.hasOwnProperty(field)) {
                // تحديد نوع القيمة الفارغة حسب نوع الحقل
                if (field.includes('date') || field.includes('amount') || field.includes('value') || field.includes('count')) {
                    emptyData[field] = null;
                } else {
                    emptyData[field] = '';
                }
            }
        });

        // البحث عن أي حقول إضافية تحتوي على كلمات مفتاحية
        Object.keys(unitInSupabase).forEach(key => {
            const lowerKey = key.toLowerCase();
            if ((lowerKey.includes('installment') || lowerKey.includes('total') ||
                 lowerKey.includes('amount') || lowerKey.includes('rent') ||
                 lowerKey.includes('contract') || lowerKey.includes('tenant')) &&
                !lowerKey.includes('unit_number') && !lowerKey.includes('property_name') &&
                !lowerKey.includes('city') && !lowerKey.includes('area') &&
                !lowerKey.includes('owner') && !lowerKey.includes('deed') &&
                !lowerKey.includes('registry') && !emptyData.hasOwnProperty(key)) {

                emptyData[key] = typeof unitInSupabase[key] === 'number' ? null : '';
            }
        });

        emptyData.updated_at = new Date().toISOString();

        console.log(`🗑️ سيتم إفراغ ${Object.keys(emptyData).length} حقل:`, Object.keys(emptyData));

        console.log(`☁️ تنفيذ الإفراغ التام في Supabase...`);

        // تنفيذ الإفراغ في Supabase
        const { data: updatedUnit, error: updateError } = await supabaseClient
            .from('properties')
            .update(emptyData)
            .eq('id', unitInSupabase.id)
            .select();

        if (updateError) {
            throw new Error(`فشل في إفراغ البيانات: ${updateError.message}`);
        }

        if (!updatedUnit || updatedUnit.length === 0) {
            throw new Error('لم يتم إرجاع بيانات من عملية الإفراغ');
        }

        console.log(`✅ تم الإفراغ التام في Supabase - تم إفراغ ${Object.keys(emptyData).length} حقل`);

        // التحقق من الإفراغ
        const clearedUnit = updatedUnit[0];
        let notClearedFields = [];
        Object.keys(emptyData).forEach(field => {
            if (field !== 'updated_at' && clearedUnit[field] !== null && clearedUnit[field] !== '') {
                notClearedFields.push(field);
            }
        });

        if (notClearedFields.length > 0) {
            console.warn(`⚠️ بعض الحقول لم يتم إفراغها: ${notClearedFields.join(', ')}`);
        } else {
            console.log('✅ تم التحقق من الإفراغ التام - جميع الحقول فارغة');
        }

        // تحديث البيانات المحلية
        if (properties && Array.isArray(properties)) {
            const localUnitIndex = properties.findIndex(p =>
                p['رقم  الوحدة '] === unitNumber &&
                p['اسم العقار'] === unitToClear['اسم العقار']
            );

            if (localUnitIndex !== -1) {
                // إفراغ تام لجميع البيانات المحلية
                const fieldsToEmpty = [
                    // بيانات المستأجر والعقد
                    'اسم المستأجر', 'رقم العقد', 'قيمة  الايجار ', 'نوع العقد',
                    'تاريخ البداية', 'تاريخ النهاية', 'الاجمالى', 'رقم حساب الكهرباء',
                    'عدد الاقساط المتبقية',

                    // الأقساط الأساسية
                    'تاريخ القسط الاول', 'مبلغ القسط الاول',
                    'تاريخ القسط الثاني', 'مبلغ القسط الثاني',
                    'تاريخ انتهاء الاقساط',

                    // حقول إضافية
                    'ملاحظات', 'الحالة', 'طريقة الدفع', 'رقم الحساب البنكي'
                ];

                // إفراغ الحقول الأساسية
                fieldsToEmpty.forEach(field => {
                    if (properties[localUnitIndex].hasOwnProperty(field)) {
                        properties[localUnitIndex][field] = '';
                    }
                });

                // إفراغ أقساط إضافية (3-10) بالأرقام العربية
                for (let i = 3; i <= 10; i++) {
                    const arabicNumber = getArabicNumber(i);
                    const dateField = `تاريخ القسط ${arabicNumber}`;
                    const amountField = `مبلغ القسط ${arabicNumber}`;

                    if (properties[localUnitIndex].hasOwnProperty(dateField)) {
                        properties[localUnitIndex][dateField] = '';
                    }
                    if (properties[localUnitIndex].hasOwnProperty(amountField)) {
                        properties[localUnitIndex][amountField] = '';
                    }
                }

                // إفراغ أقساط إضافية بالأرقام الإنجليزية (احتياطي)
                for (let i = 1; i <= 10; i++) {
                    const dateField = `installment_${i}_date`;
                    const amountField = `installment_${i}_amount`;

                    if (properties[localUnitIndex].hasOwnProperty(dateField)) {
                        properties[localUnitIndex][dateField] = '';
                    }
                    if (properties[localUnitIndex].hasOwnProperty(amountField)) {
                        properties[localUnitIndex][amountField] = '';
                    }
                }

                // البحث عن أي حقول أخرى تحتوي على "قسط" أو "installment"
                Object.keys(properties[localUnitIndex]).forEach(key => {
                    if ((key.includes('قسط') || key.includes('installment') ||
                         key.includes('اجمالى') || key.includes('total')) &&
                        !key.includes('رقم  الوحدة ') && !key.includes('اسم العقار')) {
                        properties[localUnitIndex][key] = '';
                    }
                });

                saveDataLocally();
                console.log('✅ تم الإفراغ التام لجميع البيانات المحلية (شامل جميع الأقساط والحقول)');
            }
        }

        // تحديث البيانات في المجموعة الحالية - إفراغ تام
        if (window.currentEditingUnits) {
            const currentUnitIndex = window.currentEditingUnits.findIndex(unit =>
                unit['رقم  الوحدة '] === unitNumber
            );

            if (currentUnitIndex !== -1) {
                const currentUnit = window.currentEditingUnits[currentUnitIndex];

                // إفراغ تام لجميع البيانات
                const fieldsToEmpty = [
                    'اسم المستأجر', 'رقم العقد', 'قيمة  الايجار ', 'نوع العقد',
                    'تاريخ البداية', 'تاريخ النهاية', 'الاجمالى', 'رقم حساب الكهرباء',
                    'عدد الاقساط المتبقية', 'تاريخ القسط الاول', 'مبلغ القسط الاول',
                    'تاريخ القسط الثاني', 'مبلغ القسط الثاني', 'تاريخ انتهاء الاقساط',
                    'ملاحظات', 'الحالة', 'طريقة الدفع', 'رقم الحساب البنكي'
                ];

                fieldsToEmpty.forEach(field => {
                    if (currentUnit.hasOwnProperty(field)) {
                        currentUnit[field] = '';
                    }
                });

                // إفراغ أقساط إضافية (3-10)
                for (let i = 3; i <= 10; i++) {
                    const arabicNumber = getArabicNumber(i);
                    const dateField = `تاريخ القسط ${arabicNumber}`;
                    const amountField = `مبلغ القسط ${arabicNumber}`;

                    if (currentUnit.hasOwnProperty(dateField)) {
                        currentUnit[dateField] = '';
                    }
                    if (currentUnit.hasOwnProperty(amountField)) {
                        currentUnit[amountField] = '';
                    }
                }

                // إفراغ أي حقول أخرى تحتوي على بيانات الأقساط
                Object.keys(currentUnit).forEach(key => {
                    if ((key.includes('قسط') || key.includes('installment') ||
                         key.includes('اجمالى') || key.includes('total')) &&
                        !key.includes('رقم  الوحدة ') && !key.includes('اسم العقار')) {
                        currentUnit[key] = '';
                    }
                });

                console.log('✅ تم الإفراغ التام لجميع البيانات في المجموعة الحالية');
            }
        }

        // تحديث العرض فوراً
        if (typeof updateLinkedUnitsDisplay === 'function') {
            updateLinkedUnitsDisplay();
        }

        // تحديث الواجهة إذا كانت نافذة التحرير مفتوحة
        if (typeof refreshEditingInterface === 'function') {
            refreshEditingInterface();
        }

        // إعادة تحميل البيانات في الواجهة
        if (typeof initializeApp === 'function') {
            initializeApp();
        }

        // تحديث البطاقات المعروضة
        if (typeof displayProperties === 'function') {
            displayProperties();
        }

        // رسالة النجاح
        const successMessage = `🎉 تم الإفراغ التام للوحدة ${unitNumber}!

🗑️ تم حذف ${Object.keys(emptyData).length} حقل من Supabase:
• اسم المستأجر: محذوف ✓
• رقم العقد: محذوف ✓
• قيمة الإيجار: محذوف ✓
• الإجمالي: محذوف نهائياً ✓
• جميع الأقساط (1-10): محذوفة نهائياً ✓
• رقم حساب الكهرباء: محذوف ✓
• جميع البيانات المرتبطة: محذوفة ✓

✅ البيانات المحفوظة:
• رقم الوحدة: ${unitNumber}
• اسم العقار: ${propertyName}
• المساحة والمالك ورقم الصك

☁️ تم الحفظ في Supabase فوراً
📱 تم تحديث البيانات المحلية
🔄 تم تحديث نافذة التحرير
🏠 البطاقة فارغة تماماً الآن

💡 أغلق نافذة التحرير وأعد فتحها لرؤية النتيجة`;

        alert(successMessage);
        showToast(`تم إفراغ بيانات الوحدة ${unitNumber} بنجاح!`, 'success');

    } catch (error) {
        console.error(`❌ خطأ في إفراغ بيانات الوحدة ${unitNumber}:`, error);

        const errorMessage = `❌ فشل في إفراغ بيانات الوحدة ${unitNumber}!

الخطأ: ${error.message}

💡 تحقق من:
• اتصال الإنترنت
• صلاحيات Supabase
• وجود الوحدة في قاعدة البيانات`;

        alert(errorMessage);
        showToast(`فشل في إفراغ بيانات الوحدة ${unitNumber}`, 'error');
    }
}

// دالة مساعدة للحصول على الأرقام العربية
function getArabicNumber(num) {
    const arabicNumbers = {
        1: 'الاول', 2: 'الثاني', 3: 'الثالث', 4: 'الرابع', 5: 'الخامس',
        6: 'السادس', 7: 'السابع', 8: 'الثامن', 9: 'التاسع', 10: 'العاشر'
    };
    return arabicNumbers[num] || num.toString();
}

// دالة إفراغ محسنة تعمل مع البطاقات مباشرة
async function clearUnitDataFromCard(unitNumber, propertyName) {
    console.log(`🗑️ إفراغ البطاقة: ${unitNumber} في ${propertyName}...`);

    try {
        // التحقق من اتصال Supabase
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        // رسالة تأكيد
        const confirmMessage = `هل أنت متأكد من إفراغ جميع بيانات الوحدة ${unitNumber}؟

🗑️ سيتم حذف جميع البيانات التالية نهائياً:
• اسم المستأجر
• رقم العقد
• قيمة الإيجار
• الإجمالي
• جميع الأقساط (التواريخ والمبالغ)
• رقم حساب الكهرباء
• جميع البيانات المرتبطة بالعقد

✅ سيتم الاحتفاظ بـ:
• رقم الوحدة
• اسم العقار
• المساحة
• المالك ورقم الصك

☁️ سيتم الحذف فوراً من Supabase

هل تريد المتابعة؟`;

        if (!confirm(confirmMessage)) {
            return;
        }

        // البحث عن الوحدة في Supabase
        console.log(`🔍 البحث عن الوحدة ${unitNumber} في Supabase...`);
        const { data: unitData, error: searchError } = await supabaseClient
            .from('properties')
            .select('*')
            .eq('unit_number', unitNumber)
            .eq('property_name', propertyName)
            .single();

        if (searchError) {
            throw new Error(`خطأ في البحث: ${searchError.message}`);
        }

        if (!unitData) {
            throw new Error(`لم يتم العثور على الوحدة ${unitNumber}`);
        }

        console.log('✅ تم العثور على الوحدة في Supabase');

        // إعداد البيانات للإفراغ التام
        const clearData = {};

        // قائمة شاملة بجميع الحقول التي يجب إفراغها
        const fieldsToClear = [
            // بيانات المستأجر والعقد
            'tenant_name', 'contract_number', 'rent_value', 'contract_type',
            'start_date', 'end_date', 'total_amount', 'electricity_account',
            'remaining_installments', 'installment_count', 'installment_end_date',

            // جميع الأقساط (1-10)
            'first_installment_date', 'first_installment_amount',
            'second_installment_date', 'second_installment_amount',
            'third_installment_date', 'third_installment_amount',
            'fourth_installment_date', 'fourth_installment_amount',
            'fifth_installment_date', 'fifth_installment_amount',
            'sixth_installment_date', 'sixth_installment_amount',
            'seventh_installment_date', 'seventh_installment_amount',
            'eighth_installment_date', 'eighth_installment_amount',
            'ninth_installment_date', 'ninth_installment_amount',
            'tenth_installment_date', 'tenth_installment_amount',

            // حقول إضافية
            'notes', 'status', 'payment_method', 'bank_account'
        ];

        // إضافة الحقول للإفراغ
        fieldsToClear.forEach(field => {
            if (unitData.hasOwnProperty(field)) {
                clearData[field] = field.includes('date') || field.includes('amount') || field.includes('value') || field.includes('count') ? null : '';
            }
        });

        // البحث عن أي حقول إضافية تحتوي على كلمات مفتاحية
        Object.keys(unitData).forEach(key => {
            if ((key.includes('installment') || key.includes('total') || key.includes('amount') ||
                 key.includes('rent') || key.includes('contract') || key.includes('tenant')) &&
                !key.includes('unit_number') && !key.includes('property_name') &&
                !key.includes('city') && !key.includes('area') &&
                !key.includes('owner') && !key.includes('deed') && !key.includes('registry')) {
                clearData[key] = typeof unitData[key] === 'number' ? null : '';
            }
        });

        clearData.updated_at = new Date().toISOString();

        console.log(`🗑️ إفراغ ${Object.keys(clearData).length} حقل في Supabase...`);

        // تنفيذ الإفراغ في Supabase
        const { data: clearedData, error: updateError } = await supabaseClient
            .from('properties')
            .update(clearData)
            .eq('id', unitData.id)
            .select();

        if (updateError) {
            throw new Error(`فشل في الإفراغ: ${updateError.message}`);
        }

        console.log('✅ تم الإفراغ في Supabase بنجاح');

        // تحديث البيانات المحلية
        if (properties && Array.isArray(properties)) {
            const localIndex = properties.findIndex(p =>
                p['رقم  الوحدة '] === unitNumber && p['اسم العقار'] === propertyName
            );

            if (localIndex !== -1) {
                // إفراغ البيانات المحلية
                const localFieldsToEmpty = [
                    'اسم المستأجر', 'رقم العقد', 'قيمة  الايجار ', 'نوع العقد',
                    'تاريخ البداية', 'تاريخ النهاية', 'الاجمالى', 'رقم حساب الكهرباء',
                    'عدد الاقساط المتبقية', 'تاريخ انتهاء الاقساط'
                ];

                localFieldsToEmpty.forEach(field => {
                    if (properties[localIndex].hasOwnProperty(field)) {
                        properties[localIndex][field] = '';
                    }
                });

                // إفراغ الأقساط المحلية
                for (let i = 1; i <= 10; i++) {
                    const arabicNum = getArabicNumber(i);
                    const dateField = i <= 2 ?
                        (i === 1 ? 'تاريخ القسط الاول' : 'تاريخ القسط الثاني') :
                        `تاريخ القسط ${arabicNum}`;
                    const amountField = i <= 2 ?
                        (i === 1 ? 'مبلغ القسط الاول' : 'مبلغ القسط الثاني') :
                        `مبلغ القسط ${arabicNum}`;

                    if (properties[localIndex].hasOwnProperty(dateField)) {
                        properties[localIndex][dateField] = '';
                    }
                    if (properties[localIndex].hasOwnProperty(amountField)) {
                        properties[localIndex][amountField] = '';
                    }
                }

                saveDataLocally();
                console.log('✅ تم تحديث البيانات المحلية');
            }
        }

        // تحديث الواجهة فوراً
        if (typeof displayProperties === 'function') {
            displayProperties();
        }
        if (typeof initializeApp === 'function') {
            initializeApp();
        }

        // رسالة النجاح
        const successMessage = `🎉 تم إفراغ الوحدة ${unitNumber} بالكامل!

🗑️ تم حذف جميع البيانات التالية نهائياً:
• اسم المستأجر
• رقم العقد
• قيمة الإيجار: تم الحذف
• الإجمالي: تم الحذف نهائياً
• جميع الأقساط: تم الحذف نهائياً
• رقم حساب الكهرباء
• جميع البيانات المرتبطة

✅ تم الاحتفاظ بالبيانات الأساسية:
• رقم الوحدة: ${unitNumber}
• اسم العقار: ${propertyName}
• المساحة والمالك ورقم الصك

☁️ تم الحفظ في Supabase
📱 تم تحديث الواجهة فوراً
🏠 البطاقة أصبحت فارغة تماماً`;

        alert(successMessage);
        showToast(`تم إفراغ الوحدة ${unitNumber} بالكامل!`, 'success');

    } catch (error) {
        console.error(`❌ خطأ في إفراغ الوحدة ${unitNumber}:`, error);
        alert(`❌ فشل في إفراغ الوحدة ${unitNumber}:\n\n${error.message}`);
        showToast(`فشل في إفراغ الوحدة ${unitNumber}`, 'error');
    }
}

// دالة الإفراغ الكامل المبسطة (للزر المنفصل)
async function completeClearUnit(unitNumber) {
    if (!unitNumber) {
        alert('رقم الوحدة غير صحيح');
        return;
    }

    console.log(`🗑️ بدء الإفراغ الكامل للوحدة ${unitNumber}...`);

    try {
        // التحقق من اتصال Supabase
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        // رسالة تأكيد مبسطة
        const confirmMessage = `⚠️ تحذير: إفراغ كامل للوحدة ${unitNumber}

🗑️ سيتم حذف نهائياً:
• الإجمالي (total_amount)
• عدد الأقساط (installment_count)
• جميع الأقساط والتواريخ
• بيانات المستأجر والعقد

⚠️ هذا الإجراء لا يمكن التراجع عنه!

هل أنت متأكد من المتابعة؟`;

        if (!confirm(confirmMessage)) {
            console.log('❌ تم إلغاء عملية الإفراغ الكامل بواسطة المستخدم');
            return;
        }

        // البحث عن الوحدة في Supabase
        console.log(`🔍 البحث عن الوحدة ${unitNumber} في Supabase...`);
        const { data: supabaseUnit, error: searchError } = await supabaseClient
            .from('properties')
            .select('*')
            .eq('unit_number', unitNumber)
            .single();

        if (searchError) {
            throw new Error(`خطأ في البحث: ${searchError.message}`);
        }

        if (!supabaseUnit) {
            throw new Error(`لم يتم العثور على الوحدة ${unitNumber} في Supabase`);
        }

        console.log(`✅ تم العثور على الوحدة في Supabase - ID: ${supabaseUnit.id}`);

        // إعداد البيانات للإفراغ - قائمة مبسطة ومباشرة
        const clearData = {
            // الحقول الرقمية - تعيين null
            total_amount: null,
            installment_count: null,
            rent_value: null,
            remaining_installments: null,

            // الأقساط - المبالغ
            first_installment_amount: null,
            second_installment_amount: null,
            third_installment_amount: null,
            fourth_installment_amount: null,
            fifth_installment_amount: null,
            sixth_installment_amount: null,
            seventh_installment_amount: null,
            eighth_installment_amount: null,
            ninth_installment_amount: null,
            tenth_installment_amount: null,

            // الأقساط - التواريخ
            first_installment_date: null,
            second_installment_date: null,
            third_installment_date: null,
            fourth_installment_date: null,
            fifth_installment_date: null,
            sixth_installment_date: null,
            seventh_installment_date: null,
            eighth_installment_date: null,
            ninth_installment_date: null,
            tenth_installment_date: null,

            // بيانات المستأجر والعقد - تعيين نص فارغ
            tenant_name: '',
            contract_number: '',
            contract_type: '',
            start_date: null,
            end_date: null,
            installment_end_date: null,
            electricity_account: '',
            tenant_phone: '',
            tenant_phone_2: '',

            // تحديث الوقت
            updated_at: new Date().toISOString()
        };

        console.log(`🗑️ سيتم إفراغ ${Object.keys(clearData).length} حقل`);
        console.log('📋 البيانات التي ستُرسل:', clearData);

        // تنفيذ الإفراغ الكامل في Supabase
        console.log(`☁️ تنفيذ الإفراغ الكامل في Supabase...`);
        const { data: clearedUnit, error: updateError } = await supabaseClient
            .from('properties')
            .update(clearData)
            .eq('id', supabaseUnit.id)
            .select();

        if (updateError) {
            console.error('❌ تفاصيل خطأ Supabase:', updateError);
            throw new Error(`فشل في الإفراغ الكامل: ${updateError.message}`);
        }

        if (!clearedUnit || clearedUnit.length === 0) {
            throw new Error('لم يتم إرجاع بيانات من عملية الإفراغ');
        }

        console.log(`✅ تم الإفراغ الكامل في Supabase بنجاح!`);

        // التحقق من الإفراغ
        const finalUnit = clearedUnit[0];
        let notClearedFields = [];
        Object.keys(clearData).forEach(field => {
            if (field !== 'updated_at' && finalUnit[field] !== null && finalUnit[field] !== '') {
                notClearedFields.push(field);
            }
        });

        if (notClearedFields.length > 0) {
            console.warn(`⚠️ بعض الحقول لم يتم إفراغها: ${notClearedFields.join(', ')}`);
        } else {
            console.log('✅ تم التحقق من الإفراغ الكامل - جميع الحقول فارغة');
        }

        // تحديث البيانات المحلية
        if (properties && Array.isArray(properties)) {
            const localIndex = properties.findIndex(p =>
                p['رقم  الوحدة '] === unitNumber
            );

            if (localIndex !== -1) {
                // إفراغ البيانات المحلية المهمة
                const localFieldsToEmpty = [
                    'اسم المستأجر', 'رقم العقد', 'قيمة  الايجار ', 'نوع العقد',
                    'تاريخ البداية', 'تاريخ النهاية', 'الاجمالى', 'رقم حساب الكهرباء',
                    'عدد الاقساط المتبقية', 'تاريخ انتهاء الاقساط',
                    'رقم جوال المستأجر', 'رقم جوال إضافي'
                ];

                localFieldsToEmpty.forEach(field => {
                    if (properties[localIndex].hasOwnProperty(field)) {
                        properties[localIndex][field] = '';
                    }
                });

                // إفراغ الأقساط المحلية (1-10)
                for (let i = 1; i <= 10; i++) {
                    const arabicNum = getArabicNumber(i);
                    const dateField = i <= 2 ?
                        (i === 1 ? 'تاريخ القسط الاول' : 'تاريخ القسط الثاني') :
                        `تاريخ القسط ${arabicNum}`;
                    const amountField = i <= 2 ?
                        (i === 1 ? 'مبلغ القسط الاول' : 'مبلغ القسط الثاني') :
                        `مبلغ القسط ${arabicNum}`;

                    if (properties[localIndex].hasOwnProperty(dateField)) {
                        properties[localIndex][dateField] = '';
                    }
                    if (properties[localIndex].hasOwnProperty(amountField)) {
                        properties[localIndex][amountField] = '';
                    }
                }

                saveDataLocally();
                console.log('✅ تم تحديث البيانات المحلية');
            }
        }

        // تحديث المجموعة الحالية
        if (window.currentEditingUnits) {
            const currentIndex = window.currentEditingUnits.findIndex(unit =>
                unit['رقم  الوحدة '] === unitNumber
            );

            if (currentIndex !== -1) {
                const currentUnit = window.currentEditingUnits[currentIndex];

                // إفراغ جميع البيانات المرتبطة بالعقد
                Object.keys(currentUnit).forEach(key => {
                    if ((key.includes('مستأجر') || key.includes('عقد') || key.includes('ايجار') ||
                         key.includes('قسط') || key.includes('اجمالى') || key.includes('كهرباء') ||
                         key.includes('جوال')) &&
                        !key.includes('رقم  الوحدة ') && !key.includes('اسم العقار')) {
                        currentUnit[key] = '';
                    }
                });

                console.log('✅ تم تحديث المجموعة الحالية');
            }
        }

        // تحديث الواجهة فوراً
        if (typeof displayProperties === 'function') {
            displayProperties();
        }
        if (typeof initializeApp === 'function') {
            initializeApp();
        }

        // رسالة النجاح مبسطة وواضحة
        const successMessage = `🎉 تم الإفراغ الكامل للوحدة ${unitNumber} بنجاح!

🗑️ تم حذف البيانات التالية نهائياً:
${notClearedFields.length === 0 ? '✅ جميع البيانات تم حذفها بنجاح' : `⚠️ ${notClearedFields.length} حقل لم يتم حذفه`}

📋 البيانات المحذوفة:
• الإجمالي (total_amount): محذوف ✓
• عدد الأقساط (installment_count): محذوف ✓
• جميع الأقساط (1-10): محذوفة ✓
• بيانات المستأجر والعقد: محذوفة ✓

☁️ تم الحفظ في Supabase فوراً
📱 تم تحديث جميع البيانات المحلية
🏠 الوحدة أصبحت فارغة تماماً

💡 أغلق نافذة التحرير وأعد فتحها لرؤية النتيجة النهائية`;

        alert(successMessage);
        showToast(`تم الإفراغ الكامل للوحدة ${unitNumber}!`, 'success');

        console.log(`🎉 اكتمل الإفراغ الكامل للوحدة ${unitNumber} بنجاح`);

    } catch (error) {
        console.error(`❌ خطأ في الإفراغ الكامل للوحدة ${unitNumber}:`, error);

        const errorMessage = `❌ فشل في الإفراغ الكامل للوحدة ${unitNumber}!

الخطأ: ${error.message}

💡 تحقق من:
• اتصال الإنترنت
• صلاحيات Supabase
• وجود الوحدة في قاعدة البيانات

🔄 يمكنك المحاولة مرة أخرى`;

        alert(errorMessage);
        showToast(`فشل في الإفراغ الكامل للوحدة ${unitNumber}`, 'error');
    }
}

// دالة اختبار سريعة لفحص بيانات الوحدة
async function quickCheckUnit(unitNumber) {
    if (!unitNumber) {
        console.log('❌ يرجى تحديد رقم الوحدة');
        return;
    }

    try {
        if (!supabaseClient) {
            console.log('❌ Supabase غير متصل');
            return;
        }

        console.log(`🔍 فحص بيانات الوحدة ${unitNumber}...`);

        const { data, error } = await supabaseClient
            .from('properties')
            .select('unit_number, property_name, total_amount, installment_count, first_installment_amount, second_installment_amount, rent_value, tenant_name, contract_number')
            .eq('unit_number', unitNumber)
            .single();

        if (error) {
            console.error('❌ خطأ في جلب البيانات:', error);
            return;
        }

        if (!data) {
            console.log(`❌ لم يتم العثور على الوحدة ${unitNumber}`);
            return;
        }

        console.log(`📊 بيانات الوحدة ${unitNumber}:`);
        console.log('🏠 اسم العقار:', data.property_name || 'غير محدد');
        console.log('👤 اسم المستأجر:', data.tenant_name || 'فارغ');
        console.log('📄 رقم العقد:', data.contract_number || 'فارغ');
        console.log('💰 قيمة الإيجار:', data.rent_value || 'فارغ');
        console.log('💵 الإجمالي:', data.total_amount || 'فارغ');
        console.log('🔢 عدد الأقساط:', data.installment_count || 'فارغ');
        console.log('💳 القسط الأول:', data.first_installment_amount || 'فارغ');
        console.log('💳 القسط الثاني:', data.second_installment_amount || 'فارغ');

        // تحديد حالة الوحدة
        const isEmpty = !data.tenant_name && !data.total_amount && !data.installment_count;
        console.log(`📋 حالة الوحدة: ${isEmpty ? '🟢 فارغة تماماً' : '🔴 تحتوي على بيانات'}`);

        return data;

    } catch (error) {
        console.error(`❌ خطأ في فحص الوحدة ${unitNumber}:`, error);
    }
}

// دالة إظهار نافذة حذف بيانات الوحدة (عمر ومحمد فقط)
function showUnitDataClearModal() {
    // التحقق من الصلاحية
    if (!canDeleteUnitData()) {
        alert('❌ ليس لديك صلاحية لحذف بيانات الوحدات');
        return;
    }

    // إنشاء الخلفية المظلمة
    const backdrop = document.createElement('div');
    backdrop.className = 'modal-backdrop show';
    backdrop.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1040;
        cursor: pointer;
    `;
    backdrop.onclick = closeUnitDataClearModal;
    document.body.appendChild(backdrop);

    // إنشاء النافذة
    const modal = document.createElement('div');
    modal.className = 'modal show';
    modal.style.cssText = `
        display: block;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1050;
        overflow-x: hidden;
        overflow-y: auto;
    `;
    modal.innerHTML = `
        <div class="modal-dialog">
            <div class="modal-content unit-data-clear-modal">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-trash-alt"></i>
                        حذف بيانات وحدة
                    </h5>
                    <button type="button" class="close" onclick="closeUnitDataClearModal()">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        <strong>تحذير:</strong> هذه العملية ستحذف جميع البيانات المالية للوحدة مع الاحتفاظ بالصكوك والمالك
                    </div>

                    <div class="form-group">
                        <label for="unitNumberToClear">
                            <i class="fas fa-home"></i>
                            رقم الوحدة:
                        </label>
                        <input type="text"
                               id="unitNumberToClear"
                               class="form-control"
                               placeholder="أدخل رقم الوحدة (مثال: STDM080120)"
                               autocomplete="off">
                        <small class="form-text text-muted">
                            أدخل رقم الوحدة بالضبط كما يظهر في النظام
                        </small>
                    </div>

                    <div class="clear-preview" id="clearPreview" style="display: none;">
                        <h6><i class="fas fa-eye"></i> معاينة البيانات التي ستُحذف:</h6>
                        <div id="clearPreviewContent"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeUnitDataClearModal()">
                        <i class="fas fa-times"></i> إلغاء
                    </button>
                    <button type="button" class="btn btn-info" onclick="previewUnitDataClear()">
                        <i class="fas fa-search"></i> معاينة
                    </button>
                    <button type="button" class="btn btn-danger" onclick="executeUnitDataClear()" disabled id="clearExecuteBtn">
                        <i class="fas fa-trash-alt"></i> حذف البيانات
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    // التركيز على حقل رقم الوحدة
    setTimeout(() => {
        document.getElementById('unitNumberToClear').focus();
    }, 100);

    // إضافة مستمع للضغط على Enter
    document.getElementById('unitNumberToClear').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            previewUnitDataClear();
        }
    });

    // إضافة مستمع للضغط على Escape لإغلاق النافذة
    const escapeHandler = function(e) {
        if (e.key === 'Escape') {
            closeUnitDataClearModal();
            document.removeEventListener('keydown', escapeHandler);
        }
    };
    document.addEventListener('keydown', escapeHandler);
}

// التحقق من صلاحية حذف بيانات الوحدات
function canDeleteUnitData() {
    // التحقق من المستخدم الحالي من نظام الصلاحيات
    if (typeof currentUser !== 'undefined' && currentUser) {
        return currentUser === 'عمر' || currentUser === 'محمد';
    }

    // التحقق البديل من localStorage
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
        try {
            const userData = JSON.parse(savedUser);
            return userData.username === 'عمر' || userData.username === 'محمد';
        } catch (error) {
            console.error('خطأ في قراءة بيانات المستخدم:', error);
        }
    }

    return false;
}

// إغلاق نافذة حذف بيانات الوحدة
function closeUnitDataClearModal() {
    // إزالة النافذة
    const modal = document.querySelector('.unit-data-clear-modal');
    if (modal && modal.closest('.modal')) {
        modal.closest('.modal').remove();
    }

    // إزالة الخلفية المظلمة
    const backdrop = document.querySelector('.modal-backdrop');
    if (backdrop) {
        backdrop.remove();
    }
}

// إضافة الدالة للنطاق العام
window.clearUnitData = clearUnitData;
window.clearUnitDataFromCard = clearUnitDataFromCard;
window.completeClearUnit = completeClearUnit;
window.quickCheckUnit = quickCheckUnit;
window.showUnitDataClearModal = showUnitDataClearModal;
window.closeUnitDataClearModal = closeUnitDataClearModal;
// معاينة البيانات التي ستُحذف
async function previewUnitDataClear() {
    const unitNumber = document.getElementById('unitNumberToClear').value.trim();

    if (!unitNumber) {
        alert('❌ يرجى إدخال رقم الوحدة');
        return;
    }

    try {
        console.log(`🔍 البحث عن الوحدة ${unitNumber} للمعاينة...`);

        // البحث في Supabase
        const { data: unit, error } = await supabaseClient
            .from('properties')
            .select('*')
            .eq('unit_number', unitNumber)
            .single();

        if (error) {
            throw new Error(`خطأ في البحث: ${error.message}`);
        }

        if (!unit) {
            alert(`❌ لم يتم العثور على الوحدة ${unitNumber}`);
            return;
        }

        // عرض معاينة البيانات
        displayClearPreview(unit);

        // تفعيل زر الحذف
        document.getElementById('clearExecuteBtn').disabled = false;

    } catch (error) {
        console.error('❌ خطأ في معاينة البيانات:', error);
        alert(`❌ خطأ في معاينة البيانات: ${error.message}`);
    }
}

// عرض معاينة البيانات التي ستُحذف
function displayClearPreview(unit) {
    const previewDiv = document.getElementById('clearPreview');
    const contentDiv = document.getElementById('clearPreviewContent');

    // البيانات التي ستُحذف
    const dataToDelete = [];
    const dataToKeep = [];

    // فحص البيانات المالية
    if (unit.total_amount) dataToDelete.push(`الإجمالي: ${parseFloat(unit.total_amount).toLocaleString()} ريال`);
    if (unit.installment_count) dataToDelete.push(`عدد الأقساط: ${unit.installment_count}`);
    if (unit.rent_value) dataToDelete.push(`قيمة الإيجار: ${parseFloat(unit.rent_value).toLocaleString()} ريال`);

    // فحص الأقساط
    for (let i = 1; i <= 10; i++) {
        const amountField = i === 1 ? 'first_installment_amount' :
                           i === 2 ? 'second_installment_amount' :
                           `${getEnglishOrdinal(i)}_installment_amount`;
        const dateField = i === 1 ? 'first_installment_date' :
                         i === 2 ? 'second_installment_date' :
                         `${getEnglishOrdinal(i)}_installment_date`;

        if (unit[amountField]) {
            dataToDelete.push(`القسط ${getArabicNumber(i)}: ${parseFloat(unit[amountField]).toLocaleString()} ريال`);
        }
        if (unit[dateField]) {
            dataToDelete.push(`تاريخ القسط ${getArabicNumber(i)}: ${unit[dateField]}`);
        }
    }

    // بيانات المستأجر والعقد
    if (unit.tenant_name) dataToDelete.push(`اسم المستأجر: ${unit.tenant_name}`);
    if (unit.contract_number) dataToDelete.push(`رقم العقد: ${unit.contract_number}`);
    if (unit.contract_type) dataToDelete.push(`نوع العقد: ${unit.contract_type}`);
    if (unit.start_date) dataToDelete.push(`تاريخ البداية: ${unit.start_date}`);
    if (unit.end_date) dataToDelete.push(`تاريخ النهاية: ${unit.end_date}`);

    // البيانات التي ستبقى
    if (unit.unit_number) dataToKeep.push(`رقم الوحدة: ${unit.unit_number}`);
    if (unit.property_name) dataToKeep.push(`اسم العقار: ${unit.property_name}`);
    if (unit.city) dataToKeep.push(`المدينة: ${unit.city}`);
    if (unit.owner) dataToKeep.push(`المالك: ${unit.owner}`);
    if (unit.deed_number) dataToKeep.push(`رقم الصك: ${unit.deed_number}`);
    if (unit.area) dataToKeep.push(`المساحة: ${unit.area}`);

    let html = `
        <div class="row">
            <div class="col-md-6">
                <div class="alert alert-danger">
                    <h6><i class="fas fa-trash"></i> سيتم حذف:</h6>
                    ${dataToDelete.length > 0 ?
                        '<ul>' + dataToDelete.map(item => `<li>${item}</li>`).join('') + '</ul>' :
                        '<p>لا توجد بيانات مالية للحذف</p>'
                    }
                </div>
            </div>
            <div class="col-md-6">
                <div class="alert alert-success">
                    <h6><i class="fas fa-shield-alt"></i> سيتم الاحتفاظ بـ:</h6>
                    <ul>
                        ${dataToKeep.map(item => `<li>${item}</li>`).join('')}
                    </ul>
                </div>
            </div>
        </div>
    `;

    contentDiv.innerHTML = html;
    previewDiv.style.display = 'block';
}

// دالة مساعدة للحصول على الترتيب بالإنجليزية
function getEnglishOrdinal(num) {
    const ordinals = {
        3: 'third', 4: 'fourth', 5: 'fifth', 6: 'sixth',
        7: 'seventh', 8: 'eighth', 9: 'ninth', 10: 'tenth'
    };
    return ordinals[num] || `${num}th`;
}

// تنفيذ حذف بيانات الوحدة
async function executeUnitDataClear() {
    const unitNumber = document.getElementById('unitNumberToClear').value.trim();

    if (!unitNumber) {
        alert('❌ يرجى إدخال رقم الوحدة');
        return;
    }

    // تأكيد نهائي
    const confirmMessage = `⚠️ تأكيد حذف بيانات الوحدة ${unitNumber}

🗑️ سيتم حذف نهائياً:
• جميع البيانات المالية (الإجماليات والأقساط)
• بيانات المستأجر والعقد
• التواريخ والمبالغ

✅ سيتم الاحتفاظ بـ:
• رقم الوحدة واسم العقار
• المالك ورقم الصك
• المساحة والموقع

⚠️ هذا الإجراء لا يمكن التراجع عنه!

هل أنت متأكد من المتابعة؟`;

    if (!confirm(confirmMessage)) {
        console.log('❌ تم إلغاء عملية الحذف بواسطة المستخدم');
        return;
    }

    try {
        console.log(`🗑️ بدء حذف بيانات الوحدة ${unitNumber}...`);

        // البحث عن الوحدة أولاً
        const { data: unit, error: searchError } = await supabaseClient
            .from('properties')
            .select('*')
            .eq('unit_number', unitNumber)
            .single();

        if (searchError) {
            throw new Error(`خطأ في البحث: ${searchError.message}`);
        }

        if (!unit) {
            throw new Error(`لم يتم العثور على الوحدة ${unitNumber}`);
        }

        // إعداد البيانات للحذف (الاحتفاظ بالصكوك والمالك)
        const clearData = {
            // البيانات المالية
            total_amount: null,
            installment_count: null,
            rent_value: null,
            remaining_installments: null,

            // بيانات المستأجر والعقد
            tenant_name: '',
            contract_number: '',
            contract_type: '',
            start_date: null,
            end_date: null,
            installment_end_date: null,
            electricity_account: '',
            tenant_phone: '',
            tenant_phone_2: '',

            // جميع الأقساط (1-10)
            first_installment_date: null,
            first_installment_amount: null,
            second_installment_date: null,
            second_installment_amount: null,
            third_installment_date: null,
            third_installment_amount: null,
            fourth_installment_date: null,
            fourth_installment_amount: null,
            fifth_installment_date: null,
            fifth_installment_amount: null,
            sixth_installment_date: null,
            sixth_installment_amount: null,
            seventh_installment_date: null,
            seventh_installment_amount: null,
            eighth_installment_date: null,
            eighth_installment_amount: null,
            ninth_installment_date: null,
            ninth_installment_amount: null,
            tenth_installment_date: null,
            tenth_installment_amount: null,

            // تحديث الوقت
            updated_at: new Date().toISOString()
        };

        console.log(`☁️ تنفيذ الحذف في Supabase...`);

        // تنفيذ الحذف في Supabase
        const { data: clearedUnit, error: updateError } = await supabaseClient
            .from('properties')
            .update(clearData)
            .eq('id', unit.id)
            .select();

        if (updateError) {
            throw new Error(`فشل في حذف البيانات: ${updateError.message}`);
        }

        if (!clearedUnit || clearedUnit.length === 0) {
            throw new Error('لم يتم إرجاع بيانات من عملية الحذف');
        }

        console.log(`✅ تم حذف بيانات الوحدة ${unitNumber} بنجاح`);

        // تحديث البيانات المحلية إذا كانت موجودة
        if (properties && Array.isArray(properties)) {
            const localIndex = properties.findIndex(p =>
                p['رقم  الوحدة '] === unitNumber
            );

            if (localIndex !== -1) {
                // إفراغ البيانات المحلية المقابلة
                const localFieldsToEmpty = [
                    'اسم المستأجر', 'رقم العقد', 'قيمة  الايجار ', 'نوع العقد',
                    'تاريخ البداية', 'تاريخ النهاية', 'الاجمالى', 'رقم حساب الكهرباء',
                    'عدد الاقساط المتبقية', 'تاريخ انتهاء الاقساط',
                    'رقم جوال المستأجر', 'رقم جوال إضافي'
                ];

                localFieldsToEmpty.forEach(field => {
                    if (properties[localIndex].hasOwnProperty(field)) {
                        properties[localIndex][field] = '';
                    }
                });

                // إفراغ الأقساط المحلية
                for (let i = 1; i <= 10; i++) {
                    const arabicNum = getArabicNumber(i);
                    const dateField = i <= 2 ?
                        (i === 1 ? 'تاريخ القسط الاول' : 'تاريخ القسط الثاني') :
                        `تاريخ القسط ${arabicNum}`;
                    const amountField = i <= 2 ?
                        (i === 1 ? 'مبلغ القسط الاول' : 'مبلغ القسط الثاني') :
                        `مبلغ القسط ${arabicNum}`;

                    if (properties[localIndex].hasOwnProperty(dateField)) {
                        properties[localIndex][dateField] = '';
                    }
                    if (properties[localIndex].hasOwnProperty(amountField)) {
                        properties[localIndex][amountField] = '';
                    }
                }

                saveDataLocally();
                console.log('✅ تم تحديث البيانات المحلية');
            }
        }

        // تحديث الواجهة
        if (typeof displayProperties === 'function') {
            displayProperties();
        }
        if (typeof initializeApp === 'function') {
            initializeApp();
        }

        // رسالة النجاح
        const successMessage = `🎉 تم حذف بيانات الوحدة ${unitNumber} بنجاح!

✅ تم حذف:
• جميع البيانات المالية
• بيانات المستأجر والعقد
• جميع الأقساط والتواريخ

🛡️ تم الاحتفاظ بـ:
• رقم الوحدة: ${unit.unit_number}
• اسم العقار: ${unit.property_name}
• المالك: ${unit.owner || 'غير محدد'}
• رقم الصك: ${unit.deed_number || 'غير محدد'}

☁️ تم الحفظ في Supabase فوراً
📱 تم تحديث جميع البيانات المحلية`;

        alert(successMessage);
        showToast(`تم حذف بيانات الوحدة ${unitNumber}!`, 'success');

        // إغلاق النافذة
        closeUnitDataClearModal();

    } catch (error) {
        console.error(`❌ خطأ في حذف بيانات الوحدة ${unitNumber}:`, error);

        const errorMessage = `❌ فشل في حذف بيانات الوحدة ${unitNumber}!

الخطأ: ${error.message}

💡 تحقق من:
• اتصال الإنترنت
• صلاحيات Supabase
• وجود الوحدة في قاعدة البيانات

🔄 يمكنك المحاولة مرة أخرى`;

        alert(errorMessage);
        showToast(`فشل في حذف بيانات الوحدة ${unitNumber}`, 'error');
    }
}

window.executeUnitDataClear = executeUnitDataClear;
window.previewUnitDataClear = previewUnitDataClear;
window.getArabicNumber = getArabicNumber;

// دالة اختبار إفراغ البيانات
async function testUnitDataClearing() {
    console.log('🧪 اختبار إفراغ بيانات الوحدات...');

    try {
        // التحقق من المتطلبات الأساسية
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        if (!properties || properties.length === 0) {
            throw new Error('لا توجد بيانات عقارات');
        }

        // البحث عن وحدة مربوطة للاختبار
        const linkedUnits = properties.filter(p =>
            p['اسم المستأجر'] && p['اسم المستأجر'].trim() !== '' &&
            p['رقم العقد'] && p['رقم العقد'].trim() !== ''
        );

        if (linkedUnits.length === 0) {
            throw new Error('لا توجد وحدات مربوطة للاختبار');
        }

        const testUnit = linkedUnits[0];
        const unitNumber = testUnit['رقم  الوحدة '];
        const propertyName = testUnit['اسم العقار'];

        console.log(`🗑️ اختبار إفراغ الوحدة: ${unitNumber} في عقار: ${propertyName}`);

        // 1. التحقق من البيانات قبل الإفراغ
        console.log('📋 فحص البيانات قبل الإفراغ...');
        const { data: beforeData, error: beforeError } = await supabaseClient
            .from('properties')
            .select('*')
            .eq('unit_number', unitNumber)
            .eq('property_name', propertyName)
            .single();

        if (beforeError || !beforeData) {
            throw new Error('فشل في جلب بيانات الوحدة قبل الإفراغ');
        }

        if (!beforeData.tenant_name || beforeData.tenant_name.trim() === '') {
            throw new Error('الوحدة فارغة بالفعل - لا يمكن اختبار الإفراغ');
        }

        console.log('✅ الوحدة مربوطة ومناسبة للاختبار:', {
            tenant: beforeData.tenant_name,
            contract: beforeData.contract_number,
            rent: beforeData.rent_value,
            unit: beforeData.unit_number,
            property: beforeData.property_name
        });

        // 2. تنفيذ عملية الإفراغ (بدون تأكيد المستخدم)
        console.log('🗑️ تنفيذ عملية الإفراغ...');

        // إعداد البيانات الفارغة
        const emptyData = {
            tenant_name: '',
            contract_number: '',
            rent_value: null,
            contract_type: null,
            start_date: null,
            end_date: null,
            total_amount: null,
            electricity_account: '',
            remaining_installments: null,
            first_installment_date: null,
            first_installment_amount: null,
            second_installment_date: null,
            second_installment_amount: null,
            installment_end_date: null,
            updated_at: new Date().toISOString()
        };

        const { data: afterData, error: updateError } = await supabaseClient
            .from('properties')
            .update(emptyData)
            .eq('id', beforeData.id)
            .select();

        if (updateError) {
            throw new Error(`فشل في إفراغ البيانات: ${updateError.message}`);
        }

        if (!afterData || afterData.length === 0) {
            throw new Error('لم يتم إرجاع بيانات من عملية الإفراغ');
        }

        console.log('✅ تم إفراغ البيانات في Supabase بنجاح');

        // 3. التحقق من الإفراغ
        console.log('🔍 التحقق من إفراغ البيانات...');
        const clearedData = afterData[0];

        // التحقق من البيانات المفرغة
        const clearedFields = [
            'tenant_name', 'contract_number', 'rent_value', 'contract_type',
            'start_date', 'end_date', 'total_amount', 'electricity_account',
            'remaining_installments', 'first_installment_date', 'first_installment_amount',
            'second_installment_date', 'second_installment_amount', 'installment_end_date'
        ];

        let notClearedFields = [];
        clearedFields.forEach(field => {
            const value = clearedData[field];
            if (value !== null && value !== '' && value !== undefined) {
                notClearedFields.push(`${field}: ${value}`);
            }
        });

        if (notClearedFields.length > 0) {
            throw new Error(`بعض البيانات لم يتم إفراغها: ${notClearedFields.join(', ')}`);
        }

        // التحقق من البيانات المحفوظة
        const preservedFields = ['unit_number', 'property_name', 'city', 'area', 'owner', 'deed_number', 'real_estate_registry'];
        let missingPreservedFields = [];
        preservedFields.forEach(field => {
            if (beforeData[field] && (!clearedData[field] || clearedData[field] !== beforeData[field])) {
                missingPreservedFields.push(field);
            }
        });

        if (missingPreservedFields.length > 0) {
            console.warn(`⚠️ بعض البيانات الأساسية تغيرت: ${missingPreservedFields.join(', ')}`);
        }

        console.log('✅ تم التحقق من إفراغ البيانات المطلوبة والاحتفاظ بالبيانات الأساسية');

        // 4. إعادة ربط الوحدة للحفاظ على البيانات الأصلية
        console.log('🔄 إعادة ربط الوحدة بالبيانات الأصلية...');
        const restoreData = {
            tenant_name: beforeData.tenant_name,
            contract_number: beforeData.contract_number,
            rent_value: beforeData.rent_value,
            contract_type: beforeData.contract_type,
            start_date: beforeData.start_date,
            end_date: beforeData.end_date,
            total_amount: beforeData.total_amount,
            electricity_account: beforeData.electricity_account,
            remaining_installments: beforeData.remaining_installments,
            first_installment_date: beforeData.first_installment_date,
            first_installment_amount: beforeData.first_installment_amount,
            second_installment_date: beforeData.second_installment_date,
            second_installment_amount: beforeData.second_installment_amount,
            installment_end_date: beforeData.installment_end_date,
            updated_at: new Date().toISOString()
        };

        const { error: restoreError } = await supabaseClient
            .from('properties')
            .update(restoreData)
            .eq('id', beforeData.id);

        if (restoreError) {
            console.warn('⚠️ فشل في إعادة ربط البيانات الأصلية:', restoreError.message);
        } else {
            console.log('✅ تم إعادة ربط البيانات الأصلية بنجاح');
        }

        // النتيجة النهائية
        const successMessage = `🎉 نجح اختبار إفراغ بيانات الوحدات!

✅ جميع الخطوات نجحت:
🗑️ الوحدة المختبرة: ${unitNumber}
🏠 العقار: ${propertyName}
👤 المستأجر الأصلي: ${beforeData.tenant_name}
📄 العقد الأصلي: ${beforeData.contract_number}

🗑️ تم الإفراغ بنجاح:
• تم إفراغ جميع بيانات المستأجر والعقد
• تم إفراغ جميع بيانات الأقساط
• تم الاحتفاظ بالبيانات الأساسية (رقم الوحدة، العقار، المساحة، إلخ)
• تم إعادة ربط البيانات الأصلية

🎯 نظام إفراغ البيانات يعمل بشكل مثالي!
💡 يمكنك الآن استخدام زر "إفراغ" في أي بطاقة`;

        alert(successMessage);
        showToast('🎉 نجح اختبار إفراغ البيانات!', 'success');
        console.log('✅ نجح اختبار إفراغ بيانات الوحدات');

        return {
            success: true,
            testedUnit: unitNumber,
            originalData: beforeData,
            clearedSuccessfully: true,
            preservedFieldsIntact: missingPreservedFields.length === 0,
            restoredSuccessfully: !restoreError
        };

    } catch (error) {
        console.error('❌ فشل اختبار إفراغ البيانات:', error);

        const errorMessage = `❌ فشل اختبار إفراغ البيانات!

الخطأ: ${error.message}

💡 تحقق من:
• اتصال Supabase
• وجود وحدات مربوطة للاختبار
• صلاحيات قاعدة البيانات`;

        alert(errorMessage);
        showToast('❌ فشل اختبار إفراغ البيانات', 'error');

        return { success: false, error: error.message };
    }
}

// إضافة الدالة للنطاق العام
window.testUnitDataClearing = testUnitDataClearing;

// عرض الوحدات المرتبطة حالياً
function renderLinkedUnits(propertyName, contractNumber) {
    if (!contractNumber) {
        return '<p class="no-units">لا توجد وحدات مرتبطة</p>';
    }

    // التحقق من وجود البيانات أولاً
    if (!ensurePropertiesLoaded('renderLinkedUnits')) {
        return '<p class="no-units">خطأ: البيانات غير متوفرة</p>';
    }

    const linkedUnits = properties.filter(p =>
        p['اسم العقار'] === propertyName &&
        p['رقم العقد'] === contractNumber
    );

    if (linkedUnits.length <= 1) {
        return '<p class="no-units">لا توجد وحدات مرتبطة إضافية</p>';
    }

    return linkedUnits.map(unit => `
        <div class="linked-unit-item">
            <span class="unit-number">${unit['رقم  الوحدة ']}</span>
            <span class="unit-details">${unit['المساحة'] ? unit['المساحة'] + ' م²' : 'غير محدد'}</span>
            <button type="button" onclick="unlinkUnit('${unit['رقم  الوحدة ']}', '${propertyName}', '${contractNumber}')" class="btn-unlink">
                <i class="fas fa-unlink"></i> فصل
            </button>
        </div>
    `).join('');
}

// تبديل ربط الوحدة
async function toggleUnitLinking(unitNumber, propertyName, contractNumber) {
    const checkbox = document.querySelector(`input[value="${unitNumber}"][name="linkingUnits"]`);

    if (checkbox.checked) {
        // ربط الوحدة
        await linkUnitToContract(unitNumber, propertyName, contractNumber);
    } else {
        // فصل الوحدة
        await unlinkUnit(unitNumber, propertyName, contractNumber);
    }
}

// ربط وحدة بالعقد مع مزامنة البيانات
async function linkUnitToContract(unitNumber, propertyName, contractNumber) {
    if (!contractNumber) {
        alert('يجب إدخال رقم العقد أولاً');
        return;
    }

    // التحقق من وجود البيانات
    if (!ensurePropertiesLoaded('linkUnitToContract')) {
        return;
    }

    const unitIndex = properties.findIndex(p =>
        p['اسم العقار'] === propertyName && p['رقم  الوحدة '] === unitNumber
    );

    if (unitIndex !== -1) {
        // حفظ البيانات القديمة للمقارنة
        const oldData = { ...properties[unitIndex] };

        // 🔧 البحث عن وحدة أساسية موجودة بنفس العقد لنسخ بياناتها
        const existingLinkedUnit = properties.find(p =>
            p['رقم العقد'] === contractNumber &&
            p['اسم العقار'] === propertyName &&
            p['رقم  الوحدة '] !== unitNumber &&
            p['اسم المستأجر'] && p['اسم المستأجر'].trim() !== ''
        );

        if (existingLinkedUnit) {
            console.log(`🔗 تم العثور على وحدة أساسية مربوطة، نسخ البيانات منها...`);

            // نسخ جميع البيانات المشتركة من الوحدة الأساسية
            const sharedData = {
                // بيانات المستأجر
                'اسم المستأجر': existingLinkedUnit['اسم المستأجر'] || '',
                'رقم الجوال': existingLinkedUnit['رقم الجوال'] || '',
                'رقم الجوال الاضافي': existingLinkedUnit['رقم الجوال الاضافي'] || '',

                // بيانات العقد
                'رقم العقد': contractNumber,
                'تاريخ البداية': existingLinkedUnit['تاريخ البداية'] || '',
                'تاريخ النهاية': existingLinkedUnit['تاريخ النهاية'] || '',
                'قيمة  الايجار ': existingLinkedUnit['قيمة  الايجار '] || '',
                'نوع العقد': existingLinkedUnit['نوع العقد'] || 'سكني',

                // بيانات الأقساط
                'تاريخ القسط الاول': existingLinkedUnit['تاريخ القسط الاول'] || '',
                'مبلغ القسط الاول': existingLinkedUnit['مبلغ القسط الاول'] || '',
                'تاريخ القسط الثاني': existingLinkedUnit['تاريخ القسط الثاني'] || '',
                'مبلغ القسط الثاني': existingLinkedUnit['مبلغ القسط الثاني'] || '',
                'تاريخ القسط الثالث': existingLinkedUnit['تاريخ القسط الثالث'] || '',
                'مبلغ القسط الثالث': existingLinkedUnit['مبلغ القسط الثالث'] || '',
                'تاريخ القسط الرابع': existingLinkedUnit['تاريخ القسط الرابع'] || '',
                'مبلغ القسط الرابع': existingLinkedUnit['مبلغ القسط الرابع'] || '',
                'تاريخ القسط الخامس': existingLinkedUnit['تاريخ القسط الخامس'] || '',
                'مبلغ القسط الخامس': existingLinkedUnit['مبلغ القسط الخامس'] || '',
                'تاريخ القسط السادس': existingLinkedUnit['تاريخ القسط السادس'] || '',
                'مبلغ القسط السادس': existingLinkedUnit['مبلغ القسط السادس'] || '',
                'تاريخ القسط السابع': existingLinkedUnit['تاريخ القسط السابع'] || '',
                'مبلغ القسط السابع': existingLinkedUnit['مبلغ القسط السابع'] || '',
                'تاريخ القسط الثامن': existingLinkedUnit['تاريخ القسط الثامن'] || '',
                'مبلغ القسط الثامن': existingLinkedUnit['مبلغ القسط الثامن'] || '',
                'تاريخ القسط التاسع': existingLinkedUnit['تاريخ القسط التاسع'] || '',
                'مبلغ القسط التاسع': existingLinkedUnit['مبلغ القسط التاسع'] || '',
                'تاريخ القسط العاشر': existingLinkedUnit['تاريخ القسط العاشر'] || '',
                'مبلغ القسط العاشر': existingLinkedUnit['مبلغ القسط العاشر'] || '',
                'تاريخ نهاية القسط': existingLinkedUnit['تاريخ نهاية القسط'] || ''
            };

            // تطبيق البيانات المشتركة مع الحفاظ على البيانات الخاصة بالوحدة
            Object.assign(properties[unitIndex], sharedData);

            console.log(`✅ تم نسخ جميع البيانات من الوحدة الأساسية إلى الوحدة ${unitNumber}`);
        } else {
            // إذا لم توجد وحدة أساسية، فقط ربط رقم العقد
            properties[unitIndex]['رقم العقد'] = contractNumber;
            console.log(`📝 تم ربط الوحدة ${unitNumber} بالعقد ${contractNumber} (وحدة جديدة)`);
        }

        // حفظ التغييرات في Supabase باستخدام الدالة المخصصة
        let supabaseSuccess = false;
        let supabaseError = null;
        let supabaseResult = null;

        try {
            console.log(`💾 بدء حفظ ربط الوحدة ${unitNumber} في Supabase...`);
            console.log('📋 بيانات الوحدة المحدثة:', {
                unitNumber: properties[unitIndex]['رقم  الوحدة '],
                propertyName: properties[unitIndex]['اسم العقار'],
                contractNumber: properties[unitIndex]['رقم العقد'],
                tenant: properties[unitIndex]['اسم المستأجر']
            });

            // استخدام الدالة المخصصة لحفظ ربط الوحدات
            supabaseResult = await saveUnitLinkingToSupabase(properties[unitIndex], 'link');

            if (supabaseResult && supabaseResult.id) {
                console.log(`✅ تم حفظ ربط الوحدة ${unitNumber} في Supabase بنجاح`);
                console.log('📋 معرف السجل في Supabase:', supabaseResult.id);
                supabaseSuccess = true;
            } else {
                console.warn('⚠️ تم الحفظ لكن لم يتم إرجاع معرف صحيح');
                supabaseError = 'لم يتم إرجاع معرف صحيح من Supabase';
            }

        } catch (error) {
            console.error(`❌ خطأ في حفظ ربط الوحدة ${unitNumber}:`, error);
            supabaseError = error.message;
        }

        // حفظ البيانات محلياً
        saveDataLocally();

        // إضافة سجل تتبع للربط
        try {
            await addChangeLog('ربط وحدة', properties[unitIndex], oldData, {
                operation: 'link_unit',
                unitNumber: unitNumber,
                contractNumber: contractNumber,
                propertyName: propertyName
            });
        } catch (error) {
            console.warn('⚠️ فشل في إضافة سجل التتبع لربط الوحدة:', error);
        }

        // إنشاء سجلات تتبع لجميع الوحدات المرتبطة الأخرى
        try {
            await createTrackingLogsForLinkedUnits(contractNumber, propertyName, unitNumber, 'ربط وحدة جديدة');
        } catch (error) {
            console.warn('⚠️ فشل في إنشاء سجلات التتبع للوحدات المرتبطة:', error);
        }

        // تحديث العرض
        updateLinkedUnitsDisplay(propertyName, contractNumber);
        updateAvailableUnitsDisplay(propertyName, contractNumber, unitNumber);

        // إعادة حساب الحالات
        initializeApp();

        // رسالة النجاح مع تفاصيل الحفظ
        let message = `✅ تم ربط الوحدة ${unitNumber} بالعقد ${contractNumber} بنجاح!`;

        // إضافة تفاصيل الحفظ السحابي
        if (typeof supabaseClient !== 'undefined' && supabaseClient) {
            if (supabaseSuccess) {
                message += `\n\n☁️ تم حفظ التغييرات في قاعدة البيانات السحابية`;
                if (supabaseResult?.id) {
                    message += `\n🆔 معرف السجل: ${supabaseResult.id}`;
                }
                message += `\n\n📋 تفاصيل الربط:`;
                message += `\n- الوحدة: ${unitNumber}`;
                message += `\n- العقار: ${propertyName}`;
                message += `\n- العقد: ${contractNumber}`;
                message += `\n- المستأجر: ${properties[unitIndex]['اسم المستأجر'] || 'غير محدد'}`;
                message += `\n\n🔗 يمكنك التحقق من الحفظ في Supabase Dashboard`;
            } else if (supabaseError) {
                message += `\n\n⚠️ تحذير: مشكلة في الحفظ السحابي`;
                message += `\nالسبب: ${supabaseError}`;
                message += `\n\n💡 البيانات محفوظة محلياً وستتم مزامنتها لاحقاً`;
            }
        } else {
            message += `\n\n📱 تم الحفظ محلياً (وضع عدم الاتصال)`;
        }

        alert(message);

        // إظهار toast للتأكيد مع معلومات إضافية
        const toastMessage = supabaseSuccess
            ? `تم ربط الوحدة ${unitNumber} وحفظها في Supabase بنجاح`
            : `تم ربط الوحدة ${unitNumber} محلياً فقط - فشل الحفظ السحابي`;

        showToast(toastMessage, supabaseSuccess ? 'success' : 'warning');
    }
}

// دالة مخصصة لحفظ ربط الوحدات في Supabase - محسنة
async function saveUnitLinkingToSupabase(unitData, operationType = 'link') {
    try {
        if (!supabaseClient) {
            console.error('❌ Supabase غير متصل - لا يمكن حفظ عملية الربط');
            throw new Error('Supabase غير متصل');
        }

        console.log(`💾 بدء حفظ ${operationType === 'link' ? 'ربط' : 'فصل'} الوحدة في Supabase...`);
        console.log('📋 بيانات الوحدة الواردة:', {
            unitNumber: unitData['رقم  الوحدة '],
            propertyName: unitData['اسم العقار'],
            tenant: unitData['اسم المستأجر'],
            contract: unitData['رقم العقد'],
            operation: operationType
        });

        // تحضير البيانات للحفظ مع التحقق من القيم
        const supabaseData = {
            unit_number: unitData['رقم  الوحدة '] || '',
            property_name: unitData['اسم العقار'] || '',
            city: unitData['المدينة'] || '',
            tenant_name: operationType === 'unlink' ? '' : (unitData['اسم المستأجر'] || ''),
            contract_number: operationType === 'unlink' ? '' : (unitData['رقم العقد'] || ''),
            rent_value: parseFloat(unitData['قيمة  الايجار ']) || 0,
            area: parseFloat(unitData['المساحة']) || null,
            contract_type: unitData['نوع العقد'] || 'سكني',
            start_date: unitData['تاريخ البداية'] || null,
            end_date: unitData['تاريخ النهاية'] || null,
            owner: unitData['المالك'] || '',
            deed_number: unitData['رقم الصك'] || '',
            real_estate_registry: unitData['السجل العيني '] || '',
            updated_at: new Date().toISOString()
        };

        // للتأكد من فصل الوحدة، نضع القيم فارغة صراحة
        if (operationType === 'unlink') {
            supabaseData.tenant_name = '';
            supabaseData.contract_number = '';
            console.log('🔓 تم تعيين tenant_name و contract_number كفارغين للفصل');
        }

        // التحقق من البيانات الأساسية
        if (!supabaseData.unit_number || !supabaseData.property_name) {
            throw new Error('رقم الوحدة أو اسم العقار مفقود');
        }

        console.log('📋 البيانات المحضرة للحفظ:', {
            operation: operationType,
            unit_number: supabaseData.unit_number,
            property_name: supabaseData.property_name,
            tenant_name: supabaseData.tenant_name,
            contract_number: supabaseData.contract_number
        });

        // البحث عن السجل الموجود مع معالجة أفضل للأخطاء
        console.log('🔍 البحث عن السجل الموجود...');
        const { data: existingRecord, error: searchError } = await supabaseClient
            .from('properties')
            .select('id, tenant_name, contract_number')
            .eq('unit_number', supabaseData.unit_number)
            .eq('property_name', supabaseData.property_name)
            .maybeSingle();

        if (searchError) {
            console.error('❌ خطأ في البحث:', searchError);
            throw new Error(`خطأ في البحث: ${searchError.message}`);
        }

        let result;
        let operationSuccess = false;

        if (existingRecord) {
            // تحديث السجل الموجود
            console.log('🔄 تحديث السجل الموجود في Supabase...');
            console.log('📋 السجل الحالي:', {
                id: existingRecord.id,
                current_tenant: existingRecord.tenant_name,
                current_contract: existingRecord.contract_number
            });

            const { data, error } = await supabaseClient
                .from('properties')
                .update(supabaseData)
                .eq('id', existingRecord.id)
                .select();

            if (error) {
                console.error('❌ خطأ في التحديث:', error);
                throw new Error(`خطأ في التحديث: ${error.message}`);
            }

            if (data && data.length > 0) {
                result = data[0];
                operationSuccess = true;
                console.log('✅ تم تحديث السجل في Supabase بنجاح');
                console.log('📋 البيانات المحدثة:', {
                    id: result.id,
                    tenant_name: result.tenant_name,
                    contract_number: result.contract_number,
                    updated_at: result.updated_at
                });
            } else {
                throw new Error('لم يتم إرجاع بيانات من عملية التحديث');
            }

        } else {
            // إنشاء سجل جديد
            console.log('➕ إنشاء سجل جديد في Supabase...');
            supabaseData.created_at = new Date().toISOString();

            const { data, error } = await supabaseClient
                .from('properties')
                .insert([supabaseData])
                .select();

            if (error) {
                console.error('❌ خطأ في الإنشاء:', error);
                throw new Error(`خطأ في الإنشاء: ${error.message}`);
            }

            if (data && data.length > 0) {
                result = data[0];
                operationSuccess = true;
                console.log('✅ تم إنشاء سجل جديد في Supabase بنجاح');
                console.log('📋 السجل الجديد:', {
                    id: result.id,
                    unit_number: result.unit_number,
                    tenant_name: result.tenant_name,
                    contract_number: result.contract_number
                });
            } else {
                throw new Error('لم يتم إرجاع بيانات من عملية الإنشاء');
            }
        }

        // التحقق من نجاح العملية
        if (!operationSuccess || !result) {
            throw new Error('فشل في حفظ البيانات - لم يتم إرجاع نتيجة صحيحة');
        }

        // إضافة سجل في tracking_logs إذا كان متوفراً
        try {
            if (typeof window.trackingLogsManager !== 'undefined') {
                const trackingData = {
                    operation_type: operationType === 'link' ? 'ربط وحدة' : 'فصل وحدة',
                    unit_number: unitData['رقم  الوحدة '],
                    property_name: unitData['اسم العقار'],
                    tenant_name: unitData['اسم المستأجر'] || '',
                    contract_number: unitData['رقم العقد'] || '',
                    description: `تم ${operationType === 'link' ? 'ربط' : 'فصل'} الوحدة ${unitData['رقم  الوحدة ']} ${operationType === 'link' ? 'بالعقد' : 'من العقد'} ${unitData['رقم العقد'] || 'غير محدد'}`,
                    user_name: getCurrentUser() || 'النظام'
                };

                await window.trackingLogsManager.saveTrackingLogToSupabase(trackingData);
                console.log('✅ تم حفظ سجل التتبع');
            }
        } catch (trackingError) {
            console.warn('⚠️ فشل في حفظ سجل التتبع:', trackingError);
            // لا نرمي خطأ هنا لأن العملية الأساسية نجحت
        }

        console.log(`🎉 تم حفظ ${operationType === 'link' ? 'ربط' : 'فصل'} الوحدة بنجاح في Supabase`);
        return result;

    } catch (error) {
        console.error(`❌ خطأ في حفظ ${operationType === 'link' ? 'ربط' : 'فصل'} الوحدة:`, error);
        // إظهار رسالة خطأ للمستخدم
        showToast(`❌ فشل في حفظ ${operationType === 'link' ? 'ربط' : 'فصل'} الوحدة: ${error.message}`, 'error');
        throw error;
    }
}

// فصل وحدة من العقد
async function unlinkUnit(unitNumber, propertyName, contractNumber) {
    // استخدام الفصل المطلق الذي يمنع إعادة الكتابة نهائياً
    console.log('🔄 تحويل إلى الفصل المطلق...');
    return await absoluteUnlinkUnit(unitNumber, propertyName, contractNumber);
}

// دالة الفصل القديمة (للمرجع فقط)
async function unlinkUnitOld(unitNumber, propertyName, contractNumber) {
    if (!confirm(`هل أنت متأكد من فصل الوحدة ${unitNumber} من العقد؟`)) return;

    // التحقق من وجود البيانات
    if (!ensurePropertiesLoaded('unlinkUnitOld')) {
        return;
    }

    const unitIndex = properties.findIndex(p =>
        p['اسم العقار'] === propertyName &&
        p['رقم  الوحدة '] === unitNumber &&
        p['رقم العقد'] === contractNumber
    );

    if (unitIndex !== -1) {
        // حفظ البيانات القديمة للمقارنة
        const oldData = { ...properties[unitIndex] };

        // فصل الوحدة محلياً
        properties[unitIndex]['رقم العقد'] = '';
        properties[unitIndex]['اسم المستأجر'] = '';

        console.log(`🔓 فصل الوحدة ${unitNumber} محلياً:`, {
            قبل: { عقد: oldData['رقم العقد'], مستأجر: oldData['اسم المستأجر'] },
            بعد: { عقد: properties[unitIndex]['رقم العقد'], مستأجر: properties[unitIndex]['اسم المستأجر'] }
        });

        // حفظ التغييرات في Supabase باستخدام الدالة المخصصة
        let supabaseSuccess = false;
        let supabaseError = null;

        try {
            console.log(`💾 بدء حفظ فصل الوحدة ${unitNumber} في Supabase...`);

            // استخدام الفصل المبسط المباشر
            if (!supabaseClient) {
                throw new Error('Supabase غير متصل');
            }

            // البحث عن الوحدة في Supabase
            const { data: existingUnit, error: searchError } = await supabaseClient
                .from('properties')
                .select('id, unit_number, tenant_name, contract_number')
                .eq('unit_number', unitNumber)
                .eq('property_name', propertyName)
                .single();

            if (searchError) {
                if (searchError.code === 'PGRST116') {
                    throw new Error('الوحدة غير موجودة في Supabase');
                }
                throw new Error(`خطأ في البحث: ${searchError.message}`);
            }

            // فصل الوحدة مباشرة
            const { data: result, error: unlinkError } = await supabaseClient
                .from('properties')
                .update({
                    tenant_name: '',
                    contract_number: '',
                    updated_at: new Date().toISOString()
                })
                .eq('id', existingUnit.id)
                .select()
                .single();

            if (unlinkError) {
                throw new Error(`خطأ في الفصل: ${unlinkError.message}`);
            }

            if (result && result.tenant_name === '' && result.contract_number === '') {
                console.log(`✅ تم حفظ فصل الوحدة ${unitNumber} في Supabase بنجاح`);
                console.log('📋 البيانات المحفوظة:', {
                    id: result.id,
                    unit_number: result.unit_number,
                    tenant_name: result.tenant_name,
                    contract_number: result.contract_number
                });
                supabaseSuccess = true;

                // إضافة سجل تتبع
                try {
                    if (typeof window.trackingLogsManager !== 'undefined') {
                        const trackingData = {
                            operation_type: 'فصل وحدة',
                            unit_number: unitNumber,
                            property_name: propertyName,
                            description: `تم فصل الوحدة ${unitNumber} من العقد ${contractNumber}`,
                            user_name: 'النظام'
                        };

                        await window.trackingLogsManager.saveTrackingLogToSupabase(trackingData);
                        console.log('✅ تم حفظ سجل التتبع للفصل');
                    }
                } catch (trackingError) {
                    console.warn('⚠️ فشل في حفظ سجل التتبع:', trackingError);
                }
            } else {
                supabaseError = 'فشل في الفصل - القيم لم تصبح فارغة';
            }

        } catch (error) {
            console.error(`❌ خطأ في حفظ فصل الوحدة ${unitNumber}:`, error);
            supabaseError = error.message;
        }

        // حفظ البيانات محلياً
        saveDataLocally();

        // ⚠️ تعطيل الحفظ التلقائي لمنع إعادة كتابة البيانات المفصولة
        console.log('⚠️ تم تعطيل الحفظ التلقائي مؤقتاً لمنع تضارب البيانات');

        // تحديث العرض
        updateLinkedUnitsDisplay(propertyName, contractNumber);
        updateAvailableUnitsDisplay(propertyName, contractNumber, unitNumber);

        // إعادة حساب الحالات
        initializeApp();

        // رسالة النجاح مع تفاصيل الحفظ
        let message = `✅ تم فصل الوحدة ${unitNumber} من العقد بنجاح!`;

        // إضافة تفاصيل الحفظ السحابي
        if (typeof supabaseClient !== 'undefined' && supabaseClient) {
            if (supabaseSuccess) {
                message += `\n\n☁️ تم حفظ التغييرات في قاعدة البيانات السحابية`;
            } else if (supabaseError) {
                message += `\n\n⚠️ تحذير: مشكلة في الحفظ السحابي`;
                message += `\nالسبب: ${supabaseError}`;
                message += `\n\n💡 البيانات محفوظة محلياً وستتم مزامنتها لاحقاً`;
            }
        } else {
            message += `\n\n📱 تم الحفظ محلياً (وضع عدم الاتصال)`;
        }

        alert(message);

        // إظهار toast للتأكيد
        showToast(`تم فصل الوحدة ${unitNumber} بنجاح`, 'success');
    }
}

// تحديث عرض الوحدات المرتبطة
function updateLinkedUnitsDisplay(propertyName, contractNumber) {
    const container = document.getElementById('linkedUnitsDisplay');
    if (container) {
        container.innerHTML = renderLinkedUnits(propertyName, contractNumber);
    }
}

// تحديث عرض الوحدات المتاحة
function updateAvailableUnitsDisplay(propertyName, contractNumber, currentUnitNumber) {
    const container = document.getElementById('availableUnitsForLinking');
    if (container) {
        container.innerHTML = renderAvailableUnitsForLinking(propertyName, contractNumber, currentUnitNumber);
    }
}

// ==================== وظائف إدارة الأقساط ====================

// عرض الأقساط للتحرير
function renderInstallmentsForEdit(property) {
    let installments = [];

    // جمع الأقساط الموجودة
    for (let i = 1; i <= 10; i++) {
        const dateKey = i === 1 ? 'تاريخ القسط الاول' :
                       i === 2 ? 'تاريخ القسط الثاني' :
                       `تاريخ القسط ${getArabicNumber(i)}`;
        const amountKey = i === 1 ? 'مبلغ القسط الاول' :
                         i === 2 ? 'مبلغ القسط الثاني' :
                         `مبلغ القسط ${getArabicNumber(i)}`;

        if (property[dateKey] || property[amountKey]) {
            installments.push({
                number: i,
                date: property[dateKey] || '',
                amount: property[amountKey] || '',
                dateKey: dateKey,
                amountKey: amountKey
            });
        }
    }

    // إضافة قسط فارغ إذا لم توجد أقساط
    if (installments.length === 0) {
        installments.push({
            number: 1,
            date: '',
            amount: '',
            dateKey: 'تاريخ القسط الاول',
            amountKey: 'مبلغ القسط الاول'
        });
    }

    return installments.map(installment => `
        <div class="installment-item" data-installment="${installment.number}">
            <div class="installment-header">
                <h4><i class="fas fa-calendar-check"></i> القسط ${getArabicNumber(installment.number)}</h4>
                <button type="button" onclick="removeInstallment(${installment.number})" class="btn-remove-installment">
                    <i class="fas fa-trash"></i> حذف
                </button>
            </div>
            <div class="installment-fields">
                <div class="form-group">
                    <label>تاريخ القسط:</label>
                    <input type="date" name="${installment.dateKey}" value="${formatDateForInput(installment.date)}"
                           placeholder="تاريخ القسط" onchange="setTimeout(() => autoSaveInstallmentChanges(), 1000)">
                </div>
                <div class="form-group">
                    <label>مبلغ القسط:</label>
                    <input type="number" name="${installment.amountKey}" value="${installment.amount}" step="0.01"
                           placeholder="مبلغ القسط" onchange="setTimeout(() => autoSaveInstallmentChanges(), 1000)">
                </div>
            </div>
        </div>
    `).join('');
}

// تحويل الرقم إلى العربية
function getArabicNumber(num) {
    const arabicNumbers = {
        1: 'الأول', 2: 'الثاني', 3: 'الثالث', 4: 'الرابع', 5: 'الخامس',
        6: 'السادس', 7: 'السابع', 8: 'الثامن', 9: 'التاسع', 10: 'العاشر'
    };
    return arabicNumbers[num] || num.toString();
}

// إضافة قسط جديد
function addNewInstallment() {
    const container = document.getElementById('installmentsContainer');
    const existingInstallments = container.querySelectorAll('.installment-item');
    const nextNumber = existingInstallments.length + 1;

    if (nextNumber > 10) {
        alert('لا يمكن إضافة أكثر من 10 أقساط');
        return;
    }

    const dateKey = nextNumber === 1 ? 'تاريخ القسط الاول' :
                   nextNumber === 2 ? 'تاريخ القسط الثاني' :
                   `تاريخ القسط ${getArabicNumber(nextNumber)}`;
    const amountKey = nextNumber === 1 ? 'مبلغ القسط الاول' :
                     nextNumber === 2 ? 'مبلغ القسط الثاني' :
                     `مبلغ القسط ${getArabicNumber(nextNumber)}`;

    const installmentHtml = `
        <div class="installment-item" data-installment="${nextNumber}">
            <div class="installment-header">
                <h4><i class="fas fa-calendar-check"></i> القسط ${getArabicNumber(nextNumber)}</h4>
                <button type="button" onclick="removeInstallment(${nextNumber})" class="btn-remove-installment">
                    <i class="fas fa-trash"></i> حذف
                </button>
            </div>
            <div class="installment-fields">
                <div class="form-group">
                    <label>تاريخ القسط:</label>
                    <input type="date" name="${dateKey}" value="" placeholder="تاريخ القسط">
                </div>
                <div class="form-group">
                    <label>مبلغ القسط:</label>
                    <input type="number" name="${amountKey}" value="" step="0.01" placeholder="مبلغ القسط">
                </div>
            </div>
        </div>
    `;

    container.insertAdjacentHTML('beforeend', installmentHtml);

    // إضافة مستمع للتغييرات على الحقول الجديدة
    const newInstallmentItem = container.lastElementChild;
    const inputs = newInstallmentItem.querySelectorAll('input');
    inputs.forEach(input => {
        input.addEventListener('change', function() {
            // حفظ تلقائي عند تغيير قيم الأقساط
            setTimeout(() => {
                autoSaveInstallmentChanges();
            }, 1000);
        });
    });
}

// حذف قسط
function removeInstallment(installmentNumber) {
    if (!confirm('هل أنت متأكد من حذف هذا القسط؟')) return;

    const installmentItem = document.querySelector(`[data-installment="${installmentNumber}"]`);
    if (installmentItem) {
        installmentItem.remove();

        // إعادة ترقيم الأقساط
        renumberInstallments();
    }
}

// إعادة ترقيم الأقساط
function renumberInstallments() {
    const container = document.getElementById('installmentsContainer');
    const installmentItems = container.querySelectorAll('.installment-item');

    installmentItems.forEach((item, index) => {
        const newNumber = index + 1;
        const oldNumber = item.getAttribute('data-installment');

        // تحديث رقم القسط
        item.setAttribute('data-installment', newNumber);

        // تحديث العنوان
        const header = item.querySelector('.installment-header h4');
        header.innerHTML = `<i class="fas fa-calendar-check"></i> القسط ${getArabicNumber(newNumber)}`;

        // تحديث زر الحذف
        const removeBtn = item.querySelector('.btn-remove-installment');
        removeBtn.setAttribute('onclick', `removeInstallment(${newNumber})`);

        // تحديث أسماء الحقول
        const dateInput = item.querySelector('input[type="date"]');
        const amountInput = item.querySelector('input[type="number"]');

        const newDateKey = newNumber === 1 ? 'تاريخ القسط الاول' :
                          newNumber === 2 ? 'تاريخ القسط الثاني' :
                          `تاريخ القسط ${getArabicNumber(newNumber)}`;
        const newAmountKey = newNumber === 1 ? 'مبلغ القسط الاول' :
                            newNumber === 2 ? 'مبلغ القسط الثاني' :
                            `مبلغ القسط ${getArabicNumber(newNumber)}`;

        dateInput.setAttribute('name', newDateKey);
        amountInput.setAttribute('name', newAmountKey);

        // إضافة مستمع للتغييرات على الحقول المحدثة
        dateInput.addEventListener('change', function() {
            setTimeout(() => autoSaveInstallmentChanges(), 1000);
        });
        amountInput.addEventListener('change', function() {
            setTimeout(() => autoSaveInstallmentChanges(), 1000);
        });
    });
}

// حفظ تلقائي لتغييرات الأقساط
function autoSaveInstallmentChanges() {
    // البحث عن النموذج النشط
    const activeForm = document.querySelector('.modal-overlay form');
    if (!activeForm) return;

    const formData = new FormData(activeForm);
    const originalContractNumber = formData.get('originalContractNumber');
    const originalPropertyName = formData.get('originalPropertyName');
    const originalUnitNumber = formData.get('originalUnitNumber');

    // البحث عن العقار
    let propertyIndex = -1;
    if (originalContractNumber && originalPropertyName) {
        propertyIndex = properties.findIndex(p =>
            p['رقم العقد'] === originalContractNumber && p['اسم العقار'] === originalPropertyName
        );
    } else if (originalUnitNumber && originalPropertyName) {
        propertyIndex = properties.findIndex(p =>
            p['رقم  الوحدة '] === originalUnitNumber && p['اسم العقار'] === originalPropertyName
        );
    }

    if (propertyIndex === -1) return;

    // تحديث بيانات الأقساط فقط - مع الحفاظ على جميع الأقساط الموجودة
    const updatedProperty = { ...properties[propertyIndex] };

    // أولاً: مسح جميع الأقساط القديمة لتجنب التداخل
    for (let i = 1; i <= 10; i++) {
        const dateKey = i === 1 ? 'تاريخ القسط الاول' :
                       i === 2 ? 'تاريخ القسط الثاني' :
                       `تاريخ القسط ${getArabicNumber(i)}`;
        const amountKey = i === 1 ? 'مبلغ القسط الاول' :
                         i === 2 ? 'مبلغ القسط الثاني' :
                         `مبلغ القسط ${getArabicNumber(i)}`;

        // مسح القيم القديمة
        updatedProperty[dateKey] = null;
        updatedProperty[amountKey] = null;
    }

    // ثانياً: تحديث الأقساط من النموذج
    for (let [key, value] of formData.entries()) {
        if (key.includes('القسط')) {
            // معالجة تواريخ الأقساط
            if (key.includes('تاريخ') && value) {
                const dateParts = value.split('-');
                if (dateParts.length === 3 && dateParts[0].length === 4) {
                    // التحقق من صحة التاريخ
                    const year = parseInt(dateParts[0]);
                    const month = parseInt(dateParts[1]);
                    const day = parseInt(dateParts[2]);

                    if (year >= 1900 && year <= 2100 && month >= 1 && month <= 12 && day >= 1 && day <= 31) {
                        const testDate = new Date(year, month - 1, day, 12, 0, 0);
                        if (testDate.getFullYear() === year && testDate.getMonth() === (month - 1) && testDate.getDate() === day) {
                            value = `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}/${year}`;
                        } else {
                            value = null; // تاريخ غير صالح
                        }
                    } else {
                        value = null; // تاريخ غير صحيح
                    }
                }
            }

            // معالجة مبالغ الأقساط
            if (key.includes('مبلغ') && value) {
                value = parseFloat(value) || 0;
            }

            // حفظ القيمة فقط إذا كانت صالحة
            if (value !== null && value !== '' && value !== 0) {
                updatedProperty[key] = value;
            }
        }
    }

    // تحديث عدد الأقساط بناءً على الأقساط الموجودة فعلياً
    let installmentCount = 0;
    for (let i = 1; i <= 10; i++) {
        const dateKey = i === 1 ? 'تاريخ القسط الاول' :
                       i === 2 ? 'تاريخ القسط الثاني' :
                       `تاريخ القسط ${getArabicNumber(i)}`;
        const amountKey = i === 1 ? 'مبلغ القسط الاول' :
                         i === 2 ? 'مبلغ القسط الثاني' :
                         `مبلغ القسط ${getArabicNumber(i)}`;

        if (updatedProperty[dateKey] || updatedProperty[amountKey]) {
            installmentCount = i;
        }
    }

    updatedProperty['عدد الاقساط'] = installmentCount;

    // لا تعيد حساب الإجمالي إذا كان موجوداً (احترام الإجمالي المكتوب يدوياً)
    if (!updatedProperty['الاجمالى'] || updatedProperty['الاجمالى'] === null || updatedProperty['الاجمالى'] === 0) {
        // فقط إذا لم يكن هناك إجمالي، احسبه من الأقساط
        const yearlyData = calculateYearlyTotal(updatedProperty);
        if (yearlyData.count > 0) {
            updatedProperty['الاجمالى'] = yearlyData.total;
            console.log(`💰 تم حساب الإجمالي تلقائياً من الأقساط: ${yearlyData.total}`);
        }
    } else {
        console.log(`💰 تم الاحتفاظ بالإجمالي الموجود: ${updatedProperty['الاجمالى']} (لن يتم تغييره)`);
    }

    // حفظ التحديث
    properties[propertyIndex] = updatedProperty;

    // تحديث فوري للعرض لإظهار الإجمالي المحدث
    console.log('🔄 تحديث فوري للعرض بعد تعديل الأقساط...');
    renderData();
    updateTotalStats();

    // حفظ في Supabase
    if (typeof savePropertyToSupabase === 'function') {
        savePropertyToSupabase(updatedProperty);
    }

    // حفظ محلياً
    saveDataLocally();

    // تحديث العرض إذا كان النموذج مفتوحاً
    const totalDisplay = document.querySelector('.modal-overlay .total-display');
    if (totalDisplay) {
        const yearlyData = calculateYearlyTotal(updatedProperty);
        totalDisplay.textContent = `الإجمالي: ${yearlyData.total.toLocaleString()} ريال (${yearlyData.count} أقساط)`;
    }

    console.log('✅ تم حفظ تغييرات الأقساط تلقائياً');
}

// دالة تشخيص الأقساط - للتحقق من المشاكل
function diagnoseInstallments(contractNumber, propertyName) {
    console.log(`🔍 تشخيص أقساط العقد: ${contractNumber} - ${propertyName}`);

    const property = properties.find(p =>
        p['رقم العقد'] === contractNumber && p['اسم العقار'] === propertyName
    );

    if (!property) {
        console.error('❌ لم يتم العثور على العقار');
        return;
    }

    console.log('📊 تفاصيل الأقساط:');
    let foundInstallments = 0;

    for (let i = 1; i <= 10; i++) {
        const dateKey = i === 1 ? 'تاريخ القسط الاول' :
                       i === 2 ? 'تاريخ القسط الثاني' :
                       `تاريخ القسط ${getArabicNumber(i)}`;
        const amountKey = i === 1 ? 'مبلغ القسط الاول' :
                         i === 2 ? 'مبلغ القسط الثاني' :
                         `مبلغ القسط ${getArabicNumber(i)}`;

        const date = property[dateKey];
        const amount = property[amountKey];

        if (date || amount) {
            foundInstallments++;
            console.log(`✅ القسط ${i}: التاريخ = ${date || 'غير محدد'}, المبلغ = ${amount || 'غير محدد'}`);
        }
    }

    console.log(`📈 إجمالي الأقساط الموجودة: ${foundInstallments}`);
    console.log(`📋 عدد الأقساط المحفوظ: ${property['عدد الاقساط'] || 'غير محدد'}`);

    const yearlyData = calculateYearlyTotal(property);
    console.log(`💰 الإجمالي المحسوب: ${yearlyData.total.toLocaleString()} ريال (${yearlyData.count} أقساط)`);

    return {
        foundInstallments,
        savedCount: property['عدد الاقساط'],
        yearlyTotal: yearlyData.total,
        yearlyCount: yearlyData.count
    };
}

// ==================== وظائف حساب الإجمالي بناءً على السنة ====================

// حساب الإجمالي بناءً على أقساط السنة الحالية
function calculateYearlyTotal(property) {
    let yearlyTotal = 0;
    let installmentsCount = 0;
    const targetYear = currentCalculationYear;

    // فحص جميع الأقساط المحفوظة (من 1 إلى 10)
    for (let i = 1; i <= 10; i++) {
        const dateKey = i === 1 ? 'تاريخ القسط الاول' :
                       i === 2 ? 'تاريخ القسط الثاني' :
                       `تاريخ القسط ${getArabicNumber(i)}`;
        const amountKey = i === 1 ? 'مبلغ القسط الاول' :
                         i === 2 ? 'مبلغ القسط الثاني' :
                         `مبلغ القسط ${getArabicNumber(i)}`;

        const installmentDate = property[dateKey];
        const installmentAmount = property[amountKey];

        if (installmentDate && installmentAmount) {
            // استخراج السنة من تاريخ القسط
            const dateObj = parseArabicDate(installmentDate);
            if (dateObj && dateObj.getFullYear() === targetYear) {
                yearlyTotal += parseFloat(installmentAmount) || 0;
                installmentsCount++;
            }
        }
    }

    return {
        total: yearlyTotal,
        count: installmentsCount,
        year: targetYear
    };
}

// تحليل التاريخ العربي
function parseArabicDate(dateStr) {
    if (!dateStr) return null;

    // تنسيقات التاريخ المختلفة
    const formats = [
        /^(\d{1,2})\/(\d{1,2})\/(\d{4})$/, // DD/MM/YYYY
        /^(\d{1,2})-(\d{1,2})-(\d{4})$/, // DD-MM-YYYY
        /^(\d{4})-(\d{1,2})-(\d{1,2})$/, // YYYY-MM-DD
    ];

    for (let format of formats) {
        const match = dateStr.match(format);
        if (match) {
            let day, month, year;
            if (format === formats[2]) { // YYYY-MM-DD
                [, year, month, day] = match;
            } else { // DD/MM/YYYY or DD-MM-YYYY
                [, day, month, year] = match;
            }
            return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
        }
    }

    return null;
}

// إنشاء ملاحظة الإجمالي
function createTotalNote(yearlyData) {
    if (yearlyData.count === 0) {
        return `لا توجد أقساط لعام ${yearlyData.year}`;
    }

    const countText = yearlyData.count === 1 ? 'قسط واحد' :
                     yearlyData.count === 2 ? 'قسطان' :
                     `${yearlyData.count} أقساط`;

    return `إجمالي أقساط عام ${yearlyData.year} - عدد الأقساط: ${countText}`;
}

// تحديث عرض الإجمالي مع الملاحظة
function formatTotalWithNote(property) {
    const smartTotal = calculateSmartTotal(property);

    const formattedTotal = smartTotal.amount > 0 ?
        `${smartTotal.amount.toLocaleString()} ريال` :
        '';

    return {
        display: formattedTotal,
        note: smartTotal.note,
        amount: smartTotal.amount,
        source: smartTotal.source
    };
}

// ==================== وظيفة حساب الإجمالي الذكي ====================

// حساب الإجمالي بطريقة ذكية (أولوية للحقل المحفوظ، ثم الأقساط، ثم الإيجار)
function calculateSmartTotal(property) {
    let totalAmount = 0;
    let source = 'none';
    let note = '';

    // أولاً: محاولة استخدام حقل "الاجمالى" إذا كان موجود
    if (property['الاجمالى'] && property['الاجمالى'] !== null) {
        totalAmount = parseFloat(property['الاجمالى']);
        source = 'saved';
        note = ''; // تم حذف الوصف حسب طلب المستخدم
    } else {
        // ثانياً: حساب من الأقساط الموجودة
        const yearlyData = calculateYearlyTotal(property);
        if (yearlyData.total > 0) {
            totalAmount = yearlyData.total;
            source = 'calculated';
            note = createTotalNote(yearlyData);
        } else if (property['قيمة  الايجار ']) {
            // ثالثاً: استخدام قيمة الإيجار كبديل
            totalAmount = parseFloat(property['قيمة  الايجار ']) || 0;
            source = 'rent';
            note = 'قيمة الإيجار';
        } else {
            source = 'none';
            note = 'لا توجد بيانات مالية';
        }
    }

    return {
        amount: totalAmount,
        source: source,
        note: note
    };
}

// ==================== وظيفة إعادة حساب الإجماليات ====================

// إعادة حساب جميع قيم "الاجمالى" في البيانات
function recalculateAllTotals() {
    let updatedCount = 0;

    properties.forEach(property => {
        // تجاهل الوحدات الفارغة
        if (!property['اسم المستأجر'] || property['اسم المستأجر'].toString().trim() === '') {
            return;
        }

        // إذا كان حقل "الاجمالى" فارغ أو null
        if (!property['الاجمالى'] || property['الاجمالى'] === null) {
            const smartTotal = calculateSmartTotal(property);
            if (smartTotal.amount > 0) {
                property['الاجمالى'] = smartTotal.amount;
                updatedCount++;
            }
        }
    });

    if (updatedCount > 0) {
        console.log(`تم تحديث ${updatedCount} قيمة إجمالي`);
        // إعادة تحميل البيانات
        initializeApp();
        renderData();
    }

    // عرض تفاصيل الحساب في وحدة التطوير
    console.log('=== تفاصيل حساب الإحصائيات ===');
    let totalCommercial = 0, totalResidential = 0;
    let commercialCount = 0, residentialCount = 0;

    properties.forEach(property => {
        if (!property['اسم المستأجر'] || property['اسم المستأجر'].toString().trim() === '') {
            return;
        }

        const smartTotal = calculateSmartTotal(property);
        if (smartTotal.amount > 0) {
            if (property['نوع العقد'] === 'ضريبي') {
                totalCommercial += smartTotal.amount;
                commercialCount++;
                console.log(`تجاري: ${property['اسم المستأجر']} - ${smartTotal.amount.toLocaleString()} ريال (${smartTotal.source})`);
            } else {
                totalResidential += smartTotal.amount;
                residentialCount++;
                console.log(`سكني: ${property['اسم المستأجر']} - ${smartTotal.amount.toLocaleString()} ريال (${smartTotal.source})`);
            }
        }
    });

    console.log(`إجمالي تجاري: ${totalCommercial.toLocaleString()} ريال (${commercialCount} عقد)`);
    console.log(`إجمالي سكني: ${totalResidential.toLocaleString()} ريال (${residentialCount} عقد)`);
    console.log('=====================================');

    return updatedCount;
}

// ==================== وظائف تعديل العقارات ====================

// تعديل بيانات العقار (محسن للعمل مع النظام الجديد)
function editPropertyData(propertyName) {
    // البحث في الوحدات الموجودة أولاً
    let propertyData = properties.find(p => p['اسم العقار'] === propertyName);

    // إذا لم توجد، ابحث في تعريفات العقارات
    if (!propertyData) {
        const propertyDefinition = propertyDefinitions.find(p => p.name === propertyName);
        if (propertyDefinition) {
            // تحويل تعريف العقار إلى تنسيق البيانات المتوقع
            propertyData = {
                'اسم العقار': propertyDefinition.name,
                'المدينة': propertyDefinition.city,
                'رقم الصك': propertyDefinition.deed,
                'مساحةالصك': propertyDefinition.area,
                'السجل العيني ': propertyDefinition.registry,
                'موقع العقار': propertyDefinition.location,
                'المالك': propertyDefinition.owner
            };
            console.log('📋 تم العثور على العقار في تعريفات العقارات:', propertyDefinition);
        }
    }

    if (!propertyData) {
        alert('لم يتم العثور على العقار في النظام');
        return;
    }

    // إنشاء نافذة التعديل
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.style.display = 'flex';
    modal.innerHTML = `
        <div class="modal-box edit-property-modal">
            <button class="close-modal" onclick="closeModal()">×</button>
            <div class="modal-header">
                <h2><i class="fas fa-edit"></i> تعديل بيانات العقار</h2>
                <p>تعديل المعلومات الأساسية للعقار: ${propertyName}</p>
            </div>
            <div class="modal-content">
                <div class="management-section">
                    <h3><i class="fas fa-building"></i> المعلومات الأساسية</h3>
                    <div class="form-row">
                        <div class="form-group">
                            <label>اسم العقار:</label>
                            <input type="text" id="editPropertyName" value="${propertyData['اسم العقار'] || ''}" placeholder="اسم العقار">
                        </div>
                        <div class="form-group">
                            <label>المدينة:</label>
                            <select id="editPropertyCity">
                                ${getUniqueCountries().filter(city => city !== 'الكل').map(city =>
                                    `<option value="${city}" ${city === propertyData['المدينة'] ? 'selected' : ''}>${city}</option>`
                                ).join('')}
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>رقم الصك:</label>
                            <input type="text" id="editPropertyDeed" value="${propertyData['رقم الصك'] || ''}" placeholder="رقم الصك">
                        </div>
                        <div class="form-group">
                            <label>مساحة الصك:</label>
                            <input type="number" id="editPropertyArea" value="${propertyData['مساحةالصك'] || ''}" placeholder="المساحة بالمتر المربع">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>السجل العيني:</label>
                            <input type="text" id="editPropertyRegistry" value="${propertyData['السجل العيني '] || ''}" placeholder="رقم السجل العيني">
                        </div>
                        <div class="form-group">
                            <label>المالك:</label>
                            <select id="editPropertyOwner" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                                <option value="">-- اختر المالك --</option>
                                <option value="أبو خالد" ${(propertyData['المالك'] === 'أبو خالد') ? 'selected' : ''}>أبو خالد</option>
                                <option value="أبو تميم" ${(propertyData['المالك'] === 'أبو تميم') ? 'selected' : ''}>أبو تميم</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>موقع العقار:</label>
                            <input type="url" id="editPropertyLocation" value="${propertyData['موقع العقار'] || ''}" placeholder="رابط الخريطة">
                        </div>
                    </div>
                </div>
                <div class="modal-actions">
                    <button class="btn-primary" onclick="handleSavePropertyChanges('${propertyName}')">
                        <i class="fas fa-save"></i> حفظ التغييرات
                    </button>
                    <button class="btn-secondary" onclick="closeModal()">
                        <i class="fas fa-times"></i> إلغاء
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    // إضافة مستمع لإغلاق النافذة عند النقر خارجها
    modal.addEventListener('click', function(e) {
        if (e.target === this) closeModal();
    });
}

// وظيفة wrapper للتعامل مع async في onclick
function handleSavePropertyChanges(originalPropertyName) {
    console.log(`🔄 بدء معالجة حفظ تغييرات العقار: ${originalPropertyName}`);

    // البحث عن الزر بطريقة أكثر أماناً
    const saveBtn = document.querySelector('.btn-primary');
    if (saveBtn) {
        const originalText = saveBtn.innerHTML;
        saveBtn.disabled = true;
        saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> جاري الحفظ...';

        // استدعاء الوظيفة async
        savePropertyChanges(originalPropertyName)
            .then(() => {
                console.log('✅ تم إنهاء حفظ التغييرات بنجاح');
                // الزر سيتم إخفاؤه عند إغلاق النافذة
            })
            .catch((error) => {
                console.error('❌ خطأ في حفظ التغييرات:', error);
                // إعادة تفعيل الزر في حالة الخطأ
                if (saveBtn.parentNode) {
                    saveBtn.disabled = false;
                    saveBtn.innerHTML = originalText;
                }
            });
    } else {
        // إذا لم يتم العثور على الزر، استدعي الوظيفة مباشرة
        savePropertyChanges(originalPropertyName);
    }
}

// حفظ تغييرات العقار مع المزامنة المحسنة
async function savePropertyChanges(originalPropertyName) {
    console.log(`💾 بدء حفظ تغييرات العقار: ${originalPropertyName}`);

    const newName = document.getElementById('editPropertyName').value.trim();
    const newCity = document.getElementById('editPropertyCity').value;
    const newDeed = document.getElementById('editPropertyDeed').value.trim();
    const newArea = document.getElementById('editPropertyArea').value;
    const newRegistry = document.getElementById('editPropertyRegistry').value.trim();
    const newOwner = document.getElementById('editPropertyOwner').value.trim();
    const newLocation = document.getElementById('editPropertyLocation').value.trim();

    if (!newName || !newCity) {
        showToast('يرجى إدخال اسم العقار واختيار المدينة', 'error');
        return;
    }

    // التحقق من عدم وجود عقار آخر بنفس الاسم الجديد (إذا تم تغيير الاسم)
    if (newName !== originalPropertyName) {
        const existingProperty = properties.find(p =>
            p['اسم العقار'] === newName && p['المدينة'] === newCity
        );
        if (existingProperty) {
            showToast('يوجد عقار آخر بنفس الاسم في هذه المدينة', 'error');
            return;
        }
    }

    // إظهار مؤشر التحميل
    const loadingModal = document.createElement('div');
    loadingModal.className = 'modal-overlay';
    loadingModal.style.display = 'flex';
    loadingModal.style.zIndex = '10001';
    loadingModal.innerHTML = `
        <div class="modal-box loading-modal">
            <div class="loading-content">
                <div class="loading-spinner"></div>
                <h3>جاري حفظ التغييرات...</h3>
                <p>يرجى الانتظار حتى يتم حفظ البيانات في السحابة</p>
            </div>
        </div>
    `;
    document.body.appendChild(loadingModal);

    try {
        // الحصول على البيانات الأصلية للمقارنة
        const relatedProperties = properties.filter(p => p['اسم العقار'] === originalPropertyName);
        const originalData = relatedProperties[0] ? { ...relatedProperties[0] } : {};

        // تعريف المتغيرات المطلوبة للتتبع
        const originalUnitNumber = originalData['رقم  الوحدة '] || '';
        const originalTenantName = originalData['اسم المستأجر'] || '';
        const originalContractNumber = originalData['رقم العقد'] || '';

        // تحضير التغييرات للتتبع
        const changes = {};

        if (newName !== originalPropertyName) {
            changes['اسم العقار'] = {
                fieldName: 'اسم العقار',
                old: originalPropertyName,
                new: newName
            };
        }

        if (newCity !== originalData['المدينة']) {
            changes['المدينة'] = {
                fieldName: 'المدينة',
                old: originalData['المدينة'] || '',
                new: newCity
            };
        }

        if (newDeed !== (originalData['رقم الصك'] || '')) {
            changes['رقم الصك'] = {
                fieldName: 'رقم الصك',
                old: originalData['رقم الصك'] || '',
                new: newDeed
            };
        }

        if (newArea !== (originalData['مساحةالصك'] || '')) {
            changes['مساحةالصك'] = {
                fieldName: 'مساحة الصك',
                old: originalData['مساحةالصك'] || '',
                new: newArea
            };
        }

        if (newRegistry !== (originalData['السجل العيني '] || '')) {
            changes['السجل العيني '] = {
                fieldName: 'السجل العيني',
                old: originalData['السجل العيني '] || '',
                new: newRegistry
            };
        }

        if (newOwner !== (originalData['المالك'] || '')) {
            changes['المالك'] = {
                fieldName: 'المالك',
                old: originalData['المالك'] || '',
                new: newOwner
            };
        }

        if (newLocation !== (originalData['موقع العقار'] || '')) {
            changes['موقع العقار'] = {
                fieldName: 'موقع العقار',
                old: originalData['موقع العقار'] || '',
                new: newLocation
            };
        }

        // تحديث جميع الوحدات المرتبطة بهذا العقار
        relatedProperties.forEach(property => {
            property['اسم العقار'] = newName;
            property['المدينة'] = newCity;
            property['رقم الصك'] = newDeed || null;
            property['مساحةالصك'] = newArea || null;
            property['السجل العيني '] = newRegistry || null;
            property['المالك'] = newOwner || null;
            property['موقع العقار'] = newLocation || null;
            property['تاريخ آخر تحديث'] = new Date().toLocaleDateString('ar-SA');
        });

        // 🔧 تحديث جميع الوحدات المربوطة بنفس العقود إذا كانت موجودة
        for (const property of relatedProperties) {
            if (property['رقم العقد'] && property['رقم العقد'].trim() !== '') {
                console.log(`🔄 تحديث الوحدات المربوطة بالعقد ${property['رقم العقد']}...`);
                try {
                    await updateLinkedUnitsOnEdit(property);
                } catch (error) {
                    console.error(`❌ خطأ في تحديث الوحدات المربوطة للعقد ${property['رقم العقد']}:`, error);
                }
            }
        }

        // حفظ البيانات محلياً
        saveDataLocally();

        // تسجيل التغيير في سجل التتبع
        if (Object.keys(changes).length > 0) {
            const changeLog = createChangeLog(
                OPERATION_TYPES.EDIT_DATA,
                {
                    'رقم  الوحدة ': relatedProperties[0]['رقم  الوحدة '] || 'متعدد',
                    'اسم العقار': newName,
                    'اسم المستأجر': relatedProperties[0]['اسم المستأجر'] || ''
                },
                changes,
                {
                    affectedUnits: relatedProperties.length,
                    originalPropertyName: originalPropertyName
                }
            );

            changeTrackingLogs.push(changeLog);

            // حفظ سجل التتبع محلياً
            try {
                localStorage.setItem('changeTrackingLogs', JSON.stringify(changeTrackingLogs.slice(0, 1000)));
            } catch (error) {
                console.warn('⚠️ لم يتم حفظ سجل التتبع محلياً:', error);
            }

            // حفظ سجل التتبع في Supabase
            await saveChangeLogToSupabase(changeLog);
        }

        // مزامنة مع Supabase مع معالجة شاملة ومحسنة للأخطاء
        console.log('🔄 بدء مزامنة البيانات مع Supabase...');

        try {
            // محاولة حفظ مباشر في Supabase (الطريقة المحسنة)
            console.log('💾 حفظ مباشر للعقارات المحدثة...');
            const directSaveResult = await savePropertiesDirectlyToSupabase(relatedProperties);

            // إزالة مؤشر التحميل
            if (loadingModal && loadingModal.parentNode) {
                loadingModal.remove();
            }

            if (directSaveResult.success) {
                // عرض رسالة نجاح مفصلة
                const successMessage = directSaveResult.message || `تم حفظ ${directSaveResult.count} عقار بنجاح في السحابة`;
                showToast(successMessage, 'success');
                console.log('✅ تم حفظ تغييرات العقار بنجاح في السحابة');

                // إضافة سجل تتبع للنجاح
                const successLog = createChangeLog(
                    'تحديث عقار',
                    originalUnitNumber,
                    originalPropertyName,
                    originalTenantName,
                    originalContractNumber,
                    changes,
                    {
                        method: directSaveResult.method,
                        cloudSync: true,
                        timestamp: new Date().toISOString()
                    }
                );

                await saveChangeLogToSupabase(successLog);

                // التحقق من المزامنة (اختياري)
                setTimeout(async () => {
                    try {
                        const verifyResult = await verifyDataSync(originalPropertyName, changes);
                        if (verifyResult.success) {
                            console.log('✅ تم التحقق من مزامنة البيانات');
                        } else {
                            console.warn('⚠️ بعض البيانات لم تتم مزامنتها بشكل كامل');
                        }
                    } catch (verifyError) {
                        console.warn('⚠️ لم يتم التحقق من المزامنة:', verifyError.message);
                    }
                }, 2000);

                // تحديث واجهة المستخدم
                updatePropertyDisplayAfterSave(originalPropertyName, changes);

                // إعادة تحميل البيانات لضمان التحديث الفوري
                await refreshDataAfterPropertyEdit(originalPropertyName);

            } else {
                throw new Error(directSaveResult.message || directSaveResult.error || 'فشل في الحفظ المباشر');
            }

        } catch (saveError) {
            console.error('❌ خطأ في حفظ البيانات:', saveError);

            // إزالة مؤشر التحميل
            if (loadingModal && loadingModal.parentNode) {
                loadingModal.remove();
            }

            // محاولة المزامنة العامة كبديل
            try {
                console.log('🔄 محاولة المزامنة العامة كبديل...');
                const syncResult = await syncToSupabase(false);

                if (syncResult.success) {
                    showToast('تم حفظ التغييرات في السحابة (طريقة بديلة)', 'success');
                    console.log('✅ تم الحفظ عبر المزامنة العامة');

                    // إضافة سجل تتبع للنجاح البديل
                    const fallbackLog = createChangeLog(
                        'تحديث عقار (طريقة بديلة)',
                        originalUnitNumber,
                        originalPropertyName,
                        originalTenantName,
                        originalContractNumber,
                        changes,
                        {
                            method: 'fallback_sync',
                            cloudSync: true,
                            originalError: saveError.message
                        }
                    );

                    await saveChangeLogToSupabase(fallbackLog);

                } else {
                    throw new Error(syncResult.message || 'فشل في المزامنة العامة');
                }

            } catch (syncError) {
                console.error('❌ فشل في جميع طرق الحفظ:', syncError);

                // حفظ محلي مع رسالة تحذيرية
                showToast('تم حفظ التغييرات محلياً فقط - ستتم المزامنة لاحقاً', 'warning');

                // إضافة سجل تتبع للفشل
                const failureLog = createChangeLog(
                    'تحديث عقار (محلي فقط)',
                    originalUnitNumber,
                    originalPropertyName,
                    originalTenantName,
                    originalContractNumber,
                    changes,
                    {
                        method: 'local_only',
                        cloudSync: false,
                        saveError: saveError.message,
                        syncError: syncError.message,
                        needsRetry: true
                    }
                );

                await saveChangeLogToSupabase(failureLog);

                // إظهار تفاصيل الخطأ للمستخدم مع خيارات
                setTimeout(() => {
                    const errorDetails = `
                        ❌ فشل الحفظ في السحابة:

                        خطأ الحفظ المباشر: ${saveError.message}
                        خطأ المزامنة العامة: ${syncError.message}

                        ✅ تم حفظ البيانات محلياً بنجاح

                        🔧 خطوات الحل المقترحة:
                        1. تحقق من اتصال الإنترنت
                        2. أعد تحميل الصفحة وحاول مرة أخرى
                        3. تحقق من إعدادات Supabase
                        4. اتصل بالدعم الفني إذا استمرت المشكلة

                        💡 ستتم محاولة المزامنة تلقائياً عند استعادة الاتصال
                    `;

                    if (confirm('هل تريد رؤية تفاصيل الخطأ وخطوات الحل؟')) {
                        alert(errorDetails);
                    }
                }, 1000);
            }
        }

        // إغلاق النافذة
        closeModal();

        // تحديث العرض
        renderData();
        updateTotalStats();

        // تحديث محتوى تبويب العقارات
        const propertiesTab = document.getElementById('properties-tab');
        if (propertiesTab) {
            propertiesTab.innerHTML = renderPropertiesTab();
        }

        // مسح نتائج البحث لإعادة عرض جميع العقارات
        if (typeof clearPropertiesSearch === 'function') {
            clearPropertiesSearch();
        }

        // إظهار رسالة تأكيد نهائية
        setTimeout(() => {
            console.log(`✅ تم إنهاء تحديث العقار "${originalPropertyName}" بنجاح`);

            // إضافة إشعار في الواجهة
            const notification = document.createElement('div');
            notification.className = 'success-notification';
            notification.innerHTML = `
                <i class="fas fa-check-circle"></i>
                تم تحديث العقار "${originalPropertyName}" بنجاح
            `;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: linear-gradient(135deg, #28a745, #20c997);
                color: white;
                padding: 15px 20px;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
                z-index: 10000;
                font-weight: 600;
                display: flex;
                align-items: center;
                gap: 10px;
                animation: slideInRight 0.5s ease;
            `;

            document.body.appendChild(notification);

            // إزالة الإشعار بعد 5 ثوان
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.style.animation = 'slideOutRight 0.5s ease';
                    setTimeout(() => notification.remove(), 500);
                }
            }, 5000);
        }, 1000);

    } catch (error) {
        console.error('❌ خطأ في حفظ تغييرات العقار:', error);

        // إزالة مؤشر التحميل
        loadingModal.remove();

        // إظهار رسالة خطأ مع إمكانية إعادة المحاولة
        const errorModal = document.createElement('div');
        errorModal.className = 'modal-overlay';
        errorModal.style.display = 'flex';
        errorModal.style.zIndex = '10002';
        errorModal.innerHTML = `
            <div class="modal-box error-modal">
                <div class="error-header">
                    <h3><i class="fas fa-exclamation-triangle"></i> خطأ في حفظ التغييرات</h3>
                </div>
                <div class="error-content">
                    <p><strong>حدث خطأ أثناء حفظ التغييرات:</strong></p>
                    <div class="error-details">${error.message || 'خطأ غير معروف'}</div>
                    <p><i class="fas fa-info-circle"></i> تم حفظ التغييرات محلياً</p>
                </div>
                <div class="error-actions">
                    <button onclick="retrySavePropertyChanges('${originalPropertyName}')" class="retry-btn">
                        <i class="fas fa-redo"></i> إعادة المحاولة
                    </button>
                    <button onclick="closeModal()" class="close-btn">
                        <i class="fas fa-times"></i> إغلاق
                    </button>
                </div>
            </div>
        `;
        document.body.appendChild(errorModal);
    }
}

// إعادة محاولة حفظ تغييرات العقار
async function retrySavePropertyChanges(originalPropertyName) {
    closeModal(); // إغلاق نافذة الخطأ
    await savePropertyChanges(originalPropertyName);
}

// عرض إحصائيات العقار
function showPropertyStatistics(propertyName) {
    const relatedProperties = properties.filter(p => p['اسم العقار'] === propertyName);
    const propertyData = relatedProperties[0];

    if (!propertyData) {
        alert('لم يتم العثور على العقار');
        return;
    }

    // حساب الإحصائيات
    const totalUnits = relatedProperties.length;
    const occupiedUnits = relatedProperties.filter(p => p['اسم المستأجر'] && p['اسم المستأجر'].trim() !== '').length;
    const emptyUnits = totalUnits - occupiedUnits;
    const totalArea = relatedProperties.reduce((sum, p) => sum + (parseFloat(p['المساحة']) || 0), 0);

    // حساب الإجمالي بطريقة ذكية
    let yearlyTotal = 0;
    let totalInstallments = 0;

    relatedProperties.forEach(property => {
        if (!property['اسم المستأجر'] || property['اسم المستأجر'].toString().trim() === '') {
            return; // تجاهل الوحدات الفارغة
        }

        const smartTotal = calculateSmartTotal(property);
        yearlyTotal += smartTotal.amount;

        // إضافة عدد الأقساط إذا كان المصدر من الحساب
        if (smartTotal.source === 'calculated') {
            const yearlyData = calculateYearlyTotal(property);
            totalInstallments += yearlyData.count;
        }
    });

    // إنشاء نافذة الإحصائيات
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.style.display = 'flex';
    modal.innerHTML = `
        <div class="modal-box property-stats-modal">
            <button class="close-modal" onclick="closeModal()">×</button>
            <div class="modal-header">
                <h2><i class="fas fa-chart-bar"></i> إحصائيات العقار</h2>
                <p>${propertyName}</p>
            </div>
            <div class="modal-content">
                <div class="management-section">
                    <h3><i class="fas fa-building"></i> المعلومات الأساسية</h3>
                    <div class="stats-grid">
                        ${propertyData['السجل العيني '] ? `
                        <div class="stat-item">
                            <div class="stat-label"><i class="fas fa-clipboard-list"></i> السجل العيني</div>
                            <div class="stat-value">${propertyData['السجل العيني ']}</div>
                        </div>` : ''}
                        ${propertyData['رقم الصك'] ? `
                        <div class="stat-item">
                            <div class="stat-label"><i class="fas fa-file-contract"></i> رقم الصك</div>
                            <div class="stat-value">${propertyData['رقم الصك']}</div>
                        </div>` : ''}
                        ${propertyData['مساحةالصك'] ? `
                        <div class="stat-item">
                            <div class="stat-label"><i class="fas fa-ruler-combined"></i> مساحة الصك</div>
                            <div class="stat-value">${parseFloat(propertyData['مساحةالصك']).toLocaleString()} م²</div>
                        </div>` : ''}
                        ${propertyData['المالك'] ? `
                        <div class="stat-item">
                            <div class="stat-label"><i class="fas fa-user"></i> المالك</div>
                            <div class="stat-value">${propertyData['المالك']}</div>
                        </div>` : ''}
                    </div>
                </div>

                <div class="management-section">
                    <h3><i class="fas fa-home"></i> إحصائيات الوحدات</h3>
                    <div class="stats-grid">
                        <div class="stat-item">
                            <div class="stat-label"><i class="fas fa-building"></i> إجمالي الوحدات</div>
                            <div class="stat-value">${totalUnits}</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-label"><i class="fas fa-check-circle"></i> الوحدات المشغولة</div>
                            <div class="stat-value occupied">${occupiedUnits}</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-label"><i class="fas fa-minus-circle"></i> الوحدات الفارغة</div>
                            <div class="stat-value empty">${emptyUnits}</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-label"><i class="fas fa-expand-arrows-alt"></i> إجمالي المساحة</div>
                            <div class="stat-value">${totalArea.toLocaleString()} م²</div>
                        </div>
                    </div>
                </div>

                <div class="management-section">
                    <h3><i class="fas fa-money-bill-wave"></i> الإحصائيات المالية</h3>
                    <div class="stats-grid">
                        <div class="stat-item">
                            <div class="stat-label"><i class="fas fa-calendar-alt"></i> إجمالي عام ${currentCalculationYear}</div>
                            <div class="stat-value financial">${yearlyTotal.toLocaleString()} ريال</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-label"><i class="fas fa-list-ol"></i> عدد الأقساط</div>
                            <div class="stat-value">${totalInstallments}</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-label"><i class="fas fa-percentage"></i> معدل الإشغال</div>
                            <div class="stat-value">${totalUnits > 0 ? Math.round((occupiedUnits / totalUnits) * 100) : 0}%</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-label"><i class="fas fa-calculator"></i> متوسط القسط</div>
                            <div class="stat-value">${totalInstallments > 0 ? Math.round(yearlyTotal / totalInstallments).toLocaleString() : 0} ريال</div>
                        </div>
                    </div>
                </div>

                <div class="modal-actions">
                    <button class="btn-secondary" onclick="closeModal()">
                        <i class="fas fa-times"></i> إغلاق
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    // إضافة مستمع لإغلاق النافذة عند النقر خارجها
    modal.addEventListener('click', function(e) {
        if (e.target === this) closeModal();
    });
}

// ==================== وظائف تصفية المدن في صفحة الإدارة ====================

// تبديل عرض قائمة تصفية المدن
function toggleCityFilter() {
    const filterList = document.getElementById('cityFilterList');
    const filterArrow = document.getElementById('filterArrow');
    const isVisible = filterList.classList.contains('show');

    if (isVisible) {
        closeCityFilter();
    } else {
        showCityFilter();
    }
}

// عرض قائمة تصفية المدن
function showCityFilter() {
    const filterList = document.getElementById('cityFilterList');
    const filterArrow = document.getElementById('filterArrow');

    // إظهار القائمة
    filterList.style.display = 'block';

    // ملء قائمة المدن بالتصميم الجديد
    populateCitiesList();

    // تحديث عدد جميع المدن
    const allCitiesCount = document.getElementById('allCitiesCount');
    if (allCitiesCount) {
        allCitiesCount.textContent = getUniquePropertiesCount();
    }

    // تحديث حالة "جميع المدن"
    const allCitiesOption = filterList.querySelector('.all-cities');
    if (allCitiesOption) {
        if (selectedCityFilter === 'all') {
            allCitiesOption.style.background = '#007bff';
            allCitiesOption.style.borderColor = '#007bff';
            allCitiesOption.style.transform = 'translateY(-1px)';
            allCitiesOption.style.boxShadow = '0 2px 8px rgba(0, 123, 255, 0.3)';
        } else {
            allCitiesOption.style.background = '#28a745';
            allCitiesOption.style.borderColor = '#28a745';
            allCitiesOption.style.transform = 'none';
            allCitiesOption.style.boxShadow = '0 1px 3px rgba(40, 167, 69, 0.3)';
        }
    }

    // تحديث السهم
    if (filterArrow) {
        filterArrow.style.transform = 'rotate(180deg)';
        filterArrow.className = 'fas fa-chevron-up filter-arrow';
    }
}

// إغلاق قائمة تصفية المدن
function closeCityFilter() {
    const filterList = document.getElementById('cityFilterList');
    const filterArrow = document.getElementById('filterArrow');

    if (filterList) {
        filterList.style.display = 'none';
    }

    if (filterArrow) {
        filterArrow.style.transform = 'rotate(0deg)';
        filterArrow.className = 'fas fa-chevron-down filter-arrow';
    }
}



// الحصول على المدن الفريدة من العقارات
function getUniqueCitiesFromProperties() {
    const cities = new Set();
    const uniqueProperties = getUniquePropertiesForManagement();

    uniqueProperties.forEach(propertyName => {
        const property = properties.find(p => p['اسم العقار'] === propertyName);
        if (property && property['المدينة']) {
            cities.add(property['المدينة']);
        }
    });

    return Array.from(cities).sort();
}

// الحصول على عدد العقارات في مدينة معينة
function getPropertiesCountByCity(city) {
    const uniqueProperties = getUniquePropertiesForManagement();
    return uniqueProperties.filter(propertyName => {
        const property = properties.find(p => p['اسم العقار'] === propertyName);
        return property && property['المدينة'] === city;
    }).length;
}

// الحصول على العدد الإجمالي للعقارات الفريدة
function getUniquePropertiesCount() {
    return getUniquePropertiesForManagement().length;
}

// الحصول على العقارات الفريدة لصفحة الإدارة
function getUniquePropertiesForManagement() {
    const uniqueProperties = new Set();
    properties.forEach(property => {
        if (property['اسم العقار'] && property['اسم العقار'].trim() !== '') {
            uniqueProperties.add(property['اسم العقار']);
        }
    });
    return Array.from(uniqueProperties);
}

// تصفية العقارات حسب المدينة
function filterByCity(city) {
    selectedCityFilter = city;

    // تحديث الأزرار النشطة في القائمة
    const filterList = document.getElementById('cityFilterList');
    const cityOptions = filterList.querySelectorAll('.city-option');

    // تحديث أزرار المدن في الهيدر أيضاً
    updateCityButtonsActive(city);

    cityOptions.forEach(option => {
        option.classList.remove('active');
    });

    // تحديد الزر النشط
    if (city === 'all') {
        filterList.querySelector('.city-option').classList.add('active');
    } else {
        cityOptions.forEach(option => {
            const cityName = option.querySelector('span').textContent;
            if (cityName === city) {
                option.classList.add('active');
            }
        });
    }

    // إغلاق القائمة (اختياري - يمكن إبقاؤها مفتوحة)
    closeCityFilter();

    // تحديث عرض العقارات
    updatePropertiesDisplay();

    // تحديث عرض الفلاتر النشطة
    updateActiveFiltersDisplay();
}

// تحديث عرض العقارات بناءً على التصفية
function updatePropertiesDisplay() {
    const propertiesTab = document.getElementById('properties-tab');
    if (propertiesTab) {
        propertiesTab.innerHTML = renderPropertiesTab();
    }
}

// تحديث حالة أزرار المدن النشطة
function updateCityButtonsActive(activeCity) {
    const cityButtons = document.querySelectorAll('.city-btn');
    cityButtons.forEach(button => {
        const buttonCity = button.getAttribute('data-city');
        if (buttonCity === activeCity) {
            button.classList.add('active');
        } else {
            button.classList.remove('active');
        }
    });
}

// إضافة مدينة جديدة إلى النظام
function addNewCityToSystem() {
    const cityNameInput = document.getElementById('newCityName');
    const cityName = cityNameInput.value.trim();

    if (!cityName) {
        alert('يرجى إدخال اسم المدينة');
        cityNameInput.focus();
        return;
    }

    // التحقق من عدم وجود المدينة مسبقاً
    const existingCities = getUniqueCountries().filter(city => city !== 'الكل');
    if (existingCities.includes(cityName)) {
        alert('هذه المدينة موجودة بالفعل');
        cityNameInput.focus();
        return;
    }

    // إضافة المدينة إلى قائمة المدن المتاحة (بدون إنشاء عقارات أو وحدات افتراضية)
    console.log(`✅ تم إضافة المدينة "${cityName}" إلى النظام`);

    // إضافة المدينة إلى مصفوفة المدن المعرفة
    if (!cityDefinitions.includes(cityName)) {
        cityDefinitions.push(cityName);
        localStorage.setItem('cityDefinitions', JSON.stringify(cityDefinitions));
        console.log(`💾 تم حفظ المدينة "${cityName}" في قائمة المدن المعرفة`);
    }

    // تحديث أزرار المدن
    initCountryButtons();

    // تحديث محتوى التبويب
    updatePropertiesDisplay();

    // تنظيف الحقل
    cityNameInput.value = '';

    // رسالة نجاح
    alert(`تم إضافة مدينة "${cityName}" بنجاح!\nيمكنك الآن إضافة عقارات في هذه المدينة.`);

    console.log(`✅ تم إضافة المدينة: ${cityName}`);
}

// إصلاح التواريخ المحفوظة بشكل خاطئ
function fixCorruptedDates() {
    try {
        console.log('🔧 فحص وإصلاح التواريخ المحفوظة...');

        let fixedCount = 0;
        const dateFields = ['تاريخ البداية', 'تاريخ النهاية', 'تاريخ نهاية القسط'];

        properties.forEach((property, index) => {
            dateFields.forEach(field => {
                if (property[field]) {
                    const originalDate = property[field];
                    const fixedDate = fixSingleDate(originalDate);

                    if (fixedDate !== originalDate) {
                        console.log(`🔧 إصلاح تاريخ ${field} للعقار ${property['اسم العقار'] || index}: ${originalDate} → ${fixedDate}`);
                        property[field] = fixedDate;
                        fixedCount++;
                    }
                }
            });

            // إصلاح تواريخ الأقساط
            for (let i = 1; i <= 20; i++) {
                const installmentDateKey = `تاريخ القسط ${getArabicNumber(i)}`;
                if (property[installmentDateKey]) {
                    const originalDate = property[installmentDateKey];
                    const fixedDate = fixSingleDate(originalDate);

                    if (fixedDate !== originalDate) {
                        console.log(`🔧 إصلاح ${installmentDateKey} للعقار ${property['اسم العقار'] || index}: ${originalDate} → ${fixedDate}`);
                        property[installmentDateKey] = fixedDate;
                        fixedCount++;
                    }
                }
            }
        });

        if (fixedCount > 0) {
            console.log(`✅ تم إصلاح ${fixedCount} تاريخ محفوظ بشكل خاطئ`);

            // حفظ البيانات المصححة
            saveDataLocally();

            // حفظ في Supabase إذا كان متوفراً
            if (typeof saveAllPropertiesToSupabase === 'function') {
                saveAllPropertiesToSupabase();
            }
        } else {
            console.log('✅ جميع التواريخ صحيحة');
        }

    } catch (error) {
        console.error('❌ خطأ في إصلاح التواريخ:', error);
    }
}

// إصلاح تاريخ واحد
function fixSingleDate(dateStr) {
    if (!dateStr) return dateStr;

    // إذا كان التاريخ يحتوي على نص عربي، استخرج الجزء الرقمي فقط
    if (dateStr.includes('(') && dateStr.includes(')')) {
        const numericPart = dateStr.split('(')[0].trim();
        if (numericPart) {
            dateStr = numericPart;
        }
    }

    // تنظيف التاريخ من المسافات الزائدة
    dateStr = dateStr.trim();

    // فحص صيغة التاريخ
    let datePart = dateStr.split(' ')[0];
    let parts = datePart.includes('/') ? datePart.split('/') : datePart.split('-');

    if (parts.length !== 3) return dateStr;

    let day, month, year;

    // تحديد صيغة التاريخ
    if (parts[0].length === 4) {
        // yyyy-mm-dd أو yyyy/mm/dd
        year = parseInt(parts[0]);
        month = parseInt(parts[1]);
        day = parseInt(parts[2]);
    } else {
        // dd/mm/yyyy أو dd-mm-yyyy
        day = parseInt(parts[0]);
        month = parseInt(parts[1]);
        year = parseInt(parts[2]);
    }

    // التحقق من صحة التاريخ
    if (isNaN(year) || isNaN(month) || isNaN(day) ||
        year < 1900 || year > 2100 ||
        month < 1 || month > 12 ||
        day < 1 || day > 31) {
        console.warn(`تاريخ غير صحيح: ${dateStr}`);
        return dateStr; // إرجاع التاريخ الأصلي إذا كان غير صحيح
    }

    // التحقق من صحة التاريخ باستخدام Date object
    const testDate = new Date(year, month - 1, day);
    if (testDate.getFullYear() !== year || testDate.getMonth() !== (month - 1) || testDate.getDate() !== day) {
        console.warn(`تاريخ غير صالح: ${dateStr}`);
        return dateStr;
    }

    // إرجاع التاريخ بصيغة dd/mm/yyyy
    return `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}/${year}`;
}

// استعادة البيانات من localStorage - محسن لمنع تحويل التواريخ
function restoreDataFromLocalStorage() {
    try {
        const savedData = localStorage.getItem('properties_backup');
        if (savedData) {
            const parsedData = JSON.parse(savedData);
            if (Array.isArray(parsedData) && parsedData.length > 0) {
                // تأكد من أن التواريخ في الصيغة الصحيحة
                parsedData.forEach(property => {
                    // إصلاح التواريخ الأساسية
                    const dateFields = ['تاريخ البداية', 'تاريخ النهاية', 'تاريخ نهاية القسط'];
                    dateFields.forEach(field => {
                        if (property[field]) {
                            property[field] = ensureCorrectDateFormat(property[field]);
                        }
                    });

                    // إصلاح تواريخ الأقساط
                    for (let i = 1; i <= 20; i++) {
                        const installmentDateKey = `تاريخ القسط ${getArabicNumber(i)}`;
                        if (property[installmentDateKey]) {
                            property[installmentDateKey] = ensureCorrectDateFormat(property[installmentDateKey]);
                        }
                    }
                });

                properties = parsedData;
                console.log(`✅ تم استعادة ${parsedData.length} عقار من localStorage مع إصلاح التواريخ`);

                // إضافة زر تسجيل الخروج بعد تحميل البيانات
                setTimeout(() => {
                    if (currentUser) {
                        console.log('🔑 إضافة زر تسجيل الخروج من restoreDataFromLocalStorage');
                        addLogoutButton();
                    }
                }, 100);

                return true;
            }
        }
    } catch (error) {
        console.error('❌ خطأ في استعادة البيانات من localStorage:', error);
    }
    return false;
}

// ضمان صيغة التاريخ الصحيحة - محسن لمنع التواريخ العشوائية
function ensureCorrectDateFormat(dateStr) {
    if (!dateStr) return dateStr;

    // إذا كان التاريخ يحتوي على نص عربي، استخرج الجزء الرقمي فقط
    if (typeof dateStr === 'string' && dateStr.includes('(') && dateStr.includes(')')) {
        const numericPart = dateStr.split('(')[0].trim();
        if (numericPart) {
            dateStr = numericPart;
        }
    }

    // تنظيف التاريخ من المسافات الزائدة
    dateStr = dateStr.toString().trim();

    // إذا كان بصيغة dd/mm/yyyy، تحقق من صحته وأبقه كما هو
    if (typeof dateStr === 'string' && dateStr.match(/^\d{1,2}\/\d{1,2}\/\d{4}$/)) {
        const parts = dateStr.split('/');
        const day = parseInt(parts[0]);
        const month = parseInt(parts[1]);
        const year = parseInt(parts[2]);

        // التحقق من صحة التاريخ
        if (year >= 1900 && year <= 2100 && month >= 1 && month <= 12 && day >= 1 && day <= 31) {
            // التحقق الإضافي باستخدام Date object لتجنب تواريخ مثل 31 فبراير
            const testDate = new Date(year, month - 1, day, 12, 0, 0);
            if (testDate.getFullYear() === year && testDate.getMonth() === (month - 1) && testDate.getDate() === day) {
                return `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}/${year}`;
            }
        }
        console.warn(`تاريخ غير صحيح في ensureCorrectDateFormat: ${dateStr}`);
        return dateStr; // إرجاع الأصلي إذا كان غير صحيح
    }

    // إذا كان بصيغة yyyy-mm-dd، حوله إلى dd/mm/yyyy
    if (typeof dateStr === 'string' && dateStr.match(/^\d{4}-\d{1,2}-\d{1,2}/)) {
        const parts = dateStr.split('-');
        if (parts.length >= 3) {
            const year = parseInt(parts[0]);
            const month = parseInt(parts[1]);
            const day = parseInt(parts[2]);

            // التحقق من صحة التاريخ
            if (year >= 1900 && year <= 2100 && month >= 1 && month <= 12 && day >= 1 && day <= 31) {
                // التحقق الإضافي باستخدام Date object
                const testDate = new Date(year, month - 1, day, 12, 0, 0);
                if (testDate.getFullYear() === year && testDate.getMonth() === (month - 1) && testDate.getDate() === day) {
                    return `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}/${year}`;
                }
            }
        }
        console.warn(`تاريخ غير صحيح في ensureCorrectDateFormat: ${dateStr}`);
        return dateStr; // إرجاع الأصلي إذا كان غير صحيح
    }

    // إذا كان تاريخ غير صحيح، أرجع الأصلي
    return dateStr;
}

// اختبار معالجة التواريخ لضمان عدم حدوث تغيير عشوائي
function testDateHandling() {
    console.log('🧪 اختبار معالجة التواريخ...');

    const testDates = [
        '2/1/2025',    // 2nd January 2025
        '15/3/2024',   // 15th March 2024
        '31/12/2023',  // 31st December 2023
        '1/6/2025',    // 1st June 2025
        '29/2/2024',   // 29th February 2024 (leap year)
        '2025-01-02',  // ISO format
        '2024-03-15'   // ISO format
    ];

    testDates.forEach(testDate => {
        console.log(`\n📅 اختبار التاريخ: ${testDate}`);

        // Test formatDateForInput
        const inputFormat = formatDateForInput(testDate);
        console.log(`  formatDateForInput: ${testDate} → ${inputFormat}`);

        // Test ensureCorrectDateFormat
        const correctFormat = ensureCorrectDateFormat(testDate);
        console.log(`  ensureCorrectDateFormat: ${testDate} → ${correctFormat}`);

        // Test parseDate
        const parsedDate = parseDate(testDate);
        console.log(`  parseDate: ${testDate} → ${parsedDate ? parsedDate.toDateString() : 'null'}`);

        // Test round-trip conversion
        if (inputFormat) {
            const backToDisplay = ensureCorrectDateFormat(inputFormat);
            console.log(`  Round-trip: ${testDate} → ${inputFormat} → ${backToDisplay}`);

            // Check if original date is preserved
            if (testDate.includes('/') && backToDisplay === testDate) {
                console.log(`  ✅ التاريخ محفوظ بشكل صحيح`);
            } else if (testDate.includes('-') && backToDisplay) {
                console.log(`  ✅ التاريخ محول بشكل صحيح`);
            } else {
                console.warn(`  ⚠️ قد يكون هناك مشكلة في التحويل`);
            }
        }
    });

    console.log('\n✅ انتهى اختبار معالجة التواريخ');
}

// اختبار إصلاح مشكلة التاريخ
function testDateFix() {
    console.log('🔧 اختبار إصلاح مشكلة التاريخ...');

    // التاريخ الذي كان يسبب المشكلة
    const problematicDate = '15/11/2020';

    console.log(`📅 التاريخ الأصلي: ${problematicDate}`);

    // اختبار formatDateForStorage
    const fixedFormat = formatDateForStorage(problematicDate);
    console.log(`🔧 بعد formatDateForStorage: ${fixedFormat}`);

    // اختبار صحة التاريخ لـ Supabase
    try {
        const testDate = new Date(fixedFormat);
        if (!isNaN(testDate.getTime())) {
            console.log(`✅ التاريخ صالح لـ Supabase: ${testDate.toISOString()}`);
            console.log(`✅ تم حل المشكلة بنجاح!`);
        } else {
            console.log(`❌ التاريخ لا يزال غير صالح`);
        }
    } catch (error) {
        console.log(`❌ خطأ في اختبار التاريخ: ${error.message}`);
    }

    // اختبار تواريخ أخرى
    const testDates = ['1/1/2023', '31/12/2024', '29/2/2024'];
    testDates.forEach(date => {
        const converted = formatDateForStorage(date);
        const isValid = !isNaN(new Date(converted).getTime());
        console.log(`📅 ${date} → ${converted} ${isValid ? '✅' : '❌'}`);
    });
}

// حفظ البيانات محلياً
function saveDataLocally() {
    try {
        // حفظ في localStorage كنسخة احتياطية
        localStorage.setItem('properties_backup', JSON.stringify(properties));

        // 🔧 إضافة: حفظ المدن بشكل منفصل للحفاظ عليها عند حذف العقارات
        saveCitiesLocally();

        // محاولة حفظ في ملف JSON (يعمل فقط في بيئة التطوير)
        if (typeof saveToFile === 'function') {
            saveToFile();
        }

        console.log('✅ تم حفظ البيانات محلياً');
    } catch (error) {
        console.error('❌ خطأ في حفظ البيانات محلياً:', error);
    }
}

// حفظ المدن بشكل منفصل في localStorage
function saveCitiesLocally() {
    try {
        // جمع المدن من العقارات الحالية
        const citiesFromProperties = new Set();
        if (properties && properties.length > 0) {
            properties.forEach(property => {
                const city = property['المدينة'];
                if (city && city.trim() !== '' && city !== null) {
                    citiesFromProperties.add(city.trim());
                }
            });
        }

        // جمع المدن المحفوظة مسبقاً
        const savedCities = new Set();
        try {
            const existingSavedCities = localStorage.getItem('savedCities');
            if (existingSavedCities) {
                const parsed = JSON.parse(existingSavedCities);
                if (Array.isArray(parsed)) {
                    parsed.forEach(city => savedCities.add(city));
                }
            }
        } catch (error) {
            console.warn('⚠️ خطأ في قراءة المدن المحفوظة:', error);
        }

        // جمع المدن من نظام إدارة المدن (إذا كان متوفراً)
        if (typeof availableCities !== 'undefined' && Array.isArray(availableCities)) {
            availableCities.forEach(city => {
                if (city && city.trim() !== '') {
                    savedCities.add(city.trim());
                }
            });
        }

        // دمج جميع المدن (من العقارات + المحفوظة + المضافة يدوياً)
        const allCities = new Set([...citiesFromProperties, ...savedCities]);
        const finalCitiesList = Array.from(allCities).sort();

        // حفظ القائمة النهائية
        localStorage.setItem('savedCities', JSON.stringify(finalCitiesList));

        // تحديث availableCities إذا كان متوفراً
        if (typeof availableCities !== 'undefined') {
            // إضافة المدن الجديدة فقط (لا نحذف المدن الموجودة)
            finalCitiesList.forEach(city => {
                if (!availableCities.includes(city)) {
                    availableCities.push(city);
                }
            });
            availableCities.sort();
        }

        console.log(`💾 تم حفظ ${finalCitiesList.length} مدينة في localStorage`);

    } catch (error) {
        console.error('❌ خطأ في حفظ المدن محلياً:', error);
    }
}

// تحميل المدن المحفوظة من localStorage
function loadSavedCities() {
    try {
        const savedCities = localStorage.getItem('savedCities');
        if (savedCities) {
            const citiesList = JSON.parse(savedCities);
            if (Array.isArray(citiesList)) {
                // تحديث availableCities إذا كان متوفراً
                if (typeof availableCities !== 'undefined') {
                    // دمج المدن المحفوظة مع المدن الحالية
                    const allCities = new Set([...availableCities, ...citiesList]);
                    availableCities = Array.from(allCities).sort();

                    console.log(`📂 تم تحميل ${citiesList.length} مدينة محفوظة من localStorage`);
                    console.log(`📊 إجمالي المدن المتاحة: ${availableCities.length}`);

                    // تحديث واجهة المدن إذا كانت الدوال متوفرة
                    if (typeof updateCityButtonsState === 'function') {
                        updateCityButtonsState();
                    }
                    if (typeof updateCityDropdowns === 'function') {
                        updateCityDropdowns();
                    }
                } else {
                    console.log(`📂 تم العثور على ${citiesList.length} مدينة محفوظة (availableCities غير متوفر)`);
                }

                return citiesList;
            }
        }

        console.log('📂 لا توجد مدن محفوظة في localStorage');
        return [];

    } catch (error) {
        console.error('❌ خطأ في تحميل المدن المحفوظة:', error);
        return [];
    }
}

// وظيفة مساعدة لحفظ البيانات في ملف
function saveToFile() {
    try {
        const dataStr = JSON.stringify(properties, null, 2);
        const dataBlob = new Blob([dataStr], {type: 'application/json'});

        // إنشاء رابط تحميل
        const url = URL.createObjectURL(dataBlob);
        const link = document.createElement('a');
        link.href = url;
        link.download = 'data_updated.json';

        // تحميل الملف تلقائياً (اختياري)
        // link.click();

        console.log('✅ تم إعداد ملف البيانات للتحميل');
    } catch (error) {
        console.error('❌ خطأ في إعداد ملف البيانات:', error);
    }
}

// تنظيف العقارات المؤقتة (للمدن فقط)
function cleanupTempCityProperties() {
    const originalLength = properties.length;
    properties = properties.filter(property => !property.temp_city_marker);
    const removedCount = originalLength - properties.length;

    if (removedCount > 0) {
        console.log(`🧹 تم حذف ${removedCount} عقار مؤقت للمدن`);

        // تحديث العرض
        updatePropertiesDisplay();
        initCountryButtons();

        // حفظ البيانات المحدثة
        saveDataLocally();
    }
}

// جعل الوظيفة متاحة عالمياً للاستخدام في console
window.cleanupTempCityProperties = cleanupTempCityProperties;

// تهيئة قائمة تصفية المدن
function initializeCityFilter() {
    // تحديث عدد جميع المدن
    const allCitiesCount = document.getElementById('allCitiesCount');
    if (allCitiesCount) {
        allCitiesCount.textContent = getUniquePropertiesCount();
    }

    // إعادة تعيين التصفية إلى "جميع المدن"
    selectedCityFilter = 'all';

    // إغلاق القائمة إذا كانت مفتوحة
    closeCityFilter();

    // ملء قائمة المدن بالتصميم الجديد
    populateCitiesList();
}

// ملء قائمة المدن بتصميم OL/LI محسن
function populateCitiesList() {
    const citiesContainer = document.getElementById('citiesContainer');
    if (!citiesContainer) return;

    const cities = getUniqueCountries().filter(city => city !== 'الكل');
    citiesContainer.innerHTML = '';

    cities.forEach((city, index) => {
        const cityCount = properties.filter(p => p['المدينة'] === city).length;

        // إنشاء عنصر li للمدينة
        const cityElement = document.createElement('li');
        cityElement.className = 'city-item';
        cityElement.onclick = () => filterByCity(city);

        // تطبيق CSS مباشر للعنصر
        cityElement.style.cssText = `
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 12px 15px;
            margin-bottom: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 12px;
            transition: all 0.3s ease;
            font-family: 'Cairo', 'Tajawal', 'Segoe UI', Arial, sans-serif;
            font-weight: 600;
            position: relative;
            counter-increment: city-counter;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
        `;

        // إضافة تأثيرات hover
        cityElement.addEventListener('mouseenter', function() {
            this.style.background = 'linear-gradient(135deg, #007bff, #0056b3)';
            this.style.color = 'white';
            this.style.transform = 'translateX(-5px)';
            this.style.boxShadow = '0 4px 15px rgba(0, 123, 255, 0.3)';

            // تغيير لون الأيقونة والعداد
            const icon = this.querySelector('.city-icon');
            const count = this.querySelector('.city-count');
            if (icon) icon.style.color = 'white';
            if (count) {
                count.style.background = 'rgba(255, 255, 255, 0.2)';
                count.style.color = 'white';
            }
        });

        cityElement.addEventListener('mouseleave', function() {
            this.style.background = 'white';
            this.style.color = '#2c3e50';
            this.style.transform = 'translateX(0)';
            this.style.boxShadow = '0 2px 6px rgba(0, 0, 0, 0.08)';

            // إعادة لون الأيقونة والعداد
            const icon = this.querySelector('.city-icon');
            const count = this.querySelector('.city-count');
            if (icon) icon.style.color = '#007bff';
            if (count) {
                count.style.background = '#e9ecef';
                count.style.color = '#495057';
            }
        });

        cityElement.innerHTML = `
            <!-- رقم المدينة -->
            <span style="
                background: linear-gradient(135deg, #007bff, #0056b3);
                color: white;
                width: 25px;
                height: 25px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 0.6rem;
                font-weight: 700;
                flex-shrink: 0;
            ">${index + 1}</span>

            <!-- أيقونة المدينة -->
            <i class="fas fa-map-marker-alt city-icon" style="
                color: #007bff;
                font-size: 0.9rem;
                flex-shrink: 0;
            "></i>

            <!-- اسم المدينة -->
            <span style="
                flex: 1;
                font-size: 0.9rem;
                color: #2c3e50;
                font-weight: 600;
                text-align: right;
            ">${city}</span>

            <!-- عداد العقارات -->
            <span class="city-count" style="
                background: #e9ecef;
                color: #495057;
                padding: 3px 6px;
                border-radius: 10px;
                font-size: 0.7rem;
                font-weight: 700;
                min-width: 20px;
                text-align: center;
                flex-shrink: 0;
            ">${cityCount}</span>
        `;

        citiesContainer.appendChild(cityElement);
    });
}

// ==================== وظائف الهيدر الجديد ====================

// تبديل القوائم المنسدلة في الهيدر
function toggleHeaderDropdown(dropdownId) {
    const dropdown = document.getElementById(dropdownId + 'Dropdown');
    const button = dropdown.previousElementSibling;

    // فحص حالة القائمة الحالية قبل إغلاق الأخريات
    const isCurrentlyOpen = dropdown.classList.contains('show');

    // إغلاق جميع القوائم الأخرى
    closeAllDropdowns();

    // تبديل القائمة الحالية بناءً على حالتها السابقة
    if (!isCurrentlyOpen) {
        // إذا كانت مغلقة، افتحها
        dropdown.classList.add('show');
        button.classList.add('active');
    }
    // إذا كانت مفتوحة، تبقى مغلقة (تم إغلاقها بواسطة closeAllDropdowns)
}

// إغلاق جميع القوائم المنسدلة
function closeAllDropdowns() {
    const dropdowns = document.querySelectorAll('.dropdown-menu');
    const buttons = document.querySelectorAll('.dropdown-toggle');

    dropdowns.forEach(dropdown => {
        dropdown.classList.remove('show');
    });

    buttons.forEach(button => {
        button.classList.remove('active');
    });
}

// إغلاق القوائم عند النقر خارجها
document.addEventListener('click', function(event) {
    if (!event.target.closest('.header-dropdown')) {
        closeAllDropdowns();
    }
});

// دوال الفلاتر والإعدادات
function showMonthFilter() {
    // استدعاء نفس الوظيفة المستخدمة في الزر القديم
    if (typeof showMonthFilterModal === 'function') {
        showMonthFilterModal();
    } else {
        // البحث عن الزر القديم وتشغيله
        const oldBtn = document.getElementById('monthFilterBtn');
        if (oldBtn && oldBtn.onclick) {
            oldBtn.onclick();
        }
    }
}

function showMultiPropertyFilter() {
    // استدعاء نفس الوظيفة المستخدمة في الزر القديم
    if (typeof showMultiPropertyCityFilter === 'function') {
        showMultiPropertyCityFilter();
    } else {
        const oldBtn = document.getElementById('multiPropertyFilterBtn');
        if (oldBtn && oldBtn.onclick) {
            oldBtn.onclick();
        }
    }
}

function showContractTypeFilterFromDropdown() {
    // استدعاء وظيفة فلتر نوع العقد الأصلية
    const originalFunction = window.showContractTypeFilter;
    if (originalFunction && typeof originalFunction === 'function') {
        originalFunction();
    } else {
        // تشغيل نفس منطق الزر القديم
        const oldBtn = document.getElementById('contractTypeFilterBtn');
        if (oldBtn) {
            oldBtn.click();
        }
    }
}

// متغير فلتر نوع العقار
let propertyTypeFilter = null;

// نافذة فلتر نوع العقار
function showPropertyTypeFilter() {
    // التحقق من وجود نافذة مفتوحة وإغلاقها إذا كانت موجودة
    const existingModal = document.querySelector('.modal-overlay');
    if (existingModal) {
        closeModal();
        return;
    }

    const propertyTypes = ['مستودع', 'مصنع', 'شقة', 'غرفة', 'معرض', 'محل', 'حوش', 'مزرعة', 'فلة', 'ورشة', 'أرض', 'عمارة', 'مكتب','استراحة','بيت'];
    let html = `<div class="modal-overlay" style="display:flex; z-index: 10000;">
        <div class="modal-box property-type-filter-modal" style="max-width: 600px; max-height: 80vh; position: relative;">
            <h3 style="display: flex; align-items: center; gap: 10px; margin-bottom: 20px;">
                <i class="fas fa-tag" style="color: #28a745;"></i>
                فلتر نوع العقار
                <span class="badge" style="background: #28a745; color: white; padding: 4px 8px; border-radius: 12px; font-size: 0.8rem;">${propertyTypes.length + 1}</span>
            </h3>
            <div class="property-type-filter" style="max-height: 400px; overflow-y: auto; border: 1px solid #e9ecef; border-radius: 8px; padding: 15px; display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">`;

    // إضافة خيار "الكل"
    const isAllActive = !propertyTypeFilter;
    html += `
        <button onclick="if(propertyTypeFilter) { togglePropertyTypeFilter(propertyTypeFilter); } closePropertyTypeFilterModal();"
                class="property-type-btn ${isAllActive ? 'active' : ''}"
                style="width: 100%; padding: 12px; margin: 4px 0; border-radius: 8px; cursor: pointer;
                       transition: all 0.3s ease; border: 1px solid #e9ecef;
                       background: ${isAllActive ? '#28a745' : 'white'}; color: ${isAllActive ? 'white' : '#495057'};
                       display: flex; align-items: center; justify-content: space-between; min-height: 50px; grid-column: 1 / -1;">
            <span style="font-weight: 700; font-size: 1.3rem;">الكل</span>
            ${isAllActive ? '<i class="fas fa-check" style="color: white;"></i>' : '<i class="fas fa-list" style="color: #28a745;"></i>'}
        </button>
    `;

    // إضافة باقي أنواع العقارات في عمودين
    propertyTypes.forEach(type => {
        const isActive = propertyTypeFilter === type;
        html += `
            <button onclick="togglePropertyTypeFilter('${type}'); closePropertyTypeFilterModal();"
                    class="property-type-btn ${isActive ? 'active' : ''}"
                    style="width: 100%; padding: 12px; margin: 4px 0; border-radius: 8px; cursor: pointer;
                           transition: all 0.3s ease; border: 1px solid #e9ecef;
                           background: ${isActive ? '#28a745' : 'white'}; color: ${isActive ? 'white' : '#495057'};
                           display: flex; align-items: center; justify-content: space-between; min-height: 50px;">
                <span style="font-weight: 700; font-size: 1.3rem;">${type}</span>
                ${isActive ? '<i class="fas fa-check" style="color: white;"></i>' : '<i class="fas fa-tag" style="color: #28a745;"></i>'}
            </button>
        `;
    });

    html += `
            </div>
            <div class="modal-actions" style="margin-top: 20px; display: flex; gap: 10px;">
                <button onclick="closePropertyTypeFilterModal();" class="modal-action-btn close-btn property-type-filter-close-btn" id="propertyTypeFilterCloseBtn"
                        style="flex: 1; background: linear-gradient(135deg, #6c757d, #495057); color: white; border: none; padding: 12px 20px; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; justify-content: center; gap: 8px;">
                    <i class="fas fa-times"></i> إغلاق
                </button>
            </div>
        </div>
    </div>`;

    document.body.insertAdjacentHTML('beforeend', html);

    // إضافة حدث إغلاق للمودال
    setTimeout(() => {
        const modalOverlay = document.querySelector('.modal-overlay:last-child');
        if (modalOverlay) {
            modalOverlay.addEventListener('click', function(e) {
                if (e.target === this) {
                    console.log('🔴 تم النقر خارج نافذة فلتر نوع العقار - إغلاق');
                    closePropertyTypeFilterModal();
                }
            });
            console.log('✅ تم ربط الإغلاق عند النقر خارج نافذة فلتر نوع العقار');
        }
    }, 100);
}

// دالة إغلاق نافذة فلتر نوع العقار
function closePropertyTypeFilterModal() {
    console.log('🔴 إغلاق نافذة فلتر نوع العقار...');
    const modal = document.querySelector('.property-type-filter-modal');
    if (modal) {
        const modalOverlay = modal.closest('.modal-overlay');
        if (modalOverlay) {
            modalOverlay.remove();
            console.log('✅ تم إغلاق نافذة فلتر نوع العقار');
        }
    }
}

// تعيين فلتر نوع العقار
function setPropertyTypeFilter(type) {
    propertyTypeFilter = type;

    // تحديث activeFilters أيضاً للفلاتر النشطة
    activeFilters.propertyType = type || '';

    // إعادة عرض البيانات
    renderData();
    closePropertyTypeFilterModal();

    // تحديث عرض الفلاتر النشطة
    updateActiveFiltersDisplay();

    // تحديث حالة أزرار الفلاتر
    updateAllFilterButtonsState();
    updatePropertyTypeButtonsState();

    console.log(`🏷️ تم تطبيق فلتر نوع العقار: ${type || 'الكل'}`);
}

// دالة toggle لفلتر نوع العقار
function togglePropertyTypeFilter(type) {
    console.log(`🔄 Toggle فلتر نوع العقار: ${type}`);

    // إذا كان الفلتر نشطاً، قم بإلغائه
    if (propertyTypeFilter === type) {
        console.log(`❌ إلغاء فلتر نوع العقار: ${type}`);
        setPropertyTypeFilter(null);
        window.currentPropertyType = 'الكل';
    } else {
        // إذا لم يكن نشطاً، قم بتطبيقه
        console.log(`✅ تطبيق فلتر نوع العقار: ${type}`);
        setPropertyTypeFilter(type);
        window.currentPropertyType = type;
    }
}

// دالة toggle لفلتر نوع العقد
function toggleContractTypeFilter(type) {
    console.log(`🔄 Toggle فلتر نوع العقد: ${type}`);

    // إذا كان الفلتر نشطاً، قم بإلغائه
    if (contractTypeFilter === type) {
        console.log(`❌ إلغاء فلتر نوع العقد: ${type}`);
        setContractTypeFilter(null);
        window.currentContractType = 'الكل';
    } else {
        // إذا لم يكن نشطاً، قم بتطبيقه
        console.log(`✅ تطبيق فلتر نوع العقد: ${type}`);
        setContractTypeFilter(type);
        window.currentContractType = type;
    }
}

// دالة toggle لفلتر المالك
function toggleOwnerFilter(owner) {
    console.log(`🔄 Toggle فلتر المالك: ${owner}`);

    // إذا كان الفلتر نشطاً، قم بإلغائه
    if (activeFilters.owner === owner) {
        console.log(`❌ إلغاء فلتر المالك: ${owner}`);
        setOwnerFilter(null);
        window.currentOwner = 'الكل';
    } else {
        // إذا لم يكن نشطاً، قم بتطبيقه
        console.log(`✅ تطبيق فلتر المالك: ${owner}`);
        setOwnerFilter(owner);
        window.currentOwner = owner;
    }
}

// دالة لاستدعاء فلتر نوع العقار من القائمة المنسدلة
function showPropertyTypeFilterFromDropdown() {
    showPropertyTypeFilter();
}

function showOwnerFilterFromDropdown() {
    // عرض نافذة فلتر المالك
    showOwnerFilter();
}

function showOwnerFilter() {
    // التحقق من وجود نافذة مفتوحة وإغلاقها إذا كانت موجودة
    const existingModal = document.querySelector('.modal-overlay');
    if (existingModal) {
        closeModal();
        return;
    }

    // إضافة أنماط CSS للشاشات المختلفة
    if (!document.getElementById('owner-filter-styles')) {
        const styles = document.createElement('style');
        styles.id = 'owner-filter-styles';
        styles.textContent = `
            .owner-filter-overlay {
                position: fixed !important;
                top: 0 !important;
                left: 0 !important;
                width: 100% !important;
                height: 100% !important;
                background: rgba(0,0,0,0.5) !important;
                display: flex !important;
                justify-content: center !important;
                align-items: center !important;
                z-index: 10000 !important;
            }

            .owner-filter-modal {
                background: white !important;
                border-radius: 12px !important;
                padding: 20px !important;
                box-shadow: 0 10px 30px rgba(0,0,0,0.3) !important;
                max-width: 90vw !important;
                width: 500px !important;
                max-height: 90vh !important;
                overflow-y: auto !important;
            }

            .owner-btn {
                transition: all 0.2s ease !important;
            }

            .owner-btn:hover {
                transform: translateY(-1px) !important;
                box-shadow: 0 2px 8px rgba(0,0,0,0.15) !important;
            }

            .owner-btn:active {
                transform: translateY(0) !important;
            }

            @media (max-width: 768px) {
                .owner-filter-modal {
                    width: 95vw !important;
                    max-width: 95vw !important;
                    padding: 15px !important;
                    margin: 10px !important;
                }

                .owner-btn {
                    padding: 18px 15px !important;
                    font-size: 1.2rem !important;
                    min-height: 60px !important;
                }

                .filter-options {
                    max-height: 60vh !important;
                }
            }

            @media (max-width: 480px) {
                .owner-filter-modal {
                    width: 98vw !important;
                    padding: 12px !important;
                }

                .owner-btn {
                    padding: 20px 12px !important;
                    font-size: 1.1rem !important;
                    min-height: 65px !important;
                }
            }
        `;
        document.head.appendChild(styles);
    }

    const owners = ['أبو خالد', 'أبو تميم'];
    let html = `<div class="modal-overlay owner-filter-overlay" style="display:flex; z-index: 10000; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); justify-content: center; align-items: center;">
        <div class="modal-box owner-filter-modal" style="max-width: 90vw; width: 500px; max-height: 90vh; position: relative; background: white; border-radius: 12px; padding: 20px; box-shadow: 0 10px 30px rgba(0,0,0,0.3);">
            <h3 style="display: flex; align-items: center; gap: 10px; margin-bottom: 20px; font-size: 1.5rem;">
                <i class="fas fa-user" style="color: #fd7e14;"></i>
                فلتر المالك
                <span class="badge" style="background: #fd7e14; color: white; padding: 4px 8px; border-radius: 12px; font-size: 0.8rem;">${owners.length + 1}</span>
            </h3>
            <p style="color: #6c757d; margin-bottom: 15px; font-size: 1rem;">اختر المالك المراد فلترة العقارات حسبه:</p>
            <div class="filter-options" style="max-height: 50vh; overflow-y: auto; border: 1px solid #e9ecef; border-radius: 8px; padding: 10px;">`;

    // إضافة خيار "الكل"
    const isAllActive = !activeFilters.owner || activeFilters.owner === '';
    html += `
        <button onclick="if(activeFilters.owner && activeFilters.owner !== '') { toggleOwnerFilter(activeFilters.owner); } closeOwnerFilterModal();"
                class="owner-btn ${isAllActive ? 'active' : ''}"
                style="width: 100%; padding: 15px 12px; margin: 8px 0; border-radius: 8px; cursor: pointer;
                       transition: all 0.3s ease; border: 1px solid #e9ecef; font-family: inherit;
                       background: ${isAllActive ? '#fd7e14' : 'white'}; color: ${isAllActive ? 'white' : '#495057'};
                       display: flex; align-items: center; justify-content: space-between; min-height: 50px;
                       font-size: 1.1rem; touch-action: manipulation;">
            <span style="font-weight: 700;">الكل</span>
            ${isAllActive ? '<i class="fas fa-check" style="color: white; font-size: 1rem;"></i>' : '<i class="fas fa-list" style="color: #fd7e14; font-size: 1rem;"></i>'}
        </button>
    `;

    // إضافة باقي المالكين
    owners.forEach(owner => {
        const isActive = activeFilters.owner === owner;
        html += `
            <button onclick="toggleOwnerFilter('${owner}'); closeOwnerFilterModal();"
                    class="owner-btn ${isActive ? 'active' : ''}"
                    style="width: 100%; padding: 15px 12px; margin: 8px 0; border-radius: 8px; cursor: pointer;
                           transition: all 0.3s ease; border: 1px solid #e9ecef; font-family: inherit;
                           background: ${isActive ? '#fd7e14' : 'white'}; color: ${isActive ? 'white' : '#495057'};
                           display: flex; align-items: center; justify-content: space-between; min-height: 50px;
                           font-size: 1.1rem; touch-action: manipulation;">
                <span style="font-weight: 700;">${owner}</span>
                ${isActive ? '<i class="fas fa-check" style="color: white; font-size: 1rem;"></i>' : '<i class="fas fa-user" style="color: #fd7e14; font-size: 1rem;"></i>'}
            </button>
        `;
    });

    html += `
            </div>
            <div class="modal-actions" style="margin-top: 20px; display: flex; gap: 10px;">
                <button onclick="closeOwnerFilterModal();" class="modal-action-btn close-btn owner-filter-close-btn" id="ownerFilterCloseBtn"
                        style="flex: 1; background: linear-gradient(135deg, #6c757d, #495057); color: white; border: none;
                               padding: 15px 20px; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer;
                               transition: all 0.3s ease; display: flex; align-items: center; justify-content: center; gap: 8px;
                               min-height: 50px; touch-action: manipulation; font-family: inherit;">
                    <i class="fas fa-times"></i> إغلاق
                </button>
            </div>
        </div>
    </div>`;

    document.body.insertAdjacentHTML('beforeend', html);

    // إضافة حدث إغلاق للمودال
    setTimeout(() => {
        const modalOverlay = document.querySelector('.modal-overlay:last-child');
        if (modalOverlay) {
            modalOverlay.addEventListener('click', function(e) {
                if (e.target === this) {
                    console.log('🔴 تم النقر خارج نافذة فلتر المالك - إغلاق');
                    closeOwnerFilterModal();
                }
            });
            console.log('✅ تم ربط الإغلاق عند النقر خارج نافذة فلتر المالك');
        }
    }, 100);
}

// دالة إغلاق نافذة فلتر المالك
function closeOwnerFilterModal() {
    console.log('🔴 إغلاق نافذة فلتر المالك...');
    const modal = document.querySelector('.owner-filter-modal');
    if (modal) {
        const modalOverlay = modal.closest('.modal-overlay');
        if (modalOverlay) {
            modalOverlay.remove();
            console.log('✅ تم إغلاق نافذة فلتر المالك');
        }
    }
}

function setOwnerFilter(owner) {
    activeFilters.owner = owner || '';

    closeOwnerFilterModal();
    renderData();

    // تحديث عرض الفلاتر النشطة
    updateActiveFiltersDisplay();

    // تحديث حالة أزرار الفلاتر
    updateAllFilterButtonsState();
}

// ==================== نظام طباعة إحصائيات العقارات ====================

function showPropertyStatisticsPrintModal() {
    // التحقق من وجود نافذة مفتوحة وإغلاقها إذا كانت موجودة
    const existingModal = document.querySelector('.modal-overlay');
    if (existingModal) {
        closeModal();
        return;
    }

    // الحصول على المدن المتاحة
    const cities = getUniqueCountries().filter(city => city !== 'الكل');

    let html = `
        <div class="modal-overlay" style="display:flex;">
            <div class="modal-box" style="max-width: 700px; max-height: 90vh; overflow-y: auto;">
                <button class="close-modal" onclick="closeModal()">×</button>
                <div style="text-align: center; margin-bottom: 25px;">
                    <h3 style="color: #007bff; margin: 0 0 10px 0; font-size: 24px;">
                        <i class="fas fa-print"></i> طباعة إحصائيات العقارات
                    </h3>
                    <p style="color: #666; margin: 0; font-size: 16px;">
                        <i class="fas fa-info-circle"></i>
                        اختر المدينة ثم حدد العقارات المراد طباعة إحصائياتها
                    </p>
                </div>

                <div class="form-group" style="margin-bottom: 25px;">
                    <label style="display: block; margin-bottom: 8px; font-weight: bold; color: #333;">
                        <i class="fas fa-city" style="color: #007bff; margin-left: 8px;"></i> اختر المدينة:
                    </label>
                    <select id="printCitySelect" onchange="loadPropertiesForPrint()" style="width: 100%; padding: 12px; border: 2px solid #ddd; border-radius: 8px; font-size: 16px; background: white; transition: border-color 0.3s;">
                        <option value="">-- اختر المدينة --</option>
                        ${cities.map(city => `<option value="${city}">${city}</option>`).join('')}
                    </select>
                </div>

                <div id="printPropertiesContainer" style="display: none;">
                    <div class="form-group" style="margin-bottom: 20px;">
                        <label style="display: block; margin-bottom: 12px; font-weight: bold; color: #333;">
                            <i class="fas fa-building" style="color: #007bff; margin-left: 8px;"></i> اختر العقارات:
                        </label>
                        <div style="background: #f8f9fa; border: 2px solid #e9ecef; border-radius: 8px; padding: 15px; margin-bottom: 15px;">
                            <!-- خانة البحث -->
                            <div style="margin-bottom: 15px;">
                                <div style="position: relative;">
                                    <input type="text" id="propertySearchInput" placeholder="🔍 ابحث عن عقار..."
                                           onkeyup="filterPropertiesForPrint()"
                                           style="width: 100%; padding: 12px 40px 12px 15px; border: 2px solid #dee2e6; border-radius: 8px; font-size: 14px; transition: all 0.3s;">
                                    <i class="fas fa-search" style="position: absolute; left: 15px; top: 50%; transform: translateY(-50%); color: #6c757d;"></i>
                                </div>
                            </div>

                            <div style="display: flex; gap: 10px; margin-bottom: 15px;">
                                <button onclick="selectAllPropertiesForPrint()" style="background: linear-gradient(135deg, #28a745, #20c997); color: white; border: none; padding: 10px 20px; border-radius: 6px; cursor: pointer; font-size: 14px; transition: all 0.3s; flex: 1;">
                                    <i class="fas fa-check-double"></i> تحديد الكل
                                </button>
                                <button onclick="deselectAllPropertiesForPrint()" style="background: linear-gradient(135deg, #dc3545, #c82333); color: white; border: none; padding: 10px 20px; border-radius: 6px; cursor: pointer; font-size: 14px; transition: all 0.3s; flex: 1;">
                                    <i class="fas fa-times"></i> إلغاء التحديد
                                </button>
                                <button onclick="clearPropertySearchForPrint()" style="background: linear-gradient(135deg, #6c757d, #5a6268); color: white; border: none; padding: 10px 20px; border-radius: 6px; cursor: pointer; font-size: 14px; transition: all 0.3s; flex: 1;">
                                    <i class="fas fa-eraser"></i> مسح البحث
                                </button>
                            </div>
                            <div id="printPropertiesList" style="max-height: 300px; overflow-y: auto; background: white; border-radius: 6px; padding: 10px;">
                                <!-- سيتم ملء العقارات هنا -->
                            </div>
                        </div>
                    </div>

                    <!-- اختيار البيانات المراد إضافتها -->
                    <div class="form-group" style="margin-bottom: 20px;">
                        <label style="display: block; margin-bottom: 12px; font-weight: bold; color: #333;">
                            <i class="fas fa-table" style="color: #007bff; margin-left: 8px;"></i> اختر البيانات المراد إضافتها للجدول:
                        </label>
                        <div style="background: #f8f9fa; border: 2px solid #e9ecef; border-radius: 8px; padding: 15px;">
                            <div style="margin-bottom: 15px;">
                                <div style="display: flex; gap: 10px; margin-bottom: 10px;">
                                    <button onclick="selectAllPrintColumns()" style="background: #28a745; color: white; border: none; padding: 8px 15px; border-radius: 4px; cursor: pointer; font-size: 12px;">
                                        <i class="fas fa-check-double"></i> تحديد الكل
                                    </button>
                                    <button onclick="deselectAllPrintColumns()" style="background: #dc3545; color: white; border: none; padding: 8px 15px; border-radius: 4px; cursor: pointer; font-size: 12px;">
                                        <i class="fas fa-times"></i> إلغاء التحديد
                                    </button>
                                    <button onclick="selectBasicColumns()" style="background: #007bff; color: white; border: none; padding: 8px 15px; border-radius: 4px; cursor: pointer; font-size: 12px;">
                                        <i class="fas fa-star"></i> الأساسية فقط
                                    </button>
                                </div>
                            </div>

                            <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 8px; font-size: 13px;">
                                <!-- البيانات الأساسية -->
                                <div style="grid-column: span 3; background: #e3f2fd; padding: 8px; border-radius: 4px; margin-bottom: 8px;">
                                    <strong style="color: #1976d2;">📋 البيانات الأساسية</strong>
                                </div>
                                <label class="data-option-item">
                                    <input type="checkbox" id="includeUnitNumber" checked class="data-option-checkbox">
                                    <span>رقم الوحدة</span>
                                </label>
                                <label class="data-option-item">
                                    <input type="checkbox" id="includeTenantName" checked class="data-option-checkbox">
                                    <span>اسم المستأجر</span>
                                </label>
                                <label class="data-option-item">
                                    <input type="checkbox" id="includeContractNumber" checked class="data-option-checkbox">
                                    <span>رقم العقد</span>
                                </label>

                                <!-- التواريخ -->
                                <div style="grid-column: span 3; background: #e8f5e8; padding: 8px; border-radius: 4px; margin: 8px 0;">
                                    <strong style="color: #388e3c;">📅 التواريخ</strong>
                                </div>
                                <label class="data-option-item">
                                    <input type="checkbox" id="includeStartDate" checked class="data-option-checkbox">
                                    <span>تاريخ البداية</span>
                                </label>
                                <label class="data-option-item">
                                    <input type="checkbox" id="includeEndDate" checked class="data-option-checkbox">
                                    <span>تاريخ النهاية</span>
                                </label>
                                <label class="data-option-item">
                                    <input type="checkbox" id="includeLastUpdate" class="data-option-checkbox">
                                    <span>آخر تحديث</span>
                                </label>

                                <!-- البيانات المالية -->
                                <div style="grid-column: span 3; background: #fff3e0; padding: 8px; border-radius: 4px; margin: 8px 0;">
                                    <strong style="color: #f57c00;">💰 البيانات المالية</strong>
                                </div>
                                <label class="data-option-item">
                                    <input type="checkbox" id="includeTotalAmount" checked class="data-option-checkbox">
                                    <span>الإجمالي قبل الضريبة</span>
                                </label>
                                <label class="data-option-item">
                                    <input type="checkbox" id="includePaidAmount" class="data-option-checkbox">
                                    <span>المبلغ المدفوع</span>
                                </label>
                                <label class="data-option-item">
                                    <input type="checkbox" id="includeRemainingAmount" class="data-option-checkbox">
                                    <span>المبلغ المتبقي</span>
                                </label>
                                <label class="data-option-item">
                                    <input type="checkbox" id="includeInstallmentCount" class="data-option-checkbox">
                                    <span>عدد الأقساط</span>
                                </label>
                                <label class="data-option-item">
                                    <input type="checkbox" id="includeContractType" class="data-option-checkbox">
                                    <span>نوع العقد</span>
                                </label>

                                <!-- معلومات العقار -->
                                <div style="grid-column: span 3; background: #f3e5f5; padding: 8px; border-radius: 4px; margin: 8px 0;">
                                    <strong style="color: #7b1fa2;">🏢 معلومات العقار</strong>
                                </div>
                                <label class="data-option-item">
                                    <input type="checkbox" id="includeArea" class="data-option-checkbox">
                                    <span>المساحة</span>
                                </label>
                                <label class="data-option-item">
                                    <input type="checkbox" id="includeOwner" class="data-option-checkbox">
                                    <span>المالك</span>
                                </label>
                                <label class="data-option-item">
                                    <input type="checkbox" id="includeDeedNumber" class="data-option-checkbox">
                                    <span>رقم الصك</span>
                                </label>
                                <label class="data-option-item">
                                    <input type="checkbox" id="includeDeedArea" class="data-option-checkbox">
                                    <span>مساحة الصك</span>
                                </label>
                                <label class="data-option-item">
                                    <input type="checkbox" id="includeRegistryNumber" class="data-option-checkbox">
                                    <span>السجل العيني</span>
                                </label>
                                <label class="data-option-item">
                                    <input type="checkbox" id="includeLocation" class="data-option-checkbox">
                                    <span>موقع العقار</span>
                                </label>

                                <!-- معلومات إضافية -->
                                <div style="grid-column: span 3; background: #e0f2f1; padding: 8px; border-radius: 4px; margin: 8px 0;">
                                    <strong style="color: #00695c;">📞 معلومات إضافية</strong>
                                </div>
                                <label class="data-option-item">
                                    <input type="checkbox" id="includeTenantPhone" class="data-option-checkbox">
                                    <span>رقم جوال المستأجر</span>
                                </label>
                                <label class="data-option-item">
                                    <input type="checkbox" id="includeTenantPhone2" class="data-option-checkbox">
                                    <span>رقم جوال إضافي</span>
                                </label>
                                <label class="data-option-item">
                                    <input type="checkbox" id="includeElectricityAccount" class="data-option-checkbox">
                                    <span>رقم حساب الكهرباء</span>
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="form-actions" style="text-align: center; margin-top: 25px; padding-top: 20px; border-top: 2px solid #e9ecef;">
                        <button onclick="generatePropertyStatisticsPDF()" style="background: linear-gradient(135deg, #007bff, #0056b3); color: white; border: none; padding: 15px 30px; border-radius: 8px; cursor: pointer; font-size: 18px; font-weight: bold; transition: all 0.3s; box-shadow: 0 4px 8px rgba(0,123,255,0.3);">
                            <i class="fas fa-file-pdf" style="margin-left: 8px;"></i> إنشاء ملف PDF
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;

    document.body.insertAdjacentHTML('beforeend', html);
}

function loadPropertiesForPrint() {
    const citySelect = document.getElementById('printCitySelect');
    const propertiesContainer = document.getElementById('printPropertiesContainer');
    const propertiesList = document.getElementById('printPropertiesList');

    const selectedCity = citySelect.value;

    if (!selectedCity) {
        propertiesContainer.style.display = 'none';
        return;
    }

    // الحصول على العقارات في المدينة المختارة
    const cityProperties = properties.filter(p => p.المدينة === selectedCity);
    const uniqueProperties = [...new Set(cityProperties.map(p => p['اسم العقار']))].filter(Boolean);

    if (uniqueProperties.length === 0) {
        propertiesList.innerHTML = '<p style="text-align: center; color: #666;">لا توجد عقارات في هذه المدينة</p>';
        propertiesContainer.style.display = 'block';
        return;
    }

    // إنشاء قائمة العقارات مع checkboxes
    let html = '';
    uniqueProperties.forEach((propertyName, index) => {
        const unitsCount = cityProperties.filter(p => p['اسم العقار'] === propertyName).length;
        const rentedUnits = cityProperties.filter(p => p['اسم العقار'] === propertyName && p['اسم المستأجر'] && p['اسم المستأجر'].trim() !== '').length;
        const emptyUnits = unitsCount - rentedUnits;

        html += `
            <div style="margin-bottom: 12px; padding: 15px; border: 2px solid #e9ecef; border-radius: 8px; background: white; transition: all 0.3s; box-shadow: 0 2px 4px rgba(0,0,0,0.1);" onmouseover="this.style.borderColor='#007bff'; this.style.boxShadow='0 4px 8px rgba(0,123,255,0.2)'" onmouseout="this.style.borderColor='#e9ecef'; this.style.boxShadow='0 2px 4px rgba(0,0,0,0.1)'">
                <label style="display: flex; align-items: center; cursor: pointer; width: 100%;">
                    <input type="checkbox" value="${propertyName}" style="margin-left: 15px; transform: scale(1.2);" onchange="updatePrintSelection()">
                    <div style="flex: 1;">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                            <strong style="color: #007bff; font-size: 16px;">${propertyName}</strong>
                            <span style="background: #007bff; color: white; padding: 4px 8px; border-radius: 12px; font-size: 12px; font-weight: bold;">
                                ${unitsCount} وحدة
                            </span>
                        </div>
                        <div style="display: flex; gap: 15px; font-size: 14px;">
                            <span style="color: #28a745;">
                                <i class="fas fa-check-circle" style="margin-left: 5px;"></i>
                                مؤجرة: ${rentedUnits}
                            </span>
                            <span style="color: #ffc107;">
                                <i class="fas fa-home" style="margin-left: 5px;"></i>
                                فارغة: ${emptyUnits}
                            </span>
                        </div>
                    </div>
                </label>
            </div>
        `;
    });

    propertiesList.innerHTML = html;
    propertiesContainer.style.display = 'block';
}

function selectAllPropertiesForPrint() {
    // تحديد فقط العقارات المرئية (غير المخفية بالبحث)
    const visibleCheckboxes = document.querySelectorAll('#printPropertiesList > div:not([style*="display: none"]) input[type="checkbox"]');
    visibleCheckboxes.forEach(checkbox => {
        checkbox.checked = true;
    });
    updatePrintSelection();
}

function deselectAllPropertiesForPrint() {
    // إلغاء تحديد فقط العقارات المرئية (غير المخفية بالبحث)
    const visibleCheckboxes = document.querySelectorAll('#printPropertiesList > div:not([style*="display: none"]) input[type="checkbox"]');
    visibleCheckboxes.forEach(checkbox => {
        checkbox.checked = false;
    });
    updatePrintSelection();
}

function updatePrintSelection() {
    const checkboxes = document.querySelectorAll('#printPropertiesList input[type="checkbox"]:checked');
    const selectedCount = checkboxes.length;

    // تحديث نص الزر ليعرض عدد العقارات المحددة
    const generateButton = document.querySelector('button[onclick="generatePropertyStatisticsPDF()"]');
    if (generateButton) {
        if (selectedCount > 0) {
            generateButton.innerHTML = `<i class="fas fa-file-pdf" style="margin-left: 8px;"></i> إنشاء ملف PDF (${selectedCount} عقار)`;
            generateButton.style.background = 'linear-gradient(135deg, #28a745, #20c997)';
        } else {
            generateButton.innerHTML = `<i class="fas fa-file-pdf" style="margin-left: 8px;"></i> إنشاء ملف PDF`;
            generateButton.style.background = 'linear-gradient(135deg, #007bff, #0056b3)';
        }
    }

    console.log(`تم تحديد ${selectedCount} عقار للطباعة`);
}

function selectAllPrintColumns() {
    const checkboxes = document.querySelectorAll('[id^="include"]:not([id*="Property"])');
    checkboxes.forEach(checkbox => {
        checkbox.checked = true;
    });
}

function deselectAllPrintColumns() {
    const checkboxes = document.querySelectorAll('[id^="include"]:not([id*="Property"])');
    checkboxes.forEach(checkbox => {
        checkbox.checked = false;
    });
}

function selectBasicColumns() {
    // إلغاء تحديد الكل أولاً
    deselectAllPrintColumns();

    // تحديد الأعمدة الأساسية فقط
    const basicColumns = [
        'includeUnitNumber',
        'includeTenantName',
        'includeContractNumber',
        'includeStartDate',
        'includeEndDate',
        'includeTotalAmount'
    ];

    basicColumns.forEach(id => {
        const checkbox = document.getElementById(id);
        if (checkbox) {
            checkbox.checked = true;
        }
    });
}

function filterPropertiesForPrint() {
    const searchTerm = document.getElementById('propertySearchInput').value.toLowerCase().trim();
    const propertyItems = document.querySelectorAll('#printPropertiesList > div:not(#noResultsMessage):not(#searchResultsInfo)');

    let visibleCount = 0;
    const totalCount = propertyItems.length;

    propertyItems.forEach(item => {
        const propertyName = item.querySelector('strong').textContent.toLowerCase();
        const isVisible = searchTerm === '' || propertyName.includes(searchTerm);

        item.style.display = isVisible ? 'block' : 'none';
        if (isVisible) visibleCount++;
    });

    // إزالة الرسائل السابقة
    const existingMessage = document.getElementById('noResultsMessage');
    const existingInfo = document.getElementById('searchResultsInfo');
    if (existingMessage) existingMessage.remove();
    if (existingInfo) existingInfo.remove();

    // إظهار معلومات النتائج
    if (searchTerm !== '') {
        const resultsInfo = document.createElement('div');
        resultsInfo.id = 'searchResultsInfo';

        if (visibleCount === 0) {
            resultsInfo.innerHTML = `
                <div class="no-results-message">
                    <i class="fas fa-search"></i>
                    <p>لم يتم العثور على عقارات تحتوي على "<strong>${searchTerm}</strong>"</p>
                    <small>جرب البحث بكلمات أخرى أو امسح البحث لعرض جميع العقارات</small>
                </div>
            `;
        } else {
            resultsInfo.innerHTML = `
                <div style="background: #d4edda; border: 1px solid #c3e6cb; color: #155724; padding: 10px; border-radius: 6px; margin-bottom: 10px; text-align: center;">
                    <i class="fas fa-check-circle"></i>
                    تم العثور على <strong>${visibleCount}</strong> من أصل <strong>${totalCount}</strong> عقار
                </div>
            `;
        }

        document.getElementById('printPropertiesList').insertBefore(resultsInfo, document.getElementById('printPropertiesList').firstChild);
    }

    // تحديث عداد التحديد
    updatePrintSelection();
}

function clearPropertySearchForPrint() {
    document.getElementById('propertySearchInput').value = '';
    filterPropertiesForPrint();
}

function formatUnitNumbers(unitNumbers) {
    // تنسيق أرقام الوحدات لتكون أكثر قابلية للقراءة
    const numbers = unitNumbers.split('، ');
    if (numbers.length <= 3) {
        return unitNumbers;
    } else if (numbers.length <= 6) {
        // تقسيم إلى سطرين
        const mid = Math.ceil(numbers.length / 2);
        const firstLine = numbers.slice(0, mid).join('، ');
        const secondLine = numbers.slice(mid).join('، ');
        return `${firstLine}<br>${secondLine}`;
    } else {
        // تقسيم إلى ثلاثة أسطر
        const third = Math.ceil(numbers.length / 3);
        const firstLine = numbers.slice(0, third).join('، ');
        const secondLine = numbers.slice(third, third * 2).join('، ');
        const thirdLine = numbers.slice(third * 2).join('، ');
        return `${firstLine}<br>${secondLine}<br>${thirdLine}`;
    }
}

function generateSeparateReportHTML(selectedCity, selectedProperties) {
    // الحصول على البيانات المحددة للإضافة
    const includeUnitNumber = document.getElementById('includeUnitNumber')?.checked ?? true;
    const includeTenantName = document.getElementById('includeTenantName')?.checked ?? true;
    const includeContractNumber = document.getElementById('includeContractNumber')?.checked ?? true;
    const includeStartDate = document.getElementById('includeStartDate')?.checked ?? true;
    const includeEndDate = document.getElementById('includeEndDate')?.checked ?? true;
    const includeLastUpdate = document.getElementById('includeLastUpdate')?.checked ?? false;
    const includeTotalAmount = document.getElementById('includeTotalAmount')?.checked ?? true;
    const includePaidAmount = document.getElementById('includePaidAmount')?.checked ?? false;
    const includeRemainingAmount = document.getElementById('includeRemainingAmount')?.checked ?? false;
    const includeInstallmentCount = document.getElementById('includeInstallmentCount')?.checked ?? false;
    const includeContractType = document.getElementById('includeContractType')?.checked ?? false;
    const includeArea = document.getElementById('includeArea')?.checked ?? false;
    const includeOwner = document.getElementById('includeOwner')?.checked ?? false;
    const includeDeedNumber = document.getElementById('includeDeedNumber')?.checked ?? false;
    const includeDeedArea = document.getElementById('includeDeedArea')?.checked ?? false;
    const includeRegistryNumber = document.getElementById('includeRegistryNumber')?.checked ?? false;
    const includeLocation = document.getElementById('includeLocation')?.checked ?? false;
    const includeTenantPhone = document.getElementById('includeTenantPhone')?.checked ?? false;
    const includeTenantPhone2 = document.getElementById('includeTenantPhone2')?.checked ?? false;
    const includeElectricityAccount = document.getElementById('includeElectricityAccount')?.checked ?? false;

    // حساب الإحصائيات العامة (مثل إحصائيات العقار)
    let totalUnits = 0;
    let totalRentedUnits = 0;
    let totalEmptyUnits = 0;
    let totalExpiredUnits = 0;
    let totalCommercial = 0;
    let totalResidential = 0;
    let propertyDetails = [];

    // تجميع العقود الفريدة حسب رقم العقد (نفس طريقة الإحصائيات الأصلية)
    const uniqueContracts = {};
    const today = new Date();

    selectedProperties.forEach(propertyName => {
        const propertyUnits = properties.filter(p =>
            p.المدينة === selectedCity && p['اسم العقار'] === propertyName
        );

        totalUnits += propertyUnits.length;

        // جمع معلومات العقار (الصك والسجل العيني)
        if (propertyUnits.length > 0) {
            const firstUnit = propertyUnits[0];
            propertyDetails.push({
                name: propertyName,
                deedNumber: firstUnit['رقم الصك'] || 'غير محدد',
                deedArea: firstUnit['مساحةالصك'] || firstUnit['مساحة الصك'] || 'غير محدد',
                registryNumber: firstUnit['السجل العيني '] || firstUnit['رقم السجل العقاري'] || 'غير محدد'
            });
        }

        propertyUnits.forEach(unit => {
            if (unit['اسم المستأجر'] && unit['اسم المستأجر'].trim() !== '') {
                // تجميع العقود الفريدة حسب رقم العقد (نفس طريقة الإحصائيات الأصلية)
                const contractKey = `${unit['رقم العقد']}_${unit['اسم المستأجر']}`;

                if (!uniqueContracts[contractKey]) {
                    uniqueContracts[contractKey] = true;
                    totalRentedUnits++;

                    // حساب الإجمالي بطريقة ذكية (نفس طريقة الإحصائيات الأصلية)
                    const smartTotal = calculateSmartTotal(unit);
                    const totalAmount = smartTotal.amount;

                    if (unit['نوع العقد'] === 'ضريبي') {
                        totalCommercial += totalAmount;
                    } else {
                        totalResidential += totalAmount;
                    }

                    // تشخيص للتأكد من القيم
                    console.log(`✅ عقد ${unit['رقم العقد']} - ${unit['اسم المستأجر']}: ${totalAmount.toLocaleString()} ريال (${smartTotal.source})`);
                }
            } else {
                totalEmptyUnits++;
            }
        });
    });

    // حساب الإجماليات المالية (نفس طريقة الإحصائيات الأصلية)
    const taxableBase = totalCommercial / 1.15;
    const vat = taxableBase * 0.15;
    const afterTaxCommercial = taxableBase + vat;

    // تشخيص إجمالي المبالغ
    console.log(`📊 إحصائيات PDF - تجاري قبل الضريبة: ${taxableBase.toLocaleString()} ريال`);
    console.log(`📊 إحصائيات PDF - ضريبة التجاري: ${vat.toLocaleString()} ريال`);
    console.log(`📊 إحصائيات PDF - تجاري بعد الضريبة: ${afterTaxCommercial.toLocaleString()} ريال`);
    console.log(`📊 إحصائيات PDF - إجمالي سكني: ${totalResidential.toLocaleString()} ريال`);
    console.log(`📊 إحصائيات PDF - عدد الوحدات المؤجرة: ${totalRentedUnits}`);

    // إنشاء HTML للصفحة الأولى (Portrait)
    let firstPageHTML = `
        <div style="font-family: 'Arial', sans-serif; direction: rtl; color: #333; line-height: 1.5; width: 210mm; height: 297mm; padding: 15mm; background: white; box-sizing: border-box; position: relative;">
            <!-- رأس التقرير -->
            <div style="text-align: center; margin-bottom: 25px; border-bottom: 3px solid #007bff; padding-bottom: 15px;">
                <h1 style="color: #007bff; font-size: 24px; margin: 0 0 8px 0; font-weight: bold;">
                    تقرير إحصائيات العقارات
                </h1>
                <h2 style="color: #666; font-size: 18px; margin: 0 0 8px 0;">
                    شركة السنيدي العقارية
                </h2>
                <div style="background: #f8f9fa; padding: 12px; border-radius: 6px; margin-top: 15px;">
                    <p style="margin: 3px 0; font-size: 14px;"><strong>المدينة:</strong> ${selectedCity}</p>
                    <p style="margin: 3px 0; font-size: 14px;"><strong>تاريخ التقرير:</strong> ${new Date().toLocaleDateString('ar-SA')}</p>
                    <p style="margin: 3px 0; font-size: 14px;"><strong>عدد العقارات:</strong> ${selectedProperties.length}</p>
                </div>
            </div>

            <!-- معلومات الصكوك والسجلات العينية -->
            <div style="margin-bottom: 25px;">
                <h2 style="color: #007bff; font-size: 18px; margin-bottom: 15px; border-bottom: 2px solid #007bff; padding-bottom: 8px;">
                    📋 معلومات الصكوك والسجلات العينية
                </h2>
                <div style="display: grid; grid-template-columns: repeat(1, 1fr); gap: 10px;">
    `;

    // إضافة معلومات كل عقار للصفحة الأولى
    propertyDetails.forEach((property, index) => {
        firstPageHTML += `
            <div style="background: #f8f9fa; border: 1px solid #e9ecef; border-radius: 6px; padding: 12px; border-right: 4px solid #007bff; margin-bottom: 8px;">
                <h3 style="color: #007bff; margin: 0 0 10px 0; font-size: 14px; font-weight: bold;">
                    🏢 ${property.name}
                </h3>
                <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 8px; font-size: 12px;">
                    <div style="background: white; padding: 8px; border-radius: 4px; border: 1px solid #dee2e6;">
                        <strong style="color: #6f42c1; font-size: 11px;">📄 رقم الصك:</strong><br>
                        <span style="font-size: 12px; color: #495057; font-weight: bold;">${property.deedNumber}</span>
                    </div>
                    <div style="background: white; padding: 8px; border-radius: 4px; border: 1px solid #dee2e6;">
                        <strong style="color: #20c997; font-size: 11px;">📐 مساحة الصك:</strong><br>
                        <span style="font-size: 12px; color: #495057; font-weight: bold;">${property.deedArea}</span>
                    </div>
                    <div style="background: white; padding: 8px; border-radius: 4px; border: 1px solid #dee2e6;">
                        <strong style="color: #fd7e14; font-size: 11px;">📋 السجل العيني:</strong><br>
                        <span style="font-size: 12px; color: #495057; font-weight: bold;">${property.registryNumber}</span>
                    </div>
                </div>
            </div>
        `;
    });

    const firstPageHTMLEnd = `
                </div>
            </div>

            <!-- إحصائيات الوحدات -->
            <div style="margin-bottom: 25px;">
                <h2 style="color: #007bff; font-size: 18px; margin-bottom: 15px; border-bottom: 2px solid #007bff; padding-bottom: 8px;">
                    📊 إحصائيات الوحدات
                </h2>
                <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 12px; margin-bottom: 15px;">
                    <div style="background: linear-gradient(135deg, #007bff, #0056b3); color: white; padding: 15px; border-radius: 8px; text-align: center;">
                        <h3 style="margin: 0 0 8px 0; font-size: 14px;">إجمالي الوحدات</h3>
                        <p style="margin: 0; font-size: 24px; font-weight: bold;">${totalUnits}</p>
                    </div>
                    <div style="background: linear-gradient(135deg, #28a745, #1e7e34); color: white; padding: 15px; border-radius: 8px; text-align: center;">
                        <h3 style="margin: 0 0 8px 0; font-size: 14px;">الوحدات المؤجرة</h3>
                        <p style="margin: 0; font-size: 24px; font-weight: bold;">${totalRentedUnits}</p>
                    </div>
                    <div style="background: linear-gradient(135deg, #ffc107, #e0a800); color: white; padding: 15px; border-radius: 8px; text-align: center;">
                        <h3 style="margin: 0 0 8px 0; font-size: 14px;">الوحدات الفارغة</h3>
                        <p style="margin: 0; font-size: 24px; font-weight: bold;">${totalEmptyUnits}</p>
                    </div>
                </div>
            </div>

            <!-- الإجماليات المالية -->
            <div style="margin-bottom: 25px;">
                <h2 style="color: #007bff; font-size: 18px; margin-bottom: 15px; border-bottom: 2px solid #007bff; padding-bottom: 8px;">
                    💰 الإجماليات المالية
                </h2>
                <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 12px; margin-bottom: 15px;">
                    <div style="background: linear-gradient(135deg, #2a4b9b, #1e3a8a); color: white; padding: 15px; border-radius: 8px; text-align: center;">
                        <h3 style="margin: 0 0 8px 0; font-size: 14px;">تجاري قبل الضريبة</h3>
                        <p style="margin: 0; font-size: 20px; font-weight: bold;">${taxableBase.toLocaleString(undefined, {maximumFractionDigits:2})} ريال</p>
                    </div>
                    <div style="background: linear-gradient(135deg, #e46e6d, #dc3545); color: white; padding: 15px; border-radius: 8px; text-align: center;">
                        <h3 style="margin: 0 0 8px 0; font-size: 14px;">ضريبة التجاري</h3>
                        <p style="margin: 0; font-size: 20px; font-weight: bold;">${vat.toLocaleString(undefined, {maximumFractionDigits:2})} ريال</p>
                    </div>
                    <div style="background: linear-gradient(135deg, #05940e, #28a745); color: white; padding: 15px; border-radius: 8px; text-align: center;">
                        <h3 style="margin: 0 0 8px 0; font-size: 14px;">تجاري بعد الضريبة</h3>
                        <p style="margin: 0; font-size: 20px; font-weight: bold;">${afterTaxCommercial.toLocaleString(undefined, {maximumFractionDigits:2})} ريال</p>
                    </div>
                    <div style="background: linear-gradient(135deg, #f59e42, #fd7e14); color: white; padding: 15px; border-radius: 8px; text-align: center;">
                        <h3 style="margin: 0 0 8px 0; font-size: 14px;">إجمالي سكني</h3>
                        <p style="margin: 0; font-size: 20px; font-weight: bold;">${totalResidential.toLocaleString(undefined, {maximumFractionDigits:2})} ريال</p>
                    </div>
                </div>
            </div>

            <!-- تذييل الصفحة الأولى -->
            <div style="position: absolute; bottom: 15mm; left: 15mm; right: 15mm; text-align: center; border-top: 2px solid #007bff; padding-top: 10px; color: #666;">
                <p style="margin: 3px 0; font-size: 12px; font-weight: bold;">شركة السنيدي العقارية</p>
                <p style="margin: 3px 0; font-size: 10px;">تاريخ الإنشاء: ${new Date().toLocaleString('ar-SA')}</p>
                <p style="margin: 3px 0; font-size: 10px;">الصفحة 1 من التقرير - معلومات الصكوك والإحصائيات</p>
            </div>
        </div>
    `;

    // إنشاء HTML للصفحات التالية (Landscape)
    const detailsPageHTML = generateDetailsPageHTML(selectedCity, selectedProperties, {
        includeUnitNumber, includeTenantName, includeContractNumber, includeStartDate, includeEndDate,
        includeLastUpdate, includeTotalAmount, includePaidAmount, includeRemainingAmount,
        includeInstallmentCount, includeContractType, includeArea, includeOwner,
        includeDeedNumber, includeDeedArea, includeRegistryNumber, includeLocation,
        includeTenantPhone, includeTenantPhone2, includeElectricityAccount
    });

    return {
        firstPageHTML: firstPageHTML + firstPageHTMLEnd,
        detailsPageHTML: detailsPageHTML
    };
}

function generateDetailsPageHTML(selectedCity, selectedProperties, options) {
    const {
        includeUnitNumber, includeTenantName, includeContractNumber, includeStartDate, includeEndDate,
        includeLastUpdate, includeTotalAmount, includePaidAmount, includeRemainingAmount,
        includeInstallmentCount, includeContractType, includeArea, includeOwner,
        includeDeedNumber, includeDeedArea, includeRegistryNumber, includeLocation,
        includeTenantPhone, includeTenantPhone2, includeElectricityAccount
    } = options;

    // جمع جميع المستأجرين من جميع العقارات
    let allTenants = [];

    selectedProperties.forEach(propertyName => {
        const propertyUnits = properties.filter(p =>
            p.المدينة === selectedCity && p['اسم العقار'] === propertyName
        );

        const rentedUnits = propertyUnits.filter(u => u['اسم المستأجر'] && u['اسم المستأجر'].trim() !== '');

        // دمج الوحدات حسب رقم العقد
        const contractGroups = {};
        rentedUnits.forEach(unit => {
            const contractNumber = unit['رقم العقد'] || 'غير محدد';
            if (!contractGroups[contractNumber]) {
                contractGroups[contractNumber] = [];
            }
            contractGroups[contractNumber].push(unit);
        });

        // إضافة كل عقد كمستأجر منفصل
        Object.entries(contractGroups).forEach(([contractNumber, units]) => {
            allTenants.push({
                contractNumber,
                units,
                propertyName,
                tenantName: units[0]['اسم المستأجر']
            });
        });
    });

    // تقسيم المستأجرين إلى صفحات (4 مستأجرين لكل صفحة)
    const tenantsPerPage = 4;
    const pages = [];
    for (let i = 0; i < allTenants.length; i += tenantsPerPage) {
        pages.push(allTenants.slice(i, i + tenantsPerPage));
    }

    let html = '';

    // إنشاء صفحات بتنسيق Portrait (4 مستأجرين لكل صفحة)
    pages.forEach((pageTenantsArray, pageIndex) => {
        html += `
            <div style="font-family: 'Arial', sans-serif; direction: rtl; color: #333; line-height: 1.6; width: 210mm; height: 297mm; padding: 15mm; background: white; box-sizing: border-box; page-break-after: always;">
                <!-- رأس الصفحة -->
                <div style="text-align: center; margin-bottom: 25px; border-bottom: 3px solid #007bff; padding-bottom: 15px;">
                    <h1 style="color: #007bff; font-size: 24px; margin: 0 0 8px 0; font-weight: bold;">
                        📋 تفاصيل الوحدات المؤجرة
                    </h1>
                    <p style="color: #666; font-size: 14px; margin: 0;">
                        الصفحة ${pageIndex + 1} من ${pages.length}
                    </p>
                </div>
        `;

        // عرض 4 مستأجرين في هذه الصفحة
        pageTenantsArray.forEach((tenant, tenantIndex) => {
            const { contractNumber, units, propertyName, tenantName } = tenant;

            html += `
                <div style="margin-bottom: 30px; border: 2px solid #e9ecef; border-radius: 12px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
                    <!-- رأس بطاقة المستأجر -->
                    <div style="background: linear-gradient(135deg, #007bff, #0056b3); color: white; padding: 15px; text-align: center;">
                        <h2 style="margin: 0; font-size: 18px; font-weight: bold;">
                            👤 ${tenantName}
                        </h2>
                        <p style="margin: 5px 0 0 0; font-size: 14px; opacity: 0.9;">
                            🏢 ${propertyName} | 📋 عقد رقم: ${contractNumber}
                        </p>
                    </div>

                    <!-- محتوى بطاقة المستأجر -->
                    <div style="padding: 20px; background: white;">
                        <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px;">
            `;

            // إضافة تفاصيل كل وحدة في العقد
            units.forEach((unit, unitIndex) => {
                if (unitIndex > 0) {
                    html += `<div style="grid-column: 1 / -1; border-top: 1px solid #e9ecef; margin: 10px 0;"></div>`;
                }

                // معلومات الوحدة
                if (includeUnitNumber && unit['رقم  الوحدة ']) {
                    html += `
                        <div style="display: flex; align-items: center; gap: 8px;">
                            <i class="fas fa-hashtag" style="color: #007bff; width: 16px;"></i>
                            <span style="font-weight: bold; color: #333;">رقم الوحدة:</span>
                            <span style="color: #666;">${unit['رقم  الوحدة ']}</span>
                        </div>
                    `;
                }

                if (includeContractType && unit['نوع العقد']) {
                    html += `
                        <div style="display: flex; align-items: center; gap: 8px;">
                            <i class="fas fa-file-contract" style="color: #28a745; width: 16px;"></i>
                            <span style="font-weight: bold; color: #333;">نوع العقد:</span>
                            <span style="color: #666;">${unit['نوع العقد']}</span>
                        </div>
                    `;
                }

                if (includeStartDate && unit['تاريخ البداية']) {
                    html += `
                        <div style="display: flex; align-items: center; gap: 8px;">
                            <i class="fas fa-calendar-plus" style="color: #17a2b8; width: 16px;"></i>
                            <span style="font-weight: bold; color: #333;">تاريخ البداية:</span>
                            <span style="color: #666;">${unit['تاريخ البداية']}</span>
                        </div>
                    `;
                }

                if (includeEndDate && unit['تاريخ النهاية']) {
                    html += `
                        <div style="display: flex; align-items: center; gap: 8px;">
                            <i class="fas fa-calendar-minus" style="color: #dc3545; width: 16px;"></i>
                            <span style="font-weight: bold; color: #333;">تاريخ النهاية:</span>
                            <span style="color: #666;">${unit['تاريخ النهاية']}</span>
                        </div>
                    `;
                }

                if (includeTotalAmount && unit['الاجمالى']) {
                    html += `
                        <div style="display: flex; align-items: center; gap: 8px;">
                            <i class="fas fa-money-bill-wave" style="color: #fd7e14; width: 16px;"></i>
                            <span style="font-weight: bold; color: #333;">الإجمالي:</span>
                            <span style="color: #666; font-weight: bold;">${parseFloat(unit['الاجمالى']).toLocaleString()} ريال</span>
                        </div>
                    `;
                }

                if (includeArea && unit['المساحة']) {
                    html += `
                        <div style="display: flex; align-items: center; gap: 8px;">
                            <i class="fas fa-ruler-combined" style="color: #6f42c1; width: 16px;"></i>
                            <span style="font-weight: bold; color: #333;">المساحة:</span>
                            <span style="color: #666;">${unit['المساحة']} م²</span>
                        </div>
                    `;
                }

                // أرقام الهاتف مع روابط قابلة للنقر
                if (includeTenantPhone && unit['رقم الجوال']) {
                    html += `
                        <div style="display: flex; align-items: center; gap: 8px;">
                            <i class="fas fa-phone" style="color: #28a745; width: 16px;"></i>
                            <span style="font-weight: bold; color: #333;">الجوال:</span>
                            <a href="tel:${unit['رقم الجوال']}" style="color: #007bff; text-decoration: none;">${unit['رقم الجوال']}</a>
                        </div>
                    `;
                }

                if (includeTenantPhone2 && unit['رقم الجوال الاضافي']) {
                    html += `
                        <div style="display: flex; align-items: center; gap: 8px;">
                            <i class="fas fa-phone-alt" style="color: #17a2b8; width: 16px;"></i>
                            <span style="font-weight: bold; color: #333;">جوال إضافي:</span>
                            <a href="tel:${unit['رقم الجوال الاضافي']}" style="color: #007bff; text-decoration: none;">${unit['رقم الجوال الاضافي']}</a>
                        </div>
                    `;
                }

                // الموقع مع رابط قابل للنقر
                if (includeLocation && unit['الموقع']) {
                    html += `
                        <div style="display: flex; align-items: center; gap: 8px;">
                            <i class="fas fa-map-marker-alt" style="color: #dc3545; width: 16px;"></i>
                            <span style="font-weight: bold; color: #333;">الموقع:</span>
                            <a href="${unit['الموقع']}" target="_blank" style="color: #007bff; text-decoration: none;">📍 فتح الموقع</a>
                        </div>
                    `;
                }
            });

            html += `
                        </div>
                    </div>
                </div>
            `;
        });

        html += `
            </div>
        `;
    });

    return html;
}




function generateReportHTML(selectedCity, selectedProperties) {
    console.warn('⚠️ تحذير: يتم استخدام الدالة القديمة generateReportHTML بدلاً من generateSeparateReportHTML');
    // الحصول على البيانات المحددة للإضافة
    const includeUnitNumber = document.getElementById('includeUnitNumber')?.checked ?? true;
    const includeTenantName = document.getElementById('includeTenantName')?.checked ?? true;
    const includeContractNumber = document.getElementById('includeContractNumber')?.checked ?? true;
    const includeStartDate = document.getElementById('includeStartDate')?.checked ?? true;
    const includeEndDate = document.getElementById('includeEndDate')?.checked ?? true;
    const includeLastUpdate = document.getElementById('includeLastUpdate')?.checked ?? false;
    const includeTotalAmount = document.getElementById('includeTotalAmount')?.checked ?? true;
    const includePaidAmount = document.getElementById('includePaidAmount')?.checked ?? false;
    const includeRemainingAmount = document.getElementById('includeRemainingAmount')?.checked ?? false;
    const includeInstallmentCount = document.getElementById('includeInstallmentCount')?.checked ?? false;
    const includeContractType = document.getElementById('includeContractType')?.checked ?? false;
    const includeArea = document.getElementById('includeArea')?.checked ?? false;
    const includeOwner = document.getElementById('includeOwner')?.checked ?? false;
    const includeDeedNumber = document.getElementById('includeDeedNumber')?.checked ?? false;
    const includeDeedArea = document.getElementById('includeDeedArea')?.checked ?? false;
    const includeRegistryNumber = document.getElementById('includeRegistryNumber')?.checked ?? false;
    const includeLocation = document.getElementById('includeLocation')?.checked ?? false;
    const includeTenantPhone = document.getElementById('includeTenantPhone')?.checked ?? false;
    const includeTenantPhone2 = document.getElementById('includeTenantPhone2')?.checked ?? false;
    const includeElectricityAccount = document.getElementById('includeElectricityAccount')?.checked ?? false;

    // حساب الإحصائيات العامة
    let totalUnits = 0;
    let totalRentedUnits = 0;
    let totalEmptyUnits = 0;
    let totalAmount = 0;
    let propertyDetails = [];

    selectedProperties.forEach(propertyName => {
        const propertyUnits = properties.filter(p =>
            p.المدينة === selectedCity && p['اسم العقار'] === propertyName
        );

        totalUnits += propertyUnits.length;

        // جمع معلومات العقار (الصك والسجل العيني)
        if (propertyUnits.length > 0) {
            const firstUnit = propertyUnits[0];
            propertyDetails.push({
                name: propertyName,
                deedNumber: firstUnit['رقم الصك'] || 'غير محدد',
                deedArea: firstUnit['مساحةالصك'] || firstUnit['مساحة الصك'] || 'غير محدد',
                registryNumber: firstUnit['السجل العيني '] || firstUnit['رقم السجل العقاري'] || 'غير محدد'
            });
        }

        propertyUnits.forEach(unit => {
            if (unit['اسم المستأجر'] && unit['اسم المستأجر'].trim() !== '') {
                totalRentedUnits++;
                const amount = parseFloat(unit['الاجمالى'] || 0);
                totalAmount += amount;
            } else {
                totalEmptyUnits++;
            }
        });
    });

    let html = `
        <div style="font-family: 'Arial', sans-serif; direction: rtl; color: #333; line-height: 1.6;">
            <!-- رأس التقرير -->
            <div style="text-align: center; margin-bottom: 40px; border-bottom: 3px solid #007bff; padding-bottom: 20px;">
                <h1 style="color: #007bff; font-size: 28px; margin: 0 0 10px 0; font-weight: bold;">
                    تقرير إحصائيات العقارات
                </h1>
                <h2 style="color: #666; font-size: 20px; margin: 0 0 10px 0;">
                    شركة السنيدي العقارية
                </h2>
                <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-top: 20px;">
                    <p style="margin: 5px 0; font-size: 16px;"><strong>المدينة:</strong> ${selectedCity}</p>
                    <p style="margin: 5px 0; font-size: 16px;"><strong>تاريخ التقرير:</strong> ${new Date().toLocaleDateString('ar-SA')}</p>
                    <p style="margin: 5px 0; font-size: 16px;"><strong>عدد العقارات:</strong> ${selectedProperties.length}</p>
                </div>
            </div>

            <!-- الإحصائيات العامة -->
            <div style="margin-bottom: 40px;">
                <h2 style="color: #007bff; font-size: 22px; margin-bottom: 20px; border-bottom: 2px solid #007bff; padding-bottom: 10px;">
                    📊 الإحصائيات العامة
                </h2>
                <div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 20px; margin-bottom: 20px;">
                    <div style="background: linear-gradient(135deg, #007bff, #0056b3); color: white; padding: 20px; border-radius: 10px; text-align: center;">
                        <h3 style="margin: 0 0 10px 0; font-size: 18px;">إجمالي الوحدات</h3>
                        <p style="margin: 0; font-size: 32px; font-weight: bold;">${totalUnits}</p>
                    </div>
                    <div style="background: linear-gradient(135deg, #28a745, #1e7e34); color: white; padding: 20px; border-radius: 10px; text-align: center;">
                        <h3 style="margin: 0 0 10px 0; font-size: 18px;">الوحدات المؤجرة</h3>
                        <p style="margin: 0; font-size: 32px; font-weight: bold;">${totalRentedUnits}</p>
                    </div>
                    <div style="background: linear-gradient(135deg, #ffc107, #e0a800); color: white; padding: 20px; border-radius: 10px; text-align: center;">
                        <h3 style="margin: 0 0 10px 0; font-size: 18px;">الوحدات الفارغة</h3>
                        <p style="margin: 0; font-size: 32px; font-weight: bold;">${totalEmptyUnits}</p>
                    </div>
                    <div style="background: linear-gradient(135deg, #17a2b8, #117a8b); color: white; padding: 20px; border-radius: 10px; text-align: center;">
                        <h3 style="margin: 0 0 10px 0; font-size: 18px;">إجمالي المبالغ</h3>
                        <p style="margin: 0; font-size: 24px; font-weight: bold;">${totalAmount.toLocaleString()} ريال</p>
                    </div>
                </div>

                <!-- معلومات الصكوك والسجلات العينية -->
                <div style="margin-top: 40px;">
                    <h2 style="color: #007bff; font-size: 22px; margin-bottom: 20px; border-bottom: 2px solid #007bff; padding-bottom: 10px;">
                        📋 معلومات الصكوك والسجلات العينية
                    </h2>
                    <div style="display: grid; grid-template-columns: repeat(1, 1fr); gap: 15px;">
            `;

            // إضافة معلومات كل عقار
            propertyDetails.forEach((property, index) => {
                html += `
                    <div style="background: #f8f9fa; border: 2px solid #e9ecef; border-radius: 8px; padding: 20px; border-right: 5px solid #007bff;">
                        <h3 style="color: #007bff; margin: 0 0 15px 0; font-size: 18px;">
                            🏢 ${property.name}
                        </h3>
                        <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px; font-size: 14px;">
                            <div style="background: white; padding: 12px; border-radius: 6px; border: 1px solid #dee2e6;">
                                <strong style="color: #6f42c1;">📄 رقم الصك:</strong><br>
                                <span style="font-size: 16px; color: #495057;">${property.deedNumber}</span>
                            </div>
                            <div style="background: white; padding: 12px; border-radius: 6px; border: 1px solid #dee2e6;">
                                <strong style="color: #20c997;">📐 مساحة الصك:</strong><br>
                                <span style="font-size: 16px; color: #495057;">${property.deedArea}</span>
                            </div>
                            <div style="background: white; padding: 12px; border-radius: 6px; border: 1px solid #dee2e6;">
                                <strong style="color: #fd7e14;">📋 السجل العيني:</strong><br>
                                <span style="font-size: 16px; color: #495057;">${property.registryNumber}</span>
                            </div>
                        </div>
                    </div>
                `;
            });

            html += `
                    </div>
                </div>
            </div>
    `;

    // إضافة فاصل صفحة قبل تفاصيل الوحدات
    html += `
            <div style="page-break-before: always;"></div>

            <!-- تفاصيل الوحدات المؤجرة -->
            <div style="margin-bottom: 30px;">
                <h1 style="color: #007bff; font-size: 24px; text-align: center; margin-bottom: 30px; border-bottom: 3px solid #007bff; padding-bottom: 15px;">
                    📋 تفاصيل الوحدات المؤجرة
                </h1>
    `;

    // تفاصيل كل عقار
    selectedProperties.forEach((propertyName, propertyIndex) => {
        const propertyUnits = properties.filter(p =>
            p.المدينة === selectedCity && p['اسم العقار'] === propertyName
        );

        const rentedUnits = propertyUnits.filter(u => u['اسم المستأجر'] && u['اسم المستأجر'].trim() !== '');

        if (rentedUnits.length > 0) {
            // دمج الوحدات حسب رقم العقد
            const contractGroups = {};
            rentedUnits.forEach(unit => {
                const contractNumber = unit['رقم العقد'] || 'غير محدد';
                if (!contractGroups[contractNumber]) {
                    contractGroups[contractNumber] = [];
                }
                contractGroups[contractNumber].push(unit);
            });

            html += `
                <div style="margin-bottom: 40px; page-break-inside: avoid;">
                    <h2 style="color: #007bff; font-size: 20px; margin-bottom: 20px; background: #f8f9fa; padding: 15px; border-radius: 8px; border-right: 5px solid #007bff;">
                        🏢 ${propertyIndex + 1}. ${propertyName}
                    </h2>

                    <table class="landscape-table" style="width: 100%; border-collapse: collapse; table-layout: auto;">
                        <thead style="position: sticky; top: 0; z-index: 100; background-color: #007bff;">
                            <tr style="background-color: #007bff; color: white;">
            `;

            // إنشاء رؤوس الأعمدة حسب البيانات المحددة
            if (includeUnitNumber) {
                html += `<th>الوحدات</th>`;
            }
            if (includeTenantName) {
                html += `<th>اسم المستأجر</th>`;
            }
            if (includeContractNumber) {
                html += `<th>رقم العقد</th>`;
            }
            if (includeStartDate) {
                html += `<th>تاريخ البداية</th>`;
            }
            if (includeEndDate) {
                html += `<th>تاريخ النهاية</th>`;
            }
            if (includeLastUpdate) {
                html += `<th>آخر تحديث</th>`;
            }
            if (includeTotalAmount) {
                html += `<th>الإجمالي قبل الضريبة</th>`;
            }
            if (includePaidAmount) {
                html += `<th>المبلغ المدفوع</th>`;
            }
            if (includeRemainingAmount) {
                html += `<th>المبلغ المتبقي</th>`;
            }
            if (includeInstallmentCount) {
                html += `<th>عدد الأقساط</th>`;
            }
            if (includeContractType) {
                html += `<th>نوع العقد</th>`;
            }
            if (includeArea) {
                html += `<th>المساحة</th>`;
            }
            if (includeOwner) {
                html += `<th>المالك</th>`;
            }
            if (includeDeedNumber) {
                html += `<th>رقم الصك</th>`;
            }
            if (includeDeedArea) {
                html += `<th>مساحة الصك</th>`;
            }
            if (includeRegistryNumber) {
                html += `<th>السجل العيني</th>`;
            }
            if (includeLocation) {
                html += `<th>موقع العقار</th>`;
            }
            if (includeTenantPhone) {
                html += `<th>رقم جوال المستأجر</th>`;
            }
            if (includeTenantPhone2) {
                html += `<th>رقم جوال إضافي</th>`;
            }
            if (includeElectricityAccount) {
                html += `<th>رقم حساب الكهرباء</th>`;
            }

            html += `
                            </tr>
                        </thead>
                        <tbody>
            `;

            // إضافة صفوف البيانات مع دمج الوحدات بنفس رقم العقد
            let rowIndex = 0;
            Object.keys(contractGroups).forEach(contractNumber => {
                const contractUnits = contractGroups[contractNumber];
                const firstUnit = contractUnits[0];
                const unitNumbers = contractUnits.map(u => u['رقم  الوحدة '] || 'غير محدد').join('، ');
                const formattedUnitNumbers = formatUnitNumbers(unitNumbers);

                // حساب المجاميع للعقد
                const totalAmountForContract = contractUnits.reduce((sum, u) => sum + parseFloat(u['الاجمالى'] || 0), 0);
                const totalPaidForContract = contractUnits.reduce((sum, u) => sum + parseFloat(u['المبلغ المدفوع'] || 0), 0);
                const totalRemainingForContract = contractUnits.reduce((sum, u) => sum + parseFloat(u['المبلغ المتبقي'] || 0), 0);

                const rowColor = rowIndex % 2 === 0 ? '#f8f9fa' : 'white';
                rowIndex++;

                html += `<tr style="background: ${rowColor};">`;

                if (includeUnitNumber) {
                    html += `<td class="units-cell" style="font-weight: bold; color: #007bff;">${formattedUnitNumbers}</td>`;
                }
                if (includeTenantName) {
                    html += `<td>${firstUnit['اسم المستأجر'] || 'غير محدد'}</td>`;
                }
                if (includeContractNumber) {
                    html += `<td style="font-weight: bold; color: #dc3545;">${contractNumber}</td>`;
                }
                if (includeStartDate) {
                    html += `<td>${firstUnit['تاريخ البداية'] || firstUnit['تاريخ بداية العقد'] || 'غير محدد'}</td>`;
                }
                if (includeEndDate) {
                    html += `<td>${firstUnit['تاريخ النهاية'] || firstUnit['تاريخ نهاية العقد'] || 'غير محدد'}</td>`;
                }
                if (includeLastUpdate) {
                    html += `<td>${firstUnit['تاريخ آخر تحديث'] || firstUnit['last_update'] || 'غير محدد'}</td>`;
                }
                if (includeTotalAmount) {
                    html += `<td style="font-weight: bold; color: #28a745;">${totalAmountForContract.toLocaleString()} ريال</td>`;
                }
                if (includePaidAmount) {
                    html += `<td style="font-weight: bold; color: #17a2b8;">${totalPaidForContract.toLocaleString()} ريال</td>`;
                }
                if (includeRemainingAmount) {
                    html += `<td style="font-weight: bold; color: #ffc107;">${totalRemainingForContract.toLocaleString()} ريال</td>`;
                }
                if (includeInstallmentCount) {
                    html += `<td>${firstUnit['عدد الاقساط'] || firstUnit['عدد الاقساط المتبقية'] || 'غير محدد'}</td>`;
                }
                if (includeContractType) {
                    html += `<td>${firstUnit['نوع العقد'] || 'غير محدد'}</td>`;
                }
                if (includeArea) {
                    html += `<td>${firstUnit['المساحة'] || 'غير محدد'}</td>`;
                }
                if (includeOwner) {
                    html += `<td>${firstUnit['المالك'] || 'غير محدد'}</td>`;
                }
                if (includeDeedNumber) {
                    html += `<td>${firstUnit['رقم الصك'] || 'غير محدد'}</td>`;
                }
                if (includeDeedArea) {
                    html += `<td>${firstUnit['مساحةالصك'] || firstUnit['مساحة الصك'] || 'غير محدد'}</td>`;
                }
                if (includeRegistryNumber) {
                    html += `<td>${firstUnit['السجل العيني '] || firstUnit['رقم السجل العقاري'] || 'غير محدد'}</td>`;
                }
                if (includeLocation) {
                    const location = firstUnit['موقع العقار'] || 'غير محدد';
                    let displayLocation;
                    if (location.includes('http')) {
                        displayLocation = `<a href="${location}" target="_blank" style="color: #007bff; text-decoration: underline;">📍 عرض الموقع</a>`;
                    } else {
                        displayLocation = location;
                    }
                    html += `<td>${displayLocation}</td>`;
                }
                if (includeTenantPhone) {
                    const phone = firstUnit['رقم جوال المستأجر'] || firstUnit['رقم الجوال'] || 'غير محدد';
                    let displayPhone;
                    if (phone !== 'غير محدد' && phone.trim() !== '') {
                        // تنظيف رقم الجوال وإضافة رابط للاتصال
                        const cleanPhone = phone.replace(/\D/g, ''); // إزالة كل شيء عدا الأرقام
                        displayPhone = `<a href="tel:${cleanPhone}" style="color: #28a745; text-decoration: underline;">📞 ${phone}</a>`;
                    } else {
                        displayPhone = phone;
                    }
                    html += `<td>${displayPhone}</td>`;
                }
                if (includeTenantPhone2) {
                    const phone2 = firstUnit['رقم جوال إضافي'] || firstUnit['رقم جوال 2'] || 'غير محدد';
                    let displayPhone2;
                    if (phone2 !== 'غير محدد' && phone2.trim() !== '') {
                        // تنظيف رقم الجوال وإضافة رابط للاتصال
                        const cleanPhone2 = phone2.replace(/\D/g, ''); // إزالة كل شيء عدا الأرقام
                        displayPhone2 = `<a href="tel:${cleanPhone2}" style="color: #28a745; text-decoration: underline;">📞 ${phone2}</a>`;
                    } else {
                        displayPhone2 = phone2;
                    }
                    html += `<td>${displayPhone2}</td>`;
                }
                if (includeElectricityAccount) {
                    html += `<td>${firstUnit['رقم حساب الكهرباء'] || 'غير محدد'}</td>`;
                }

                html += `</tr>`;
            });

            html += `
                        </tbody>
                    </table>
                </div>
            `;
        }
    });

    html += `</div>`;

    html += `
            <!-- تذييل التقرير -->
            <div style="margin-top: 40px; text-align: center; border-top: 2px solid #007bff; padding-top: 20px; color: #666;">
                <p style="margin: 5px 0;">تم إنشاء هذا التقرير بواسطة نظام إدارة العقارات</p>
                <p style="margin: 5px 0;">شركة السنيدي العقارية</p>
                <p style="margin: 5px 0; font-size: 12px;">تاريخ الإنشاء: ${new Date().toLocaleString('ar-SA')}</p>
            </div>
        </div>
    `;

    return html;
}

async function generatePropertyStatisticsPDF() {
    const citySelect = document.getElementById('printCitySelect');
    const selectedCity = citySelect.value;

    if (!selectedCity) {
        alert('يرجى اختيار المدينة أولاً');
        return;
    }

    const checkboxes = document.querySelectorAll('#printPropertiesList input[type="checkbox"]:checked');
    const selectedProperties = Array.from(checkboxes).map(cb => cb.value);

    if (selectedProperties.length === 0) {
        alert('يرجى تحديد عقار واحد على الأقل للطباعة');
        return;
    }

    // إظهار رسالة تحميل
    const loadingMessage = document.createElement('div');
    loadingMessage.innerHTML = `
        <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 10000; display: flex; align-items: center; justify-content: center; color: white; font-size: 18px;">
            <div style="text-align: center;">
                <div style="margin-bottom: 20px;">
                    <i class="fas fa-spinner fa-spin" style="font-size: 40px;"></i>
                </div>
                <div>جاري إنشاء ملف PDF...</div>
                <div style="font-size: 14px; margin-top: 10px;">يرجى الانتظار</div>
            </div>
        </div>
    `;
    document.body.appendChild(loadingMessage);

    try {
        // إنشاء HTML للصفحة الأولى والثانية منفصلتين
        const { firstPageHTML, detailsPageHTML } = generateSeparateReportHTML(selectedCity, selectedProperties);

        // إنشاء PDF مختلط
        await createMixedOrientationPDF(firstPageHTML, detailsPageHTML, selectedCity, loadingMessage);

    } catch (error) {
        console.error('خطأ في إنشاء ملف PDF:', error);
        document.body.removeChild(loadingMessage);
        alert('حدث خطأ أثناء إنشاء ملف PDF. يرجى المحاولة مرة أخرى.');
    }
}

async function createMixedOrientationPDF(firstPageHTML, detailsPageHTML, selectedCity, loadingMessage) {
    try {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF('p', 'mm', 'a4'); // البداية بـ Portrait للصفحة الأولى

        // إنشاء الصفحة الأولى (Portrait)
        const firstPageDiv = document.createElement('div');
        firstPageDiv.innerHTML = firstPageHTML;
        firstPageDiv.style.position = 'absolute';
        firstPageDiv.style.left = '-9999px';
        firstPageDiv.style.top = '0';
        firstPageDiv.style.width = '210mm';
        firstPageDiv.style.background = 'white';
        firstPageDiv.style.fontFamily = 'Arial, sans-serif';
        firstPageDiv.style.fontSize = '14px';
        firstPageDiv.style.lineHeight = '1.6';
        firstPageDiv.style.direction = 'rtl';
        firstPageDiv.style.color = '#333';
        document.body.appendChild(firstPageDiv);

        // تحويل الصفحة الأولى إلى صورة
        const firstPageCanvas = await html2canvas(firstPageDiv, {
            scale: 2,
            useCORS: true,
            allowTaint: true,
            backgroundColor: '#ffffff',
            width: firstPageDiv.scrollWidth,
            height: firstPageDiv.scrollHeight
        });

        // إضافة الصفحة الأولى للـ PDF (Portrait)
        const firstPageImgData = firstPageCanvas.toDataURL('image/png');
        const firstPageImgWidth = 210; // A4 Portrait width
        const firstPagePageHeight = 297; // A4 Portrait height
        const firstPageImgHeight = (firstPageCanvas.height * firstPageImgWidth) / firstPageCanvas.width;

        // التأكد من أن الصفحة الأولى تملأ الصفحة بالكامل
        doc.addImage(firstPageImgData, 'PNG', 0, 0, firstPageImgWidth, Math.min(firstPageImgHeight, firstPagePageHeight));

        // تنظيف الصفحة الأولى
        document.body.removeChild(firstPageDiv);

        // إنشاء صفحات التفاصيل (Portrait) - فقط إذا كان هناك محتوى
        if (detailsPageHTML.trim() !== '' && detailsPageHTML.length > 100) {
            const detailsPageDiv = document.createElement('div');
            detailsPageDiv.innerHTML = detailsPageHTML;
            detailsPageDiv.style.position = 'absolute';
            detailsPageDiv.style.left = '-9999px';
            detailsPageDiv.style.top = '0';
            detailsPageDiv.style.width = '297mm';
            detailsPageDiv.style.height = 'auto';
            detailsPageDiv.style.background = 'white';
            detailsPageDiv.style.fontFamily = 'Arial, sans-serif';
            detailsPageDiv.style.fontSize = '11px';
            detailsPageDiv.style.lineHeight = '1.4';
            detailsPageDiv.style.direction = 'rtl';
            detailsPageDiv.style.color = '#333';
            detailsPageDiv.style.boxSizing = 'border-box';
            document.body.appendChild(detailsPageDiv);

            // انتظار قصير للتأكد من تحميل المحتوى
            await new Promise(resolve => setTimeout(resolve, 500));

            // تحويل صفحات التفاصيل إلى صورة
            const detailsPageCanvas = await html2canvas(detailsPageDiv, {
                scale: 2,
                useCORS: true,
                allowTaint: true,
                backgroundColor: '#ffffff',
                width: detailsPageDiv.scrollWidth,
                height: detailsPageDiv.scrollHeight,
                logging: false
            });

            // إضافة صفحات التفاصيل (Landscape)
            const detailsImgData = detailsPageCanvas.toDataURL('image/png');
            const detailsImgWidth = 297; // A4 Landscape width
            const detailsPageHeight = 210; // A4 Landscape height
            const detailsImgHeight = (detailsPageCanvas.height * detailsImgWidth) / detailsPageCanvas.width;

            let heightLeft = detailsImgHeight;
            let position = 0;

            // إضافة صفحة جديدة بوضع Landscape (منفصلة تماماً عن الأولى)
            doc.addPage('a4', 'l'); // 'l' for landscape

            // إضافة الصورة بدءاً من أعلى الصفحة الجديدة
            doc.addImage(detailsImgData, 'PNG', 0, 0, detailsImgWidth, Math.min(detailsImgHeight, detailsPageHeight));
            heightLeft -= detailsPageHeight;

            // إضافة صفحات إضافية إذا لزم الأمر
            while (heightLeft > 0) {
                position = heightLeft - detailsImgHeight;
                doc.addPage('a4', 'l');
                doc.addImage(detailsImgData, 'PNG', 0, position, detailsImgWidth, Math.min(detailsImgHeight, detailsPageHeight));
                heightLeft -= detailsPageHeight;
            }

            // تنظيف صفحات التفاصيل
            document.body.removeChild(detailsPageDiv);
        }

        // حفظ الملف
        const fileName = `تقرير_إحصائيات_العقارات_${selectedCity}_${new Date().toISOString().split('T')[0]}.pdf`;
        doc.save(fileName);

        // تنظيف
        document.body.removeChild(loadingMessage);
        closeModal();

        // إظهار رسالة نجاح
        alert(`تم إنشاء ملف PDF بنجاح! ✅\n\nاسم الملف: ${fileName}\n\n📄 الصفحة الأولى: الإحصائيات العامة ومعلومات الصكوك (عمودي)\n📊 الصفحات التالية: تفاصيل الوحدات المؤجرة (أفقي)\n\n🔗 الروابط قابلة للنقر:\n📞 أرقام الجوال للاتصال المباشر\n📍 مواقع العقارات لفتح الخرائط`);

    } catch (error) {
        console.error('خطأ في إنشاء ملف PDF المختلط:', error);
        document.body.removeChild(loadingMessage);
        alert('حدث خطأ أثناء إنشاء ملف PDF. يرجى المحاولة مرة أخرى.');
    }
}

function showStatusFilterFromDropdown() {
    // استدعاء وظيفة فلتر الحالة الأصلية مباشرة
    try {
        showStatusFilter();
    } catch (error) {
        console.error('خطأ في استدعاء فلتر الحالة:', error);
        // إنشاء فلتر الحالة يدوياً كبديل
        const filterContainer = document.getElementById('headerFilters');
        if (filterContainer) {
            filterContainer.innerHTML = `
                <div class="status-filter-container">
                    <select id="statusFilter" onchange="setStatusFilter(this.value === '' ? null : this.value)" style="padding: 8px; border-radius: 4px; border: 1px solid #ddd;">
                        <option value="">جميع الحالات</option>
                        <option value="فعال">فعال</option>
                        <option value="منتهى">منتهى</option>
                        <option value="على وشك">على وشك</option>
                        <option value="فارغ">فارغ</option>
                    </select>
                </div>
            `;
        }
    }
}

function showAttachmentsManagerFromDropdown() {
    // استدعاء وظيفة إدارة المرفقات الأصلية
    const originalFunction = window.showAttachmentsManager;
    if (originalFunction && typeof originalFunction === 'function') {
        originalFunction();
    } else {
        const oldBtn = document.getElementById('attachmentsManagerBtn');
        if (oldBtn) {
            oldBtn.click();
        }
    }
}

function switchToTableView() {
    // تشغيل نفس وظيفة التبديل للجدول
    if (typeof toggleView === 'function') {
        toggleView('table');
    }
}

function switchToCardView() {
    // تشغيل نفس وظيفة التبديل للبطاقات
    if (typeof toggleView === 'function') {
        toggleView('cards');
    }
}

function showPropertyManagerFromDropdown() {
    // استدعاء وظيفة إدارة العقارات الأصلية
    const originalFunction = window.showPropertyManager;
    if (originalFunction && typeof originalFunction === 'function') {
        originalFunction();
    } else {
        const oldBtn = document.getElementById('propertyManagerBtn');
        if (oldBtn) {
            oldBtn.click();
        }
    }
}

function updateDateSettings() {
    // تشغيل نفس وظيفة تحديث التواريخ
    if (typeof showDateUpdateModal === 'function') {
        showDateUpdateModal();
    } else {
        const oldBtn = document.getElementById('updateDatesBtn');
        if (oldBtn && oldBtn.onclick) {
            oldBtn.onclick();
        }
    }
}

function cleanStorage() {
    // تشغيل نفس وظيفة تنظيف التخزين
    if (typeof showStorageCleanupModal === 'function') {
        showStorageCleanupModal();
    } else {
        const oldBtn = document.getElementById('cleanStorageBtn');
        if (oldBtn && oldBtn.onclick) {
            oldBtn.onclick();
        }
    }
}

function importData() {
    // تشغيل نفس وظيفة استيراد البيانات
    if (typeof showDataImportModal === 'function') {
        showDataImportModal();
    } else {
        const oldBtn = document.getElementById('dataImportBtn');
        if (oldBtn && oldBtn.onclick) {
            oldBtn.onclick();
        }
    }
}

function saveAllData() {
    // حفظ جميع البيانات محلياً
    try {
        if (typeof saveDataLocally === 'function') {
            saveDataLocally();
        } else {
            // حفظ البيانات في localStorage
            localStorage.setItem('properties', JSON.stringify(properties));
            localStorage.setItem('attachments', JSON.stringify(attachments));
            localStorage.setItem('cardAttachments', JSON.stringify(cardAttachments));
        }
        alert('✅ تم حفظ البيانات محلياً بنجاح!');
    } catch (error) {
        console.error('خطأ في حفظ البيانات:', error);
        // تم إزالة رسالة الخطأ حسب طلب المستخدم
    }
}

function repairAllData() {
    // إصلاح البيانات
    if (confirm('هل أنت متأكد من إصلاح البيانات؟ قد يستغرق هذا بعض الوقت.')) {
        try {
            // إعادة حساب الإجماليات
            if (typeof recalculateAllTotals === 'function') {
                recalculateAllTotals();
            }

            // حفظ البيانات
            saveAllData();

            // إعادة تحميل التطبيق
            if (typeof initializeApp === 'function') {
                initializeApp();
            }

            alert('✅ تم إصلاح البيانات بنجاح!');
        } catch (error) {
            console.error('خطأ في إصلاح البيانات:', error);
            // تم إزالة رسالة الخطأ حسب طلب المستخدم
        }
    }
}

function updateSupabaseData() {
    // تحديث بيانات Supabase
    if (typeof updateAllSupabaseData === 'function') {
        updateAllSupabaseData();
    } else if (typeof syncToSupabase === 'function') {
        syncToSupabase();
    } else {
        alert('⚠️ وظيفة تحديث Supabase غير متوفرة حالياً');
    }
}

// ==================== وظائف تحديث الإجماليات ====================

// متغيرات عامة لتحديث الإجماليات
let updateTotalsData = null;
let updateTotalsPreview = [];

// إظهار نافذة تحديث الإجماليات
function showUpdateTotalsModal() {
    const modalHtml = `
        <div class="update-totals-modal" id="updateTotalsModal">
            <div class="update-totals-content">
                <div class="update-totals-header">
                    <h2 class="update-totals-title">
                        <i class="fas fa-calculator"></i>
                        تحديث الإجماليات
                    </h2>
                    <button class="update-totals-close" onclick="closeUpdateTotalsModal()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>

                <div class="totals-upload-zone" onclick="document.getElementById('totalsFileInput').click()">
                    <div class="totals-upload-icon">
                        <i class="fas fa-cloud-upload-alt"></i>
                    </div>
                    <div class="totals-upload-text">
                        اسحب الملف هنا أو انقر للاختيار
                    </div>
                    <div class="totals-upload-hint">
                        يدعم: JSON, Excel (.xlsx, .xls), CSV<br>
                        <small style="color: #6c757d; font-size: 0.8rem;">
                            مثال JSON: [{"رقم الوحدة": 101, "الإجمالي": 50000}]<br>
                            مثال CSV: رقم الوحدة,الإجمالي<br>101,50000
                        </small>
                    </div>
                    <input type="file" id="totalsFileInput" class="totals-file-input"
                           accept=".json,.xlsx,.xls,.csv" onchange="handleTotalsFileUpload(this.files[0])">
                </div>

                <div class="totals-preview" id="totalsPreview">
                    <div class="totals-preview-header">
                        <h4>معاينة البيانات</h4>
                        <span id="totalsPreviewCount"></span>
                    </div>
                    <div class="totals-preview-content">
                        <table class="totals-preview-table" id="totalsPreviewTable">
                            <thead>
                                <tr>
                                    <th>رقم الوحدة</th>
                                    <th>الإجمالي الجديد</th>
                                    <th>الإجمالي الحالي</th>
                                    <th>الحالة</th>
                                </tr>
                            </thead>
                            <tbody id="totalsPreviewBody">
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="totals-actions">
                    <div>
                        <button class="totals-btn totals-btn-secondary" onclick="closeUpdateTotalsModal()">
                            <i class="fas fa-times"></i>
                            إلغاء
                        </button>
                    </div>
                    <div>
                        <button class="totals-btn totals-btn-success" id="applyTotalsBtn"
                                onclick="applyTotalsUpdate()" disabled>
                            <i class="fas fa-check"></i>
                            تطبيق التحديثات
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;

    document.body.insertAdjacentHTML('beforeend', modalHtml);

    // إظهار النافذة مع تأثير
    setTimeout(() => {
        document.getElementById('updateTotalsModal').classList.add('show');
    }, 100);

    // إعداد drag & drop
    setupTotalsDragAndDrop();
}

// إغلاق نافذة تحديث الإجماليات
function closeUpdateTotalsModal() {
    const modal = document.getElementById('updateTotalsModal');
    if (modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            modal.remove();
            updateTotalsData = null;
            updateTotalsPreview = [];
        }, 300);
    }
}

// إعداد drag & drop لتحديث الإجماليات
function setupTotalsDragAndDrop() {
    const uploadZone = document.querySelector('.totals-upload-zone');
    if (!uploadZone) return;

    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        uploadZone.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    ['dragenter', 'dragover'].forEach(eventName => {
        uploadZone.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
        uploadZone.addEventListener(eventName, unhighlight, false);
    });

    function highlight() {
        uploadZone.classList.add('dragover');
    }

    function unhighlight() {
        uploadZone.classList.remove('dragover');
    }

    uploadZone.addEventListener('drop', handleDrop, false);

    function handleDrop(e) {
        const dt = e.dataTransfer;
        const files = dt.files;

        if (files.length > 0) {
            handleTotalsFileUpload(files[0]);
        }
    }
}

// معالجة رفع ملف تحديث الإجماليات
async function handleTotalsFileUpload(file) {
    if (!file) return;

    console.log('📁 بدء معالجة ملف تحديث الإجماليات:', file.name);

    // التحقق من نوع الملف
    const allowedTypes = [
        'application/json',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'application/vnd.ms-excel',
        'text/csv'
    ];

    const fileExtension = file.name.split('.').pop().toLowerCase();
    const allowedExtensions = ['json', 'xlsx', 'xls', 'csv'];

    if (!allowedTypes.includes(file.type) && !allowedExtensions.includes(fileExtension)) {
        alert('❌ نوع الملف غير مدعوم. يرجى اختيار ملف JSON أو Excel أو CSV');
        return;
    }

    try {
        // إظهار مؤشر التحميل
        const uploadZone = document.querySelector('.totals-upload-zone');
        uploadZone.innerHTML = `
            <div class="totals-upload-icon">
                <i class="fas fa-spinner fa-spin"></i>
            </div>
            <div class="totals-upload-text">
                جاري معالجة الملف...
            </div>
        `;

        let data = null;

        if (fileExtension === 'json') {
            data = await parseJSONFile(file);
        } else if (fileExtension === 'csv') {
            data = await parseCSVFile(file);
        } else if (fileExtension === 'xlsx' || fileExtension === 'xls') {
            data = await parseExcelFile(file);
        }

        if (data && data.length > 0) {
            updateTotalsData = data;
            await generateTotalsPreview(data);

            // إعادة تعيين منطقة الرفع
            uploadZone.innerHTML = `
                <div class="totals-upload-icon">
                    <i class="fas fa-check-circle" style="color: #28a745;"></i>
                </div>
                <div class="totals-upload-text" style="color: #28a745;">
                    تم تحميل الملف بنجاح
                </div>
                <div class="totals-upload-hint">
                    ${data.length} عنصر تم العثور عليه
                </div>
            `;
        } else {
            throw new Error('لم يتم العثور على بيانات صالحة في الملف');
        }

    } catch (error) {
        console.error('❌ خطأ في معالجة الملف:', error);
        // تم إزالة رسالة الخطأ حسب طلب المستخدم

        // إعادة تعيين منطقة الرفع
        const uploadZone = document.querySelector('.totals-upload-zone');
        uploadZone.innerHTML = `
            <div class="totals-upload-icon">
                <i class="fas fa-cloud-upload-alt"></i>
            </div>
            <div class="totals-upload-text">
                اسحب الملف هنا أو انقر للاختيار
            </div>
            <div class="totals-upload-hint">
                يدعم: JSON, Excel (.xlsx, .xls), CSV
            </div>
        `;
    }
}

// تحليل ملف JSON
async function parseJSONFile(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = function(e) {
            try {
                const data = JSON.parse(e.target.result);

                // التحقق من صيغة البيانات
                if (Array.isArray(data)) {
                    resolve(data);
                } else if (data && typeof data === 'object') {
                    // إذا كان كائن، حاول استخراج المصفوفة
                    const keys = Object.keys(data);
                    const arrayKey = keys.find(key => Array.isArray(data[key]));
                    if (arrayKey) {
                        resolve(data[arrayKey]);
                    } else {
                        resolve([data]);
                    }
                } else {
                    reject(new Error('صيغة ملف JSON غير صحيحة'));
                }
            } catch (error) {
                reject(new Error('خطأ في تحليل ملف JSON: ' + error.message));
            }
        };
        reader.onerror = () => reject(new Error('خطأ في قراءة الملف'));
        reader.readAsText(file);
    });
}

// تحليل ملف CSV
async function parseCSVFile(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = function(e) {
            try {
                const text = e.target.result;
                const lines = text.split('\n').filter(line => line.trim());

                if (lines.length < 2) {
                    reject(new Error('ملف CSV يجب أن يحتوي على رأس وبيانات'));
                    return;
                }

                const headers = lines[0].split(',').map(h => h.trim().replace(/"/g, ''));
                const data = [];

                for (let i = 1; i < lines.length; i++) {
                    const values = lines[i].split(',').map(v => v.trim().replace(/"/g, ''));
                    const row = {};

                    headers.forEach((header, index) => {
                        row[header] = values[index] || '';
                    });

                    data.push(row);
                }

                resolve(data);
            } catch (error) {
                reject(new Error('خطأ في تحليل ملف CSV: ' + error.message));
            }
        };
        reader.onerror = () => reject(new Error('خطأ في قراءة الملف'));
        reader.readAsText(file);
    });
}

// تحليل ملف Excel (يتطلب مكتبة خارجية أو تحويل إلى CSV)
async function parseExcelFile(file) {
    // للبساطة، سنطلب من المستخدم تحويل Excel إلى CSV
    // في التطبيق الحقيقي، يمكن استخدام مكتبة مثل SheetJS
    console.log('📊 محاولة تحليل ملف Excel:', file.name);
    throw new Error('يرجى تحويل ملف Excel إلى CSV أو JSON أولاً');
}

// إنشاء معاينة البيانات
async function generateTotalsPreview(data) {
    console.log('🔍 إنشاء معاينة البيانات...', data.length, 'عنصر');

    updateTotalsPreview = [];
    const previewBody = document.getElementById('totalsPreviewBody');
    const previewCount = document.getElementById('totalsPreviewCount');
    const applyBtn = document.getElementById('applyTotalsBtn');

    if (!previewBody) return;

    previewBody.innerHTML = '';

    let validUpdates = 0;
    let newProperties = 0;
    let errors = 0;

    for (const item of data) {
        // البحث عن المفاتيح المحتملة لرقم الوحدة
        const unitNumberKeys = ['رقم الوحدة', 'unit_number', 'unitNumber', 'رقم_الوحدة', 'Unit Number'];
        const totalKeys = ['الإجمالي', 'total', 'Total', 'إجمالي', 'المبلغ', 'amount', 'Amount'];

        let unitNumber = null;
        let newTotal = null;

        // البحث عن رقم الوحدة
        for (const key of unitNumberKeys) {
            if (item[key] !== undefined && item[key] !== null && item[key] !== '') {
                // التعامل مع الأرقام والنصوص
                if (typeof item[key] === 'number') {
                    unitNumber = item[key].toString();
                } else {
                    unitNumber = item[key].toString().trim();
                }

                // التحقق من وجود قيمة صالحة
                if (unitNumber && unitNumber !== 'undefined' && unitNumber !== 'null') {
                    break;
                } else {
                    unitNumber = null;
                }
            }
        }

        // البحث عن الإجمالي
        for (const key of totalKeys) {
            if (item[key] !== undefined && item[key] !== null && item[key] !== '') {
                // التعامل مع الأرقام المباشرة في JSON والنصوص
                if (typeof item[key] === 'number') {
                    newTotal = item[key];
                } else {
                    newTotal = parseFloat(item[key].toString().replace(/[^\d.-]/g, ''));
                }

                // التحقق من صحة الرقم
                if (!isNaN(newTotal) && newTotal > 0) {
                    break;
                } else {
                    newTotal = null;
                }
            }
        }

        if (!unitNumber || isNaN(newTotal)) {
            console.warn('⚠️ تخطي عنصر غير صالح:', {
                unitNumber,
                newTotal,
                originalItem: item
            });
            errors++;
            continue;
        }

        console.log('✅ عنصر صالح:', {
            unitNumber,
            newTotal,
            type: typeof newTotal
        });

        // البحث عن العقار في النظام (مع التحقق من كلا الصيغتين لرقم الوحدة)
        const existingProperty = properties.find(p =>
            (p['رقم الوحدة'] && p['رقم الوحدة'].toString().trim() === unitNumber) ||
            (p['رقم  الوحدة '] && p['رقم  الوحدة '].toString().trim() === unitNumber)
        );

        let currentTotal = 0;
        let status = '';
        let statusClass = '';

        if (existingProperty) {
            // حساب الإجمالي الحالي
            const smartTotal = calculateSmartTotal(existingProperty);
            currentTotal = smartTotal.amount;

            if (currentTotal === newTotal) {
                status = 'لا تغيير';
                statusClass = 'text-muted';
            } else {
                status = 'تحديث';
                statusClass = 'text-primary';
                validUpdates++;
            }
        } else {
            status = 'جديد';
            statusClass = 'text-success';
            newProperties++;
        }

        updateTotalsPreview.push({
            unitNumber,
            newTotal,
            currentTotal,
            status,
            statusClass,
            existingProperty
        });

        // إضافة صف في الجدول
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${unitNumber}</td>
            <td>${newTotal.toLocaleString('ar-SA')} ريال</td>
            <td>${currentTotal.toLocaleString('ar-SA')} ريال</td>
            <td class="${statusClass}">${status}</td>
        `;
        previewBody.appendChild(row);
    }

    // تحديث العداد
    previewCount.textContent = `${data.length} عنصر | ${validUpdates} تحديث | ${newProperties} جديد | ${errors} خطأ`;

    // إظهار المعاينة
    document.getElementById('totalsPreview').classList.add('show');

    // تفعيل زر التطبيق إذا كان هناك تحديثات صالحة
    if (validUpdates > 0 || newProperties > 0) {
        applyBtn.disabled = false;
        applyBtn.innerHTML = `
            <i class="fas fa-check"></i>
            تطبيق ${validUpdates + newProperties} تحديث
        `;
    } else {
        applyBtn.disabled = true;
        applyBtn.innerHTML = `
            <i class="fas fa-exclamation-triangle"></i>
            لا توجد تحديثات للتطبيق
        `;
    }
}

// تطبيق تحديثات الإجماليات
async function applyTotalsUpdate() {
    if (!updateTotalsPreview || updateTotalsPreview.length === 0) {
        alert('❌ لا توجد بيانات للتطبيق');
        return;
    }

    // تأكيد من المستخدم
    const validUpdates = updateTotalsPreview.filter(item =>
        item.status === 'تحديث' || item.status === 'جديد'
    ).length;

    if (!confirm(`هل أنت متأكد من تطبيق ${validUpdates} تحديث؟\n\nهذا الإجراء سيؤثر على البيانات الموجودة.`)) {
        return;
    }

    try {
        // إظهار مؤشر التحميل
        const applyBtn = document.getElementById('applyTotalsBtn');
        const originalText = applyBtn.innerHTML;
        applyBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> جاري التطبيق...';
        applyBtn.disabled = true;

        let updatedCount = 0;
        let addedCount = 0;
        let errors = [];

        for (const item of updateTotalsPreview) {
            if (item.status === 'لا تغيير') continue;

            try {
                if (item.existingProperty) {
                    // تحديث عقار موجود
                    await updatePropertyTotal(item.existingProperty, item.newTotal);
                    updatedCount++;
                } else {
                    // إضافة عقار جديد (اختياري - قد نحتاج لمعلومات إضافية)
                    console.log('⚠️ تخطي إضافة عقار جديد - يتطلب معلومات إضافية:', item.unitNumber);
                    // addedCount++;
                }
            } catch (error) {
                console.error('❌ خطأ في تحديث العقار:', item.unitNumber, error);
                errors.push(`${item.unitNumber}: ${error.message}`);
            }
        }

        // حفظ البيانات محلياً
        saveDataLocally();

        // مزامنة تلقائية مع Supabase
        autoSyncAfterEdit('تحديث الإجماليات');

        // إعادة تحميل البيانات
        renderData();
        updateTotalStats();

        // إظهار نتائج العملية
        let message = `✅ تم تطبيق التحديثات بنجاح!\n\n`;
        message += `📊 العقارات المحدثة: ${updatedCount}\n`;
        if (addedCount > 0) message += `➕ العقارات المضافة: ${addedCount}\n`;
        if (errors.length > 0) {
            message += `\n⚠️ أخطاء (${errors.length}):\n${errors.slice(0, 3).join('\n')}`;
            if (errors.length > 3) message += `\n... و ${errors.length - 3} أخطاء أخرى`;
        }

        alert(message);

        // إغلاق النافذة
        closeUpdateTotalsModal();

    } catch (error) {
        console.error('❌ خطأ في تطبيق التحديثات:', error);
        // تم إزالة رسالة الخطأ حسب طلب المستخدم

        // إعادة تعيين الزر
        const applyBtn = document.getElementById('applyTotalsBtn');
        if (applyBtn) {
            applyBtn.innerHTML = originalText;
            applyBtn.disabled = false;
        }
    }
}

// تحديث إجمالي عقار محدد
async function updatePropertyTotal(property, newTotal) {
    const unitNumber = property['رقم الوحدة'] || property['رقم  الوحدة '];
    console.log('🔄 تحديث إجمالي العقار:', unitNumber, 'إلى', newTotal);

    // البحث عن العقار في المصفوفة (مع التحقق من كلا الصيغتين لرقم الوحدة)
    const propertyIndex = properties.findIndex(p =>
        (p['رقم الوحدة'] && p['رقم الوحدة'].toString().trim() === unitNumber.toString().trim()) ||
        (p['رقم  الوحدة '] && p['رقم  الوحدة '].toString().trim() === unitNumber.toString().trim())
    );

    if (propertyIndex === -1) {
        throw new Error('لم يتم العثور على العقار في النظام');
    }

    // تحديث الإجمالي بطريقة ذكية
    // نحاول تحديد أي حقل إجمالي موجود ونحدثه
    const totalFields = [
        'الإجمالي',
        'إجمالي المبلغ',
        'المبلغ الإجمالي',
        'إجمالي العقد',
        'قيمة العقد'
    ];

    let updated = false;

    // البحث عن حقل الإجمالي الموجود وتحديثه
    for (const field of totalFields) {
        if (properties[propertyIndex][field] !== undefined) {
            properties[propertyIndex][field] = newTotal;
            updated = true;
            console.log(`✅ تم تحديث ${field} إلى ${newTotal}`);
            break;
        }
    }

    // إذا لم يتم العثور على حقل إجمالي، أضف واحد جديد
    if (!updated) {
        properties[propertyIndex]['الإجمالي'] = newTotal;
        console.log(`✅ تم إضافة حقل الإجمالي الجديد: ${newTotal}`);
    }

    // تحديث تاريخ آخر تعديل
    properties[propertyIndex]['تاريخ آخر تحديث'] = new Date().toLocaleDateString('ar-SA');

    return true;
}

// ==================== نظام نقل الوحدات ====================

// متغيرات عامة لنقل الوحدات
let transferSourceCity = null;
let transferSourceProperty = null;
let transferSelectedUnits = [];
let transferDestinationProperty = null;

// إظهار نافذة نقل الوحدات
function showUnitTransferModal() {
    const modalHtml = `
        <div class="unit-transfer-modal" id="unitTransferModal">
            <div class="unit-transfer-content">
                <div class="unit-transfer-header">
                    <h2 class="unit-transfer-title">
                        <i class="fas fa-exchange-alt"></i>
                        نقل الوحدات بين العقارات
                    </h2>
                    <button class="unit-transfer-close" onclick="closeUnitTransferModal()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>

                <!-- القسم الأول: اختيار المصدر -->
                <div class="transfer-section" id="sourceSection">
                    <h3 class="section-title">
                        <i class="fas fa-map-marker-alt"></i>
                        اختيار العقار المصدر
                    </h3>

                    <div class="form-row">
                        <div class="form-group">
                            <label>المدينة:</label>
                            <select id="sourceCitySelect" onchange="loadSourceProperties(this.value)">
                                <option value="">اختر المدينة</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label>العقار:</label>
                            <select id="sourcePropertySelect" onchange="loadSourceUnits(this.value)" disabled>
                                <option value="">اختر العقار</option>
                            </select>
                        </div>
                    </div>

                    <!-- جدول الوحدات -->
                    <div class="units-table-container" id="sourceUnitsContainer" style="display: none;">
                        <h4>الوحدات المتاحة:</h4>
                        <div class="units-table-wrapper">
                            <table class="units-table" id="sourceUnitsTable">
                                <thead>
                                    <tr>
                                        <th>
                                            <input type="checkbox" id="selectAllUnits" onchange="toggleAllUnits(this.checked)">
                                        </th>
                                        <th>رقم الوحدة</th>
                                        <th>اسم المستأجر</th>
                                        <th>رقم العقد</th>
                                        <th>الحالة</th>
                                    </tr>
                                </thead>
                                <tbody id="sourceUnitsBody">
                                </tbody>
                            </table>
                        </div>

                        <div class="transfer-actions">
                            <button class="transfer-btn transfer-btn-primary" onclick="showDestinationSection()" disabled id="proceedBtn">
                                <i class="fas fa-arrow-left"></i>
                                المتابعة لاختيار الوجهة
                            </button>
                        </div>
                    </div>
                </div>

                <!-- القسم الثاني: اختيار الوجهة -->
                <div class="transfer-section" id="destinationSection" style="display: none;">
                    <h3 class="section-title">
                        <i class="fas fa-bullseye"></i>
                        اختيار العقار الوجهة
                    </h3>

                    <div class="form-group">
                        <label>العقار الوجهة (في نفس المدينة):</label>
                        <select id="destinationPropertySelect" onchange="setDestinationProperty(this.value)">
                            <option value="">اختر العقار الوجهة</option>
                        </select>
                    </div>

                    <div class="transfer-summary" id="transferSummary" style="display: none;">
                        <h4>ملخص عملية النقل:</h4>
                        <div class="summary-content">
                            <p><strong>من:</strong> <span id="summarySource"></span></p>
                            <p><strong>إلى:</strong> <span id="summaryDestination"></span></p>
                            <p><strong>عدد الوحدات:</strong> <span id="summaryCount"></span></p>
                        </div>
                    </div>

                    <div class="transfer-actions">
                        <button class="transfer-btn transfer-btn-secondary" onclick="backToSourceSection()">
                            <i class="fas fa-arrow-right"></i>
                            العودة
                        </button>
                        <button class="transfer-btn transfer-btn-success" onclick="confirmUnitTransfer()" disabled id="confirmTransferBtn">
                            <i class="fas fa-check"></i>
                            تأكيد النقل
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;

    document.body.insertAdjacentHTML('beforeend', modalHtml);

    // إظهار النافذة مع تأثير
    setTimeout(() => {
        document.getElementById('unitTransferModal').classList.add('show');
    }, 100);

    // تحميل المدن
    loadTransferCities();
}

// إغلاق نافذة نقل الوحدات
function closeUnitTransferModal() {
    const modal = document.getElementById('unitTransferModal');
    if (modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            modal.remove();
            // إعادة تعيين المتغيرات
            transferSourceCity = null;
            transferSourceProperty = null;
            transferSelectedUnits = [];
            transferDestinationProperty = null;
        }, 300);
    }
}

// تحميل المدن في قائمة المصدر
function loadTransferCities() {
    const citySelect = document.getElementById('sourceCitySelect');
    if (!citySelect) return;

    const cities = getUniqueCountries();
    citySelect.innerHTML = '<option value="">اختر المدينة</option>';

    cities.forEach(city => {
        const option = document.createElement('option');
        option.value = city;
        option.textContent = city;
        citySelect.appendChild(option);
    });
}

// تحميل العقارات عند اختيار المدينة
function loadSourceProperties(cityName) {
    const propertySelect = document.getElementById('sourcePropertySelect');
    const unitsContainer = document.getElementById('sourceUnitsContainer');

    if (!cityName) {
        propertySelect.innerHTML = '<option value="">اختر العقار</option>';
        propertySelect.disabled = true;
        unitsContainer.style.display = 'none';
        return;
    }

    transferSourceCity = cityName;

    // الحصول على العقارات في المدينة المختارة
    const cityProperties = properties.filter(p => p.المدينة === cityName);
    const uniqueProperties = [...new Set(cityProperties.map(p => p['اسم العقار']))];

    propertySelect.innerHTML = '<option value="">اختر العقار</option>';
    uniqueProperties.forEach(propertyName => {
        const option = document.createElement('option');
        option.value = propertyName;
        option.textContent = propertyName;
        propertySelect.appendChild(option);
    });

    propertySelect.disabled = false;
    unitsContainer.style.display = 'none';
}

// تحميل الوحدات عند اختيار العقار
function loadSourceUnits(propertyName) {
    const unitsContainer = document.getElementById('sourceUnitsContainer');
    const unitsBody = document.getElementById('sourceUnitsBody');

    if (!propertyName) {
        unitsContainer.style.display = 'none';
        return;
    }

    transferSourceProperty = propertyName;

    // الحصول على وحدات العقار المختار
    const propertyUnits = properties.filter(p =>
        p.المدينة === transferSourceCity && p['اسم العقار'] === propertyName
    );

    unitsBody.innerHTML = '';
    transferSelectedUnits = [];

    propertyUnits.forEach(unit => {
        const status = calculateStatus(unit);
        const unitNumber = unit['رقم الوحدة'] || unit['رقم  الوحدة '] || 'غير محدد';
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>
                <input type="checkbox" value="${unitNumber}"
                       onchange="toggleUnitSelection(this, '${unitNumber}')">
            </td>
            <td>${unitNumber}</td>
            <td>${unit['اسم المستأجر'] || 'فارغ'}</td>
            <td>${unit['رقم العقد'] || 'غير محدد'}</td>
            <td>
                <span class="status-badge status-${status.final.replace(' ', '-')}">${status.final}</span>
            </td>
        `;
        unitsBody.appendChild(row);
    });

    unitsContainer.style.display = 'block';
    updateProceedButton();
}

// تبديل تحديد الوحدة
function toggleUnitSelection(checkbox, unitNumber) {
    if (checkbox.checked) {
        if (!transferSelectedUnits.includes(unitNumber)) {
            transferSelectedUnits.push(unitNumber);
        }
    } else {
        transferSelectedUnits = transferSelectedUnits.filter(u => u !== unitNumber);
    }

    updateProceedButton();
    updateSelectAllCheckbox();
}

// تبديل تحديد جميع الوحدات
function toggleAllUnits(checked) {
    const checkboxes = document.querySelectorAll('#sourceUnitsBody input[type="checkbox"]');
    transferSelectedUnits = [];

    checkboxes.forEach(checkbox => {
        checkbox.checked = checked;
        if (checked) {
            transferSelectedUnits.push(checkbox.value);
        }
    });

    updateProceedButton();
}

// تحديث حالة checkbox "تحديد الكل"
function updateSelectAllCheckbox() {
    const selectAllCheckbox = document.getElementById('selectAllUnits');
    const unitCheckboxes = document.querySelectorAll('#sourceUnitsBody input[type="checkbox"]');
    const checkedBoxes = document.querySelectorAll('#sourceUnitsBody input[type="checkbox"]:checked');

    if (checkedBoxes.length === 0) {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = false;
    } else if (checkedBoxes.length === unitCheckboxes.length) {
        selectAllCheckbox.checked = true;
        selectAllCheckbox.indeterminate = false;
    } else {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = true;
    }
}

// تحديث زر المتابعة
function updateProceedButton() {
    const proceedBtn = document.getElementById('proceedBtn');
    if (proceedBtn) {
        proceedBtn.disabled = transferSelectedUnits.length === 0;
        proceedBtn.innerHTML = `
            <i class="fas fa-arrow-left"></i>
            المتابعة لاختيار الوجهة (${transferSelectedUnits.length} وحدة)
        `;
    }
}

// إظهار قسم اختيار الوجهة
function showDestinationSection() {
    if (transferSelectedUnits.length === 0) {
        alert('يرجى اختيار وحدة واحدة على الأقل');
        return;
    }

    // إخفاء قسم المصدر وإظهار قسم الوجهة
    document.getElementById('sourceSection').style.display = 'none';
    document.getElementById('destinationSection').style.display = 'block';

    // تحميل العقارات في نفس المدينة (باستثناء العقار المصدر)
    loadDestinationProperties();
}

// تحميل عقارات الوجهة
function loadDestinationProperties() {
    const destinationSelect = document.getElementById('destinationPropertySelect');

    // الحصول على العقارات في نفس المدينة باستثناء العقار المصدر
    const cityProperties = properties.filter(p => p.المدينة === transferSourceCity);
    const uniqueProperties = [...new Set(cityProperties.map(p => p['اسم العقار']))]
        .filter(name => name !== transferSourceProperty);

    destinationSelect.innerHTML = '<option value="">اختر العقار الوجهة</option>';
    uniqueProperties.forEach(propertyName => {
        const option = document.createElement('option');
        option.value = propertyName;
        option.textContent = propertyName;
        destinationSelect.appendChild(option);
    });
}

// تعيين العقار الوجهة
function setDestinationProperty(propertyName) {
    transferDestinationProperty = propertyName;

    const summaryDiv = document.getElementById('transferSummary');
    const confirmBtn = document.getElementById('confirmTransferBtn');

    if (propertyName) {
        // إظهار ملخص العملية
        document.getElementById('summarySource').textContent =
            `${transferSourceProperty} (${transferSourceCity})`;
        document.getElementById('summaryDestination').textContent =
            `${propertyName} (${transferSourceCity})`;
        document.getElementById('summaryCount').textContent = transferSelectedUnits.length;

        summaryDiv.style.display = 'block';
        confirmBtn.disabled = false;
    } else {
        summaryDiv.style.display = 'none';
        confirmBtn.disabled = true;
    }
}

// العودة لقسم المصدر
function backToSourceSection() {
    document.getElementById('destinationSection').style.display = 'none';
    document.getElementById('sourceSection').style.display = 'block';
}

// تأكيد نقل الوحدات
async function confirmUnitTransfer() {
    if (!transferDestinationProperty || transferSelectedUnits.length === 0) {
        alert('يرجى التأكد من اختيار العقار الوجهة والوحدات المراد نقلها');
        return;
    }

    const confirmMessage = `هل أنت متأكد من نقل ${transferSelectedUnits.length} وحدة من "${transferSourceProperty}" إلى "${transferDestinationProperty}"؟\n\nهذا الإجراء لا يمكن التراجع عنه.`;

    if (!confirm(confirmMessage)) {
        return;
    }

    try {
        // التحقق من حالة الاتصال بـ Supabase
        let supabaseAvailable = false;
        if (typeof checkSupabaseAvailability === 'function') {
            try {
                supabaseAvailable = await checkSupabaseAvailability();
                if (!supabaseAvailable) {
                    console.warn('⚠️ Supabase غير متاح، سيتم النقل محلياً فقط');

                    // إظهار تحذير للمستخدم
                    const proceedWithoutCloud = confirm(
                        '⚠️ تحذير: قاعدة البيانات السحابية غير متاحة حالياً.\n\n' +
                        'سيتم نقل الوحدات محلياً فقط وقد تفقد التغييرات عند إعادة تحميل الصفحة.\n\n' +
                        'هل تريد المتابعة؟'
                    );

                    if (!proceedWithoutCloud) {
                        return; // إلغاء العملية
                    }
                }
            } catch (error) {
                console.error('❌ خطأ في فحص Supabase:', error);
            }
        }

        // إظهار مؤشر التحميل
        const confirmBtn = document.getElementById('confirmTransferBtn');
        confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> جاري النقل...';
        confirmBtn.disabled = true;

        let transferredCount = 0;
        let supabaseSuccessCount = 0;
        let errors = [];

        // نقل كل وحدة محددة
        for (const unitNumber of transferSelectedUnits) {
            try {
                const result = await transferSingleUnit(unitNumber, transferSourceProperty, transferDestinationProperty);
                if (result.success) {
                    transferredCount++;
                    if (result.supabaseSuccess) {
                        supabaseSuccessCount++;
                    }
                }
            } catch (error) {
                console.error(`❌ خطأ في نقل الوحدة ${unitNumber}:`, error);
                errors.push(`${unitNumber}: ${error.message}`);
            }
        }

        // حفظ البيانات محلياً
        saveDataLocally();

        // مزامنة إضافية مع Supabase للتأكد من الحفظ
        if (supabaseSuccessCount < transferredCount) {
            console.log('🔄 محاولة مزامنة إضافية للوحدات غير المحفوظة...');

            // محاولة حفظ الوحدات التي لم يتم حفظها في Supabase
            for (const unitNumber of transferSelectedUnits) {
                const unit = properties.find(p =>
                    (p['رقم الوحدة'] === unitNumber || p['رقم  الوحدة '] === unitNumber) &&
                    p['اسم العقار'] === transferDestinationProperty
                );

                if (unit && typeof savePropertyToSupabase === 'function') {
                    try {
                        await savePropertyToSupabase(unit);
                        console.log(`✅ مزامنة إضافية ناجحة للوحدة ${unitNumber}`);
                    } catch (error) {
                        console.error(`❌ فشل في المزامنة الإضافية للوحدة ${unitNumber}:`, error);
                    }
                }
            }
        }

        // مزامنة تلقائية مع Supabase
        autoSyncAfterEdit('تحديث البيانات');

        // إعادة تحميل البيانات
        renderData();
        updateTotalStats();

        // إظهار نتائج العملية مع تفاصيل القص والنقل
        let message = `✅ تم قص ونقل ${transferredCount} وحدة بنجاح مع الحفاظ على جميع البيانات!\n\n`;
        message += `📤 من: ${transferSourceProperty}\n`;
        message += `📥 إلى: ${transferDestinationProperty}\n\n`;

        // تفاصيل الحفظ في السحابة
        message += `☁️ عملية القص والنقل في قاعدة البيانات السحابية:\n`;
        message += `   • تم قص ونقل ${supabaseSuccessCount} وحدة مع الحفاظ على جميع البيانات\n`;

        // تفاصيل الحفاظ على البيانات
        let preservedDataCount = 0;
        let removedFromSourceCount = 0;
        transferSelectedUnits.forEach(unitNumber => {
            const unitInDestination = properties.find(p =>
                (p['رقم الوحدة'] === unitNumber || p['رقم  الوحدة '] === unitNumber) &&
                p['اسم العقار'] === transferDestinationProperty
            );
            const unitInSource = properties.find(p =>
                (p['رقم الوحدة'] === unitNumber || p['رقم  الوحدة '] === unitNumber) &&
                p['اسم العقار'] === transferSourceProperty
            );

            if (unitInDestination) preservedDataCount++;
            if (!unitInSource) removedFromSourceCount++;
        });

        message += `   • تم الحفاظ على جميع بيانات ${preservedDataCount} وحدة (المستأجر، العقد، الأقساط)\n`;
        message += `   • تم حذف ${removedFromSourceCount} وحدة من العقار الأصلي نهائياً\n\n`;

        // تأكيد عملية القص
        message += `✂️ تأكيد عملية القص (وليس النسخ):\n`;
        message += `   • الوحدات لم تعد موجودة في "${transferSourceProperty}"\n`;
        message += `   • الوحدات موجودة الآن في "${transferDestinationProperty}" فقط\n`;
        message += `   • جميع معلومات المستأجرين والعقود والأقساط محفوظة\n`;
        message += `   • لا توجد نسخ مكررة في النظام\n`;

        if (supabaseSuccessCount < transferredCount) {
            const localOnlyCount = transferredCount - supabaseSuccessCount;
            message += `\n⚠️ تحذير: ${localOnlyCount} وحدة تم نقلها محلياً فقط (مشاكل في الاتصال)\n`;
            message += `   • قد تحتاج لمزامنة يدوية لاحقاً\n`;
        }

        if (errors.length > 0) {
            message += `\n❌ أخطاء (${errors.length}):\n${errors.slice(0, 3).join('\n')}`;
            if (errors.length > 3) message += `\n... و ${errors.length - 3} أخطاء أخرى`;
        }

        alert(message);

        // إغلاق النافذة
        closeUnitTransferModal();

    } catch (error) {
        console.error('❌ خطأ في عملية النقل:', error);
        // تم إزالة رسالة الخطأ حسب طلب المستخدم

        // إعادة تعيين الزر
        const confirmBtn = document.getElementById('confirmTransferBtn');
        if (confirmBtn) {
            confirmBtn.innerHTML = originalText;
            confirmBtn.disabled = false;
        }
    }
}

// نقل وحدة واحدة
async function transferSingleUnit(unitNumber, sourceProperty, destinationProperty) {
    console.log(`🔄 نقل الوحدة ${unitNumber} من ${sourceProperty} إلى ${destinationProperty}`);

    // البحث عن الوحدة في المصفوفة (مع التحقق من كلا الصيغتين لرقم الوحدة)
    const unitIndex = properties.findIndex(p =>
        (p['رقم الوحدة'] === unitNumber || p['رقم  الوحدة '] === unitNumber) &&
        p['اسم العقار'] === sourceProperty
    );

    if (unitIndex === -1) {
        console.error(`❌ لم يتم العثور على الوحدة ${unitNumber} في العقار ${sourceProperty}`);
        console.log('🔍 البحث في جميع العقارات للوحدة:', unitNumber);

        // البحث في جميع العقارات لتشخيص المشكلة
        const allUnitsWithSameNumber = properties.filter(p =>
            p['رقم الوحدة'] === unitNumber || p['رقم  الوحدة '] === unitNumber
        );
        console.log('🔍 الوحدات الموجودة برقم', unitNumber, ':', allUnitsWithSameNumber);

        throw new Error(`لم يتم العثور على الوحدة ${unitNumber} في العقار ${sourceProperty}`);
    }

    // نسخ بيانات الوحدة وتحديث اسم العقار
    const unit = { ...properties[unitIndex] };
    unit['اسم العقار'] = destinationProperty;
    unit['تاريخ آخر تحديث'] = new Date().toLocaleDateString('ar-SA');
    unit['نوع التحديث'] = 'نقل وحدة';
    unit['المسؤول عن التحديث'] = getCurrentUser();

    // حفظ التغييرات في Supabase أولاً
    let supabaseSuccess = false;
    let deletionSuccess = false;

    if (typeof transferUnitInSupabase === 'function') {
        try {
            console.log(`💾 نقل الوحدة ${unitNumber} في Supabase من "${sourceProperty}" إلى "${destinationProperty}"...`);

            // 🔧 الخطوة 1: حذف جميع السجلات الأصلية نهائياً من Supabase
            if (typeof deleteUnitFromSupabaseCompletely === 'function') {
                console.log(`🗑️ حذف جميع السجلات الأصلية للوحدة ${unitNumber} من "${sourceProperty}"...`);
                const deleteResult = await deleteUnitFromSupabaseCompletely(unitNumber, sourceProperty);

                if (deleteResult.success && deleteResult.deletedCount > 0) {
                    deletionSuccess = true;
                    console.log(`✅ تم حذف ${deleteResult.deletedCount} سجل أصلي نهائياً من Supabase`);
                } else {
                    console.warn(`⚠️ لم يتم العثور على سجلات للحذف أو فشل الحذف:`, deleteResult.reason);
                }
            }

            // 🔧 الخطوة 2: إنشاء سجل جديد في العقار الجديد
            console.log(`💾 إنشاء سجل جديد للوحدة ${unitNumber} في العقار "${destinationProperty}"...`);
            if (typeof savePropertyToSupabase === 'function') {
                const saveResult = await savePropertyToSupabase(unit);

                if (saveResult && saveResult.success) {
                    supabaseSuccess = true;
                    console.log(`✅ تم إنشاء سجل جديد للوحدة ${unitNumber} في "${destinationProperty}" بنجاح`);
                } else {
                    console.error(`❌ فشل في إنشاء سجل جديد للوحدة ${unitNumber}:`, saveResult?.message || 'سبب غير معروف');
                }
            }

            // 🔧 الخطوة 3: التأكد من عدم وجود سجلات مكررة
            console.log(`🔍 فحص وحذف أي سجلات مكررة للوحدة ${unitNumber}...`);
            if (typeof supabaseClient !== 'undefined' && supabaseClient) {
                try {
                    // فحص السجلات المكررة في العقار الجديد
                    const { data: duplicateCheck } = await supabaseClient
                        .from('properties')
                        .select('id, created_at')
                        .eq('unit_number', unitNumber)
                        .eq('property_name', destinationProperty)
                        .order('created_at', { ascending: false });

                    if (duplicateCheck && duplicateCheck.length > 1) {
                        console.log(`🗑️ وُجدت ${duplicateCheck.length} سجلات مكررة، حذف ${duplicateCheck.length - 1} منها...`);

                        // الاحتفاظ بالأحدث وحذف الباقي
                        const recordsToDelete = duplicateCheck.slice(1);
                        for (const record of recordsToDelete) {
                            try {
                                await supabaseClient
                                    .from('properties')
                                    .delete()
                                    .eq('id', record.id);
                                console.log(`✅ تم حذف السجل المكرر: ${record.id}`);
                            } catch (deleteError) {
                                console.error(`❌ فشل في حذف السجل المكرر ${record.id}:`, deleteError);
                            }
                        }
                    }
                } catch (duplicateError) {
                    console.error(`❌ خطأ في فحص السجلات المكررة:`, duplicateError);
                }
            }
        } catch (error) {
            console.error(`❌ خطأ في نقل الوحدة ${unitNumber} في Supabase:`, error);

            // محاولة أخيرة باستخدام الطريقة التقليدية
            console.log(`🔄 محاولة الحفظ بالطريقة التقليدية بعد الخطأ...`);
            if (typeof savePropertyToSupabase === 'function') {
                try {
                    const result = await savePropertyToSupabase(unit);
                    if (result && result.success) {
                        supabaseSuccess = true;
                        console.log(`✅ تم حفظ الوحدة ${unitNumber} بالطريقة التقليدية بعد الخطأ`);
                    }
                } catch (fallbackError) {
                    console.error(`❌ فشل في الحفظ بالطريقة التقليدية أيضاً:`, fallbackError);
                }
            }
        }
    }

    // إذا فشل حفظ Supabase، إظهار تحذير ولكن استمر بالعملية محلياً
    if (!supabaseSuccess) {
        console.warn(`⚠️ لم يتم حفظ الوحدة ${unitNumber} في Supabase، سيتم الحفظ محلياً فقط`);
    }

    // 🔧 إصلاح: تحديث البيانات محلياً (قص وليس نسخ)
    // حذف الوحدة من موقعها الأصلي
    properties.splice(unitIndex, 1);

    // إضافة الوحدة في موقعها الجديد
    properties.push(unit);

    // 🔧 إضافة: التأكد من عدم وجود نسخ مكررة في البيانات المحلية
    const duplicateUnits = properties.filter((p, index) =>
        (p['رقم الوحدة'] === unitNumber || p['رقم  الوحدة '] === unitNumber) &&
        p['اسم العقار'] === sourceProperty
    );

    if (duplicateUnits.length > 0) {
        console.log(`🗑️ حذف ${duplicateUnits.length} نسخة مكررة من العقار الأصلي "${sourceProperty}"`);
        duplicateUnits.forEach(duplicateUnit => {
            const duplicateIndex = properties.findIndex(p =>
                p === duplicateUnit
            );
            if (duplicateIndex !== -1) {
                properties.splice(duplicateIndex, 1);
                console.log(`✅ تم حذف نسخة مكررة من الفهرس ${duplicateIndex}`);
            }
        });
    }

    console.log(`📊 تأكيد النقل: الوحدة ${unitNumber} موجودة الآن في "${destinationProperty}" فقط`);

    // إضافة سجل التتبع لنقل الوحدة
    try {
        await addChangeLog(
            OPERATION_TYPES.TRANSFER_UNIT,
            unit,
            {},
            {
                sourceProperty: sourceProperty,
                destinationProperty: destinationProperty,
                reason: 'نقل وحدة بين العقارات'
            }
        );
        console.log('📝 تم إضافة سجل تتبع نقل الوحدة');
    } catch (error) {
        console.error('❌ خطأ في إضافة سجل تتبع نقل الوحدة:', error);
    }

    console.log(`✅ تم قص ونقل الوحدة ${unitNumber} بنجاح مع الحفاظ على جميع البيانات`);
    return {
        success: true,
        supabaseSuccess,
        deletionSuccess,
        dataPreserved: true, // 🔧 إضافة: تأكيد الحفاظ على البيانات
        cutNotCopy: true, // 🔧 إضافة: تأكيد أن العملية قص وليس نسخ
        details: {
            unitNumber,
            sourceProperty,
            destinationProperty,
            savedToNewLocation: supabaseSuccess,
            deletedFromOldLocation: deletionSuccess,
            preservedAllData: true, // 🔧 إضافة: تأكيد الحفاظ على البيانات
            operationType: 'cut' // 🔧 إضافة: نوع العملية
        }
    };
}

// الحصول على المستخدم الحالي
function getCurrentUser() {
    // إذا كان هناك مستخدم مسجل دخول، إرجاع اسمه الكامل
    if (typeof currentUser !== 'undefined' && currentUser && users[currentUser]) {
        return users[currentUser].fullName || currentUser;
    }

    // التحقق البديل من localStorage
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
        try {
            const userData = JSON.parse(savedUser);
            if (users[userData.username]) {
                return users[userData.username].fullName || userData.username;
            }
        } catch (error) {
            console.error('خطأ في قراءة بيانات المستخدم:', error);
        }
    }

    // إرجاع "النظام" كقيمة افتراضية
    return 'النظام';
}

// 🔒 التحقق من صلاحية تحرير اسم العقار (عمر فقط)
function canEditPropertyName() {
    // التحقق من المستخدم الحالي
    const savedUser = localStorage.getItem('currentUser');
    if (!savedUser) {
        return false;
    }

    try {
        const userData = JSON.parse(savedUser);
        const isOmar = userData.username === 'عمر' || currentUser === 'عمر';

        console.log(`🔍 فحص صلاحية تحرير اسم العقار: المستخدم = ${userData.username}, الصلاحية = ${isOmar ? 'مسموح' : 'ممنوع'}`);

        return isOmar;
    } catch (error) {
        console.error('❌ خطأ في فحص صلاحية المستخدم:', error);
        return false;
    }
}

// 🔒 عرض رسالة عدم وجود صلاحية
function showNoPermissionMessage(action = 'هذه العملية') {
    const message = `🔒 عذراً، ${action} متاحة لعمر فقط.\n\nيرجى تسجيل الدخول بحساب عمر للوصول إلى هذه الميزة.`;
    alert(message);
    showToast('ليس لديك صلاحية لهذه العملية', 'error');
}

// 🛡️ التحقق من سلامة البيانات قبل المعالجة
function validateDataIntegrity() {
    try {
        // التحقق من وجود المتغير العام
        if (typeof window.properties === 'undefined') {
            console.warn('⚠️ متغير properties غير معرف، محاولة إعادة التحميل...');
            loadDataFromStorage();
            return false;
        }

        // التحقق من كون properties مصفوفة
        if (!Array.isArray(window.properties)) {
            console.error('❌ properties ليس مصفوفة:', typeof window.properties);
            window.properties = [];
            return false;
        }

        // التحقق من سلامة العناصر
        let validCount = 0;
        let invalidCount = 0;

        window.properties.forEach((property, index) => {
            if (!property || typeof property !== 'object') {
                console.warn(`⚠️ عنصر غير صالح في الفهرس ${index}:`, property);
                invalidCount++;
            } else {
                validCount++;
            }
        });

        if (invalidCount > 0) {
            console.warn(`⚠️ تم العثور على ${invalidCount} عنصر غير صالح من أصل ${window.properties.length}`);

            // تنظيف البيانات غير الصالحة
            window.properties = window.properties.filter(p => p && typeof p === 'object');
            console.log(`✅ تم تنظيف البيانات، العناصر الصالحة: ${window.properties.length}`);
        }

        return true;

    } catch (error) {
        console.error('❌ خطأ في التحقق من سلامة البيانات:', error);
        return false;
    }
}

// 🔄 تحميل البيانات من التخزين المحلي
function loadDataFromStorage() {
    try {
        console.log('🔄 محاولة تحميل البيانات من localStorage...');

        const savedData = localStorage.getItem('propertyData');
        if (savedData) {
            const parsedData = JSON.parse(savedData);
            if (Array.isArray(parsedData)) {
                window.properties = parsedData;
                console.log(`✅ تم تحميل ${parsedData.length} عنصر من localStorage`);
                return true;
            } else {
                console.warn('⚠️ البيانات المحفوظة ليست مصفوفة');
            }
        } else {
            console.warn('⚠️ لا توجد بيانات محفوظة في localStorage');
        }

        // إذا فشل التحميل، إنشاء مصفوفة فارغة
        window.properties = [];
        return false;

    } catch (error) {
        console.error('❌ خطأ في تحميل البيانات من localStorage:', error);
        window.properties = [];
        return false;
    }
}

// 🏢 دالة تحرير اسم العقار (عمر فقط)
async function editPropertyName(currentPropertyName) {
    try {
        // التحقق من الصلاحية
        if (!canEditPropertyName()) {
            showNoPermissionMessage('تحرير اسم العقار');
            return;
        }

        // التحقق من وجود البيانات
        if (!ensurePropertiesLoaded('editPropertyName')) {
            return;
        }

        // التحقق من سلامة البيانات أولاً
        if (!validateDataIntegrity()) {
            alert('❌ خطأ في البيانات، يرجى إعادة تحميل الصفحة');
            return;
        }

        // التحقق من وجود العقار
        const propertyUnits = properties.filter(p =>
            p &&
            typeof p === 'object' &&
            p['اسم العقار'] === currentPropertyName
        );

        if (propertyUnits.length === 0) {
            alert('❌ لم يتم العثور على العقار المحدد');
            return;
        }

        console.log(`🏢 بدء تحرير اسم العقار: "${currentPropertyName}" (${propertyUnits.length} وحدة)`);

        // إنشاء نافذة التحرير
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = `
            <div class="modal-content edit-property-name-modal">
                <div class="modal-header">
                    <h3>🏢 تحرير اسم العقار</h3>
                    <button class="close-btn" onclick="this.closest('.modal-overlay').remove()">×</button>
                </div>

                <div class="modal-body">
                    <div class="form-group">
                        <label>الاسم الحالي:</label>
                        <input type="text" id="currentPropertyName" value="${currentPropertyName}" readonly class="readonly-input">
                    </div>

                    <div class="form-group">
                        <label>الاسم الجديد: <span class="required">*</span></label>
                        <input type="text" id="newPropertyName" placeholder="أدخل اسم العقار الجديد" maxlength="100" required>
                        <small class="form-hint">يجب أن يكون الاسم الجديد مختلفاً وغير مكرر</small>
                    </div>

                    <div class="info-box">
                        <h4>📊 معلومات العقار:</h4>
                        <p><strong>عدد الوحدات:</strong> ${propertyUnits.length} وحدة</p>
                        <p><strong>المدينة:</strong> ${propertyUnits[0]['المدينة'] || 'غير محدد'}</p>
                        <p><strong>المالك:</strong> ${propertyUnits[0]['المالك'] || 'غير محدد'}</p>
                    </div>

                    <div class="warning-box">
                        <h4>⚠️ تحذير مهم:</h4>
                        <ul>
                            <li>سيتم تحديث اسم العقار في جميع الوحدات (${propertyUnits.length} وحدة)</li>
                            <li>سيتم حفظ التغييرات في قاعدة البيانات السحابية تلقائياً</li>
                            <li>لا يمكن التراجع عن هذه العملية</li>
                            <li>تأكد من صحة الاسم الجديد قبل الحفظ</li>
                        </ul>
                    </div>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-secondary" onclick="this.closest('.modal-overlay').remove()">
                        إلغاء
                    </button>
                    <button class="btn btn-primary" onclick="confirmPropertyNameEdit()">
                        💾 حفظ التغييرات
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // التركيز على حقل الاسم الجديد
        setTimeout(() => {
            const newNameInput = document.getElementById('newPropertyName');
            if (newNameInput) {
                newNameInput.focus();
                newNameInput.select();
            }
        }, 100);

        // إضافة مستمع للضغط على Enter
        document.getElementById('newPropertyName').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                confirmPropertyNameEdit();
            }
        });

        // إضافة التحقق الفوري من صحة الاسم
        document.getElementById('newPropertyName').addEventListener('input', function() {
            validateNewPropertyName();
        });

    } catch (error) {
        console.error('❌ خطأ في فتح نافذة تحرير اسم العقار:', error);
        alert('❌ حدث خطأ في فتح نافذة التحرير');
    }
}

// 🔍 التحقق من صحة الاسم الجديد
function validateNewPropertyName() {
    const newNameInput = document.getElementById('newPropertyName');
    const currentNameInput = document.getElementById('currentPropertyName');
    const saveButton = document.querySelector('.edit-property-name-modal .btn-primary');

    if (!newNameInput || !currentNameInput || !saveButton) return;

    const newName = newNameInput.value.trim();
    const currentName = currentNameInput.value.trim();

    // إزالة رسائل الخطأ السابقة
    const existingError = newNameInput.parentNode.querySelector('.error-message');
    if (existingError) {
        existingError.remove();
    }

    newNameInput.classList.remove('error', 'success');

    let isValid = true;
    let errorMessage = '';

    // التحقق من عدم ترك الحقل فارغاً
    if (newName === '') {
        isValid = false;
        errorMessage = 'يجب إدخال اسم العقار الجديد';
    }
    // التحقق من عدم تكرار الاسم الحالي
    else if (newName === currentName) {
        isValid = false;
        errorMessage = 'الاسم الجديد يجب أن يكون مختلفاً عن الاسم الحالي';
    }
    // التحقق من عدم وجود عقار آخر بنفس الاسم
    else if (properties.some(p => p['اسم العقار'] === newName)) {
        isValid = false;
        errorMessage = 'يوجد عقار آخر بهذا الاسم بالفعل';
    }
    // التحقق من طول الاسم
    else if (newName.length < 2) {
        isValid = false;
        errorMessage = 'اسم العقار يجب أن يكون أطول من حرفين';
    }
    else if (newName.length > 100) {
        isValid = false;
        errorMessage = 'اسم العقار طويل جداً (الحد الأقصى 100 حرف)';
    }

    // عرض رسالة الخطأ أو النجاح
    if (!isValid) {
        newNameInput.classList.add('error');
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.textContent = errorMessage;
        newNameInput.parentNode.appendChild(errorDiv);
        saveButton.disabled = true;
    } else {
        newNameInput.classList.add('success');
        saveButton.disabled = false;
    }

    return isValid;
}

// ✅ تأكيد وتنفيذ تحرير اسم العقار
async function confirmPropertyNameEdit() {
    try {
        // التحقق من صحة البيانات
        if (!validateNewPropertyName()) {
            return;
        }

        const currentName = document.getElementById('currentPropertyName').value.trim();
        const newName = document.getElementById('newPropertyName').value.trim();

        // تأكيد نهائي من المستخدم
        const confirmMessage = `🏢 تأكيد تحرير اسم العقار\n\n` +
            `الاسم الحالي: "${currentName}"\n` +
            `الاسم الجديد: "${newName}"\n\n` +
            `⚠️ هذا التغيير سيؤثر على جميع الوحدات في هذا العقار.\n` +
            `هل أنت متأكد من المتابعة؟`;

        if (!confirm(confirmMessage)) {
            return;
        }

        // إظهار مؤشر التحميل
        const saveButton = document.querySelector('.edit-property-name-modal .btn-primary');
        const originalText = saveButton.textContent;
        saveButton.disabled = true;
        saveButton.innerHTML = '⏳ جاري الحفظ...';

        console.log(`🔄 بدء تحديث اسم العقار من "${currentName}" إلى "${newName}"`);

        // تنفيذ التحديث
        const result = await updatePropertyNameInAllSystems(currentName, newName);

        if (result.success) {
            // إغلاق النافذة
            document.querySelector('.modal-overlay').remove();

            // إظهار رسالة النجاح
            const successMessage = `🎉 تم تحديث اسم العقار بنجاح!\n\n` +
                `✅ تم تحديث ${result.updatedUnits} وحدة\n` +
                `✅ تم حفظ ${result.supabaseUpdates} وحدة في السحابة\n` +
                `✅ تم تسجيل العملية في سجل التتبع\n\n` +
                `الاسم الجديد: "${newName}"`;

            alert(successMessage);
            showToast(`تم تحديث اسم العقار إلى "${newName}" بنجاح`, 'success');

            // تحديث الواجهة
            refreshCurrentView();

        } else {
            // إظهار رسالة الخطأ
            const errorMessage = `❌ فشل في تحديث اسم العقار\n\n` +
                `السبب: ${result.reason}\n\n` +
                `يرجى المحاولة مرة أخرى أو التواصل مع الدعم الفني.`;

            alert(errorMessage);
            showToast('فشل في تحديث اسم العقار: ' + result.reason, 'error');

            // إعادة تفعيل الزر
            saveButton.disabled = false;
            saveButton.textContent = originalText;
        }

    } catch (error) {
        console.error('❌ خطأ في تأكيد تحرير اسم العقار:', error);
        alert('❌ حدث خطأ غير متوقع أثناء تحديث اسم العقار');
        showToast('خطأ في تحديث اسم العقار: ' + error.message, 'error');

        // إعادة تفعيل الزر
        const saveButton = document.querySelector('.edit-property-name-modal .btn-primary');
        if (saveButton) {
            saveButton.disabled = false;
            saveButton.textContent = '💾 حفظ التغييرات';
        }
    }
}

// 🔄 تحديث اسم العقار في جميع الأنظمة
async function updatePropertyNameInAllSystems(oldName, newName) {
    try {
        console.log(`🔄 تحديث اسم العقار في جميع الأنظمة: "${oldName}" → "${newName}"`);

        // التحقق من سلامة البيانات
        if (!validateDataIntegrity()) {
            return { success: false, reason: 'خطأ في سلامة البيانات' };
        }

        // البحث عن جميع الوحدات في العقار مع التحقق من الأمان
        const propertyUnits = properties.filter(p =>
            p &&
            typeof p === 'object' &&
            p['اسم العقار'] === oldName
        );

        if (propertyUnits.length === 0) {
            return { success: false, reason: 'لم يتم العثور على وحدات في العقار المحدد' };
        }

        console.log(`📋 تم العثور على ${propertyUnits.length} وحدة للتحديث`);

        let updatedUnits = 0;
        let supabaseUpdates = 0;
        let errors = [];

        // تحديث كل وحدة
        for (const unit of propertyUnits) {
            try {
                const unitIndex = properties.findIndex(p =>
                    p['رقم  الوحدة '] === unit['رقم  الوحدة '] &&
                    p['اسم العقار'] === oldName
                );

                if (unitIndex !== -1) {
                    // تحديث اسم العقار
                    properties[unitIndex]['اسم العقار'] = newName;

                    // إضافة معلومات التحديث
                    properties[unitIndex]['تاريخ آخر تحديث'] = new Date().toLocaleDateString('ar-SA');
                    properties[unitIndex]['نوع التحديث'] = 'تحرير اسم العقار';
                    properties[unitIndex]['المسؤول عن التحديث'] = getCurrentUser();
                    properties[unitIndex]['الاسم السابق للعقار'] = oldName;

                    updatedUnits++;
                    console.log(`✅ تم تحديث الوحدة ${unit['رقم  الوحدة ']} محلياً`);

                    // حفظ في Supabase باستخدام الدالة المخصصة لتحديث اسم العقار
                    if (typeof updatePropertyNameInSupabase === 'function') {
                        try {
                            const result = await updatePropertyNameInSupabase(oldName, newName, properties[unitIndex]);
                            if (result && result.success) {
                                supabaseUpdates++;
                                console.log(`☁️ تم تحديث اسم العقار للوحدة ${unit['رقم  الوحدة ']} في Supabase: ${result.action}`);
                            } else {
                                console.warn(`⚠️ فشل تحديث اسم العقار للوحدة ${unit['رقم  الوحدة ']} في Supabase: ${result.reason}`);
                                errors.push(`Supabase: ${unit['رقم  الوحدة ']} - ${result.reason}`);
                            }
                        } catch (supabaseError) {
                            console.error(`❌ خطأ في تحديث اسم العقار للوحدة ${unit['رقم  الوحدة ']} في Supabase:`, supabaseError);
                            errors.push(`Supabase: ${unit['رقم  الوحدة ']} - ${supabaseError.message}`);
                        }
                    } else {
                        // استخدام الدالة العادية كبديل
                        if (typeof savePropertyToSupabase === 'function') {
                            try {
                                const result = await savePropertyToSupabase(properties[unitIndex]);
                                if (result && result.success) {
                                    supabaseUpdates++;
                                    console.log(`☁️ تم حفظ الوحدة ${unit['رقم  الوحدة ']} في Supabase (الطريقة العادية)`);
                                } else {
                                    console.warn(`⚠️ فشل حفظ الوحدة ${unit['رقم  الوحدة ']} في Supabase`);
                                }
                            } catch (supabaseError) {
                                console.error(`❌ خطأ في حفظ الوحدة ${unit['رقم  الوحدة ']} في Supabase:`, supabaseError);
                                errors.push(`Supabase: ${unit['رقم  الوحدة ']} - ${supabaseError.message}`);
                            }
                        }
                    }
                }

            } catch (unitError) {
                console.error(`❌ خطأ في تحديث الوحدة ${unit['رقم  الوحدة ']}:`, unitError);
                errors.push(`Unit: ${unit['رقم  الوحدة ']} - ${unitError.message}`);
            }
        }

        // حفظ البيانات محلياً
        saveDataLocally();

        // تنظيف السجلات المكررة في Supabase بعد التحديث
        if (supabaseUpdates > 0 && typeof cleanupDuplicatePropertiesForName === 'function') {
            try {
                console.log('🧹 تنظيف السجلات المكررة بعد تحديث اسم العقار...');
                await cleanupDuplicatePropertiesForName(newName);
            } catch (cleanupError) {
                console.warn('⚠️ تحذير: فشل في تنظيف السجلات المكررة:', cleanupError);
            }
        }

        // تسجيل العملية في سجل التتبع
        try {
            const trackingData = {
                operationType: 'تحرير اسم العقار',
                unitNumber: 'جميع الوحدات',
                propertyName: newName,
                city: propertyUnits[0]['المدينة'] || 'غير محدد',
                contractNumber: 'متعدد',
                tenantName: 'متعدد',
                changes: {
                    'اسم العقار القديم': oldName,
                    'اسم العقار الجديد': newName,
                    'عدد الوحدات المحدثة': updatedUnits,
                    'عدد الوحدات المحفوظة في السحابة': supabaseUpdates
                },
                additionalInfo: {
                    totalUnits: propertyUnits.length,
                    updatedUnits,
                    supabaseUpdates,
                    errors: errors.length > 0 ? errors.slice(0, 5) : null
                },
                responsibleUser: getCurrentUser(),
                description: `تحرير اسم العقار من "${oldName}" إلى "${newName}" - ${updatedUnits} وحدة`
            };

            await logActivity(trackingData);
            console.log('📝 تم تسجيل العملية في سجل التتبع');

        } catch (trackingError) {
            console.error('❌ خطأ في تسجيل العملية:', trackingError);
        }

        // تنظيف أي تكرار محلي قد يحدث
        console.log('🧹 تنظيف التكرار المحلي...');
        const beforeCleanup = properties.length;

        // إزالة الوحدات المكررة بنفس رقم الوحدة واسم العقار
        const uniqueProperties = [];
        const seenKeys = new Set();

        properties.forEach(property => {
            const key = `${property['رقم  الوحدة ']}_${property['اسم العقار']}`;
            if (!seenKeys.has(key)) {
                seenKeys.add(key);
                uniqueProperties.push(property);
            } else {
                console.log(`🗑️ إزالة وحدة مكررة محلياً: ${property['رقم  الوحدة ']} - ${property['اسم العقار']}`);
            }
        });

        if (uniqueProperties.length !== beforeCleanup) {
            properties.length = 0;
            properties.push(...uniqueProperties);
            saveDataLocally();
            console.log(`✅ تم تنظيف ${beforeCleanup - uniqueProperties.length} وحدة مكررة محلياً`);
        }

        // النتيجة النهائية
        const result = {
            success: updatedUnits > 0,
            updatedUnits,
            supabaseUpdates,
            totalUnits: propertyUnits.length,
            localCleanup: beforeCleanup - uniqueProperties.length,
            errors: errors.length > 0 ? errors : null,
            reason: updatedUnits === 0 ? 'لم يتم تحديث أي وحدة' : null
        };

        console.log(`🎉 تم تحديث اسم العقار: ${updatedUnits}/${propertyUnits.length} وحدة، ${supabaseUpdates} محفوظة في السحابة، ${result.localCleanup} مكررة محذوفة محلياً`);

        return result;

    } catch (error) {
        console.error('❌ خطأ في تحديث اسم العقار في جميع الأنظمة:', error);
        return { success: false, reason: error.message };
    }
}

// 🏢 عرض خيارات تحرير أسماء العقارات
function showPropertyNameEditOptions() {
    try {
        // التحقق من الصلاحية
        if (!canEditPropertyName()) {
            showNoPermissionMessage('تحرير أسماء العقارات');
            return;
        }

        // التحقق من وجود البيانات
        if (!ensurePropertiesLoaded('showPropertyNameEditOptions')) {
            return;
        }

        // التحقق من سلامة البيانات
        if (!validateDataIntegrity()) {
            alert('❌ خطأ في البيانات، يرجى إعادة تحميل الصفحة');
            return;
        }

        // التحقق من وجود البيانات أولاً
        if (!properties || properties.length === 0) {
            alert('❌ لا توجد بيانات متاحة');
            return;
        }

        // الحصول على قائمة العقارات الفريدة مع التحقق من الأمان
        const uniqueProperties = [...new Set(
            properties
                .filter(p => p && typeof p === 'object' && p['اسم العقار'])
                .map(p => p['اسم العقار'])
        )].filter(name => name && typeof name === 'string' && name.trim() !== '');

        if (uniqueProperties.length === 0) {
            alert('❌ لا توجد عقارات متاحة للتحرير');
            return;
        }

        console.log(`🏢 عرض خيارات تحرير أسماء العقارات: ${uniqueProperties.length} عقار`);

        // إنشاء نافذة اختيار العقار
        const modal = document.createElement('div');
        modal.className = 'modal-overlay';
        modal.innerHTML = `
            <div class="modal-content property-name-options-modal">
                <div class="modal-header">
                    <h3>🏢 تحرير أسماء العقارات</h3>
                    <button class="close-btn" onclick="this.closest('.modal-overlay').remove()">×</button>
                </div>

                <div class="modal-body">
                    <div class="info-box">
                        <h4>📋 اختر العقار المراد تحرير اسمه:</h4>
                        <p>يمكنك تحرير اسم أي عقار من القائمة أدناه. سيتم تحديث الاسم في جميع الوحدات التابعة للعقار.</p>
                    </div>

                    <div class="search-box">
                        <input type="text" id="propertySearchInput" placeholder="🔍 البحث في أسماء العقارات..." onkeyup="filterPropertyList()">
                    </div>

                    <div class="properties-list" id="propertiesList">
                        ${generatePropertyListHTML(uniqueProperties)}
                    </div>

                    <div class="stats-box">
                        <p><strong>إجمالي العقارات:</strong> ${uniqueProperties.length} عقار</p>
                        <p><strong>إجمالي الوحدات:</strong> ${properties.length} وحدة</p>
                    </div>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-secondary" onclick="this.closest('.modal-overlay').remove()">
                        إغلاق
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // التركيز على حقل البحث
        setTimeout(() => {
            const searchInput = document.getElementById('propertySearchInput');
            if (searchInput) {
                searchInput.focus();
            }
        }, 100);

    } catch (error) {
        console.error('❌ خطأ في عرض خيارات تحرير أسماء العقارات:', error);
        alert('❌ حدث خطأ في عرض خيارات التحرير');
    }
}

// 📋 إنشاء HTML لقائمة العقارات
function generatePropertyListHTML(properties) {
    return properties.map(propertyName => {
        const propertyUnits = window.properties.filter(p => p['اسم العقار'] === propertyName);
        const unitsCount = propertyUnits.length;

        // التحقق من وجود وحدات قبل الوصول للبيانات
        const firstUnit = propertyUnits.length > 0 ? propertyUnits[0] : {};
        const city = firstUnit['المدينة'] || 'غير محدد';
        const owner = firstUnit['المالك'] || 'غير محدد';

        // حساب الوحدات المؤجرة والفارغة
        const rentedUnits = propertyUnits.filter(u => u && u['اسم المستأجر'] && u['اسم المستأجر'].trim() !== '').length;
        const emptyUnits = unitsCount - rentedUnits;

        return `
            <div class="property-item" onclick="editPropertyName('${propertyName.replace(/'/g, "\\'")}')">
                <div class="property-header">
                    <h4>🏢 ${propertyName}</h4>
                    <button class="edit-btn" title="تحرير اسم العقار">
                        <i class="fas fa-edit"></i>
                    </button>
                </div>

                <div class="property-details">
                    <div class="detail-row">
                        <span class="label">📍 المدينة:</span>
                        <span class="value">${city}</span>
                    </div>
                    <div class="detail-row">
                        <span class="label">👤 المالك:</span>
                        <span class="value">${owner}</span>
                    </div>
                    <div class="detail-row">
                        <span class="label">🏠 الوحدات:</span>
                        <span class="value">${unitsCount} وحدة</span>
                    </div>
                    <div class="detail-row">
                        <span class="label">📊 الحالة:</span>
                        <span class="value">
                            <span class="status-rented">${rentedUnits} مؤجر</span>
                            <span class="status-empty">${emptyUnits} فارغ</span>
                        </span>
                    </div>
                </div>
            </div>
        `;
    }).join('');
}

// 🔍 فلترة قائمة العقارات
function filterPropertyList() {
    const searchInput = document.getElementById('propertySearchInput');
    const propertiesList = document.getElementById('propertiesList');

    if (!searchInput || !propertiesList) return;

    const searchTerm = searchInput.value.trim().toLowerCase();
    const propertyItems = propertiesList.querySelectorAll('.property-item');

    let visibleCount = 0;

    propertyItems.forEach(item => {
        try {
            const propertyNameElement = item.querySelector('h4');
            const cityElement = item.querySelector('.detail-row .value');

            const propertyName = propertyNameElement ? propertyNameElement.textContent.toLowerCase() : '';
            const city = cityElement ? cityElement.textContent.toLowerCase() : '';

            const isVisible = propertyName.includes(searchTerm) || city.includes(searchTerm);

            item.style.display = isVisible ? 'block' : 'none';
            if (isVisible) visibleCount++;
        } catch (error) {
            console.error('❌ خطأ في فلترة العقار:', error);
            // في حالة الخطأ، إظهار العنصر
            item.style.display = 'block';
            visibleCount++;
        }
    });

    // تحديث عداد النتائج
    const statsBox = document.querySelector('.property-name-options-modal .stats-box');
    if (statsBox && searchTerm) {
        const originalStats = statsBox.innerHTML;
        statsBox.innerHTML = `
            <p><strong>نتائج البحث:</strong> ${visibleCount} عقار</p>
            ${originalStats}
        `;
    }
}

// 🔄 تحديث العرض الحالي بعد تحرير اسم العقار
function refreshCurrentView() {
    try {
        // تحديث قائمة العقارات في الهيدر
        if (typeof updatePropertyButtons === 'function') {
            updatePropertyButtons();
        }

        // تحديث العرض الحالي حسب الصفحة المفتوحة
        const currentView = document.querySelector('.content-section:not([style*="display: none"])');

        if (currentView) {
            const viewId = currentView.id;

            switch (viewId) {
                case 'propertyStatsSection':
                    // تحديث صفحة إحصائيات العقارات
                    if (typeof displayPropertyStats === 'function') {
                        displayPropertyStats();
                    }
                    break;

                case 'dataDisplaySection':
                    // تحديث عرض البيانات
                    if (typeof displayData === 'function') {
                        displayData();
                    }
                    break;

                case 'searchSection':
                    // تحديث نتائج البحث
                    if (typeof performSearch === 'function') {
                        performSearch();
                    }
                    break;

                default:
                    console.log('🔄 تحديث العرض العام');
                    break;
            }
        }

        // تحديث أي قوائم منسدلة مفتوحة
        const dropdowns = document.querySelectorAll('select[id*="property"], select[id*="Property"]');
        dropdowns.forEach(dropdown => {
            if (typeof updateDropdownOptions === 'function') {
                updateDropdownOptions(dropdown);
            }
        });

        console.log('✅ تم تحديث العرض الحالي بعد تحرير اسم العقار');

    } catch (error) {
        console.error('❌ خطأ في تحديث العرض الحالي:', error);
    }
}

// ==================== فلتر آخر تحديثات الوحدات ====================

// إظهار نافذة فلتر آخر التحديثات
function showLastUpdatesFilter() {
    const modalHtml = `
        <div class="last-updates-modal" id="lastUpdatesModal">
            <div class="last-updates-content">
                <div class="last-updates-header">
                    <h2 class="last-updates-title">
                        <i class="fas fa-history"></i>
                        آخر تحديثات الوحدات
                    </h2>
                    <button class="last-updates-close" onclick="closeLastUpdatesModal()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>

                <!-- نموذج الفلترة -->
                <div class="updates-filter-form">
                    <div class="updates-form-group required">
                        <label>السنة:</label>
                        <select id="updatesYearSelect">
                            <option value="">اختر السنة</option>
                        </select>
                    </div>

                    <div class="updates-form-group required">
                        <label>الشهر:</label>
                        <select id="updatesMonthSelect" disabled>
                            <option value="">اختر الشهر</option>
                        </select>
                    </div>

                    <div class="updates-form-group">
                        <label>اليوم:</label>
                        <select id="updatesDaySelect" disabled>
                            <option value="">جميع الأيام</option>
                        </select>
                    </div>

                    <div class="updates-form-group">
                        <label>الأسبوع:</label>
                        <select id="updatesWeekSelect" disabled>
                            <option value="">جميع الأسابيع</option>
                            <option value="1">الأسبوع الأول</option>
                            <option value="2">الأسبوع الثاني</option>
                            <option value="3">الأسبوع الثالث</option>
                            <option value="4">الأسبوع الرابع</option>
                        </select>
                    </div>
                </div>

                <div class="updates-filter-actions">
                    <button class="updates-btn updates-btn-secondary" onclick="clearUpdatesFilter()">
                        <i class="fas fa-eraser"></i>
                        مسح الفلتر
                    </button>
                    <button class="updates-btn updates-btn-primary" onclick="applyUpdatesFilter()">
                        <i class="fas fa-search"></i>
                        البحث عن التحديثات
                    </button>
                </div>

                <!-- نتائج البحث -->
                <div class="updates-results" id="updatesResults">
                    <div class="updates-results-header">
                        <h4>نتائج البحث</h4>
                        <span id="updatesResultsCount">0 تحديث</span>
                    </div>
                    <div class="updates-results-content" id="updatesResultsContent">
                        <!-- سيتم ملء النتائج هنا -->
                    </div>
                </div>
            </div>
        </div>
    `;

    document.body.insertAdjacentHTML('beforeend', modalHtml);

    // إظهار النافذة مع تأثير
    setTimeout(() => {
        document.getElementById('lastUpdatesModal').classList.add('show');
    }, 100);

    // تهيئة النموذج
    initializeUpdatesFilter();
}

// إغلاق نافذة فلتر آخر التحديثات
function closeLastUpdatesModal() {
    const modal = document.getElementById('lastUpdatesModal');
    if (modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            modal.remove();
        }, 300);
    }
}

// تهيئة نموذج فلتر التحديثات
function initializeUpdatesFilter() {
    // تحميل السنوات المتاحة
    loadAvailableYears();

    // ربط الأحداث
    document.getElementById('updatesYearSelect').addEventListener('change', function() {
        loadAvailableMonths(this.value);
    });

    document.getElementById('updatesMonthSelect').addEventListener('change', function() {
        const year = document.getElementById('updatesYearSelect').value;
        if (year && this.value) {
            loadAvailableDays(year, this.value);
        }
    });
}

// تحميل السنوات المتاحة
function loadAvailableYears() {
    const yearSelect = document.getElementById('updatesYearSelect');
    const currentYear = new Date().getFullYear();
    const years = [];

    // إضافة السنوات من السنة الحالية إلى 5 سنوات سابقة
    for (let i = 0; i <= 5; i++) {
        years.push(currentYear - i);
    }

    yearSelect.innerHTML = '<option value="">اختر السنة</option>';
    years.forEach(year => {
        const option = document.createElement('option');
        option.value = year;
        option.textContent = year;
        yearSelect.appendChild(option);
    });
}

// تحميل الشهور المتاحة
function loadAvailableMonths(year) {
    const monthSelect = document.getElementById('updatesMonthSelect');
    const daySelect = document.getElementById('updatesDaySelect');
    const weekSelect = document.getElementById('updatesWeekSelect');

    if (!year) {
        monthSelect.disabled = true;
        daySelect.disabled = true;
        weekSelect.disabled = true;
        return;
    }

    const months = [
        { value: '01', name: 'يناير' },
        { value: '02', name: 'فبراير' },
        { value: '03', name: 'مارس' },
        { value: '04', name: 'أبريل' },
        { value: '05', name: 'مايو' },
        { value: '06', name: 'يونيو' },
        { value: '07', name: 'يوليو' },
        { value: '08', name: 'أغسطس' },
        { value: '09', name: 'سبتمبر' },
        { value: '10', name: 'أكتوبر' },
        { value: '11', name: 'نوفمبر' },
        { value: '12', name: 'ديسمبر' }
    ];

    monthSelect.innerHTML = '<option value="">اختر الشهر</option>';
    months.forEach(month => {
        const option = document.createElement('option');
        option.value = month.value;
        option.textContent = month.name;
        monthSelect.appendChild(option);
    });

    monthSelect.disabled = false;
    daySelect.disabled = true;
    weekSelect.disabled = true;
}

// تحميل الأيام المتاحة
function loadAvailableDays(year, month) {
    const daySelect = document.getElementById('updatesDaySelect');
    const weekSelect = document.getElementById('updatesWeekSelect');

    // الحصول على عدد أيام الشهر
    const daysInMonth = new Date(year, month, 0).getDate();

    daySelect.innerHTML = '<option value="">جميع الأيام</option>';
    for (let day = 1; day <= daysInMonth; day++) {
        const option = document.createElement('option');
        option.value = day.toString().padStart(2, '0');
        option.textContent = day;
        daySelect.appendChild(option);
    }

    daySelect.disabled = false;
    weekSelect.disabled = false;
}

// مسح فلتر التحديثات
function clearUpdatesFilter() {
    document.getElementById('updatesYearSelect').value = '';
    document.getElementById('updatesMonthSelect').value = '';
    document.getElementById('updatesMonthSelect').disabled = true;
    document.getElementById('updatesDaySelect').value = '';
    document.getElementById('updatesDaySelect').disabled = true;
    document.getElementById('updatesWeekSelect').value = '';
    document.getElementById('updatesWeekSelect').disabled = true;

    // إخفاء النتائج
    document.getElementById('updatesResults').classList.remove('show');
}

// تطبيق فلتر التحديثات
function applyUpdatesFilter() {
    const year = document.getElementById('updatesYearSelect').value;
    const month = document.getElementById('updatesMonthSelect').value;
    const day = document.getElementById('updatesDaySelect').value;
    const week = document.getElementById('updatesWeekSelect').value;

    if (!year || !month) {
        alert('يرجى اختيار السنة والشهر على الأقل');
        return;
    }

    console.log('🔍 البحث عن التحديثات:', { year, month, day, week });

    // البحث عن الوحدات المحدثة
    const filteredUpdates = findUpdatedUnits(year, month, day, week);

    // عرض النتائج
    displayUpdatesResults(filteredUpdates);
}

// البحث عن الوحدات المحدثة
function findUpdatedUnits(year, month, day, week) {
    const updates = [];

    properties.forEach(property => {
        const updateDate = property['تاريخ آخر تحديث'];
        const updateType = property['نوع التحديث'];
        const updatedBy = property['المسؤول عن التحديث'];

        if (updateDate && isDateInRange(updateDate, year, month, day, week)) {
            updates.push({
                property,
                updateDate,
                updateType: updateType || 'تعديل',
                updatedBy: updatedBy || 'غير محدد',
                timestamp: parseArabicDate(updateDate)
            });
        }
    });

    // ترتيب حسب التاريخ (الأحدث أولاً)
    updates.sort((a, b) => b.timestamp - a.timestamp);

    return updates;
}

// التحقق من وجود التاريخ في النطاق المحدد
function isDateInRange(dateString, year, month, day, week) {
    try {
        const date = parseArabicDate(dateString);
        if (!date) return false;

        const dateYear = date.getFullYear().toString();
        const dateMonth = (date.getMonth() + 1).toString().padStart(2, '0');
        const dateDay = date.getDate().toString().padStart(2, '0');

        // التحقق من السنة والشهر
        if (dateYear !== year || dateMonth !== month) {
            return false;
        }

        // التحقق من اليوم إذا تم تحديده
        if (day && dateDay !== day) {
            return false;
        }

        // التحقق من الأسبوع إذا تم تحديده
        if (week) {
            const dayOfMonth = date.getDate();
            const weekNumber = Math.ceil(dayOfMonth / 7);
            if (weekNumber.toString() !== week) {
                return false;
            }
        }

        return true;
    } catch (error) {
        console.error('خطأ في تحليل التاريخ:', dateString, error);
        return false;
    }
}

// تحليل التاريخ العربي للتتبع
function parseArabicDate(dateString) {
    if (!dateString) return null;

    try {
        // تحويل الأرقام العربية إلى إنجليزية
        let normalizedDate = dateString.replace(/[٠-٩]/g, (d) => '٠١٢٣٤٥٦٧٨٩'.indexOf(d));

        // معالجة التنسيقات المختلفة
        if (normalizedDate.includes('/')) {
            // تنسيق DD/MM/YYYY
            const parts = normalizedDate.split('/');
            if (parts.length === 3) {
                const day = parseInt(parts[0]);
                const month = parseInt(parts[1]) - 1; // JavaScript months are 0-based
                const year = parseInt(parts[2]);
                return new Date(year, month, day);
            }
        } else if (normalizedDate.includes('-')) {
            // تنسيق YYYY-MM-DD أو DD-MM-YYYY
            const parts = normalizedDate.split('-');
            if (parts.length === 3) {
                if (parts[0].length === 4) {
                    // YYYY-MM-DD
                    return new Date(parseInt(parts[0]), parseInt(parts[1]) - 1, parseInt(parts[2]));
                } else {
                    // DD-MM-YYYY
                    return new Date(parseInt(parts[2]), parseInt(parts[1]) - 1, parseInt(parts[0]));
                }
            }
        }

        // محاولة أخيرة
        return new Date(normalizedDate);
    } catch (error) {
        console.error('خطأ في تحليل التاريخ:', dateString, error);
        return null;
    }
}

// عرض نتائج التحديثات
function displayUpdatesResults(updates) {
    const resultsDiv = document.getElementById('updatesResults');
    const resultsContent = document.getElementById('updatesResultsContent');
    const resultsCount = document.getElementById('updatesResultsCount');

    resultsCount.textContent = `${updates.length} تحديث`;

    if (updates.length === 0) {
        resultsContent.innerHTML = `
            <div style="text-align: center; padding: 2rem; color: #6c757d;">
                <i class="fas fa-search" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.5;"></i>
                <p>لم يتم العثور على تحديثات في الفترة المحددة</p>
            </div>
        `;
    } else {
        resultsContent.innerHTML = updates.map(update => `
            <div class="update-item">
                <div class="update-header">
                    <div class="update-unit-info">
                        الوحدة ${update.property['رقم  الوحدة '] || update.property['رقم الوحدة'] || 'غير محدد'} - ${update.property['اسم العقار']}
                    </div>
                    <div class="update-timestamp">
                        ${update.updateDate}
                    </div>
                </div>
                <div class="update-details">
                    <div><strong>المستأجر:</strong> ${update.property['اسم المستأجر'] || 'فارغ'}</div>
                    <div><strong>رقم العقد:</strong> ${update.property['رقم العقد'] || 'غير محدد'}</div>
                    <div><strong>المدينة:</strong> ${update.property['المدينة'] || 'غير محدد'}</div>
                    <div><strong>المسؤول:</strong> ${update.updatedBy}</div>
                </div>
                <span class="update-type ${getUpdateTypeClass(update.updateType)}">
                    ${update.updateType}
                </span>
            </div>
        `).join('');
    }

    resultsDiv.classList.add('show');
}

// الحصول على كلاس نوع التحديث
function getUpdateTypeClass(updateType) {
    switch (updateType) {
        case 'تعديل':
        case 'تحرير':
            return 'edit';
        case 'إفراغ':
            return 'empty';
        case 'عميل جديد':
        case 'تجديد العقد':
            return 'new';
        case 'نقل وحدة':
            return 'transfer';
        default:
            return 'edit';
    }
}

// ==================== نظام تتبع التغييرات ====================

// متغيرات نظام التتبع
let changeTrackingLogs = [];
let isTrackingEnabled = true;

// أنواع العمليات المدعومة
const OPERATION_TYPES = {
    EDIT_DATA: 'تعديل بيانات موجودة',
    NEW_CLIENT: 'عميل جديد',
    RENEW_CONTRACT: 'تجديد عقد',
    EMPTY_UNIT: 'إفراغ وحدة',
    MERGE_UNITS: 'دمج وحدات',
    SPLIT_UNITS: 'فصل وحدات',
    TRANSFER_UNIT: 'نقل وحدة',
    DELETE_UNIT: 'حذف وحدة',
    CREATE_PROPERTY: 'إنشاء عقار',
    DELETE_PROPERTY: 'حذف عقار'
};

// هيكل سجل التتبع المحسن
function createChangeLog(operationType, unitData, changes = {}, additionalInfo = {}) {
    const now = new Date();
    const hijriDate = getHijriDate(now);
    // استخدام التاريخ الميلادي بدلاً من الهجري
    const gregorianDate = formatDate(now); // استخدام دالة formatDate المحدثة
    const dayName = getDayName(now);

    return {
        id: `log_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`,
        timestamp: now.toISOString(),
        date: gregorianDate,
        hijriDate: hijriDate,
        time: now.toLocaleTimeString('ar-SA', {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: true
        }),
        dayName: dayName,
        year: now.getFullYear(),
        month: now.getMonth() + 1,
        operationType: operationType,
        user: getCurrentUser(),
        unitNumber: unitData['رقم  الوحدة '] || unitData['رقم الوحدة'] || 'غير محدد',
        propertyName: unitData['اسم العقار'] || 'غير محدد',
        city: unitData['المدينة'] || 'غير محدد',
        contractNumber: unitData['رقم العقد'] || 'غير محدد',
        tenantName: unitData['اسم المستأجر'] || unitData['المستأجر'] || '',
        changes: changes,
        originalData: additionalInfo.originalData || null,
        newData: additionalInfo.newData || null,
        previousTenant: additionalInfo.previousTenant || null,
        newTenant: unitData['اسم المستأجر'] || null,
        reason: additionalInfo.reason || null,
        notes: additionalInfo.notes || null,
        affectedUnits: additionalInfo.affectedUnits || [],
        sourceProperty: additionalInfo.sourceProperty || null,
        destinationProperty: additionalInfo.destinationProperty || null
    };
}

// الحصول على التاريخ الهجري المحسن
function getHijriDate(date) {
    try {
        // استخدام Intl.DateTimeFormat للحصول على التاريخ الهجري
        const hijri = new Intl.DateTimeFormat('ar-SA-u-ca-islamic', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        }).format(date);

        return hijri;
    } catch (error) {
        // في حالة عدم دعم التاريخ الهجري، استخدام تقريب محسن
        console.warn('لا يمكن الحصول على التاريخ الهجري، سيتم استخدام تقريب');
        return approximateHijriDate(date);
    }
}

// تحسين التاريخ الهجري التقريبي
function approximateHijriDate(date) {
    const hijriMonths = [
        'محرم', 'صفر', 'ربيع الأول', 'ربيع الثاني', 'جمادى الأولى', 'جمادى الثانية',
        'رجب', 'شعبان', 'رمضان', 'شوال', 'ذو القعدة', 'ذو الحجة'
    ];

    // تحسين التقريب: استخدام معادلة أكثر دقة
    const gregorianYear = date.getFullYear();
    const gregorianMonth = date.getMonth();
    const gregorianDay = date.getDate();

    // تقريب محسن للسنة الهجرية
    const hijriYear = Math.floor(gregorianYear - 621.5 + (gregorianMonth * 30.44 + gregorianDay) / 354.37);

    // تقريب للشهر الهجري
    const dayOfYear = Math.floor((date - new Date(gregorianYear, 0, 0)) / (1000 * 60 * 60 * 24));
    const hijriMonthIndex = Math.floor((dayOfYear % 354) / 29.5) % 12;
    const hijriDay = Math.floor((dayOfYear % 354) % 29.5) + 1;

    return `${hijriDay} ${hijriMonths[hijriMonthIndex]} ${hijriYear}هـ`;
}

// إزالة الوظيفة المكررة - تم دمجها في الوظيفة أعلاه

// الحصول على اسم اليوم
function getDayName(date) {
    const days = ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت'];
    return days[date.getDay()];
}

// حفظ سجل التتبع في Supabase
async function saveChangeLogToSupabase(changeLog) {
    if (!isTrackingEnabled) {
        console.log('ℹ️ تتبع التغييرات معطل');
        return false;
    }

    try {
        if (typeof supabaseClient !== 'undefined' && supabaseClient) {
            // محاولة إنشاء الجدول إذا لم يكن موجوداً
            await createChangeLogsTableIfNotExists();

            console.log('☁️ حفظ سجل التتبع في Supabase:', changeLog.id);

            // تحضير البيانات للحفظ مع التأكد من تطابق أسماء الأعمدة
            const dataToSave = {
                id: changeLog.id,
                timestamp: changeLog.timestamp,
                operation_type: changeLog.operationType,
                unit_number: changeLog.unitNumber,
                property_name: changeLog.propertyName,
                tenant_name: changeLog.tenantName || changeLog.newTenant,
                contract_number: changeLog.contractNumber,
                city: changeLog.city,
                changes: changeLog.changes || {},
                additional_info: changeLog.additionalInfo || {},
                user_name: changeLog.user || changeLog.responsibleUser || 'النظام',
                description: changeLog.description || `${changeLog.operationType} - ${changeLog.unitNumber}`,
                date: changeLog.date,
                time: changeLog.time,
                day_name: changeLog.dayName,
                hijri_date: changeLog.hijriDate,
                new_tenant: changeLog.newTenant,
                previous_tenant: changeLog.previousTenant,
                reason: changeLog.reason,
                source_property: changeLog.sourceProperty,
                destination_property: changeLog.destinationProperty,
                responsible_user: changeLog.responsibleUser || changeLog.user
            };

            console.log('📋 البيانات المُعدة للحفظ:', dataToSave);

            const { data, error } = await supabaseClient
                .from('change_logs')
                .insert([dataToSave]);

            if (error) {
                console.warn('⚠️ لم يتم حفظ سجل التتبع في Supabase:', error.message);

                // محاولة إعادة المحاولة مرة واحدة
                console.log('🔄 محاولة إعادة حفظ السجل...');
                await new Promise(resolve => setTimeout(resolve, 1000));

                const { data: retryData, error: retryError } = await supabaseClient
                    .from('change_logs')
                    .insert([changeLog]);

                if (retryError) {
                    console.error('❌ فشل في إعادة المحاولة:', retryError.message);
                    return false;
                } else {
                    console.log('✅ تم حفظ سجل التتبع في Supabase بعد إعادة المحاولة');
                    return true;
                }
            }

            console.log('✅ تم حفظ سجل التتبع في Supabase بنجاح:', changeLog.id);

            // التحقق من الحفظ بقراءة السجل
            try {
                const { data: verifyData, error: verifyError } = await supabaseClient
                    .from('change_logs')
                    .select('id')
                    .eq('id', changeLog.id)
                    .single();

                if (verifyError || !verifyData) {
                    console.warn('⚠️ لم يتم العثور على السجل بعد الحفظ');
                    return false;
                }

                console.log('🔍 تم التحقق من وجود السجل في قاعدة البيانات');
            } catch (verifyErr) {
                console.warn('⚠️ خطأ في التحقق من الحفظ:', verifyErr.message);
            }

            return true;
        } else {
            console.warn('⚠️ Supabase غير متوفر - لم يتم حفظ سجل التتبع');
            return false;
        }
    } catch (error) {
        console.error('❌ خطأ في حفظ سجل التتبع في Supabase:', error);
        return false;
    }
}

// إنشاء جدول التتبع إذا لم يكن موجوداً
async function createChangeLogsTableIfNotExists() {
    try {
        console.log('🔍 التحقق من وجود جدول سجلات التتبع...');

        // محاولة بسيطة للوصول للجدول
        const { data: testData, error: testError } = await supabaseClient
            .from('change_logs')
            .select('id')
            .limit(1);

        if (!testError) {
            console.log('✅ جدول سجلات التتبع موجود ويعمل بشكل صحيح');
            return true;
        }

        // إذا كان الخطأ يشير إلى عدم وجود الجدول
        if (testError.message && testError.message.includes('does not exist')) {
            console.log('📊 جدول سجلات التتبع غير موجود، سيتم إنشاؤه...');

            // محاولة إنشاء الجدول
            const createTableQuery = `
                CREATE TABLE IF NOT EXISTS change_logs (
                    id TEXT PRIMARY KEY,
                    timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),
                    operation_type TEXT NOT NULL,
                    unit_number TEXT,
                    property_name TEXT,
                    tenant_name TEXT,
                    contract_number TEXT,
                    city TEXT,
                    changes JSONB DEFAULT '{}',
                    additional_info JSONB DEFAULT '{}',
                    user_name TEXT,
                    description TEXT,
                    date TEXT,
                    time TEXT,
                    day_name TEXT,
                    hijri_date TEXT,
                    new_tenant TEXT,
                    previous_tenant TEXT,
                    reason TEXT,
                    source_property TEXT,
                    destination_property TEXT,
                    responsible_user TEXT,
                    created_at TIMESTAMPTZ DEFAULT NOW(),
                    updated_at TIMESTAMPTZ DEFAULT NOW()
                );
            `;

            console.log('⚠️ لا يمكن إنشاء الجدول من التطبيق، يجب إنشاؤه من لوحة تحكم Supabase');
            return false;
        }

        console.log('✅ جدول سجلات التتبع متاح للاستخدام');
        return true;

    } catch (error) {
        console.warn('⚠️ خطأ في التحقق من جدول سجلات التتبع:', error.message);
        console.log('📊 سيتم المتابعة مع افتراض وجود الجدول');
        return true; // نفترض أن الجدول موجود ونحاول الاستمرار
    }
}

// تحميل سجلات التتبع من Supabase (محسن مع تشخيص مفصل)
async function loadChangeLogsFromSupabase(limit = 2000, offset = 0) {
    try {
        if (typeof supabaseClient !== 'undefined' && supabaseClient) {
            console.log(`☁️ محاولة تحميل سجلات التتبع من Supabase (الحد الأقصى: ${limit})...`);
            console.log('🔗 معلومات الاتصال:', {
                url: supabaseClient.supabaseUrl,
                hasKey: !!supabaseClient.supabaseKey
            });

            const { data, error } = await supabaseClient
                .from('change_logs')
                .select('*')
                .order('timestamp', { ascending: false })
                .range(offset, offset + limit - 1);

            if (error) {
                console.error('❌ خطأ في تحميل سجلات التتبع من Supabase:', {
                    message: error.message,
                    details: error.details,
                    hint: error.hint,
                    code: error.code
                });

                // محاولة تشخيص نوع الخطأ
                if (error.message.includes('permission denied') || error.message.includes('RLS')) {
                    console.warn('🔒 مشكلة في الصلاحيات - تحقق من إعدادات RLS في Supabase');
                } else if (error.message.includes('does not exist')) {
                    console.warn('📊 جدول change_logs غير موجود في Supabase');
                } else if (error.message.includes('network') || error.message.includes('fetch')) {
                    console.warn('🌐 مشكلة في الاتصال بالشبكة');
                }

                console.log('📊 سيتم الاعتماد على سجلات التتبع المحلية');
                return [];
            }

            console.log(`✅ تم تحميل ${data.length} سجل تتبع من Supabase بنجاح`);

            // طباعة عينة من البيانات للتشخيص
            if (data.length > 0) {
                console.log('📋 عينة من البيانات المحملة:', {
                    firstRecord: {
                        id: data[0].id,
                        operationType: data[0].operation_type,
                        timestamp: data[0].timestamp,
                        unitNumber: data[0].unit_number,
                        propertyName: data[0].property_name
                    },
                    totalRecords: data.length
                });
            }

            // إضافة معلومات إضافية للسجلات إذا لم تكن موجودة
            const processedData = data.map(log => {
                // تحويل أسماء الحقول من snake_case إلى camelCase للتوافق
                const processedLog = {
                    id: log.id,
                    timestamp: log.timestamp,
                    operationType: log.operation_type || log.operationType,
                    unitNumber: log.unit_number || log.unitNumber,
                    propertyName: log.property_name || log.propertyName,
                    tenantName: log.tenant_name || log.tenantName,
                    contractNumber: log.contract_number || log.contractNumber,
                    city: log.city,
                    changes: log.changes || {},
                    additionalInfo: log.additional_info || log.additionalInfo || {},
                    user: log.user_name || log.user || log.responsible_user,
                    responsibleUser: log.responsible_user || log.user_name || log.user,
                    description: log.description,
                    newTenant: log.new_tenant || log.newTenant,
                    previousTenant: log.previous_tenant || log.previousTenant,
                    reason: log.reason,
                    sourceProperty: log.source_property || log.sourceProperty,
                    destinationProperty: log.destination_property || log.destinationProperty
                };

                // إضافة معلومات التاريخ إذا لم تكن موجودة - استخدام التاريخ الميلادي
                if (!processedLog.date && processedLog.timestamp) {
                    const date = new Date(processedLog.timestamp);
                    processedLog.date = formatDate(date); // استخدام التاريخ الميلادي
                    processedLog.time = formatTime(date); // استخدام الوقت المبسط
                    processedLog.dayName = getDayName(date);
                    processedLog.hijriDate = getHijriDate(date);
                } else {
                    // استخدام البيانات الموجودة
                    processedLog.date = log.date || processedLog.date;
                    processedLog.time = log.time || processedLog.time;
                    processedLog.dayName = log.day_name || processedLog.dayName;
                    processedLog.hijriDate = log.hijri_date || processedLog.hijriDate;
                }

                return processedLog;
            });

            console.log(`🔄 تم معالجة ${processedData.length} سجل وتحويلها للتنسيق المطلوب`);
            return processedData;
        } else {
            console.warn('⚠️ Supabase غير متوفر - تحقق من تحميل مكتبة Supabase');
            return [];
        }
    } catch (error) {
        console.error('❌ خطأ عام في تحميل سجلات التتبع من Supabase:', {
            message: error.message,
            stack: error.stack
        });
        return [];
    }
}

// تحميل جميع السجلات من Supabase بدون حد أقصى
async function loadAllChangeLogsFromSupabase() {
    try {
        if (typeof supabaseClient !== 'undefined' && supabaseClient) {
            console.log('☁️ تحميل جميع سجلات التتبع من Supabase...');

            const { data, error } = await supabaseClient
                .from('change_logs')
                .select('*')
                .order('timestamp', { ascending: false });

            if (error) {
                console.error('❌ خطأ في تحميل جميع السجلات:', error);
                return [];
            }

            console.log(`✅ تم تحميل ${data.length} سجل من إجمالي السجلات`);

            // معالجة البيانات
            const processedData = data.map(log => {
                const processedLog = {
                    id: log.id,
                    timestamp: log.timestamp,
                    operationType: log.operation_type || log.operationType,
                    unitNumber: log.unit_number || log.unitNumber,
                    propertyName: log.property_name || log.propertyName,
                    tenantName: log.tenant_name || log.tenantName,
                    contractNumber: log.contract_number || log.contractNumber,
                    city: log.city,
                    changes: log.changes || {},
                    additionalInfo: log.additional_info || log.additionalInfo || {},
                    user: log.user_name || log.user || log.responsible_user,
                    responsibleUser: log.responsible_user || log.user_name || log.user,
                    description: log.description,
                    newTenant: log.new_tenant || log.newTenant,
                    previousTenant: log.previous_tenant || log.previousTenant,
                    reason: log.reason,
                    sourceProperty: log.source_property || log.sourceProperty,
                    destinationProperty: log.destination_property || log.destinationProperty
                };

                // إضافة معلومات التاريخ
                if (!processedLog.date && processedLog.timestamp) {
                    const date = new Date(processedLog.timestamp);
                    processedLog.date = formatDate(date);
                    processedLog.time = formatTime(date);
                    processedLog.dayName = getDayName(date);
                    processedLog.hijriDate = getHijriDate(date);
                } else {
                    processedLog.date = log.date || processedLog.date;
                    processedLog.time = log.time || processedLog.time;
                    processedLog.dayName = log.day_name || processedLog.dayName;
                    processedLog.hijriDate = log.hijri_date || processedLog.hijriDate;
                }

                return processedLog;
            });

            return processedData;
        } else {
            console.warn('⚠️ Supabase غير متوفر');
            return [];
        }
    } catch (error) {
        console.error('❌ خطأ في تحميل جميع السجلات:', error);
        return [];
    }
}

// إضافة سجل تتبع جديد - محدث للجدول المخصص
async function addChangeLog(operationType, unitData, changes = {}, additionalInfo = {}) {
    if (!isTrackingEnabled) return;

    const changeLog = createChangeLog(operationType, unitData, changes, additionalInfo);

    // حفظ محلياً (للتوافق مع النظام القديم)
    changeTrackingLogs.unshift(changeLog);

    // حفظ في localStorage
    try {
        localStorage.setItem('changeTrackingLogs', JSON.stringify(changeTrackingLogs.slice(0, 1000))); // حفظ آخر 1000 سجل
    } catch (error) {
        console.warn('⚠️ لم يتم حفظ سجلات التتبع محلياً:', error);
    }

    // حفظ في الجدول المخصص الجديد (مع معالجة الأخطاء)
    try {
        await saveTrackingLogToNewTable(changeLog, unitData);
    } catch (error) {
        console.warn('⚠️ فشل في حفظ سجل التتبع في الجدول المخصص:', error.message);
        // المتابعة مع النظام القديم
    }

    // حفظ في النظام القديم للتوافق (مع معالجة الأخطاء)
    try {
        await saveChangeLogToSupabase(changeLog);
    } catch (error) {
        console.warn('⚠️ فشل في حفظ سجل التتبع في النظام القديم:', error.message);
        // حفظ في جدول العقارات كحل بديل
        await saveTrackingLogToPropertiesTable(changeLog, unitData);
    }

    console.log('📝 تم إضافة سجل تتبع:', operationType, '- الوحدة:', changeLog.unitNumber);
}

// حفظ سجل التتبع في جدول العقارات كحل بديل
async function saveTrackingLogToPropertiesTable(changeLog, unitData) {
    try {
        if (!supabaseClient) {
            console.warn('⚠️ Supabase غير متصل، تخطي الحفظ البديل');
            return;
        }

        console.log('💾 حفظ سجل التتبع في جدول العقارات كحل بديل...');

        // البحث عن العقار المرتبط
        const { data: existingProperty, error: searchError } = await supabaseClient
            .from('properties')
            .select('id, tracking_logs')
            .eq('unit_number', unitData['رقم  الوحدة '] || changeLog.unitNumber)
            .eq('property_name', unitData['اسم العقار'] || changeLog.propertyName)
            .single();

        if (searchError && !searchError.message.includes('No rows')) {
            console.error('❌ خطأ في البحث عن العقار:', searchError);
            return;
        }

        if (existingProperty) {
            // إضافة السجل إلى العقار الموجود
            const existingLogs = existingProperty.tracking_logs || [];
            const updatedLogs = [changeLog, ...existingLogs.slice(0, 49)]; // الاحتفاظ بآخر 50 سجل

            const { error: updateError } = await supabaseClient
                .from('properties')
                .update({
                    tracking_logs: updatedLogs,
                    updated_at: new Date().toISOString()
                })
                .eq('id', existingProperty.id);

            if (updateError) {
                console.error('❌ خطأ في تحديث سجلات التتبع:', updateError);
            } else {
                console.log('✅ تم حفظ سجل التتبع في جدول العقارات');
            }
        } else {
            console.warn('⚠️ لم يتم العثور على العقار المرتبط لحفظ سجل التتبع');
        }

    } catch (error) {
        console.error('❌ خطأ في حفظ سجل التتبع البديل:', error);
    }
}

// حفظ سجل التتبع في الجدول المخصص الجديد
async function saveTrackingLogToNewTable(changeLog, unitData) {
    try {
        // التحقق من وجود مدير سجلات التتبع
        if (typeof window.trackingLogsManager === 'undefined') {
            console.warn('⚠️ مدير سجلات التتبع غير متوفر');
            return;
        }

        // تحضير البيانات للجدول الجديد
        const trackingLogData = {
            operation_type: changeLog.operationType,
            timestamp: changeLog.timestamp,

            // معلومات الوحدة/العقار
            unit_number: unitData['رقم  الوحدة '] || changeLog.unitNumber,
            property_name: unitData['اسم العقار'] || changeLog.propertyName,
            contract_number: unitData['رقم العقد'] || null,
            city: unitData['المدينة'] || null,

            // معلومات المستأجر
            tenant_name: unitData['اسم المستأجر'] || null,
            tenant_phone: unitData['رقم جوال المستأجر'] || null,
            tenant_phone_2: unitData['رقم جوال إضافي'] || null,

            // معلومات العقد
            rent_value: unitData['قيمة  الايجار '] || null,
            start_date: formatDateForDatabase(unitData['تاريخ البداية']) || null,
            end_date: formatDateForDatabase(unitData['تاريخ النهاية']) || null,
            contract_type: unitData['نوع العقد'] || null,

            // معلومات التغييرات
            changes: changeLog.changes || {},
            additional_info: changeLog.additionalInfo || {},

            // معلومات المستخدم
            user_name: changeLog.responsibleUser || getCurrentUser(),
            description: changeLog.description || `${changeLog.operationType} - ${changeLog.unitNumber}`,
            source: 'web_app'
        };

        // حفظ في الجدول المخصص
        await window.trackingLogsManager.saveTrackingLogToSupabase(trackingLogData);

        console.log('✅ تم حفظ سجل التتبع في الجدول المخصص');
    } catch (error) {
        console.error('❌ خطأ في حفظ سجل التتبع في الجدول المخصص:', error);
    }
}

// مقارنة البيانات وإنشاء سجل التغييرات
function compareDataAndCreateChanges(originalData, newData) {
    const changes = {};
    const excludedFields = ['Column1', 'تاريخ آخر تحديث', 'نوع التحديث', 'المسؤول عن التحديث'];

    Object.keys(newData).forEach(key => {
        if (excludedFields.includes(key)) return;

        const oldValue = originalData[key];
        const newValue = newData[key];

        // تحويل القيم للمقارنة
        const oldStr = (oldValue || '').toString().trim();
        const newStr = (newValue || '').toString().trim();

        if (oldStr !== newStr) {
            changes[key] = {
                old: oldValue,
                new: newValue,
                fieldName: getFieldDisplayName(key)
            };
        }
    });

    return changes;
}

// الحصول على اسم الحقل للعرض
function getFieldDisplayName(fieldKey) {
    const fieldNames = {
        'اسم المستأجر': 'اسم المستأجر',
        'رقم العقد': 'رقم العقد',
        'قيمة  الايجار ': 'قيمة الإيجار',
        'تاريخ بداية العقد': 'تاريخ بداية العقد',
        'تاريخ نهاية العقد': 'تاريخ نهاية العقد',
        'عدد الاقساط': 'عدد الأقساط',
        'نوع العقد': 'نوع العقد',
        'المساحة': 'المساحة',
        'رقم حساب الكهرباء': 'رقم حساب الكهرباء',
        'الارتفاع': 'الارتفاع',
        'موقع العقار': 'موقع العقار',
        'رقم الصك': 'رقم الصك',
        'السجل العيني ': 'السجل العيني',
        'مساحةالصك': 'مساحة الصك',
        'المالك': 'المالك'
    };

    return fieldNames[fieldKey] || fieldKey;
}

// تحميل سجلات التتبع المحلية عند بدء التطبيق
function loadLocalChangeTrackingLogs() {
    try {
        const savedLogs = localStorage.getItem('changeTrackingLogs');
        if (savedLogs) {
            changeTrackingLogs = JSON.parse(savedLogs);
            console.log(`📚 تم تحميل ${changeTrackingLogs.length} سجل تتبع محلي`);
        }
    } catch (error) {
        console.error('❌ خطأ في تحميل سجلات التتبع المحلية:', error);
        changeTrackingLogs = [];
    }
}

// إضافة حقول التتبع للبيانات الموجودة
function addTrackingFieldsToExistingData() {
    let updatedCount = 0;
    const currentDate = new Date().toLocaleDateString('ar-SA');

    properties.forEach((property, index) => {
        // إضافة حقول التتبع إذا لم تكن موجودة
        if (!property['تاريخ آخر تحديث']) {
            property['تاريخ آخر تحديث'] = currentDate;
            property['نوع التحديث'] = 'بيانات موجودة';
            property['المسؤول عن التحديث'] = getCurrentUser();
            updatedCount++;
        }
    });

    if (updatedCount > 0) {
        console.log(`📝 تم إضافة حقول التتبع لـ ${updatedCount} وحدة`);

        // إضافة تواريخ متنوعة لبعض الوحدات للاختبار
        addVariedDatesToUnits();

        saveDataLocally();

        // مزامنة تلقائية مع Supabase
        autoSyncAfterEdit('تحديث البيانات');
    }
}

// دالة لإنشاء بيانات تجريبية وعرض سجل التتبع مباشرة (محسنة)
async function createSampleTrackingDataAndShow() {
    try {
        console.log('🎯 بدء إنشاء بيانات تجريبية وعرض سجل التتبع...');

        // فحص صلاحيات المستخدم - منع شركة السنيدي من الوصول
        const currentUserName = getCurrentUser();
        const currentUserKey = window.currentUser;

        if (currentUserKey === '1234' ||
            currentUserName === 'شركة السنيدي' ||
            currentUserName === 'شركة السنيدي1234' ||
            (currentUserName && currentUserName.includes('السنيدي'))) {

            console.log('🚫 منع الوصول لسجلات التتبع للمستخدم:', currentUserName);
            showDevelopmentModal();
            return;
        }

        // إظهار رسالة تحميل
        showToast('جاري إنشاء البيانات التجريبية وحفظها في Supabase...', 'info');

        // اختبار الاتصال بـ Supabase أولاً
        console.log('🔗 اختبار الاتصال بـ Supabase...');
        if (typeof supabaseClient === 'undefined' || !supabaseClient) {
            throw new Error('Supabase غير متوفر');
        }

        // إنشاء بيانات تجريبية وحفظها في Supabase مباشرة
        console.log('📊 إنشاء البيانات التجريبية وحفظها في Supabase...');
        const savedCount = await createAndSaveSampleTrackingData();

        if (savedCount === 0) {
            throw new Error('لم يتم حفظ أي سجل في Supabase');
        }

        // انتظار قصير للتأكد من حفظ البيانات
        console.log('⏳ انتظار حفظ البيانات في Supabase...');
        await new Promise(resolve => setTimeout(resolve, 2000));

        // التحقق من وجود السجلات في Supabase
        console.log('🔍 التحقق من وجود السجلات في Supabase...');
        const cloudLogs = await loadChangeLogsFromSupabase(10);
        console.log(`📊 تم العثور على ${cloudLogs.length} سجل في Supabase`);

        if (cloudLogs.length === 0) {
            showToast('تحذير: لم يتم العثور على سجلات في Supabase', 'warning');
        }

        // عرض سجل التتبع
        console.log('📋 عرض سجل التتبع من Supabase...');
        await showChangeTrackingModal();

        console.log('✅ تم إنشاء البيانات التجريبية وحفظها في Supabase وعرض سجل التتبع بنجاح');
        showToast(`تم إنشاء ${savedCount} سجل تجريبي وحفظها في Supabase بنجاح!`, 'success');

    } catch (error) {
        console.error('❌ خطأ في إنشاء البيانات التجريبية:', error);
        showToast('حدث خطأ في إنشاء البيانات التجريبية: ' + error.message, 'error');
    }
}

// دالة اختبار شاملة لتشخيص مشكلة سجلات التتبع
async function testTrackingFunction() {
    console.log('🧪 بدء اختبار شامل لنظام سجلات التتبع...');

    // اختبار 1: التحقق من Supabase
    console.log('1️⃣ اختبار اتصال Supabase...');
    if (typeof supabaseClient === 'undefined' || !supabaseClient) {
        console.error('❌ Supabase غير متوفر');
        alert('خطأ: Supabase غير متوفر');
        return;
    }
    console.log('✅ Supabase متوفر');

    // اختبار 2: التحقق من جدول change_logs
    console.log('2️⃣ اختبار الوصول لجدول change_logs...');
    try {
        const { data: testData, error: testError } = await supabaseClient
            .from('change_logs')
            .select('id')
            .limit(1);

        if (testError) {
            console.error('❌ خطأ في الوصول للجدول:', testError);
            alert(`خطأ في الوصول للجدول: ${testError.message}`);
            return;
        }
        console.log('✅ يمكن الوصول لجدول change_logs');
        console.log('📊 عدد السجلات الموجودة:', testData?.length || 0);
    } catch (error) {
        console.error('❌ خطأ في اختبار الجدول:', error);
        alert(`خطأ في اختبار الجدول: ${error.message}`);
        return;
    }

    // اختبار 3: محاولة تحميل السجلات
    console.log('3️⃣ اختبار تحميل السجلات...');
    try {
        const logs = await loadChangeLogsFromSupabase(10);
        console.log('✅ تم تحميل السجلات بنجاح:', logs.length);

        if (logs.length > 0) {
            console.log('📋 عينة من السجلات:', logs[0]);
        }
    } catch (error) {
        console.error('❌ خطأ في تحميل السجلات:', error);
        alert(`خطأ في تحميل السجلات: ${error.message}`);
        return;
    }

    // اختبار 4: محاولة إنشاء سجل تجريبي
    console.log('4️⃣ اختبار إنشاء سجل تجريبي...');
    try {
        const testLog = {
            id: 'test_' + Date.now(),
            timestamp: new Date().toISOString(),
            operation_type: 'اختبار النظام',
            unit_number: 'TEST-001',
            property_name: 'عقار تجريبي',
            tenant_name: 'مستأجر تجريبي',
            user_name: 'نظام الاختبار',
            description: 'سجل اختبار للتحقق من عمل النظام',
            date: formatDate(new Date()), // استخدام التاريخ الميلادي
            time: formatTime(new Date()) // استخدام الوقت المبسط
        };

        const success = await saveChangeLogToSupabase(testLog);
        if (success) {
            console.log('✅ تم إنشاء سجل تجريبي بنجاح');

            // محاولة تحميل السجل المُنشأ
            const updatedLogs = await loadChangeLogsFromSupabase(5);
            const foundTestLog = updatedLogs.find(log => log.id === testLog.id);

            if (foundTestLog) {
                console.log('✅ تم العثور على السجل التجريبي في قاعدة البيانات');
                console.log('🎉 النظام يعمل بشكل صحيح!');
                alert('🎉 اختبار ناجح! النظام يعمل بشكل صحيح');
            } else {
                console.warn('⚠️ لم يتم العثور على السجل التجريبي');
                alert('⚠️ تم حفظ السجل لكن لم يتم العثور عليه عند التحميل');
            }
        } else {
            console.error('❌ فشل في إنشاء سجل تجريبي');
            alert('❌ فشل في إنشاء سجل تجريبي');
        }
    } catch (error) {
        console.error('❌ خطأ في اختبار إنشاء السجل:', error);
        alert(`خطأ في اختبار إنشاء السجل: ${error.message}`);
    }

    // اختبار 5: عرض واجهة سجل التتبع
    console.log('5️⃣ اختبار عرض واجهة سجل التتبع...');
    try {
        await showChangeTrackingModal();
        console.log('✅ تم عرض واجهة سجل التتبع بنجاح');
    } catch (error) {
        console.error('❌ خطأ في عرض واجهة سجل التتبع:', error);
        alert(`خطأ في عرض واجهة سجل التتبع: ${error.message}`);
    }
}

// إنشاء بيانات تجريبية وحفظها في Supabase مباشرة
async function createAndSaveSampleTrackingData() {
    try {
        console.log('🔄 بدء إنشاء البيانات التجريبية وحفظها في Supabase...');

        // حذف البيانات التجريبية القديمة من Supabase أولاً
        await cleanupSampleDataFromSupabase();

        console.log('📊 إنشاء بيانات تجريبية للتتبع...');

    // إنشاء بيانات تجريبية متنوعة بتواريخ الشهر الحالي
    const today = new Date();
    const currentYear = today.getFullYear();
    const currentMonth = today.getMonth() + 1;

    const sampleLogs = [
        {
            id: 'sample_1_' + Date.now(),
            timestamp: new Date(Date.now() - 86400000).toISOString(), // أمس
            date: `${(today.getDate() - 1).toString().padStart(2, '0')}/${currentMonth.toString().padStart(2, '0')}/${currentYear}`,
            time: new Date(Date.now() - 86400000).toLocaleTimeString('ar-SA'),
            operationType: OPERATION_TYPES.EDIT_DATA,
            user: 'المدير - عمر',
            unitNumber: '101',
            propertyName: 'عمارة النخيل',
            city: 'الرياض',
            contractNumber: 'C001',
            changes: {
                'tenant_name': {
                    old: 'أحمد محمد',
                    new: 'محمد أحمد',
                    fieldName: 'اسم المستأجر'
                },
                'rent_amount': {
                    old: '2000',
                    new: '2200',
                    fieldName: 'قيمة الإيجار'
                }
            },
            newTenant: 'محمد أحمد',
            previousTenant: 'أحمد محمد'
        },
        {
            id: 'sample_2_' + Date.now(),
            timestamp: new Date(Date.now() - 172800000).toISOString(), // قبل يومين
            date: `${Math.max(1, today.getDate() - 2).toString().padStart(2, '0')}/${currentMonth.toString().padStart(2, '0')}/${currentYear}`,
            time: new Date(Date.now() - 172800000).toLocaleTimeString('ar-SA'),
            operationType: OPERATION_TYPES.NEW_CLIENT,
            user: 'المدير المساعد - محمد',
            unitNumber: '205',
            propertyName: 'برج الأمل',
            city: 'جدة',
            contractNumber: 'C002',
            changes: {},
            newTenant: 'سارة علي',
            previousTenant: null,
            reason: 'عميل جديد'
        },
        {
            id: 'sample_3_' + Date.now(),
            timestamp: new Date(Date.now() - 259200000).toISOString(), // قبل 3 أيام
            date: `${Math.max(1, today.getDate() - 3).toString().padStart(2, '0')}/${currentMonth.toString().padStart(2, '0')}/${currentYear}`,
            time: new Date(Date.now() - 259200000).toLocaleTimeString('ar-SA'),
            operationType: OPERATION_TYPES.EMPTY_UNIT,
            user: 'المدير - عمر',
            unitNumber: '302',
            propertyName: 'مجمع الورود',
            city: 'الدمام',
            contractNumber: 'C003',
            changes: {},
            previousTenant: 'خالد سعد',
            reason: 'إفراغ وحدة'
        },
        {
            id: 'sample_4_' + Date.now(),
            timestamp: new Date(Date.now() - 345600000).toISOString(), // قبل 4 أيام
            date: `${Math.max(1, today.getDate() - 4).toString().padStart(2, '0')}/${currentMonth.toString().padStart(2, '0')}/${currentYear}`,
            time: new Date(Date.now() - 345600000).toLocaleTimeString('ar-SA'),
            operationType: OPERATION_TYPES.TRANSFER_UNIT,
            user: 'المدير المساعد - محمد',
            unitNumber: '150',
            propertyName: 'فيلا الياسمين',
            city: 'الرياض',
            contractNumber: 'C004',
            changes: {},
            sourceProperty: 'عمارة القمر',
            destinationProperty: 'فيلا الياسمين',
            reason: 'نقل وحدة بين العقارات'
        },
        {
            id: 'sample_5_' + Date.now(),
            timestamp: new Date(Date.now() - 432000000).toISOString(), // قبل 5 أيام
            date: `${Math.max(1, today.getDate() - 5).toString().padStart(2, '0')}/${currentMonth.toString().padStart(2, '0')}/${currentYear}`,
            time: new Date(Date.now() - 432000000).toLocaleTimeString('ar-SA'),
            operationType: OPERATION_TYPES.RENEW_CONTRACT,
            user: 'المدير - عمر',
            unitNumber: '401',
            propertyName: 'شقق الفردوس',
            city: 'مكة المكرمة',
            contractNumber: 'C005',
            changes: {
                'contract_end_date': {
                    old: '31/12/2024',
                    new: '31/12/2025',
                    fieldName: 'تاريخ نهاية العقد'
                },
                'rent_amount': {
                    old: '1800',
                    new: '1900',
                    fieldName: 'قيمة الإيجار'
                }
            },
            newTenant: 'فاطمة أحمد',
            previousTenant: 'فاطمة أحمد'
        }
    ];

    // حفظ البيانات التجريبية مباشرة في Supabase
    console.log('☁️ حفظ البيانات التجريبية في Supabase...');
    let savedCount = 0;

    for (const sampleLog of sampleLogs) {
        try {
            const success = await saveChangeLogToSupabase(sampleLog);
            if (success) {
                savedCount++;
                console.log(`✅ تم حفظ السجل ${savedCount}/${sampleLogs.length} في Supabase`);
            }
        } catch (error) {
            console.warn(`⚠️ فشل حفظ السجل في Supabase:`, error);
        }
    }

    console.log(`📊 تم حفظ ${savedCount} من أصل ${sampleLogs.length} سجل تجريبي في Supabase`);

    // إضافة البيانات للتخزين المحلي كنسخة احتياطية فقط
    changeTrackingLogs.unshift(...sampleLogs);

    // إرجاع عدد السجلات المحفوظة بنجاح
    return savedCount;

    } catch (error) {
        console.error('❌ خطأ في إنشاء البيانات التجريبية:', error);
        throw error;
    }
}

// إضافة تواريخ متنوعة للوحدات للاختبار
function addVariedDatesToUnits() {
    const today = new Date();
    const currentYear = today.getFullYear();
    const currentMonth = today.getMonth() + 1; // JavaScript months are 0-based

    const updateTypes = ['تحرير', 'عميل جديد', 'تجديد العقد', 'إفراغ وحدة', 'نقل وحدة'];
    const users = ['المدير - عمر', 'المدير المساعد - محمد', 'المستخدم المحدود - أحمد'];

    // تحديث أول 15 وحدة بتواريخ من الشهر الحالي
    for (let i = 0; i < Math.min(15, properties.length); i++) {
        // إنشاء تواريخ مختلفة في الشهر الحالي
        const day = Math.max(1, Math.min(28, i + 1)); // أيام من 1 إلى 28 لتجنب مشاكل الشهور
        const updateDate = `${day.toString().padStart(2, '0')}/${currentMonth.toString().padStart(2, '0')}/${currentYear}`;

        properties[i]['تاريخ آخر تحديث'] = updateDate;
        properties[i]['نوع التحديث'] = updateTypes[i % updateTypes.length];
        properties[i]['المسؤول عن التحديث'] = users[i % users.length];

        console.log(`📅 تحديث الوحدة ${i + 1}: ${updateDate} - ${updateTypes[i % updateTypes.length]}`);
    }

    console.log(`📅 تم إضافة تواريخ متنوعة لـ ${Math.min(15, properties.length)} وحدة في ${currentMonth}/${currentYear}`);
}

// متغير لحفظ المحتوى السابق
let previousMainContent = null;
let isTrackingViewActive = false;

// عرض سجلات التتبع في القسم الرئيسي
async function showChangeTrackingModal() {
    console.log('🔍 بدء عرض سجلات التتبع من Supabase...');

    // فحص صلاحيات المستخدم - منع "شركة السنيدي" من الوصول
    const currentUserName = getCurrentUser();
    const currentUserKey = window.currentUser; // المفتاح الفعلي للمستخدم

    // منع الوصول للمستخدم "1234" (شركة السنيدي) أو أي مستخدم يحتوي على "السنيدي" في اسمه
    if (currentUserKey === '1234' ||
        currentUserName === 'شركة السنيدي' ||
        currentUserName === 'شركة السنيدي1234' ||
        (currentUserName && currentUserName.includes('السنيدي'))) {

        console.log('🚫 منع الوصول لسجلات التتبع للمستخدم:', currentUserName);
        showDevelopmentModal();
        return;
    }

    // إظهار مؤشر التحميل
    showToast('جاري تحميل سجلات التتبع من Supabase...', 'info');

    let uniqueLogs = []; // تعريف المتغير في البداية

    try {
        // تحميل جميع السجلات من Supabase (المصدر الأساسي)
        const cloudLogs = await loadAllChangeLogsFromSupabase(); // تحميل جميع السجلات بدون حد أقصى
        console.log('☁️ عدد السجلات من Supabase:', cloudLogs.length);

        // إضافة السجلات المحلية كنسخة احتياطية فقط (في حالة عدم وجود اتصال)
        const localLogs = cloudLogs.length === 0 ? changeTrackingLogs : [];
        console.log('💾 عدد السجلات المحلية المستخدمة:', localLogs.length);

        // دمج السجلات (أولوية للسجلات السحابية)
        const allLogs = [...cloudLogs, ...localLogs];
        console.log('📋 إجمالي السجلات قبل إزالة المكررات:', allLogs.length);

        // إزالة المكررات وترتيب حسب التاريخ
        uniqueLogs = allLogs.filter((log, index, self) =>
            index === self.findIndex(l => l.id === log.id)
        ).sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

        console.log('✅ إجمالي السجلات بعد إزالة المكررات:', uniqueLogs.length);

        if (uniqueLogs.length > 0) {
            showToast(`تم تحميل ${uniqueLogs.length} سجل تتبع من Supabase`, 'success');
        } else {
            showToast('لا توجد سجلات تتبع متاحة', 'warning');
        }

    } catch (error) {
        console.error('❌ خطأ في تحميل سجلات التتبع:', error);
        showToast('حدث خطأ في تحميل سجلات التتبع', 'error');

        // استخدام السجلات المحلية كبديل
        uniqueLogs = changeTrackingLogs.filter((log, index, self) =>
            index === self.findIndex(l => l.id === log.id)
        ).sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

        console.log('📱 استخدام السجلات المحلية:', uniqueLogs.length);
    }

    // حفظ المحتوى الحالي
    const mainContent = document.getElementById('content');
    if (!isTrackingViewActive) {
        previousMainContent = mainContent.innerHTML;
    }

    // تعيين حالة عرض التتبع
    isTrackingViewActive = true;

    // إنشاء محتوى سجل التتبع للقسم الرئيسي
    const trackingHtml = `
        <div class="tracking-main-view">
            <div class="tracking-header">
                <div class="tracking-title-section">
                    <button onclick="closeTrackingView()" class="back-btn">
                        <i class="fas fa-arrow-right"></i> العودة
                    </button>
                    <h2><i class="fas fa-history"></i> سجل تتبع التغييرات</h2>
                    <p class="tracking-stats">إجمالي السجلات: ${uniqueLogs.length}</p>
                    <div class="new-features-notice" style="background: rgba(40, 167, 69, 0.1); padding: 10px; border-radius: 6px; margin-top: 10px; font-size: 14px; color: #155724;">
                        <i class="fas fa-star" style="color: #28a745;"></i>
                        <strong>ميزات جديدة:</strong>
                        ابحث عن رقم وحدة لإظهار زر "الحالة التاريخية للوحدة" •
                        استخدم فلتر "عمليات تعديل البيانات" للتحكم في عرض عمليات التعديل •
                        استخدم زر "تحميل المزيد" لتحميل جميع السجلات من قاعدة البيانات
                    </div>
                    <div class="data-info-notice" style="background: rgba(23, 162, 184, 0.1); padding: 8px; border-radius: 6px; margin-top: 8px; font-size: 13px; color: #0c5460;">
                        <i class="fas fa-info-circle" style="color: #17a2b8;"></i>
                        <strong>معلومات البيانات:</strong>
                        يتم تحميل ${uniqueLogs.length} سجل حالياً. إذا لم تجد البيانات المطلوبة، اضغط "تحميل المزيد" لتحميل جميع السجلات من قاعدة البيانات.
                    </div>
                </div>
            </div>

            <div class="tracking-filters">
                <div class="filter-group">
                    <label>فلتر بالتاريخ:</label>
                    <input type="date" id="trackingDateFilter" placeholder="اختر تاريخ">
                </div>
                <div class="filter-group">
                    <label>فلتر بالشهر والسنة:</label>
                    <input type="month" id="trackingMonthFilter" placeholder="اختر شهر وسنة">
                </div>
                <div class="filter-group">
                    <label>نوع العملية:</label>
                    <select id="trackingOperationType">
                        <option value="">جميع العمليات</option>
                        ${Object.values(OPERATION_TYPES).map(type =>
                            `<option value="${type}">${type}</option>`
                        ).join('')}
                    </select>
                </div>
                <div class="filter-group">
                    <label>البحث:</label>
                    <input type="text" id="trackingSearch" placeholder="بحث في الوحدات، العقارات، أو المستأجرين (يشمل الوحدات المرتبطة)..."
                           oninput="return handleTrackingSearch(event)"
                           onkeydown="if(event.key==='Enter') { event.preventDefault(); return false; }"
                           onsubmit="return false"
                           autocomplete="off">
                </div>

                <!-- فلتر جديد: إخفاء/إظهار عمليات تعديل البيانات -->
                <div class="filter-group">
                    <label>عمليات تعديل البيانات:</label>
                    <select id="trackingDataEditFilter" title="تحكم في عرض عمليات تعديل البيانات">
                        <option value="all">إظهار الكل</option>
                        <option value="hide">إخفاء عمليات التعديل</option>
                        <option value="first_only">إظهار أول عملية تعديل فقط</option>
                    </select>
                </div>

                <div class="filter-buttons-row">
                    <button onclick="filterTrackingLogs()" class="filter-btn">
                        <i class="fas fa-filter"></i> تطبيق الفلتر
                    </button>
                    <button onclick="clearTrackingFilters()" class="clear-filter-btn">
                        <i class="fas fa-times"></i> مسح الفلاتر
                    </button>

                    <!-- زر الحالة التاريخية للوحدة -->
                    <button onclick="showUnitHistoryModal()" class="unit-history-btn" id="unitHistoryBtn" style="display: none;"
                            title="عرض تاريخ كامل للوحدة مع جميع المستأجرين والعمليات">
                        <i class="fas fa-history"></i> الحالة التاريخية للوحدة
                    </button>
                </div>
            </div>

            <div class="tracking-actions">
                <div class="view-toggle-group">
                    <button onclick="toggleTrackingView('cards')" class="view-toggle-btn" id="trackingCardsBtn">
                        <i class="fas fa-th-large"></i> بطاقات
                    </button>
                    <button onclick="toggleTrackingView('table')" class="view-toggle-btn active" id="trackingTableBtn">
                        <i class="fas fa-table"></i> جدول
                    </button>
                </div>

                <div class="action-buttons-group">
                    <button onclick="exportTrackingLogs()" class="export-btn" title="تصدير السجلات المفلترة الظاهرة فقط">
                        <i class="fas fa-download"></i> تصدير المفلتر
                    </button>
                    <button onclick="printTrackingLogs()" class="print-btn" title="طباعة السجلات المفلترة الظاهرة فقط">
                        <i class="fas fa-print"></i> طباعة المفلتر
                    </button>
                    <button onclick="refreshTrackingLogs()" class="refresh-btn">
                        <i class="fas fa-sync-alt"></i> تحديث
                    </button>
                    <button onclick="loadMoreTrackingLogs()" class="load-more-btn" title="تحميل المزيد من السجلات من قاعدة البيانات">
                        <i class="fas fa-plus-circle"></i> تحميل المزيد
                    </button>
                </div>
            </div>

            <div class="tracking-logs-container" id="trackingLogsContainer">
                <!-- سيتم تحديد العرض بناءً على التفضيل المحفوظ -->
            </div>
        </div>
    `;

    // عرض المحتوى في القسم الرئيسي
    mainContent.innerHTML = trackingHtml;

    // إخفاء الشريط الجانبي في الشاشات الصغيرة لإفساح المجال أكثر
    if (window.innerWidth <= 768) {
        const sidebar = document.getElementById('sidebar');
        if (sidebar) {
            sidebar.style.display = 'none';
        }
    }

    // إضافة معالج للضغط على مفتاح Escape للعودة
    const handleEscapeKey = (event) => {
        if (event.key === 'Escape' && isTrackingViewActive) {
            closeTrackingView();
        }
    };

    // إضافة معالج الأحداث
    document.addEventListener('keydown', handleEscapeKey);

    // حفظ مرجع لإزالة المعالج لاحقاً
    window.trackingEscapeHandler = handleEscapeKey;

    // حفظ البيانات للاستخدام في التبديل بين العروض
    window.currentTrackingLogs = uniqueLogs;

    // تعيين حالة التجميع الافتراضية
    if (typeof isConsolidationEnabled === 'undefined') {
        window.isConsolidationEnabled = true;
    }

    // تطبيق العرض المفضل
    const preferredView = localStorage.getItem('trackingViewPreference') || 'table';

    // تأخير قصير للتأكد من تحميل DOM
    setTimeout(() => {
        toggleTrackingView(preferredView);

        // تطبيق التنسيقات بقوة على حقل البحث
        setTimeout(() => {
            forceSearchFieldStyling();
        }, 100);

        // إعداد مراقب DOM لحقل البحث
        setupSearchFieldObserver();
    }, 200);

    console.log('✅ تم عرض سجلات التتبع في القسم الرئيسي');
}

// تنظيف البيانات التجريبية
function cleanupSampleTrackingData() {
    console.log('🧹 تنظيف البيانات التجريبية...');

    const originalLength = changeTrackingLogs.length;

    // حذف السجلات التي تحتوي على 'sample' في المعرف
    changeTrackingLogs = changeTrackingLogs.filter(log =>
        !log.id.includes('sample') &&
        !log.id.includes('test') &&
        !log.unitNumber.includes('TEST') &&
        !log.propertyName.includes('تجريبي')
    );

    const deletedCount = originalLength - changeTrackingLogs.length;

    if (deletedCount > 0) {
        // حفظ التغييرات في التخزين المحلي
        try {
            localStorage.setItem('changeTrackingLogs', JSON.stringify(changeTrackingLogs.slice(0, 1000)));
            console.log(`✅ تم حذف ${deletedCount} سجل تجريبي من التخزين المحلي`);
        } catch (error) {
            console.warn('⚠️ لم يتم حفظ التغييرات محلياً:', error);
        }

        // حذف من Supabase أيضاً
        cleanupSampleDataFromSupabase();
    } else {
        console.log('ℹ️ لا توجد بيانات تجريبية للحذف');
    }
}

// حذف البيانات التجريبية من Supabase
async function cleanupSampleDataFromSupabase() {
    try {
        if (typeof supabaseClient !== 'undefined' && supabaseClient) {
            const { data: sampleLogs, error: fetchError } = await supabaseClient
                .from('change_logs')
                .select('id')
                .or('id.ilike.%sample%,id.ilike.%test%,unit_number.ilike.%TEST%,property_name.ilike.%تجريبي%');

            if (!fetchError && sampleLogs && sampleLogs.length > 0) {
                const { error: deleteError } = await supabaseClient
                    .from('change_logs')
                    .delete()
                    .in('id', sampleLogs.map(log => log.id));

                if (!deleteError) {
                    console.log(`✅ تم حذف ${sampleLogs.length} سجل تجريبي من Supabase`);
                } else {
                    console.warn('⚠️ خطأ في حذف البيانات التجريبية من Supabase:', deleteError);
                }
            }
        }
    } catch (error) {
        console.warn('⚠️ خطأ في تنظيف البيانات التجريبية من Supabase:', error);
    }
}

// إغلاق عرض التتبع والعودة للمحتوى السابق
function closeTrackingView() {
    console.log('🔙 إغلاق عرض سجلات التتبع...');

    const mainContent = document.getElementById('content');

    if (previousMainContent) {
        // استعادة المحتوى السابق
        mainContent.innerHTML = previousMainContent;
        console.log('✅ تم استعادة المحتوى السابق');
    } else {
        // إذا لم يكن هناك محتوى سابق، عرض البيانات الافتراضية
        renderData();
        console.log('✅ تم عرض البيانات الافتراضية');
    }

    // إظهار الشريط الجانبي مرة أخرى في الشاشات الصغيرة
    if (window.innerWidth <= 768) {
        const sidebar = document.getElementById('sidebar');
        if (sidebar) {
            sidebar.style.display = '';
        }
    }

    // إزالة معالج مفتاح Escape
    if (window.trackingEscapeHandler) {
        document.removeEventListener('keydown', window.trackingEscapeHandler);
        window.trackingEscapeHandler = null;
    }

    // إعادة تعيين الحالة
    isTrackingViewActive = false;
    previousMainContent = null;

    console.log('✅ تم إغلاق عرض التتبع بنجاح');
}

// تحديث سجلات التتبع
async function refreshTrackingLogs() {
    console.log('🔄 تحديث سجلات التتبع...');

    if (isTrackingViewActive) {
        // إعادة تحميل عرض التتبع
        await showChangeTrackingModal();
        console.log('✅ تم تحديث سجلات التتبع');
    }
}

// تحميل المزيد من سجلات التتبع
async function loadMoreTrackingLogs() {
    console.log('📥 تحميل المزيد من سجلات التتبع...');

    if (!isTrackingViewActive) {
        showToast('يرجى فتح سجلات التتبع أولاً', 'warning');
        return;
    }

    showToast('جاري تحميل المزيد من السجلات...', 'info');

    try {
        // تحميل جميع السجلات من Supabase
        const allCloudLogs = await loadAllChangeLogsFromSupabase();
        console.log(`📊 تم تحميل ${allCloudLogs.length} سجل من قاعدة البيانات`);

        // دمج مع السجلات المحلية
        const allLogs = [...allCloudLogs, ...changeTrackingLogs];

        // إزالة المكررات وترتيب حسب التاريخ
        const uniqueLogs = allLogs.filter((log, index, self) =>
            index === self.findIndex(l => l.id === log.id)
        ).sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

        console.log(`✅ إجمالي السجلات الفريدة: ${uniqueLogs.length}`);

        // تحديث البيانات الحالية
        window.currentTrackingLogs = uniqueLogs;

        // إعادة إنشاء العرض
        const preferredView = localStorage.getItem('trackingViewPreference') || 'table';
        toggleTrackingView(preferredView);

        showToast(`تم تحميل ${uniqueLogs.length} سجل إجمالي`, 'success');

    } catch (error) {
        console.error('❌ خطأ في تحميل المزيد من السجلات:', error);
        showToast('حدث خطأ في تحميل المزيد من السجلات', 'error');
    }
}

// ===== نظام إدارة سجلات التتبع (للمدير فقط) =====

// عرض نافذة إدارة سجلات التتبع - محدث للجدول المخصص
async function showTrackingManagementModal() {
    console.log('🔧 عرض نافذة إدارة سجلات التتبع...');

    // فحص خاص لمنع شركة السنيدي من الوصول لإدارة سجلات التتبع
    const currentUserName = getCurrentUser();
    const currentUserKey = window.currentUser;

    if (currentUserKey === '1234' ||
        currentUserName === 'شركة السنيدي' ||
        currentUserName === 'شركة السنيدي1234' ||
        (currentUserName && currentUserName.includes('السنيدي'))) {

        console.log('🚫 منع الوصول لإدارة سجلات التتبع للمستخدم:', currentUserName);
        showDevelopmentModal();
        return;
    }

    // التحقق من الصلاحيات
    if (!checkPermission('manageProperties')) {
        showToast('ليس لديك صلاحية لإدارة سجلات التتبع', 'error');
        return;
    }

    // تنظيف البيانات التجريبية أولاً
    cleanupSampleTrackingData();

    // تحميل السجلات من الجدول المخصص الجديد
    let newTableLogs = [];
    if (typeof window.trackingLogsManager !== 'undefined') {
        try {
            newTableLogs = await window.trackingLogsManager.loadTrackingLogsFromSupabase(1000);
            console.log(`📥 تم تحميل ${newTableLogs.length} سجل من الجدول المخصص`);
        } catch (error) {
            console.error('❌ خطأ في تحميل السجلات من الجدول المخصص:', error);
        }
    }

    // تحميل السجلات من النظام القديم للتوافق
    const cloudLogs = await loadChangeLogsFromSupabase(1000);
    const allLogs = [...newTableLogs, ...cloudLogs, ...changeTrackingLogs];

    // إزالة المكررات وتحويل السجلات الجديدة للتنسيق القديم
    const processedLogs = [];
    const seenIds = new Set();

    allLogs.forEach(log => {
        let processedLog;

        // إذا كان السجل من الجدول الجديد، حوله للتنسيق القديم
        if (log.operation_type && log.unit_number !== undefined) {
            processedLog = {
                id: log.id,
                operationType: log.operation_type,
                timestamp: log.timestamp,
                unitNumber: log.unit_number || 'غير محدد',
                propertyName: log.property_name || 'غير محدد',
                tenantName: log.tenant_name || 'غير محدد',
                contractNumber: log.contract_number || '',
                city: log.city || '',
                changes: log.changes || {},
                additionalInfo: log.additional_info || {},
                responsibleUser: log.user_name || 'النظام',
                description: log.description || '',
                source: 'new_table'
            };
        } else {
            // السجل من النظام القديم
            processedLog = {
                ...log,
                source: 'old_system'
            };
        }

        // تجنب التكرار
        if (!seenIds.has(processedLog.id)) {
            seenIds.add(processedLog.id);
            processedLogs.push(processedLog);
        }
    });

    // ترتيب السجلات حسب التاريخ
    const uniqueLogs = processedLogs.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

    console.log(`📊 إجمالي السجلات للإدارة: ${uniqueLogs.length} (${newTableLogs.length} من الجدول الجديد، ${cloudLogs.length} من النظام القديم)`);

    // تحميل إحصائيات الجدول الجديد
    let newTableStats = null;
    if (typeof window.trackingLogsManager !== 'undefined') {
        try {
            newTableStats = await window.trackingLogsManager.getTrackingLogsStats();
        } catch (error) {
            console.error('❌ خطأ في تحميل إحصائيات الجدول الجديد:', error);
        }
    }

    const modalHtml = `
        <div class="modal-overlay" style="display:flex; z-index: 10000;">
            <div class="modal-box tracking-management-modal" style="max-width: 1400px; max-height: 95vh; width: 95%;">
                <button class="close-modal" onclick="closeModal()">×</button>

                <div class="modal-header">
                    <h2><i class="fas fa-cogs"></i> إدارة سجلات التتبع</h2>
                    <p class="management-warning">⚠️ تحذير: هذه الصفحة للمدير فقط - يمكن حذف السجلات نهائياً</p>

                    ${newTableStats ? `
                    <div class="tracking-stats-summary" style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 10px 0; border: 2px solid #e9ecef;">
                        <h4><i class="fas fa-chart-bar"></i> إحصائيات الجدول المخصص</h4>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px; margin-top: 10px;">
                            <div class="stat-item" style="text-align: center; background: white; padding: 10px; border-radius: 5px;">
                                <div style="font-size: 1.5rem; font-weight: bold; color: #007bff;">${newTableStats.total_logs || 0}</div>
                                <div style="font-size: 0.9rem; color: #666;">إجمالي السجلات</div>
                            </div>
                            <div class="stat-item" style="text-align: center; background: white; padding: 10px; border-radius: 5px;">
                                <div style="font-size: 1.5rem; font-weight: bold; color: #28a745;">${newTableStats.logs_today || 0}</div>
                                <div style="font-size: 0.9rem; color: #666;">سجلات اليوم</div>
                            </div>
                            <div class="stat-item" style="text-align: center; background: white; padding: 10px; border-radius: 5px;">
                                <div style="font-size: 1.5rem; font-weight: bold; color: #ffc107;">${newTableStats.logs_this_week || 0}</div>
                                <div style="font-size: 0.9rem; color: #666;">سجلات الأسبوع</div>
                            </div>
                            <div class="stat-item" style="text-align: center; background: white; padding: 10px; border-radius: 5px;">
                                <div style="font-size: 1.5rem; font-weight: bold; color: #dc3545;">${newTableStats.logs_this_month || 0}</div>
                                <div style="font-size: 0.9rem; color: #666;">سجلات الشهر</div>
                            </div>
                        </div>
                        <div style="margin-top: 10px; font-size: 0.9rem; color: #666;">
                            <strong>العملية الأكثر شيوعاً:</strong> ${newTableStats.most_common_operation || 'غير محدد'} |
                            <strong>المستخدم الأكثر نشاطاً:</strong> ${newTableStats.most_active_user || 'غير محدد'}
                        </div>
                    </div>
                    ` : ''}
                </div>
                    <div class="logs-stats">
                        <span class="stat-item">إجمالي السجلات: <strong id="totalLogsCount">${uniqueLogs.length}</strong></span>
                        <span class="stat-item">المحددة: <strong id="selectedLogsCount">0</strong></span>
                    </div>
                </div>

                <div class="management-filters">
                    <div class="filter-row">
                        <div class="filter-group">
                            <label>فلتر بالتاريخ:</label>
                            <input type="date" id="mgmtDateFilter" placeholder="اختر تاريخ">
                        </div>
                        <div class="filter-group">
                            <label>فلتر بالشهر والسنة:</label>
                            <input type="month" id="mgmtMonthFilter" placeholder="اختر شهر وسنة">
                        </div>
                        <div class="filter-group">
                            <label>نوع العملية:</label>
                            <select id="mgmtOperationType">
                                <option value="">جميع العمليات</option>
                                ${Object.values(OPERATION_TYPES).map(type =>
                                    `<option value="${type}">${type}</option>`
                                ).join('')}
                            </select>
                        </div>
                        <div class="filter-group">
                            <label>المستخدم:</label>
                            <select id="mgmtUserFilter">
                                <option value="">جميع المستخدمين</option>
                                ${getUniqueUsers(uniqueLogs).map(user =>
                                    `<option value="${user}">${user}</option>`
                                ).join('')}
                            </select>
                        </div>
                    </div>

                    <div class="filter-row">
                        <div class="filter-group">
                            <label>البحث:</label>
                            <input type="text" id="mgmtSearch" placeholder="بحث في الوحدات أو العقارات...">
                        </div>
                        <div class="filter-actions">
                            <button onclick="applyManagementFilters()" class="filter-btn">
                                <i class="fas fa-filter"></i> تطبيق الفلتر
                            </button>
                            <button onclick="clearManagementFilters()" class="clear-btn">
                                <i class="fas fa-times"></i> مسح الفلاتر
                            </button>
                        </div>
                    </div>
                </div>

                <div class="management-actions">
                    <div class="selection-actions">
                        <button onclick="selectAllLogs()" class="select-btn">
                            <i class="fas fa-check-square"></i> تحديد الكل
                        </button>
                        <button onclick="deselectAllLogs()" class="deselect-btn">
                            <i class="fas fa-square"></i> إلغاء التحديد
                        </button>
                        <button onclick="selectByType()" class="select-type-btn">
                            <i class="fas fa-filter"></i> تحديد حسب النوع
                        </button>
                    </div>

                    <div class="delete-actions">
                        <button onclick="deleteSelectedLogs()" class="delete-selected-btn" disabled>
                            <i class="fas fa-trash"></i> حذف المحددة
                        </button>
                        <button onclick="deleteByDate()" class="delete-date-btn">
                            <i class="fas fa-calendar-times"></i> حذف يوم كامل
                        </button>
                        <button onclick="deleteByType()" class="delete-type-btn">
                            <i class="fas fa-layer-group"></i> حذف حسب النوع
                        </button>
                        <button onclick="deleteByUser()" class="delete-user-btn">
                            <i class="fas fa-user-times"></i> حذف حسب المستخدم
                        </button>
                        <button onclick="deleteAllLogs()" class="delete-all-btn">
                            <i class="fas fa-exclamation-triangle"></i> حذف الكل
                        </button>
                    </div>
                </div>

                <div class="management-logs-container" id="managementLogsContainer">
                    ${renderManagementLogs(uniqueLogs)}
                </div>
            </div>
        </div>
    `;

    document.body.insertAdjacentHTML('beforeend', modalHtml);

    // حفظ السجلات في متغير عام للاستخدام
    window.managementLogsData = uniqueLogs;

    console.log('✅ تم عرض نافذة إدارة سجلات التتبع');
}

// الحصول على قائمة المستخدمين الفريدة
function getUniqueUsers(logs) {
    const users = [...new Set(logs.map(log => log.user || 'غير محدد'))];
    return users.sort();
}

// عرض السجلات في واجهة الإدارة
function renderManagementLogs(logs) {
    if (!logs || logs.length === 0) {
        return `
            <div class="no-logs">
                <i class="fas fa-clipboard-list"></i>
                <h3>لا توجد سجلات للعرض</h3>
                <p>لا توجد سجلات تتبع متاحة للإدارة</p>
            </div>
        `;
    }

    return `
        <div class="management-logs-list">
            ${logs.map((log, index) => `
                <div class="management-log-entry" data-log-id="${log.id}">
                    <div class="log-checkbox">
                        <input type="checkbox" id="log_${index}" class="log-selector"
                               onchange="updateSelectedCount()" data-log-id="${log.id}">
                        <label for="log_${index}"></label>
                    </div>

                    <div class="log-content">
                        <div class="log-header">
                            <div class="log-operation">
                                <i class="fas fa-cog"></i>
                                ${log.operationType}
                            </div>
                            <div class="log-meta">
                                <span class="log-date">${log.date} ${log.hijriDate ? `(${log.hijriDate})` : ''}</span>
                                <span class="log-time">${log.time}</span>
                                <span class="log-user">${log.user || 'غير محدد'}</span>
                            </div>
                        </div>

                        <div class="log-details">
                            <div class="log-property">
                                <strong>العقار:</strong> ${log.propertyName}
                            </div>
                            <div class="log-unit">
                                <strong>الوحدة:</strong> ${log.unitNumber}
                            </div>
                            ${log.changes && Object.keys(log.changes).length > 0 ? `
                                <div class="log-changes">
                                    <strong>التغييرات:</strong>
                                    ${Object.entries(log.changes).map(([field, change]) =>
                                        `<span class="change-item">${change.fieldName}: ${change.old} → ${change.new}</span>`
                                    ).join(', ')}
                                </div>
                            ` : ''}
                        </div>

                        <div class="log-actions">
                            <button onclick="deleteIndividualLog('${log.id}')" class="delete-single-btn">
                                <i class="fas fa-trash"></i> حذف
                            </button>
                            <button onclick="viewLogDetails('${log.id}')" class="view-details-btn">
                                <i class="fas fa-eye"></i> التفاصيل
                            </button>
                        </div>
                    </div>
                </div>
            `).join('')}
        </div>
    `;
}

// تحديث عداد السجلات المحددة
function updateSelectedCount() {
    const checkboxes = document.querySelectorAll('.log-selector:checked');
    const count = checkboxes.length;

    document.getElementById('selectedLogsCount').textContent = count;

    // تفعيل/تعطيل زر الحذف
    const deleteBtn = document.querySelector('.delete-selected-btn');
    if (deleteBtn) {
        deleteBtn.disabled = count === 0;
    }
}

// تحديد جميع السجلات
function selectAllLogs() {
    const checkboxes = document.querySelectorAll('.log-selector');
    checkboxes.forEach(checkbox => {
        checkbox.checked = true;
    });
    updateSelectedCount();
}

// إلغاء تحديد جميع السجلات
function deselectAllLogs() {
    const checkboxes = document.querySelectorAll('.log-selector');
    checkboxes.forEach(checkbox => {
        checkbox.checked = false;
    });
    updateSelectedCount();
}

// تحديد السجلات حسب النوع
function selectByType() {
    const operationType = document.getElementById('mgmtOperationType').value;
    if (!operationType) {
        showToast('يرجى اختيار نوع العملية أولاً', 'warning');
        return;
    }

    const checkboxes = document.querySelectorAll('.log-selector');
    checkboxes.forEach(checkbox => {
        const logEntry = checkbox.closest('.management-log-entry');
        const logOperation = logEntry.querySelector('.log-operation').textContent.trim();
        checkbox.checked = logOperation === operationType;
    });
    updateSelectedCount();
}

// حذف سجل واحد - محدث للجدول المخصص
async function deleteIndividualLog(logId) {
    if (!confirm('هل أنت متأكد من حذف هذا السجل؟\nلا يمكن التراجع عن هذا الإجراء.')) {
        return;
    }

    console.log(`🗑️ حذف السجل: ${logId}`);

    try {
        let deletedFromNewTable = false;
        let deletedFromOldSystem = false;

        // حذف من الجدول المخصص الجديد
        if (typeof window.trackingLogsManager !== 'undefined') {
            try {
                const result = await window.trackingLogsManager.deleteTrackingLog(logId);
                if (result) {
                    deletedFromNewTable = true;
                    console.log('✅ تم حذف السجل من الجدول المخصص');
                }
            } catch (error) {
                console.warn('⚠️ خطأ في حذف السجل من الجدول المخصص:', error);
            }
        }

        // حذف من المصفوفة المحلية
        const localIndex = changeTrackingLogs.findIndex(log => log.id === logId);
        if (localIndex !== -1) {
            changeTrackingLogs.splice(localIndex, 1);
            localStorage.setItem('changeTrackingLogs', JSON.stringify(changeTrackingLogs.slice(0, 1000)));
        }

        // حذف من النظام القديم (للتوافق)
        if (typeof supabaseClient !== 'undefined' && supabaseClient) {
            try {
                const { error } = await supabaseClient
                    .from('change_logs')
                    .delete()
                    .eq('id', logId);

                if (!error) {
                    deletedFromOldSystem = true;
                    console.log('✅ تم حذف السجل من النظام القديم');
                } else {
                    console.warn('⚠️ لم يتم حذف السجل من النظام القديم:', error);
                }
            } catch (error) {
                console.warn('⚠️ خطأ في حذف السجل من النظام القديم:', error);
            }
        }

        // إزالة من الواجهة
        const logElement = document.querySelector(`[data-log-id="${logId}"]`);
        if (logElement) {
            logElement.remove();
        }

        // تحديث العدادات
        updateLogsCount();
        updateSelectedCount();

        // رسالة النجاح مع تفاصيل الحذف
        let successMessage = 'تم حذف السجل بنجاح';
        if (deletedFromNewTable && deletedFromOldSystem) {
            successMessage += ' من جميع الأنظمة';
        } else if (deletedFromNewTable) {
            successMessage += ' من الجدول المخصص';
        } else if (deletedFromOldSystem) {
            successMessage += ' من النظام القديم';
        }

        showToast(successMessage, 'success');

    } catch (error) {
        console.error('❌ خطأ في حذف السجل:', error);
        showToast('حدث خطأ أثناء حذف السجل', 'error');
    }
}

// حذف السجلات المحددة
async function deleteSelectedLogs() {
    const checkboxes = document.querySelectorAll('.log-selector:checked');
    const count = checkboxes.length;

    if (count === 0) {
        showToast('يرجى تحديد سجلات للحذف', 'warning');
        return;
    }

    if (!confirm(`هل أنت متأكد من حذف ${count} سجل؟\nلا يمكن التراجع عن هذا الإجراء.`)) {
        return;
    }

    console.log(`🗑️ حذف ${count} سجل محدد...`);

    const logIds = Array.from(checkboxes).map(cb => cb.getAttribute('data-log-id'));

    try {
        // حذف من المصفوفة المحلية
        logIds.forEach(logId => {
            const index = changeTrackingLogs.findIndex(log => log.id === logId);
            if (index !== -1) {
                changeTrackingLogs.splice(index, 1);
            }
        });

        localStorage.setItem('changeTrackingLogs', JSON.stringify(changeTrackingLogs.slice(0, 1000)));

        // حذف من Supabase
        if (typeof supabaseClient !== 'undefined' && supabaseClient) {
            const { error } = await supabaseClient
                .from('change_logs')
                .delete()
                .in('id', logIds);

            if (error) {
                console.warn('⚠️ لم يتم حذف بعض السجلات من Supabase:', error);
            }
        }

        // إزالة من الواجهة
        logIds.forEach(logId => {
            const logElement = document.querySelector(`[data-log-id="${logId}"]`);
            if (logElement) {
                logElement.remove();
            }
        });

        // تحديث العدادات
        updateLogsCount();
        updateSelectedCount();

        showToast(`تم حذف ${count} سجل بنجاح`, 'success');

    } catch (error) {
        console.error('❌ خطأ في حذف السجلات:', error);
        showToast('حدث خطأ أثناء حذف السجلات', 'error');
    }
}

// حذف عمليات يوم كامل
async function deleteByDate() {
    const date = prompt('أدخل التاريخ لحذف جميع العمليات (YYYY-MM-DD):');
    if (!date) return;

    if (!confirm(`هل أنت متأكد من حذف جميع عمليات يوم ${date}؟\nلا يمكن التراجع عن هذا الإجراء.`)) {
        return;
    }

    console.log(`🗑️ حذف عمليات يوم ${date}...`);

    try {
        const targetDate = formatDate(new Date(date)); // استخدام التاريخ الميلادي

        // العثور على السجلات المطابقة
        const logsToDelete = changeTrackingLogs.filter(log => log.date === targetDate);
        const logIds = logsToDelete.map(log => log.id);

        if (logIds.length === 0) {
            showToast('لا توجد سجلات في هذا التاريخ', 'info');
            return;
        }

        // حذف من المصفوفة المحلية
        changeTrackingLogs = changeTrackingLogs.filter(log => log.date !== targetDate);
        localStorage.setItem('changeTrackingLogs', JSON.stringify(changeTrackingLogs.slice(0, 1000)));

        // حذف من Supabase
        if (typeof supabaseClient !== 'undefined' && supabaseClient) {
            const { error } = await supabaseClient
                .from('change_logs')
                .delete()
                .in('id', logIds);

            if (error) {
                console.warn('⚠️ لم يتم حذف بعض السجلات من Supabase:', error);
            }
        }

        // تحديث الواجهة
        await refreshManagementView();

        showToast(`تم حذف ${logIds.length} سجل من تاريخ ${date}`, 'success');

    } catch (error) {
        console.error('❌ خطأ في حذف عمليات اليوم:', error);
        showToast('حدث خطأ أثناء حذف عمليات اليوم', 'error');
    }
}

// حذف عمليات حسب النوع
async function deleteByType() {
    const operationType = prompt(`أدخل نوع العملية للحذف:\n${Object.values(OPERATION_TYPES).join('\n')}`);
    if (!operationType) return;

    if (!Object.values(OPERATION_TYPES).includes(operationType)) {
        showToast('نوع العملية غير صحيح', 'error');
        return;
    }

    if (!confirm(`هل أنت متأكد من حذف جميع عمليات "${operationType}"؟\nلا يمكن التراجع عن هذا الإجراء.`)) {
        return;
    }

    console.log(`🗑️ حذف عمليات نوع ${operationType}...`);

    try {
        // العثور على السجلات المطابقة
        const logsToDelete = changeTrackingLogs.filter(log => log.operationType === operationType);
        const logIds = logsToDelete.map(log => log.id);

        if (logIds.length === 0) {
            showToast('لا توجد سجلات من هذا النوع', 'info');
            return;
        }

        // حذف من المصفوفة المحلية
        changeTrackingLogs = changeTrackingLogs.filter(log => log.operationType !== operationType);
        localStorage.setItem('changeTrackingLogs', JSON.stringify(changeTrackingLogs.slice(0, 1000)));

        // حذف من Supabase
        if (typeof supabaseClient !== 'undefined' && supabaseClient) {
            const { error } = await supabaseClient
                .from('change_logs')
                .delete()
                .in('id', logIds);

            if (error) {
                console.warn('⚠️ لم يتم حذف بعض السجلات من Supabase:', error);
            }
        }

        // تحديث الواجهة
        await refreshManagementView();

        showToast(`تم حذف ${logIds.length} سجل من نوع "${operationType}"`, 'success');

    } catch (error) {
        console.error('❌ خطأ في حذف عمليات النوع:', error);
        showToast('حدث خطأ أثناء حذف عمليات النوع', 'error');
    }
}

// حذف عمليات حسب المستخدم
async function deleteByUser() {
    const user = prompt('أدخل اسم المستخدم لحذف جميع عملياته:');
    if (!user) return;

    if (!confirm(`هل أنت متأكد من حذف جميع عمليات المستخدم "${user}"؟\nلا يمكن التراجع عن هذا الإجراء.`)) {
        return;
    }

    console.log(`🗑️ حذف عمليات المستخدم ${user}...`);

    try {
        // العثور على السجلات المطابقة
        const logsToDelete = changeTrackingLogs.filter(log => (log.user || 'غير محدد') === user);
        const logIds = logsToDelete.map(log => log.id);

        if (logIds.length === 0) {
            showToast('لا توجد سجلات لهذا المستخدم', 'info');
            return;
        }

        // حذف من المصفوفة المحلية
        changeTrackingLogs = changeTrackingLogs.filter(log => (log.user || 'غير محدد') !== user);
        localStorage.setItem('changeTrackingLogs', JSON.stringify(changeTrackingLogs.slice(0, 1000)));

        // حذف من Supabase
        if (typeof supabaseClient !== 'undefined' && supabaseClient) {
            const { error } = await supabaseClient
                .from('change_logs')
                .delete()
                .in('id', logIds);

            if (error) {
                console.warn('⚠️ لم يتم حذف بعض السجلات من Supabase:', error);
            }
        }

        // تحديث الواجهة
        await refreshManagementView();

        showToast(`تم حذف ${logIds.length} سجل للمستخدم "${user}"`, 'success');

    } catch (error) {
        console.error('❌ خطأ في حذف عمليات المستخدم:', error);
        showToast('حدث خطأ أثناء حذف عمليات المستخدم', 'error');
    }
}

// حذف جميع السجلات
async function deleteAllLogs() {
    if (!confirm('⚠️ تحذير خطير!\n\nهل أنت متأكد من حذف جميع سجلات التتبع؟\nهذا الإجراء لا يمكن التراجع عنه نهائياً!')) {
        return;
    }

    if (!confirm('تأكيد نهائي: سيتم حذف جميع السجلات من النظام والسحابة.\nاكتب "نعم" للمتابعة:') ||
        prompt('اكتب "حذف الكل" للتأكيد:') !== 'حذف الكل') {
        showToast('تم إلغاء العملية', 'info');
        return;
    }

    console.log('🗑️ حذف جميع سجلات التتبع...');

    try {
        const totalCount = changeTrackingLogs.length;

        // حذف من المصفوفة المحلية
        changeTrackingLogs = [];
        localStorage.removeItem('changeTrackingLogs');

        // حذف من Supabase
        if (typeof supabaseClient !== 'undefined' && supabaseClient) {
            const { error } = await supabaseClient
                .from('change_logs')
                .delete()
                .neq('id', ''); // حذف جميع السجلات

            if (error) {
                console.warn('⚠️ لم يتم حذف السجلات من Supabase:', error);
            }
        }

        // إغلاق النافذة وتحديث الواجهة
        closeModal();

        showToast(`تم حذف جميع السجلات (${totalCount} سجل) بنجاح`, 'success');

    } catch (error) {
        console.error('❌ خطأ في حذف جميع السجلات:', error);
        showToast('حدث خطأ أثناء حذف جميع السجلات', 'error');
    }
}

// تطبيق فلاتر الإدارة المحسنة
function applyManagementFilters() {
    const dateFilter = document.getElementById('mgmtDateFilter').value;
    const monthFilter = document.getElementById('mgmtMonthFilter').value;
    const operationType = document.getElementById('mgmtOperationType').value;
    const userFilter = document.getElementById('mgmtUserFilter').value;
    const searchTerm = document.getElementById('mgmtSearch').value.toLowerCase();

    let filteredLogs = window.managementLogsData || [];

    // فلترة بالتاريخ المحدد
    if (dateFilter) {
        const filterDate = new Date(dateFilter);
        filteredLogs = filteredLogs.filter(log => {
            const logDate = new Date(log.timestamp);
            return logDate.toDateString() === filterDate.toDateString();
        });
    }

    // فلترة بالشهر والسنة
    if (monthFilter) {
        const [filterYear, filterMonth] = monthFilter.split('-');
        filteredLogs = filteredLogs.filter(log => {
            const logDate = new Date(log.timestamp);
            return logDate.getFullYear() === parseInt(filterYear) &&
                   (logDate.getMonth() + 1) === parseInt(filterMonth);
        });
    }

    // فلترة بنوع العملية
    if (operationType) {
        filteredLogs = filteredLogs.filter(log => log.operationType === operationType);
    }

    // فلترة بالمستخدم
    if (userFilter) {
        filteredLogs = filteredLogs.filter(log => (log.user || 'غير محدد') === userFilter);
    }

    // فلترة بالبحث
    if (searchTerm) {
        filteredLogs = filteredLogs.filter(log =>
            log.propertyName.toLowerCase().includes(searchTerm) ||
            log.unitNumber.toLowerCase().includes(searchTerm) ||
            log.operationType.toLowerCase().includes(searchTerm)
        );
    }

    // تحديث العرض
    const container = document.getElementById('managementLogsContainer');
    if (container) {
        container.innerHTML = renderManagementLogs(filteredLogs);
    }

    // تحديث العدادات
    document.getElementById('totalLogsCount').textContent = filteredLogs.length;
    updateSelectedCount();

    console.log(`🔍 تم تطبيق الفلاتر: ${filteredLogs.length} سجل`);
}

// مسح فلاتر الإدارة
function clearManagementFilters() {
    document.getElementById('mgmtDateFilter').value = '';
    document.getElementById('mgmtMonthFilter').value = '';
    document.getElementById('mgmtOperationType').value = '';
    document.getElementById('mgmtUserFilter').value = '';
    document.getElementById('mgmtSearch').value = '';

    // إعادة عرض جميع السجلات
    const container = document.getElementById('managementLogsContainer');
    if (container && window.managementLogsData) {
        container.innerHTML = renderManagementLogs(window.managementLogsData);
        document.getElementById('totalLogsCount').textContent = window.managementLogsData.length;
    }

    updateSelectedCount();
    console.log('🧹 تم مسح جميع الفلاتر');
}

// تحديث عرض الإدارة
async function refreshManagementView() {
    // إعادة تحميل السجلات
    const cloudLogs = await loadChangeLogsFromSupabase(1000);
    const allLogs = [...cloudLogs, ...changeTrackingLogs];

    const uniqueLogs = allLogs.filter((log, index, self) =>
        index === self.findIndex(l => l.id === log.id)
    ).sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

    window.managementLogsData = uniqueLogs;

    // تحديث العرض
    const container = document.getElementById('managementLogsContainer');
    if (container) {
        container.innerHTML = renderManagementLogs(uniqueLogs);
    }

    updateLogsCount();
    updateSelectedCount();
}

// تحديث عدادات السجلات
function updateLogsCount() {
    const totalElement = document.getElementById('totalLogsCount');
    if (totalElement && window.managementLogsData) {
        totalElement.textContent = window.managementLogsData.length;
    }
}

// عرض تفاصيل السجل
function viewLogDetails(logId) {
    const log = window.managementLogsData?.find(l => l.id === logId);
    if (!log) {
        showToast('لم يتم العثور على السجل', 'error');
        return;
    }

    const detailsHtml = `
        <div class="modal-overlay" style="display:flex; z-index: 10001;">
            <div class="modal-box" style="max-width: 800px;">
                <button class="close-modal" onclick="closeModal()">×</button>

                <div class="modal-header">
                    <h3><i class="fas fa-info-circle"></i> تفاصيل السجل</h3>
                </div>

                <div class="log-details-content">
                    <div class="detail-section">
                        <h4>معلومات أساسية</h4>
                        <div class="detail-grid">
                            <div class="detail-item">
                                <label>نوع العملية:</label>
                                <span>${log.operationType}</span>
                            </div>
                            <div class="detail-item">
                                <label>التاريخ:</label>
                                <span>${log.date} ${log.hijriDate ? `(${log.hijriDate})` : ''}</span>
                            </div>
                            <div class="detail-item">
                                <label>الوقت:</label>
                                <span>${log.time}</span>
                            </div>
                            <div class="detail-item">
                                <label>المستخدم:</label>
                                <span>${log.user || 'غير محدد'}</span>
                            </div>
                            <div class="detail-item">
                                <label>العقار:</label>
                                <span>${log.propertyName}</span>
                            </div>
                            <div class="detail-item">
                                <label>الوحدة:</label>
                                <span>${log.unitNumber}</span>
                            </div>
                        </div>
                    </div>

                    ${log.changes && Object.keys(log.changes).length > 0 ? `
                        <div class="detail-section">
                            <h4>التغييرات</h4>
                            <div class="changes-list">
                                ${Object.entries(log.changes).map(([field, change]) => `
                                    <div class="change-item">
                                        <strong>${change.fieldName}:</strong>
                                        <div class="change-values">
                                            <span class="old-value">القديم: ${change.old}</span>
                                            <span class="arrow">→</span>
                                            <span class="new-value">الجديد: ${change.new}</span>
                                        </div>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    ` : ''}

                    <div class="detail-section">
                        <h4>معلومات تقنية</h4>
                        <div class="detail-grid">
                            <div class="detail-item">
                                <label>معرف السجل:</label>
                                <span style="font-family: monospace; font-size: 0.9em;">${log.id}</span>
                            </div>
                            <div class="detail-item">
                                <label>الطابع الزمني:</label>
                                <span style="font-family: monospace; font-size: 0.9em;">${log.timestamp}</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button onclick="deleteIndividualLog('${log.id}'); closeModal();" class="delete-btn">
                        <i class="fas fa-trash"></i> حذف هذا السجل
                    </button>
                    <button onclick="closeModal()" class="cancel-btn">إغلاق</button>
                </div>
            </div>
        </div>
    `;

    document.body.insertAdjacentHTML('beforeend', detailsHtml);
}

// ===== نهاية نظام إدارة سجلات التتبع =====

// ===== اختبار نظام سجلات التتبع الجديد =====

// دالة اختبار الاتصال بالجدول الجديد
async function testTrackingLogsConnection() {
    console.log('🧪 اختبار الاتصال بجدول tracking_logs...');

    try {
        // التحقق من وجود مدير سجلات التتبع
        if (typeof window.trackingLogsManager === 'undefined') {
            console.error('❌ مدير سجلات التتبع غير محمل');
            return false;
        }

        // التحقق من وجود الجدول
        const tableExists = await window.trackingLogsManager.ensureTrackingLogsTableExists();
        if (!tableExists) {
            console.error('❌ جدول tracking_logs غير موجود');
            return false;
        }

        // اختبار إدراج سجل
        const testLog = {
            operation_type: 'اختبار الاتصال',
            unit_number: 'TEST-CONNECTION',
            property_name: 'اختبار النظام',
            description: 'اختبار الاتصال بالجدول الجديد',
            user_name: 'نظام الاختبار'
        };

        const result = await window.trackingLogsManager.saveTrackingLogToSupabase(testLog);
        if (result) {
            console.log('✅ تم حفظ سجل الاختبار بنجاح:', result.id);

            // حذف سجل الاختبار
            await window.trackingLogsManager.deleteTrackingLog(result.id);
            console.log('✅ تم حذف سجل الاختبار');

            return true;
        } else {
            console.error('❌ فشل في حفظ سجل الاختبار');
            return false;
        }

    } catch (error) {
        console.error('❌ خطأ في اختبار الاتصال:', error);
        return false;
    }
}

// دالة لإجبار حفظ سجل تتبع جديد
async function forceCreateTrackingLog() {
    console.log('🔧 إجبار إنشاء سجل تتبع...');

    try {
        // تفعيل التتبع إذا كان معطل
        const wasTrackingEnabled = isTrackingEnabled;
        isTrackingEnabled = true;

        const unitData = {
            'رقم  الوحدة ': 'FORCE-TEST-' + Date.now(),
            'اسم العقار': 'اختبار إجباري',
            'اسم المستأجر': 'مستأجر اختبار',
            'رقم جوال المستأجر': '0501234567',
            'رقم جوال إضافي': '0507654321',
            'المدينة': 'الرياض'
        };

        await addChangeLog('اختبار إجباري', unitData, { forced: true }, { test: true });

        // إعادة حالة التتبع الأصلية
        isTrackingEnabled = wasTrackingEnabled;

        console.log('✅ تم إنشاء سجل التتبع الإجباري');
        showToast('تم إنشاء سجل تتبع تجريبي - تحقق من جدول tracking_logs', 'success');

    } catch (error) {
        console.error('❌ خطأ في إنشاء سجل التتبع الإجباري:', error);
        showToast('فشل في إنشاء سجل التتبع: ' + error.message, 'error');
    }
}

// دالة لعرض حالة نظام التتبع
function showTrackingStatus() {
    console.log('📊 حالة نظام التتبع:');
    console.log('- isTrackingEnabled:', isTrackingEnabled);
    console.log('- trackingLogsManager متوفر:', typeof window.trackingLogsManager !== 'undefined');
    console.log('- supabaseClient متوفر:', typeof supabaseClient !== 'undefined');
    console.log('- عدد السجلات المحلية:', changeTrackingLogs.length);

    showToast(`التتبع: ${isTrackingEnabled ? 'مفعل' : 'معطل'} | المدير: ${typeof window.trackingLogsManager !== 'undefined' ? 'متوفر' : 'غير متوفر'}`, 'info');
}

// دالة اختبار مباشرة للجدول الجديد (تتجاوز جميع الشروط)
async function directTestNewTable() {
    console.log('🔧 اختبار مباشر للجدول الجديد...');

    try {
        // التحقق من وجود المدير
        if (typeof window.trackingLogsManager === 'undefined') {
            console.error('❌ مدير سجلات التتبع غير محمل');
            showToast('مدير سجلات التتبع غير محمل', 'error');
            return;
        }

        // إنشاء سجل تجريبي مباشرة
        const testLogData = {
            operation_type: 'اختبار مباشر',
            unit_number: 'DIRECT-TEST-' + Date.now(),
            property_name: 'اختبار مباشر للجدول',
            tenant_name: 'مستأجر اختبار مباشر',
            tenant_phone: '0501111111',
            tenant_phone_2: '0502222222',
            city: 'الرياض',
            contract_number: 'TEST-CONTRACT-' + Date.now(),
            rent_value: 1500.00,
            contract_type: 'سكني',
            description: 'اختبار مباشر لحفظ السجل في الجدول الجديد',
            changes: {
                test: true,
                timestamp: new Date().toISOString(),
                method: 'direct_test'
            },
            additional_info: {
                source: 'direct_test_function',
                browser: navigator.userAgent,
                url: window.location.href
            },
            user_name: 'مختبر النظام'
        };

        console.log('📝 بيانات السجل التجريبي:', testLogData);

        // حفظ مباشر في الجدول الجديد
        const result = await window.trackingLogsManager.saveTrackingLogToSupabase(testLogData);

        if (result && result.id) {
            console.log('✅ تم حفظ السجل بنجاح:', result.id);
            showToast(`تم حفظ السجل بنجاح! ID: ${result.id}`, 'success');

            // عرض رابط للجدول في Supabase
            console.log('🔗 تحقق من الجدول في Supabase: Table Editor → tracking_logs');

        } else {
            console.error('❌ فشل في حفظ السجل');
            showToast('فشل في حفظ السجل', 'error');
        }

    } catch (error) {
        console.error('❌ خطأ في الاختبار المباشر:', error);
        showToast('خطأ في الاختبار: ' + error.message, 'error');
    }
}

// دالة حفظ مباشرة جداً في Supabase (تتجاوز جميع الأنظمة)
async function ultraDirectSave() {
    console.log('🚀 حفظ مباشر جداً في Supabase...');

    try {
        // التحقق من Supabase
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        // بيانات بسيطة جداً
        const simpleData = {
            operation_type: 'حفظ مباشر',
            unit_number: 'ULTRA-' + Date.now(),
            property_name: 'اختبار الحفظ المباشر',
            description: 'اختبار الحفظ المباشر في tracking_logs',
            user_name: 'نظام الاختبار المباشر'
        };

        console.log('📝 البيانات للحفظ:', simpleData);

        // حفظ مباشر في Supabase
        const { data, error } = await supabaseClient
            .from('tracking_logs')
            .insert([simpleData])
            .select();

        if (error) {
            throw new Error(`خطأ Supabase: ${error.message}`);
        }

        if (data && data[0]) {
            console.log('✅ تم الحفظ المباشر بنجاح!', data[0]);
            showToast(`✅ نجح الحفظ المباشر! ID: ${data[0].id}`, 'success');

            // عرض رابط للتحقق
            console.log('🔗 تحقق من الجدول في Supabase Dashboard → Table Editor → tracking_logs');

            return data[0];
        } else {
            throw new Error('لم يتم إرجاع بيانات من Supabase');
        }

    } catch (error) {
        console.error('❌ فشل الحفظ المباشر:', error);
        showToast(`❌ فشل الحفظ المباشر: ${error.message}`, 'error');
        return null;
    }
}

// دالة اختبار ربط الوحدات مع تشخيص مفصل
async function testUnitLinking() {
    console.log('🔗 اختبار ربط الوحدات مع تشخيص مفصل...');

    try {
        // 1. التحقق من المتطلبات الأساسية
        console.log('📋 فحص المتطلبات الأساسية:');
        console.log('- properties array:', Array.isArray(properties), 'عدد العقارات:', properties?.length || 0);
        console.log('- supabaseClient:', typeof supabaseClient !== 'undefined' && supabaseClient !== null);
        console.log('- savePropertyToSupabase:', typeof savePropertyToSupabase === 'function');
        console.log('- addChangeLog:', typeof addChangeLog === 'function');

        if (!Array.isArray(properties) || properties.length === 0) {
            throw new Error('لا توجد عقارات للاختبار');
        }

        // 2. البحث عن وحدات مناسبة للاختبار
        console.log('🔍 البحث عن وحدات مناسبة للاختبار...');

        // البحث عن وحدة فارغة
        const emptyUnit = properties.find(p =>
            p['رقم  الوحدة '] &&
            (!p['اسم المستأجر'] || p['اسم المستأجر'].trim() === '') &&
            (!p['رقم العقد'] || p['رقم العقد'].trim() === '')
        );

        if (!emptyUnit) {
            // إنشاء وحدة اختبار
            const testUnit = {
                'رقم  الوحدة ': 'TEST-LINK-' + Date.now(),
                'اسم العقار': 'عقار اختبار الربط',
                'المدينة': 'الرياض',
                'اسم المستأجر': '',
                'رقم العقد': '',
                'المساحة': 100,
                'قيمة  الايجار ': 0,
                'نوع العقد': 'سكني'
            };

            properties.push(testUnit);
            console.log('✅ تم إنشاء وحدة اختبار:', testUnit['رقم  الوحدة ']);
        }

        const targetUnit = emptyUnit || properties[properties.length - 1];
        const testContractNumber = 'CONTRACT-TEST-' + Date.now();

        console.log('🎯 الوحدة المستهدفة:', {
            unitNumber: targetUnit['رقم  الوحدة '],
            propertyName: targetUnit['اسم العقار'],
            currentTenant: targetUnit['اسم المستأجر'] || 'فارغ',
            currentContract: targetUnit['رقم العقد'] || 'بدون عقد'
        });

        // 3. اختبار ربط الوحدة
        console.log('🔗 بدء اختبار ربط الوحدة...');

        const unitIndex = properties.findIndex(p =>
            p['اسم العقار'] === targetUnit['اسم العقار'] &&
            p['رقم  الوحدة '] === targetUnit['رقم  الوحدة ']
        );

        if (unitIndex === -1) {
            throw new Error('لم يتم العثور على الوحدة في المصفوفة');
        }

        // حفظ البيانات القديمة
        const oldData = { ...properties[unitIndex] };

        // تحديث البيانات محلياً
        properties[unitIndex]['رقم العقد'] = testContractNumber;
        properties[unitIndex]['اسم المستأجر'] = 'مستأجر اختبار الربط';

        console.log('✅ تم تحديث البيانات محلياً');

        // 4. اختبار حفظ في Supabase
        console.log('☁️ اختبار حفظ في Supabase...');

        if (typeof savePropertyToSupabase === 'function') {
            const saveResult = await savePropertyToSupabase(properties[unitIndex]);

            if (saveResult) {
                console.log('✅ نجح حفظ الوحدة في Supabase');
                showToast('✅ نجح حفظ الوحدة في Supabase', 'success');
            } else {
                console.error('❌ فشل حفظ الوحدة في Supabase');
                showToast('❌ فشل حفظ الوحدة في Supabase', 'error');
            }
        } else {
            console.error('❌ دالة savePropertyToSupabase غير متوفرة');
            showToast('❌ دالة savePropertyToSupabase غير متوفرة', 'error');
        }

        // 5. اختبار إضافة سجل التتبع
        console.log('📝 اختبار إضافة سجل التتبع...');

        if (typeof addChangeLog === 'function') {
            try {
                await addChangeLog('اختبار ربط وحدة', properties[unitIndex], oldData, {
                    operation: 'test_link_unit',
                    unitNumber: targetUnit['رقم  الوحدة '],
                    contractNumber: testContractNumber,
                    propertyName: targetUnit['اسم العقار']
                });
                console.log('✅ نجح إضافة سجل التتبع');
                showToast('✅ نجح إضافة سجل التتبع', 'success');
            } catch (logError) {
                console.error('❌ فشل إضافة سجل التتبع:', logError);
                showToast('❌ فشل إضافة سجل التتبع: ' + logError.message, 'error');
            }
        } else {
            console.error('❌ دالة addChangeLog غير متوفرة');
        }

        // 6. حفظ محلياً
        saveDataLocally();

        // 7. تحديث العرض
        initializeApp();

        console.log('🎉 اكتمل اختبار ربط الوحدات بنجاح!');
        showToast(`🎉 تم ربط الوحدة ${targetUnit['رقم  الوحدة ']} بالعقد ${testContractNumber}`, 'success');

        return {
            success: true,
            unitNumber: targetUnit['رقم  الوحدة '],
            contractNumber: testContractNumber,
            propertyName: targetUnit['اسم العقار']
        };

    } catch (error) {
        console.error('❌ فشل اختبار ربط الوحدات:', error);
        showToast('❌ فشل اختبار ربط الوحدات: ' + error.message, 'error');
        return { success: false, error: error.message };
    }
}

// دالة اختبار سريعة لحفظ ربط الوحدات في Supabase
async function quickTestUnitLinkingSave() {
    console.log('⚡ اختبار سريع لحفظ ربط الوحدات في Supabase...');

    try {
        // التحقق من الاتصال
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        // إنشاء بيانات اختبار
        const testUnitData = {
            'رقم  الوحدة ': 'QUICK-TEST-' + Date.now(),
            'اسم العقار': 'عقار اختبار سريع',
            'المدينة': 'الرياض',
            'اسم المستأجر': 'مستأجر اختبار سريع',
            'رقم العقد': 'CONTRACT-QUICK-' + Date.now(),
            'قيمة  الايجار ': 2000,
            'المساحة': 120,
            'نوع العقد': 'سكني'
        };

        console.log('📝 بيانات الاختبار:', testUnitData);

        // حفظ مباشر باستخدام الدالة المخصصة
        const result = await saveUnitLinkingToSupabase(testUnitData, 'link');

        if (result) {
            console.log('✅ نجح الاختبار السريع!', result);
            showToast(`✅ نجح حفظ ربط الوحدة في Supabase! ID: ${result.id}`, 'success');

            // عرض رابط للتحقق
            console.log('🔗 تحقق من الجدول في Supabase Dashboard → Table Editor → properties');

            return { success: true, result: result };
        } else {
            throw new Error('لم يتم إرجاع نتيجة من الحفظ');
        }

    } catch (error) {
        console.error('❌ فشل الاختبار السريع:', error);
        showToast(`❌ فشل الاختبار السريع: ${error.message}`, 'error');
        return { success: false, error: error.message };
    }
}

// دالة اختبار سريعة لفصل الوحدات من Supabase
async function quickTestUnitUnlinkingSave() {
    console.log('⚡ اختبار سريع لفصل الوحدات في Supabase...');

    try {
        // التحقق من الاتصال
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        // البحث عن وحدة مربوطة للاختبار
        const linkedUnit = properties.find(p =>
            p['رقم العقد'] &&
            p['رقم العقد'].trim() !== '' &&
            p['اسم المستأجر'] &&
            p['اسم المستأجر'].trim() !== ''
        );

        let testUnitData;

        if (linkedUnit) {
            // استخدام وحدة موجودة
            testUnitData = { ...linkedUnit };
            console.log('📋 استخدام وحدة موجودة للاختبار:', testUnitData['رقم  الوحدة ']);
        } else {
            // إنشاء وحدة اختبار مربوطة أولاً
            testUnitData = {
                'رقم  الوحدة ': 'UNLINK-TEST-' + Date.now(),
                'اسم العقار': 'عقار اختبار الفصل',
                'المدينة': 'الرياض',
                'اسم المستأجر': 'مستأجر اختبار الفصل',
                'رقم العقد': 'CONTRACT-UNLINK-' + Date.now(),
                'قيمة  الايجار ': 1800,
                'المساحة': 100,
                'نوع العقد': 'سكني'
            };

            // حفظ الوحدة المربوطة أولاً
            console.log('📝 إنشاء وحدة مربوطة للاختبار...');
            await saveUnitLinkingToSupabase(testUnitData, 'link');

            // إضافة للمصفوفة المحلية
            properties.push(testUnitData);
        }

        console.log('📝 بيانات الوحدة قبل الفصل:', {
            unitNumber: testUnitData['رقم  الوحدة '],
            propertyName: testUnitData['اسم العقار'],
            contractNumber: testUnitData['رقم العقد'],
            tenant: testUnitData['اسم المستأجر']
        });

        // فصل الوحدة (إزالة العقد والمستأجر)
        const unlinkedData = { ...testUnitData };
        unlinkedData['رقم العقد'] = '';
        unlinkedData['اسم المستأجر'] = '';

        console.log('🔓 بدء فصل الوحدة...');

        // حفظ الفصل باستخدام الدالة المخصصة
        const result = await saveUnitLinkingToSupabase(unlinkedData, 'unlink');

        if (result) {
            console.log('✅ نجح اختبار فصل الوحدة!', result);
            showToast(`✅ نجح فصل الوحدة ${testUnitData['رقم  الوحدة ']} في Supabase!`, 'success');

            // عرض رابط للتحقق
            console.log('🔗 تحقق من الجدول في Supabase Dashboard → Table Editor → properties');
            console.log('📋 ابحث عن الوحدة:', testUnitData['رقم  الوحدة ']);
            console.log('🔍 يجب أن تجد contract_number و tenant_name فارغين');

            return {
                success: true,
                result: result,
                unitNumber: testUnitData['رقم  الوحدة '],
                operation: 'unlink'
            };
        } else {
            throw new Error('لم يتم إرجاع نتيجة من الحفظ');
        }

    } catch (error) {
        console.error('❌ فشل اختبار فصل الوحدة:', error);
        showToast(`❌ فشل اختبار فصل الوحدة: ${error.message}`, 'error');
        return { success: false, error: error.message };
    }
}

// دالة اختبار شاملة لربط وفصل الوحدات
async function comprehensiveUnitLinkingTest() {
    console.log('🔄 اختبار شامل لربط وفصل الوحدات...');

    try {
        const testResults = {
            link: false,
            unlink: false,
            tracking: false
        };

        // المرحلة 1: اختبار الربط
        console.log('🔗 المرحلة 1: اختبار ربط الوحدة...');
        const linkResult = await quickTestUnitLinkingSave();

        if (linkResult.success) {
            testResults.link = true;
            console.log('✅ نجح اختبار الربط');

            // المرحلة 2: اختبار الفصل
            console.log('🔓 المرحلة 2: اختبار فصل الوحدة...');
            const unlinkResult = await quickTestUnitUnlinkingSave();

            if (unlinkResult.success) {
                testResults.unlink = true;
                console.log('✅ نجح اختبار الفصل');

                // المرحلة 3: التحقق من سجلات التتبع
                console.log('📝 المرحلة 3: التحقق من سجلات التتبع...');
                if (typeof window.trackingLogsManager !== 'undefined') {
                    testResults.tracking = true;
                    console.log('✅ نظام سجلات التتبع متوفر');
                }
            }
        }

        // عرض النتائج
        const successCount = Object.values(testResults).filter(Boolean).length;
        const totalTests = Object.keys(testResults).length;

        let message = `🎯 نتائج الاختبار الشامل:\n\n`;
        message += `✅ الربط: ${testResults.link ? 'نجح' : 'فشل'}\n`;
        message += `✅ الفصل: ${testResults.unlink ? 'نجح' : 'فشل'}\n`;
        message += `✅ سجلات التتبع: ${testResults.tracking ? 'متوفر' : 'غير متوفر'}\n\n`;
        message += `📊 النتيجة: ${successCount}/${totalTests} اختبارات نجحت`;

        if (successCount === totalTests) {
            message += `\n\n🎉 جميع الاختبارات نجحت! النظام يعمل بشكل مثالي`;
            showToast('🎉 جميع اختبارات ربط/فصل الوحدات نجحت!', 'success');
        } else {
            message += `\n\n⚠️ بعض الاختبارات فشلت، تحقق من Console للتفاصيل`;
            showToast('⚠️ بعض اختبارات ربط/فصل الوحدات فشلت', 'warning');
        }

        console.log(message);
        alert(message);

        return testResults;

    } catch (error) {
        console.error('❌ خطأ في الاختبار الشامل:', error);
        showToast(`❌ خطأ في الاختبار الشامل: ${error.message}`, 'error');
        return { success: false, error: error.message };
    }
}

// دالة اختبار مباشرة لفصل الوحدات في Supabase
async function directUnlinkTest() {
    console.log('🔓 اختبار مباشر لفصل الوحدات في Supabase...');

    try {
        // التحقق من الاتصال
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        // البحث عن وحدة مربوطة في Supabase
        console.log('🔍 البحث عن وحدة مربوطة في Supabase...');
        const { data: linkedUnits, error: searchError } = await supabaseClient
            .from('properties')
            .select('*')
            .not('contract_number', 'is', null)
            .not('contract_number', 'eq', '')
            .not('tenant_name', 'is', null)
            .not('tenant_name', 'eq', '')
            .limit(1);

        if (searchError) {
            throw new Error(`خطأ في البحث: ${searchError.message}`);
        }

        let targetUnit;

        if (linkedUnits && linkedUnits.length > 0) {
            // استخدام وحدة موجودة
            targetUnit = linkedUnits[0];
            console.log('✅ تم العثور على وحدة مربوطة:', {
                unit_number: targetUnit.unit_number,
                tenant_name: targetUnit.tenant_name,
                contract_number: targetUnit.contract_number
            });
        } else {
            // إنشاء وحدة مربوطة للاختبار
            console.log('➕ إنشاء وحدة مربوطة للاختبار...');
            const testUnitData = {
                unit_number: 'DIRECT-UNLINK-TEST-' + Date.now(),
                property_name: 'عقار اختبار الفصل المباشر',
                city: 'الرياض',
                tenant_name: 'مستأجر اختبار الفصل',
                contract_number: 'CONTRACT-UNLINK-' + Date.now(),
                rent_value: 1500,
                area: 90,
                contract_type: 'سكني',
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            };

            const { data: newUnit, error: createError } = await supabaseClient
                .from('properties')
                .insert([testUnitData])
                .select()
                .single();

            if (createError) {
                throw new Error(`خطأ في إنشاء الوحدة: ${createError.message}`);
            }

            targetUnit = newUnit;
            console.log('✅ تم إنشاء وحدة مربوطة للاختبار:', targetUnit.unit_number);
        }

        // الآن فصل الوحدة مباشرة
        console.log('🔓 بدء فصل الوحدة مباشرة...');

        const unlinkData = {
            tenant_name: '',
            contract_number: '',
            updated_at: new Date().toISOString()
        };

        console.log('📝 بيانات الفصل:', unlinkData);

        const { data: unlinkedUnit, error: unlinkError } = await supabaseClient
            .from('properties')
            .update(unlinkData)
            .eq('id', targetUnit.id)
            .select()
            .single();

        if (unlinkError) {
            throw new Error(`خطأ في فصل الوحدة: ${unlinkError.message}`);
        }

        console.log('✅ تم فصل الوحدة مباشرة بنجاح!', {
            id: unlinkedUnit.id,
            unit_number: unlinkedUnit.unit_number,
            tenant_name: unlinkedUnit.tenant_name,
            contract_number: unlinkedUnit.contract_number
        });

        // التحقق من النتيجة
        if (unlinkedUnit.tenant_name === '' && unlinkedUnit.contract_number === '') {
            console.log('🎉 تأكيد: الوحدة تم فصلها بنجاح في Supabase');
            showToast(`✅ تم فصل الوحدة ${unlinkedUnit.unit_number} مباشرة في Supabase!`, 'success');

            // إضافة سجل تتبع
            try {
                if (typeof window.trackingLogsManager !== 'undefined') {
                    const trackingData = {
                        operation_type: 'فصل وحدة مباشر',
                        unit_number: unlinkedUnit.unit_number,
                        property_name: unlinkedUnit.property_name,
                        description: `تم فصل الوحدة ${unlinkedUnit.unit_number} مباشرة من Supabase`,
                        user_name: 'اختبار مباشر'
                    };

                    await window.trackingLogsManager.saveTrackingLogToSupabase(trackingData);
                    console.log('✅ تم حفظ سجل التتبع للفصل المباشر');
                }
            } catch (trackingError) {
                console.warn('⚠️ فشل في حفظ سجل التتبع:', trackingError);
            }

            return {
                success: true,
                unit: unlinkedUnit,
                operation: 'direct_unlink'
            };
        } else {
            throw new Error('فشل في فصل الوحدة - القيم لم تصبح فارغة');
        }

    } catch (error) {
        console.error('❌ فشل الاختبار المباشر للفصل:', error);
        showToast(`❌ فشل الاختبار المباشر للفصل: ${error.message}`, 'error');
        return { success: false, error: error.message };
    }
}

// دالة للتحقق من حالة الوحدة في Supabase
async function checkUnitStatusInSupabase(unitNumber, propertyName) {
    try {
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        console.log(`🔍 التحقق من حالة الوحدة في Supabase: ${unitNumber} - ${propertyName}`);

        const { data: unit, error } = await supabaseClient
            .from('properties')
            .select('*')
            .eq('unit_number', unitNumber)
            .eq('property_name', propertyName)
            .single();

        if (error) {
            if (error.code === 'PGRST116') {
                console.log('⚠️ الوحدة غير موجودة في Supabase');
                return { exists: false };
            }
            throw new Error(`خطأ في البحث: ${error.message}`);
        }

        const status = {
            exists: true,
            unit_number: unit.unit_number,
            property_name: unit.property_name,
            tenant_name: unit.tenant_name || '',
            contract_number: unit.contract_number || '',
            is_linked: !!(unit.tenant_name && unit.contract_number),
            updated_at: unit.updated_at
        };

        console.log('📋 حالة الوحدة في Supabase:', status);

        return status;

    } catch (error) {
        console.error('❌ خطأ في التحقق من حالة الوحدة:', error);
        return { error: error.message };
    }
}

// دالة اختبار شاملة للفصل مع التحقق
async function comprehensiveUnlinkTest(unitNumber, propertyName) {
    console.log('🔄 اختبار شامل لفصل الوحدة مع التحقق...');

    try {
        // 1. التحقق من الحالة قبل الفصل
        console.log('📋 المرحلة 1: التحقق من الحالة قبل الفصل...');
        const statusBefore = await checkUnitStatusInSupabase(unitNumber, propertyName);

        if (!statusBefore.exists) {
            throw new Error('الوحدة غير موجودة في Supabase');
        }

        if (!statusBefore.is_linked) {
            console.log('⚠️ الوحدة غير مربوطة أصلاً');
            showToast('الوحدة غير مربوطة أصلاً', 'warning');
            return { success: false, reason: 'not_linked' };
        }

        console.log('✅ الوحدة مربوطة، يمكن فصلها');

        // 2. تنفيذ الفصل
        console.log('🔓 المرحلة 2: تنفيذ الفصل...');

        // البحث عن الوحدة في المصفوفة المحلية
        const unitIndex = properties.findIndex(p =>
            p['اسم العقار'] === propertyName && p['رقم  الوحدة '] === unitNumber
        );

        if (unitIndex === -1) {
            throw new Error('الوحدة غير موجودة في البيانات المحلية');
        }

        // تنفيذ الفصل
        await unlinkUnit(unitNumber, propertyName, statusBefore.contract_number);

        // 3. التحقق من الحالة بعد الفصل
        console.log('🔍 المرحلة 3: التحقق من الحالة بعد الفصل...');

        // انتظار قليل للتأكد من تحديث البيانات
        await new Promise(resolve => setTimeout(resolve, 2000));

        const statusAfter = await checkUnitStatusInSupabase(unitNumber, propertyName);

        if (statusAfter.error) {
            throw new Error(`خطأ في التحقق بعد الفصل: ${statusAfter.error}`);
        }

        // 4. تحليل النتائج
        console.log('📊 المرحلة 4: تحليل النتائج...');

        const results = {
            before: statusBefore,
            after: statusAfter,
            success: !statusAfter.is_linked,
            changes: {
                tenant_cleared: statusBefore.tenant_name !== statusAfter.tenant_name,
                contract_cleared: statusBefore.contract_number !== statusAfter.contract_number
            }
        };

        console.log('📈 نتائج الاختبار الشامل:', results);

        if (results.success) {
            console.log('🎉 نجح الفصل بالكامل!');
            showToast(`✅ تم فصل الوحدة ${unitNumber} بنجاح في Supabase`, 'success');
        } else {
            console.error('❌ فشل الفصل - الوحدة ما زالت مربوطة');
            showToast(`❌ فشل فصل الوحدة ${unitNumber} - ما زالت مربوطة`, 'error');
        }

        return results;

    } catch (error) {
        console.error('❌ خطأ في الاختبار الشامل للفصل:', error);
        showToast(`❌ خطأ في اختبار الفصل: ${error.message}`, 'error');
        return { success: false, error: error.message };
    }
}

// دالة فصل مبسطة جداً للوحدات في Supabase
async function simpleUnlinkUnit(unitNumber, propertyName) {
    console.log(`🔓 فصل مبسط للوحدة: ${unitNumber} - ${propertyName}`);

    try {
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        // البحث عن الوحدة أولاً
        console.log('🔍 البحث عن الوحدة في Supabase...');
        const { data: existingUnit, error: searchError } = await supabaseClient
            .from('properties')
            .select('*')
            .eq('unit_number', unitNumber)
            .eq('property_name', propertyName)
            .single();

        if (searchError) {
            if (searchError.code === 'PGRST116') {
                throw new Error('الوحدة غير موجودة في Supabase');
            }
            throw new Error(`خطأ في البحث: ${searchError.message}`);
        }

        console.log('📋 الوحدة الموجودة:', {
            id: existingUnit.id,
            unit_number: existingUnit.unit_number,
            tenant_name: existingUnit.tenant_name,
            contract_number: existingUnit.contract_number
        });

        // فصل الوحدة مباشرة
        console.log('🔓 فصل الوحدة مباشرة...');
        const { data: unlinkedUnit, error: unlinkError } = await supabaseClient
            .from('properties')
            .update({
                tenant_name: '',
                contract_number: '',
                updated_at: new Date().toISOString()
            })
            .eq('id', existingUnit.id)
            .select()
            .single();

        if (unlinkError) {
            throw new Error(`خطأ في الفصل: ${unlinkError.message}`);
        }

        console.log('✅ تم فصل الوحدة بنجاح:', {
            id: unlinkedUnit.id,
            unit_number: unlinkedUnit.unit_number,
            tenant_name: unlinkedUnit.tenant_name,
            contract_number: unlinkedUnit.contract_number,
            updated_at: unlinkedUnit.updated_at
        });

        // التحقق من النجاح
        if (unlinkedUnit.tenant_name === '' && unlinkedUnit.contract_number === '') {
            console.log('🎉 تأكيد: تم فصل الوحدة بنجاح في Supabase');
            showToast(`✅ تم فصل الوحدة ${unitNumber} بنجاح في Supabase`, 'success');

            // تحديث البيانات المحلية أيضاً
            const localUnitIndex = properties.findIndex(p =>
                p['رقم  الوحدة '] === unitNumber && p['اسم العقار'] === propertyName
            );

            if (localUnitIndex !== -1) {
                properties[localUnitIndex]['رقم العقد'] = '';
                properties[localUnitIndex]['اسم المستأجر'] = '';
                saveDataLocally();
                console.log('✅ تم تحديث البيانات المحلية أيضاً');
            }

            return {
                success: true,
                unit: unlinkedUnit,
                operation: 'simple_unlink'
            };
        } else {
            throw new Error('فشل في فصل الوحدة - القيم لم تصبح فارغة');
        }

    } catch (error) {
        console.error('❌ فشل الفصل المبسط:', error);
        showToast(`❌ فشل فصل الوحدة: ${error.message}`, 'error');
        return { success: false, error: error.message };
    }
}

// دالة لاختبار فصل وحدة موجودة
async function testUnlinkExistingUnit() {
    console.log('🧪 اختبار فصل وحدة موجودة...');

    try {
        // البحث عن وحدة مربوطة
        const linkedUnit = properties.find(p =>
            p['رقم العقد'] &&
            p['رقم العقد'].trim() !== '' &&
            p['اسم المستأجر'] &&
            p['اسم المستأجر'].trim() !== ''
        );

        if (!linkedUnit) {
            throw new Error('لا توجد وحدات مربوطة للاختبار');
        }

        console.log('🎯 الوحدة المختارة للاختبار:', {
            unitNumber: linkedUnit['رقم  الوحدة '],
            propertyName: linkedUnit['اسم العقار'],
            tenant: linkedUnit['اسم المستأجر'],
            contract: linkedUnit['رقم العقد']
        });

        // فصل الوحدة باستخدام الدالة المبسطة
        const result = await simpleUnlinkUnit(
            linkedUnit['رقم  الوحدة '],
            linkedUnit['اسم العقار']
        );

        if (result.success) {
            console.log('🎉 نجح اختبار فصل الوحدة الموجودة!');
            showToast('🎉 نجح اختبار فصل الوحدة الموجودة!', 'success');
        } else {
            console.error('❌ فشل اختبار فصل الوحدة الموجودة');
            showToast('❌ فشل اختبار فصل الوحدة الموجودة', 'error');
        }

        return result;

    } catch (error) {
        console.error('❌ خطأ في اختبار فصل الوحدة الموجودة:', error);
        showToast(`❌ خطأ في الاختبار: ${error.message}`, 'error');
        return { success: false, error: error.message };
    }
}

// دالة حفظ مخصصة للفصل تمنع إعادة الكتابة
async function saveUnlinkToSupabaseOnly(unitNumber, propertyName) {
    console.log(`🔒 حفظ فصل مخصص للوحدة: ${unitNumber} - ${propertyName}`);

    try {
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        // البحث عن الوحدة في Supabase
        const { data: existingUnit, error: searchError } = await supabaseClient
            .from('properties')
            .select('id, unit_number, property_name, tenant_name, contract_number')
            .eq('unit_number', unitNumber)
            .eq('property_name', propertyName)
            .single();

        if (searchError) {
            if (searchError.code === 'PGRST116') {
                throw new Error('الوحدة غير موجودة في Supabase');
            }
            throw new Error(`خطأ في البحث: ${searchError.message}`);
        }

        console.log('📋 الوحدة قبل الفصل:', {
            id: existingUnit.id,
            tenant_name: existingUnit.tenant_name,
            contract_number: existingUnit.contract_number
        });

        // فصل الوحدة مباشرة في Supabase فقط
        const { data: unlinkedUnit, error: unlinkError } = await supabaseClient
            .from('properties')
            .update({
                tenant_name: '',
                contract_number: '',
                updated_at: new Date().toISOString()
            })
            .eq('id', existingUnit.id)
            .select()
            .single();

        if (unlinkError) {
            throw new Error(`خطأ في الفصل: ${unlinkError.message}`);
        }

        console.log('✅ تم فصل الوحدة في Supabase:', {
            id: unlinkedUnit.id,
            tenant_name: unlinkedUnit.tenant_name,
            contract_number: unlinkedUnit.contract_number,
            updated_at: unlinkedUnit.updated_at
        });

        // التحقق من النجاح
        if (unlinkedUnit.tenant_name === '' && unlinkedUnit.contract_number === '') {
            console.log('🎉 تأكيد: تم فصل الوحدة بنجاح في Supabase فقط');

            // إضافة سجل تتبع
            try {
                if (typeof window.trackingLogsManager !== 'undefined') {
                    const trackingData = {
                        operation_type: 'فصل وحدة نهائي',
                        unit_number: unitNumber,
                        property_name: propertyName,
                        description: `تم فصل الوحدة ${unitNumber} نهائياً في Supabase`,
                        user_name: 'النظام المحسن'
                    };

                    await window.trackingLogsManager.saveTrackingLogToSupabase(trackingData);
                    console.log('✅ تم حفظ سجل التتبع للفصل النهائي');
                }
            } catch (trackingError) {
                console.warn('⚠️ فشل في حفظ سجل التتبع:', trackingError);
            }

            return {
                success: true,
                unit: unlinkedUnit,
                operation: 'unlink_supabase_only'
            };
        } else {
            throw new Error('فشل في فصل الوحدة - القيم لم تصبح فارغة');
        }

    } catch (error) {
        console.error('❌ فشل حفظ الفصل المخصص:', error);
        return { success: false, error: error.message };
    }
}

// دالة فصل محسنة تمنع إعادة الكتابة
async function improvedUnlinkUnit(unitNumber, propertyName, contractNumber) {
    console.log(`🔓 فصل محسن للوحدة: ${unitNumber}`);

    if (!confirm(`هل أنت متأكد من فصل الوحدة ${unitNumber} من العقد؟`)) return;

    const unitIndex = properties.findIndex(p =>
        p['اسم العقار'] === propertyName &&
        p['رقم  الوحدة '] === unitNumber &&
        p['رقم العقد'] === contractNumber
    );

    if (unitIndex !== -1) {
        try {
            // 1. فصل في Supabase أولاً
            console.log('🔒 المرحلة 1: فصل في Supabase...');
            const supabaseResult = await saveUnlinkToSupabaseOnly(unitNumber, propertyName);

            if (!supabaseResult.success) {
                throw new Error(`فشل الفصل السحابي: ${supabaseResult.error}`);
            }

            console.log('✅ نجح الفصل السحابي');

            // 2. تحديث البيانات المحلية
            console.log('📱 المرحلة 2: تحديث البيانات المحلية...');
            properties[unitIndex]['رقم العقد'] = '';
            properties[unitIndex]['اسم المستأجر'] = '';

            // 3. حفظ محلياً
            saveDataLocally();

            // 4. تحديث العرض
            updateLinkedUnitsDisplay(propertyName, contractNumber);
            updateAvailableUnitsDisplay(propertyName, contractNumber, unitNumber);
            initializeApp();

            // 5. رسالة النجاح
            const message = `✅ تم فصل الوحدة ${unitNumber} بنجاح!\n\n☁️ تم الحفظ في قاعدة البيانات السحابية\n📱 تم تحديث البيانات المحلية`;

            alert(message);
            showToast(`تم فصل الوحدة ${unitNumber} بنجاح`, 'success');

            console.log('🎉 تم إكمال فصل الوحدة بنجاح');

        } catch (error) {
            console.error('❌ خطأ في فصل الوحدة المحسن:', error);
            alert(`❌ فشل في فصل الوحدة: ${error.message}`);
            showToast(`فشل في فصل الوحدة: ${error.message}`, 'error');
        }
    } else {
        alert('لم يتم العثور على الوحدة');
    }
}

// قائمة الوحدات المفصولة حديثاً (لمنع إعادة الكتابة)
let recentlyUnlinkedUnits = new Set();

// دالة لإضافة وحدة للقائمة المحمية
function protectUnlinkedUnit(unitNumber, propertyName) {
    const unitKey = `${unitNumber}|${propertyName}`;
    recentlyUnlinkedUnits.add(unitKey);
    console.log(`🔒 تم حماية الوحدة من إعادة الكتابة: ${unitKey}`);

    // إزالة الحماية بعد 5 دقائق
    setTimeout(() => {
        recentlyUnlinkedUnits.delete(unitKey);
        console.log(`🔓 تم إزالة حماية الوحدة: ${unitKey}`);
    }, 5 * 60 * 1000);
}

// دالة للتحقق من حماية الوحدة
function isUnitProtected(unitNumber, propertyName) {
    const unitKey = `${unitNumber}|${propertyName}`;
    return recentlyUnlinkedUnits.has(unitKey);
}

// دالة فصل نهائية محسنة مع الحماية
async function finalImprovedUnlinkUnit(unitNumber, propertyName, contractNumber) {
    console.log(`🔓 فصل نهائي محسن للوحدة: ${unitNumber}`);

    if (!confirm(`هل أنت متأكد من فصل الوحدة ${unitNumber} من العقد؟`)) return;

    try {
        // 1. حماية الوحدة من إعادة الكتابة
        protectUnlinkedUnit(unitNumber, propertyName);

        // 2. فصل في Supabase أولاً
        console.log('🔒 المرحلة 1: فصل في Supabase...');
        const supabaseResult = await saveUnlinkToSupabaseOnly(unitNumber, propertyName);

        if (!supabaseResult.success) {
            throw new Error(`فشل الفصل السحابي: ${supabaseResult.error}`);
        }

        console.log('✅ نجح الفصل السحابي');

        // 3. تحديث البيانات المحلية بعد التأكد من نجاح الفصل السحابي
        console.log('📱 المرحلة 2: تحديث البيانات المحلية...');
        const unitIndex = properties.findIndex(p =>
            p['اسم العقار'] === propertyName &&
            p['رقم  الوحدة '] === unitNumber
        );

        if (unitIndex !== -1) {
            // تحديث البيانات المحلية لتطابق Supabase
            properties[unitIndex]['رقم العقد'] = '';
            properties[unitIndex]['اسم المستأجر'] = '';

            // حفظ محلياً فقط
            saveDataLocally();
            console.log('✅ تم تحديث البيانات المحلية');
        }

        // 4. منع أي حفظ تلقائي لمدة 10 دقائق
        window.preventAutoSave = true;
        setTimeout(() => {
            window.preventAutoSave = false;
            console.log('🔓 تم إلغاء منع الحفظ التلقائي');
        }, 10 * 60 * 1000);

        console.log('🔒 تم منع الحفظ التلقائي لمدة 10 دقائق');

        // 5. تحديث العرض
        updateLinkedUnitsDisplay(propertyName, contractNumber);
        updateAvailableUnitsDisplay(propertyName, contractNumber, unitNumber);
        initializeApp();

        // 6. رسالة النجاح
        const message = `✅ تم فصل الوحدة ${unitNumber} بنجاح!\n\n☁️ تم الحفظ في قاعدة البيانات السحابية\n📱 تم تحديث البيانات المحلية\n🔒 تم حماية الوحدة من إعادة الكتابة لمدة 5 دقائق\n⏰ تم منع الحفظ التلقائي لمدة 10 دقائق`;

        alert(message);
        showToast(`تم فصل الوحدة ${unitNumber} بنجاح`, 'success');

        console.log('🎉 تم إكمال فصل الوحدة بنجاح مع الحماية الكاملة');

        return { success: true, protected: true };

    } catch (error) {
        console.error('❌ خطأ في الفصل النهائي المحسن:', error);
        alert(`❌ فشل في فصل الوحدة: ${error.message}`);
        showToast(`فشل في فصل الوحدة: ${error.message}`, 'error');
        return { success: false, error: error.message };
    }
}

// دالة wrapper لحماية savePropertyToSupabase
const originalSavePropertyToSupabase = window.savePropertyToSupabase;

window.savePropertyToSupabase = async function(property) {
    // التحقق من منع الحفظ التلقائي
    if (window.preventAutoSave) {
        const unitNumber = property['رقم  الوحدة '];
        const propertyName = property['اسم العقار'];

        // التحقق من حماية الوحدة
        if (isUnitProtected(unitNumber, propertyName)) {
            console.log(`🔒 تم منع حفظ الوحدة المحمية: ${unitNumber}`);
            return { success: true, skipped: true, reason: 'protected_unit' };
        }
    }

    // استخدام الدالة الأصلية
    if (typeof originalSavePropertyToSupabase === 'function') {
        return await originalSavePropertyToSupabase(property);
    } else {
        console.warn('⚠️ الدالة الأصلية savePropertyToSupabase غير متوفرة');
        return { success: false, error: 'الدالة الأصلية غير متوفرة' };
    }
};

// دالة لإعادة تعيين الحماية
function resetUnlinkProtection() {
    window.preventAutoSave = false;
    recentlyUnlinkedUnits.clear();
    console.log('🔓 تم إعادة تعيين جميع الحمايات');
    showToast('تم إعادة تعيين حماية الفصل', 'info');
}

// دالة فصل نهائية مطلقة
async function absoluteUnlinkUnit(unitNumber, propertyName, contractNumber) {
    console.log(`🔓 فصل مطلق للوحدة: ${unitNumber}`);

    if (!confirm(`هل أنت متأكد من فصل الوحدة ${unitNumber} من العقد نهائياً؟\n\nهذا الفصل سيكون دائماً ولن يمكن إعادة كتابته تلقائياً.`)) return;

    // التحقق من وجود البيانات
    if (!ensurePropertiesLoaded('absoluteUnlinkUnit')) {
        return;
    }

    try {
        // 1. حماية مطلقة للوحدة
        protectUnlinkedUnit(unitNumber, propertyName);
        window.preventAutoSave = true;

        console.log('🔒 تم تفعيل الحماية المطلقة');

        // 2. فصل في Supabase مباشرة
        console.log('☁️ فصل مباشر في Supabase...');

        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        // البحث عن الوحدة
        const { data: existingUnit, error: searchError } = await supabaseClient
            .from('properties')
            .select('id, unit_number, tenant_name, contract_number')
            .eq('unit_number', unitNumber)
            .eq('property_name', propertyName)
            .single();

        if (searchError) {
            if (searchError.code === 'PGRST116') {
                throw new Error('الوحدة غير موجودة في Supabase');
            }
            throw new Error(`خطأ في البحث: ${searchError.message}`);
        }

        console.log('📋 الوحدة قبل الفصل:', {
            id: existingUnit.id,
            tenant_name: existingUnit.tenant_name,
            contract_number: existingUnit.contract_number
        });

        // فصل مباشر
        const { data: unlinkedUnit, error: unlinkError } = await supabaseClient
            .from('properties')
            .update({
                tenant_name: '',
                contract_number: '',
                updated_at: new Date().toISOString()
            })
            .eq('id', existingUnit.id)
            .select()
            .single();

        if (unlinkError) {
            throw new Error(`خطأ في الفصل: ${unlinkError.message}`);
        }

        console.log('✅ تم فصل الوحدة في Supabase:', {
            id: unlinkedUnit.id,
            tenant_name: unlinkedUnit.tenant_name,
            contract_number: unlinkedUnit.contract_number
        });

        // 3. تحديث البيانات المحلية
        console.log('📱 تحديث البيانات المحلية...');
        const unitIndex = properties.findIndex(p =>
            p['اسم العقار'] === propertyName &&
            p['رقم  الوحدة '] === unitNumber
        );

        if (unitIndex !== -1) {
            properties[unitIndex]['رقم العقد'] = '';
            properties[unitIndex]['اسم المستأجر'] = '';
            saveDataLocally();
            console.log('✅ تم تحديث البيانات المحلية');
        }

        // 4. إضافة سجل تتبع
        try {
            if (typeof window.trackingLogsManager !== 'undefined') {
                const trackingData = {
                    operation_type: 'فصل وحدة مطلق',
                    unit_number: unitNumber,
                    property_name: propertyName,
                    description: `تم فصل الوحدة ${unitNumber} نهائياً مع حماية مطلقة`,
                    user_name: 'النظام المطلق'
                };

                await window.trackingLogsManager.saveTrackingLogToSupabase(trackingData);
                console.log('✅ تم حفظ سجل التتبع للفصل المطلق');
            }
        } catch (trackingError) {
            console.warn('⚠️ فشل في حفظ سجل التتبع:', trackingError);
        }

        // إنشاء سجلات تتبع لجميع الوحدات المرتبطة الأخرى
        try {
            await createTrackingLogsForLinkedUnits(contractNumber, propertyName, unitNumber, 'فصل وحدة من العقد');
        } catch (error) {
            console.warn('⚠️ فشل في إنشاء سجلات التتبع للوحدات المرتبطة:', error);
        }

        // 5. تحديث العرض
        updateLinkedUnitsDisplay(propertyName, contractNumber);
        updateAvailableUnitsDisplay(propertyName, contractNumber, unitNumber);
        initializeApp();

        // 6. رسالة النجاح
        const message = `✅ تم فصل الوحدة ${unitNumber} نهائياً!\n\n☁️ تم الحفظ في قاعدة البيانات السحابية\n📱 تم تحديث البيانات المحلية\n🔒 تم تفعيل الحماية المطلقة\n⚠️ لن يتم إعادة ربط هذه الوحدة تلقائياً\n\n💡 لإعادة تعيين الحماية، استخدم "إعادة تعيين الحماية" من القائمة`;

        alert(message);
        showToast(`تم فصل الوحدة ${unitNumber} نهائياً`, 'success');

        console.log('🎉 تم إكمال الفصل المطلق بنجاح');

        return { success: true, absolute: true };

    } catch (error) {
        console.error('❌ خطأ في الفصل المطلق:', error);
        alert(`❌ فشل في فصل الوحدة: ${error.message}`);
        showToast(`فشل في فصل الوحدة: ${error.message}`, 'error');
        return { success: false, error: error.message };
    }
}

// دالة مراقبة محاولات إعادة الكتابة
function monitorRewriteAttempts() {
    console.log('👁️ بدء مراقبة محاولات إعادة الكتابة...');

    // مراقبة كل 30 ثانية
    const monitorInterval = setInterval(async () => {
        if (recentlyUnlinkedUnits.size === 0) {
            return; // لا توجد وحدات محمية
        }

        console.log(`🔍 فحص ${recentlyUnlinkedUnits.size} وحدة محمية...`);

        for (const unitKey of recentlyUnlinkedUnits) {
            const [unitNumber, propertyName] = unitKey.split('|');

            try {
                // فحص حالة الوحدة في Supabase
                const { data: unit, error } = await supabaseClient
                    .from('properties')
                    .select('tenant_name, contract_number, updated_at')
                    .eq('unit_number', unitNumber)
                    .eq('property_name', propertyName)
                    .single();

                if (error) {
                    console.warn(`⚠️ خطأ في فحص الوحدة ${unitNumber}:`, error);
                    continue;
                }

                // التحقق من إعادة الربط
                if (unit.tenant_name && unit.tenant_name !== '' && unit.contract_number && unit.contract_number !== '') {
                    console.warn(`🚨 تم اكتشاف إعادة ربط للوحدة المحمية: ${unitNumber}`);
                    console.warn('📋 البيانات الحالية:', {
                        tenant_name: unit.tenant_name,
                        contract_number: unit.contract_number,
                        updated_at: unit.updated_at
                    });

                    // إعادة فصل الوحدة فوراً
                    console.log('🔄 إعادة فصل الوحدة فوراً...');

                    const { error: refixError } = await supabaseClient
                        .from('properties')
                        .update({
                            tenant_name: '',
                            contract_number: '',
                            updated_at: new Date().toISOString()
                        })
                        .eq('unit_number', unitNumber)
                        .eq('property_name', propertyName);

                    if (refixError) {
                        console.error(`❌ فشل في إعادة فصل الوحدة ${unitNumber}:`, refixError);
                        showToast(`❌ فشل في حماية الوحدة ${unitNumber}`, 'error');
                    } else {
                        console.log(`✅ تم إعادة فصل الوحدة ${unitNumber} بنجاح`);
                        showToast(`🔒 تم حماية الوحدة ${unitNumber} من إعادة الربط`, 'warning');

                        // إضافة سجل تتبع
                        try {
                            if (typeof window.trackingLogsManager !== 'undefined') {
                                const trackingData = {
                                    operation_type: 'حماية من إعادة الربط',
                                    unit_number: unitNumber,
                                    property_name: propertyName,
                                    description: `تم منع إعادة ربط الوحدة ${unitNumber} وإعادة فصلها تلقائياً`,
                                    user_name: 'نظام الحماية'
                                };

                                await window.trackingLogsManager.saveTrackingLogToSupabase(trackingData);
                            }
                        } catch (trackingError) {
                            console.warn('⚠️ فشل في حفظ سجل الحماية:', trackingError);
                        }
                    }
                }

            } catch (monitorError) {
                console.error(`❌ خطأ في مراقبة الوحدة ${unitNumber}:`, monitorError);
            }
        }

    }, 30000); // كل 30 ثانية

    // حفظ معرف المراقبة
    window.unlinkMonitorInterval = monitorInterval;

    console.log('✅ تم تفعيل مراقبة محاولات إعادة الكتابة');
}

// بدء المراقبة عند تحميل الصفحة
window.addEventListener('load', () => {
    setTimeout(() => {
        if (typeof supabaseClient !== 'undefined' && supabaseClient) {
            monitorRewriteAttempts();
        }
    }, 5000); // انتظار 5 ثوان لتحميل Supabase
});

// دالة لإيقاف المراقبة
function stopUnlinkMonitoring() {
    if (window.unlinkMonitorInterval) {
        clearInterval(window.unlinkMonitorInterval);
        window.unlinkMonitorInterval = null;
        console.log('🛑 تم إيقاف مراقبة محاولات إعادة الكتابة');
        showToast('تم إيقاف مراقبة الحماية', 'info');
    }
}

// دالة تشخيص شاملة للنظام
function comprehensiveDiagnosis() {
    console.log('🔍 تشخيص شامل لنظام سجلات التتبع...');
    console.log('=' .repeat(50));

    // 1. فحص المتغيرات الأساسية
    console.log('📋 المتغيرات الأساسية:');
    console.log('- isTrackingEnabled:', isTrackingEnabled);
    console.log('- changeTrackingLogs.length:', changeTrackingLogs.length);

    // 2. فحص مكتبة Supabase
    console.log('📦 مكتبة Supabase:');
    console.log('- supabase متوفر:', typeof supabase !== 'undefined');
    console.log('- supabaseClient متوفر:', typeof supabaseClient !== 'undefined');
    console.log('- supabaseClient قيمة:', supabaseClient);

    // 3. فحص مدير سجلات التتبع
    console.log('🔧 مدير سجلات التتبع:');
    console.log('- trackingLogsManager متوفر:', typeof window.trackingLogsManager !== 'undefined');
    if (typeof window.trackingLogsManager !== 'undefined') {
        console.log('- الدوال المتوفرة:', Object.keys(window.trackingLogsManager));
    }

    // 4. فحص الدوال المطلوبة
    console.log('⚙️ الدوال المطلوبة:');
    console.log('- addChangeLog متوفر:', typeof addChangeLog === 'function');
    console.log('- saveTrackingLogToNewTable متوفر:', typeof saveTrackingLogToNewTable === 'function');

    // 5. فحص URL الحالي
    console.log('🌐 معلومات الصفحة:');
    console.log('- URL:', window.location.href);
    console.log('- Protocol:', window.location.protocol);

    console.log('=' .repeat(50));

    // عرض النتيجة للمستخدم
    const diagnosis = {
        tracking: isTrackingEnabled,
        supabase: typeof supabaseClient !== 'undefined' && supabaseClient !== null,
        manager: typeof window.trackingLogsManager !== 'undefined',
        functions: typeof addChangeLog === 'function' && typeof saveTrackingLogToNewTable === 'function'
    };

    const issues = [];
    if (!diagnosis.tracking) issues.push('التتبع معطل');
    if (!diagnosis.supabase) issues.push('Supabase غير متصل');
    if (!diagnosis.manager) issues.push('مدير سجلات التتبع غير محمل');
    if (!diagnosis.functions) issues.push('الدوال المطلوبة غير متوفرة');

    if (issues.length === 0) {
        showToast('✅ جميع المكونات تعمل بشكل صحيح', 'success');
    } else {
        showToast(`⚠️ مشاكل: ${issues.join(', ')}`, 'warning');
    }

    return diagnosis;
}

// تشغيل اختبار الاتصال عند تحميل الصفحة
window.addEventListener('load', async () => {
    // انتظار تحميل جميع المكتبات
    setTimeout(async () => {
        console.log('🔄 بدء اختبار نظام سجلات التتبع...');

        // تشخيص شامل أولاً
        const diagnosis = comprehensiveDiagnosis();

        // اختبار الاتصال إذا كان كل شيء يبدو جيد
        if (diagnosis.supabase && diagnosis.manager) {
            const connectionTest = await testTrackingLogsConnection();

            if (connectionTest) {
                console.log('🎉 نظام سجلات التتبع جاهز ويعمل!');
            } else {
                console.warn('⚠️ مشكلة في نظام سجلات التتبع');
            }
        } else {
            console.warn('⚠️ لا يمكن اختبار الاتصال - مكونات مفقودة');
        }
    }, 3000); // انتظار 3 ثوان
});

// ===== نظام البحث في العقارات =====

// متغير لحفظ نتائج البحث
let currentPropertiesSearchResults = [];
let originalPropertiesList = [];
let propertiesSearchTimeout = null;

// معالج البحث المحسن للعقارات مع debouncing
function handlePropertiesSearch(searchTerm) {
    const searchInput = document.getElementById('propertiesSearchInput');
    if (!searchInput) return;

    // إلغاء البحث السابق إذا كان موجوداً
    if (propertiesSearchTimeout) {
        clearTimeout(propertiesSearchTimeout);
    }

    // إضافة مؤشر بصري للبحث
    searchInput.classList.add('search-indicator', 'searching');

    // تأخير البحث لـ 250ms بعد توقف الكتابة
    propertiesSearchTimeout = setTimeout(() => {
        // تنفيذ البحث الفعلي
        searchProperties(searchTerm);

        // إزالة مؤشر البحث
        searchInput.classList.remove('searching');

        // إضافة مؤشر النجاح مؤقتاً
        if (searchTerm) {
            searchInput.style.borderColor = '#28a745';
            setTimeout(() => {
                searchInput.style.borderColor = '';
            }, 800);
        }
    }, 250);
}

// البحث المباشر في العقارات
function searchProperties(searchTerm) {
    console.log('🔍 البحث في العقارات:', searchTerm);

    const searchInput = document.getElementById('propertiesSearchInput');
    const clearBtn = document.querySelector('.clear-search-btn');
    const searchCount = document.getElementById('propertiesSearchCount');
    const searchResultsText = document.getElementById('searchResultsText');

    // إظهار/إخفاء زر المسح
    if (searchTerm.length > 0) {
        clearBtn.style.display = 'flex';
    } else {
        clearBtn.style.display = 'none';
    }

    // الحصول على جميع العقارات
    let allProperties = getUniqueProperties();

    // تطبيق فلتر المدينة إذا كان محدداً
    if (selectedCityFilter !== 'all') {
        allProperties = allProperties.filter(propertyName => {
            const property = properties.find(p => p['اسم العقار'] === propertyName);
            return property && property['المدينة'] === selectedCityFilter;
        });
    }

    // حفظ القائمة الأصلية إذا لم تكن محفوظة
    if (originalPropertiesList.length === 0) {
        originalPropertiesList = [...allProperties];
    }

    // تطبيق البحث
    if (searchTerm.trim() === '') {
        // إذا كان البحث فارغاً، عرض جميع العقارات
        currentPropertiesSearchResults = [...allProperties];
        searchCount.style.display = 'none';
    } else {
        // البحث في اسم العقار والمدينة
        const searchTermLower = searchTerm.toLowerCase();
        currentPropertiesSearchResults = allProperties.filter(propertyName => {
            const property = properties.find(p => p['اسم العقار'] === propertyName);
            if (!property) return false;

            const propertyNameMatch = propertyName.toLowerCase().includes(searchTermLower);
            const cityMatch = (property['المدينة'] || '').toLowerCase().includes(searchTermLower);

            return propertyNameMatch || cityMatch;
        });

        // إظهار عدد النتائج
        searchCount.style.display = 'block';
        searchResultsText.textContent = `تم العثور على ${currentPropertiesSearchResults.length} عقار من أصل ${allProperties.length}`;
    }

    // تحديث عرض العقارات
    updatePropertiesDisplay();

    console.log(`✅ نتائج البحث: ${currentPropertiesSearchResults.length} عقار`);
}

// مسح البحث في العقارات
function clearPropertiesSearch() {
    console.log('🧹 مسح البحث في العقارات');

    const searchInput = document.getElementById('propertiesSearchInput');
    const clearBtn = document.querySelector('.clear-search-btn');
    const searchCount = document.getElementById('propertiesSearchCount');

    // مسح النص
    if (searchInput) {
        searchInput.value = '';
    }

    // إخفاء زر المسح وعداد النتائج
    if (clearBtn) {
        clearBtn.style.display = 'none';
    }
    if (searchCount) {
        searchCount.style.display = 'none';
    }

    // إعادة تعيين النتائج
    currentPropertiesSearchResults = [];

    // تحديث العرض
    updatePropertiesDisplay();

    console.log('✅ تم مسح البحث وإعادة عرض جميع العقارات');
}

// تحديث عرض العقارات مع مراعاة نتائج البحث
function updatePropertiesDisplay() {
    const propertiesContainer = document.querySelector('.existing-properties');
    if (!propertiesContainer) return;

    // تحديد العقارات المراد عرضها
    let propertiesToShow;
    if (currentPropertiesSearchResults.length > 0 || document.getElementById('propertiesSearchInput')?.value) {
        propertiesToShow = currentPropertiesSearchResults;
    } else {
        // عرض العقارات حسب فلتر المدينة
        propertiesToShow = getUniqueProperties();
        if (selectedCityFilter !== 'all') {
            propertiesToShow = propertiesToShow.filter(propertyName => {
                const property = properties.find(p => p['اسم العقار'] === propertyName);
                return property && property['المدينة'] === selectedCityFilter;
            });
        }
    }

    // تحديث المحتوى
    if (propertiesToShow.length > 0) {
        propertiesContainer.innerHTML = propertiesToShow.map(property => {
            const propertyData = properties.find(p => p['اسم العقار'] === property);
            const cityName = propertyData ? propertyData['المدينة'] : 'غير محدد';
            return `
                <div class="property-item">
                    <div class="property-info">
                        <div class="property-name">${property}</div>
                        <div class="property-city">المدينة: ${cityName}</div>
                    </div>
                    <div class="property-actions">
                        <button onclick="showPropertyStatistics('${property}')" class="stats-btn">
                            <i class="fas fa-chart-bar"></i> إحصائيات
                        </button>
                        <button onclick="deleteProperty('${property}')" class="delete-btn">
                            <i class="fas fa-trash"></i> حذف
                        </button>
                    </div>
                </div>
            `;
        }).join('');
    } else {
        const searchTerm = document.getElementById('propertiesSearchInput')?.value || '';
        if (searchTerm) {
            propertiesContainer.innerHTML = `
                <div class="no-results">
                    <i class="fas fa-search"></i>
                    <h4>لا توجد نتائج</h4>
                    <p>لم يتم العثور على عقارات تطابق "${searchTerm}"</p>
                    <button onclick="clearPropertiesSearch()" class="clear-search-btn-large">
                        <i class="fas fa-times"></i> مسح البحث
                    </button>
                </div>
            `;
        } else {
            propertiesContainer.innerHTML = `
                <div class="no-properties">
                    <i class="fas fa-building"></i>
                    <p>لا توجد عقارات في هذه المدينة</p>
                </div>
            `;
        }
    }

    // تحديث معلومات الفلتر
    updateFilterInfo(propertiesToShow.length);
}

// تحديث معلومات الفلتر
function updateFilterInfo(count) {
    const filterInfo = document.querySelector('.filter-info');
    if (!filterInfo) return;

    const searchTerm = document.getElementById('propertiesSearchInput')?.value || '';

    if (searchTerm) {
        filterInfo.innerHTML = `<span class="filter-badge search">نتائج البحث: ${count} عقار</span>`;
    } else if (selectedCityFilter === 'all') {
        filterInfo.innerHTML = `<span class="filter-badge all">جميع المدن (${count} عقار)</span>`;
    } else {
        filterInfo.innerHTML = `<span class="filter-badge filtered">مدينة ${selectedCityFilter} (${count} عقار)</span>`;
    }
}

// ===== نهاية نظام البحث في العقارات =====

// ===== نظام مزامنة محسن مع Supabase =====

// متغيرات حالة المزامنة
let isSyncing = false;
let lastSyncTime = null;
let syncRetryCount = 0;
const MAX_SYNC_RETRIES = 3;

// وظيفة المزامنة الرئيسية مع Supabase
async function syncToSupabase(showProgress = true) {
    if (isSyncing) {
        console.log('⏳ عملية مزامنة جارية بالفعل...');
        return { success: false, message: 'عملية مزامنة جارية بالفعل' };
    }

    console.log('🔄 بدء مزامنة البيانات مع Supabase...');
    isSyncing = true;

    let progressModal = null;

    try {
        // إظهار مؤشر التقدم
        if (showProgress) {
            progressModal = showSyncProgress();
        }

        // التحقق من اتصال Supabase
        if (!supabaseClient) {
            throw new Error('عميل Supabase غير متاح');
        }

        // تحديث مؤشر التقدم
        updateSyncProgress(progressModal, 'جاري تحضير البيانات...', 10);

        // تحضير البيانات للمزامنة
        const dataToSync = prepareDataForSync();

        // مزامنة البيانات الأساسية
        updateSyncProgress(progressModal, 'جاري مزامنة البيانات الأساسية...', 30);
        const mainDataResult = await syncMainData(dataToSync.properties);

        // مزامنة سجلات التتبع
        updateSyncProgress(progressModal, 'جاري مزامنة سجلات التتبع...', 60);
        const logsResult = await syncTrackingLogs(dataToSync.trackingLogs);

        // مزامنة المرفقات
        updateSyncProgress(progressModal, 'جاري مزامنة المرفقات...', 80);
        const attachmentsResult = await syncAttachments(dataToSync.attachments);

        // إنهاء المزامنة
        updateSyncProgress(progressModal, 'تم إنهاء المزامنة بنجاح', 100);

        // تحديث وقت آخر مزامنة
        lastSyncTime = new Date();
        syncRetryCount = 0;

        // إغلاق مؤشر التقدم بعد ثانيتين
        if (progressModal) {
            setTimeout(() => {
                progressModal.remove();
            }, 2000);
        }

        console.log('✅ تم إنهاء مزامنة البيانات بنجاح');

        // إظهار رسالة نجاح
        showToast('تم حفظ البيانات في السحابة بنجاح', 'success');

        return {
            success: true,
            message: 'تم إنهاء المزامنة بنجاح',
            results: {
                mainData: mainDataResult,
                logs: logsResult,
                attachments: attachmentsResult
            }
        };

    } catch (error) {
        console.error('❌ خطأ في مزامنة Supabase:', error);

        // إغلاق مؤشر التقدم
        if (progressModal) {
            progressModal.remove();
        }

        // زيادة عداد المحاولات
        syncRetryCount++;

        // إظهار رسالة خطأ مع إمكانية إعادة المحاولة
        showSyncError(error, syncRetryCount < MAX_SYNC_RETRIES);

        return {
            success: false,
            message: error.message || 'حدث خطأ في المزامنة',
            error: error
        };

    } finally {
        isSyncing = false;
    }
}

// تحضير البيانات للمزامنة
function prepareDataForSync() {
    return {
        properties: properties || [],
        trackingLogs: changeTrackingLogs || [],
        attachments: {
            property: JSON.parse(localStorage.getItem('propertyAttachments') || '{}'),
            card: JSON.parse(localStorage.getItem('cardAttachments') || '{}')
        }
    };
}

// مزامنة البيانات الأساسية مع إنشاء الجدول تلقائياً
async function syncMainData(propertiesData) {
    console.log('📊 مزامنة البيانات الأساسية...');

    if (!propertiesData || propertiesData.length === 0) {
        console.log('ℹ️ لا توجد بيانات أساسية للمزامنة');
        return { success: true, count: 0 };
    }

    try {
        // محاولة إنشاء الجدول إذا لم يكن موجوداً
        await createPropertiesTableIfNotExists();

        // تحضير البيانات للإدراج
        const dataToInsert = propertiesData.map((property, index) => {
            // إنشاء كائن مسطح من البيانات
            const flattenedProperty = {
                id: property.id || generateUUID(),
                property_name: property['اسم العقار'] || '',
                city: property['المدينة'] || '',
                unit_number: property['رقم  الوحدة '] || '',
                tenant_name: property['اسم المستأجر'] || '',
                contract_number: property['رقم العقد'] || '',
                rent_value: property['قيمة  الايجار '] || 0,
                start_date: property['تاريخ البداية'] || null,
                end_date: property['تاريخ النهاية'] || null,
                total_amount: property['الاجمالى'] || 0,
                area: property['المساحة'] || null,
                deed_number: property['رقم الصك'] || null,
                deed_area: property['مساحةالصك'] || null,
                registry_number: property['السجل العيني '] || null,
                real_estate_registry: property['السجل العيني '] || null, // إضافة للتوافق مع العمود الموجود
                owner_name: property['المالك'] || null,
                owner: property['المالك'] || null, // إضافة للتوافق مع العمود الموجود
                property_location: property['موقع العقار'] || null,
                contract_type: property['نوع العقد'] || 'سكني',
                remaining_installments: property['عدد الاقساط المتبقية'] || null,
                last_update: property['تاريخ آخر تحديث'] || new Date().toLocaleDateString('ar-SA'),
                raw_data: JSON.stringify(property), // حفظ البيانات الكاملة كـ JSON
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            };

            return flattenedProperty;
        });

        // حذف البيانات القديمة (اختياري)
        try {
            const { error: deleteError } = await supabaseClient
                .from('properties')
                .delete()
                .neq('id', '');

            if (deleteError && !deleteError.message.includes('does not exist')) {
                console.warn('⚠️ تحذير في حذف البيانات القديمة:', deleteError);
            }
        } catch (deleteErr) {
            console.warn('⚠️ لم يتم حذف البيانات القديمة:', deleteErr.message);
        }

        // إدراج البيانات الجديدة
        const { data, error } = await supabaseClient
            .from('properties')
            .insert(dataToInsert);

        if (error) {
            throw error;
        }

        console.log(`✅ تم مزامنة ${propertiesData.length} عقار`);
        return { success: true, count: propertiesData.length };

    } catch (error) {
        console.error('❌ خطأ في مزامنة البيانات الأساسية:', error);

        // إذا فشل الإدراج، جرب طريقة بديلة
        if (error.message.includes('does not exist') || error.message.includes('column')) {
            console.log('🔄 محاولة إنشاء الجدول وإعادة المحاولة...');
            try {
                await createPropertiesTableAlternative();
                return await syncMainDataAlternative(propertiesData);
            } catch (altError) {
                console.error('❌ فشل في الطريقة البديلة:', altError);
                throw altError;
            }
        }

        throw error;
    }
}

// مزامنة سجلات التتبع
async function syncTrackingLogs(logsData) {
    console.log('📋 مزامنة سجلات التتبع...');

    if (!logsData || logsData.length === 0) {
        console.log('ℹ️ لا توجد سجلات تتبع للمزامنة');
        return { success: true, count: 0 };
    }

    try {
        // الحصول على السجلات الموجودة
        const { data: existingLogs } = await supabaseClient
            .from('change_logs')
            .select('id');

        const existingIds = new Set(existingLogs?.map(log => log.id) || []);

        // فلترة السجلات الجديدة فقط
        const newLogs = logsData.filter(log => !existingIds.has(log.id));

        if (newLogs.length > 0) {
            const { error } = await supabaseClient
                .from('change_logs')
                .insert(newLogs);

            if (error) {
                throw error;
            }

            console.log(`✅ تم مزامنة ${newLogs.length} سجل تتبع جديد`);
        } else {
            console.log('ℹ️ جميع سجلات التتبع محدثة');
        }

        return { success: true, count: newLogs.length };

    } catch (error) {
        console.error('❌ خطأ في مزامنة سجلات التتبع:', error);
        throw error;
    }
}

// مزامنة المرفقات
async function syncAttachments(attachmentsData) {
    console.log('📎 مزامنة المرفقات...');

    try {
        let syncCount = 0;

        // مزامنة مرفقات العقارات
        if (attachmentsData.property && Object.keys(attachmentsData.property).length > 0) {
            const { error: propError } = await supabaseClient
                .from('attachments')
                .upsert({
                    id: 'property_attachments',
                    type: 'property',
                    data: attachmentsData.property,
                    updated_at: new Date().toISOString()
                });

            if (propError) {
                console.warn('⚠️ خطأ في مزامنة مرفقات العقارات:', propError);
            } else {
                syncCount++;
            }
        }

        // مزامنة مرفقات البطاقات
        if (attachmentsData.card && Object.keys(attachmentsData.card).length > 0) {
            const { error: cardError } = await supabaseClient
                .from('attachments')
                .upsert({
                    id: 'card_attachments',
                    type: 'card',
                    data: attachmentsData.card,
                    updated_at: new Date().toISOString()
                });

            if (cardError) {
                console.warn('⚠️ خطأ في مزامنة مرفقات البطاقات:', cardError);
            } else {
                syncCount++;
            }
        }

        console.log(`✅ تم مزامنة ${syncCount} نوع من المرفقات`);
        return { success: true, count: syncCount };

    } catch (error) {
        console.error('❌ خطأ في مزامنة المرفقات:', error);
        throw error;
    }
}

// إظهار مؤشر تقدم المزامنة
function showSyncProgress() {
    const progressModal = document.createElement('div');
    progressModal.className = 'modal-overlay';
    progressModal.style.display = 'flex';
    progressModal.style.zIndex = '10001';

    progressModal.innerHTML = `
        <div class="modal-box sync-progress-modal">
            <div class="sync-progress-header">
                <h3><i class="fas fa-cloud-upload-alt"></i> مزامنة البيانات</h3>
            </div>

            <div class="sync-progress-content">
                <div class="progress-bar-container">
                    <div class="progress-bar">
                        <div class="progress-fill" id="syncProgressFill"></div>
                    </div>
                    <div class="progress-percentage" id="syncProgressPercentage">0%</div>
                </div>

                <div class="progress-status" id="syncProgressStatus">
                    جاري تحضير البيانات...
                </div>

                <div class="sync-details">
                    <div class="sync-step">
                        <i class="fas fa-database"></i>
                        <span>البيانات الأساسية</span>
                        <i class="fas fa-clock sync-step-status" id="mainDataStatus"></i>
                    </div>
                    <div class="sync-step">
                        <i class="fas fa-history"></i>
                        <span>سجلات التتبع</span>
                        <i class="fas fa-clock sync-step-status" id="logsStatus"></i>
                    </div>
                    <div class="sync-step">
                        <i class="fas fa-paperclip"></i>
                        <span>المرفقات</span>
                        <i class="fas fa-clock sync-step-status" id="attachmentsStatus"></i>
                    </div>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(progressModal);
    return progressModal;
}

// تحديث مؤشر تقدم المزامنة
function updateSyncProgress(progressModal, status, percentage) {
    if (!progressModal) return;

    const progressFill = progressModal.querySelector('#syncProgressFill');
    const progressPercentage = progressModal.querySelector('#syncProgressPercentage');
    const progressStatus = progressModal.querySelector('#syncProgressStatus');

    if (progressFill) {
        progressFill.style.width = `${percentage}%`;
    }

    if (progressPercentage) {
        progressPercentage.textContent = `${percentage}%`;
    }

    if (progressStatus) {
        progressStatus.textContent = status;
    }

    // تحديث حالة الخطوات
    if (percentage >= 30) {
        const mainDataStatus = progressModal.querySelector('#mainDataStatus');
        if (mainDataStatus) {
            mainDataStatus.className = 'fas fa-check sync-step-status completed';
        }
    }

    if (percentage >= 60) {
        const logsStatus = progressModal.querySelector('#logsStatus');
        if (logsStatus) {
            logsStatus.className = 'fas fa-check sync-step-status completed';
        }
    }

    if (percentage >= 80) {
        const attachmentsStatus = progressModal.querySelector('#attachmentsStatus');
        if (attachmentsStatus) {
            attachmentsStatus.className = 'fas fa-check sync-step-status completed';
        }
    }
}

// إظهار خطأ المزامنة مع إمكانية إعادة المحاولة - معطل
function showSyncError(error, canRetry = true) {
    // تم تعطيل عرض رسالة خطأ المزامنة
    console.log('🔇 تم تعطيل عرض رسالة خطأ المزامنة:', error.message || 'خطأ غير معروف');
    return;

    /* الكود الأصلي معطل
    const errorModal = document.createElement('div');
    errorModal.className = 'modal-overlay';
    errorModal.style.display = 'flex';
    errorModal.style.zIndex = '10002';

    errorModal.innerHTML = `
        <div class="modal-box sync-error-modal">
            <div class="sync-error-header">
                <h3><i class="fas fa-exclamation-triangle"></i> خطأ في المزامنة</h3>
            </div>

            <div class="sync-error-content">
                <div class="error-message">
                    <p><strong>حدث خطأ أثناء مزامنة البيانات مع السحابة:</strong></p>
                    <div class="error-details">
                        ${error.message || 'خطأ غير معروف'}
                    </div>
                </div>

                <div class="error-info">
                    <p><i class="fas fa-info-circle"></i> تم حفظ البيانات محلياً وستتم المزامنة عند استعادة الاتصال</p>
                </div>

                <div class="sync-error-actions">
                    ${canRetry ? `
                        <button onclick="retrySyncToSupabase()" class="retry-btn">
                            <i class="fas fa-redo"></i> إعادة المحاولة
                        </button>
                    ` : ''}
                    <button onclick="closeSyncError()" class="close-error-btn">
                        <i class="fas fa-times"></i> إغلاق
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(errorModal);

    // حفظ مرجع للنافذة
    window.currentSyncErrorModal = errorModal;
    */
}

// إعادة محاولة المزامنة
async function retrySyncToSupabase() {
    // إغلاق نافذة الخطأ
    closeSyncError();

    // إعادة محاولة المزامنة
    await syncToSupabase(true);
}

// إغلاق نافذة خطأ المزامنة
function closeSyncError() {
    if (window.currentSyncErrorModal) {
        window.currentSyncErrorModal.remove();
        window.currentSyncErrorModal = null;
    }
}

// مزامنة تلقائية عند تعديل البيانات
function autoSyncAfterEdit(operation = 'تعديل البيانات') {
    console.log(`🔄 بدء المزامنة التلقائية بعد ${operation}...`);

    // تأخير قصير للسماح بحفظ البيانات محلياً أولاً
    setTimeout(async () => {
        try {
            const result = await syncToSupabase(false); // بدون إظهار مؤشر التقدم

            if (result.success) {
                console.log('✅ تم إنهاء المزامنة التلقائية بنجاح');
                showToast('تم حفظ التعديلات في السحابة', 'success');
            } else {
                console.warn('⚠️ فشلت المزامنة التلقائية:', result.message);
                showToast('تم حفظ التعديلات محلياً، ستتم المزامنة لاحقاً', 'warning');
            }
        } catch (error) {
            console.error('❌ خطأ في المزامنة التلقائية:', error);
            showToast('تم حفظ التعديلات محلياً فقط', 'warning');
        }
    }, 1000);
}

// فحص حالة الاتصال مع Supabase
async function checkSupabaseConnection() {
    try {
        if (!supabaseClient) {
            return { connected: false, error: 'عميل Supabase غير متاح' };
        }

        // اختبار بسيط للاتصال
        const { data, error } = await supabaseClient
            .from('properties')
            .select('count')
            .limit(1);

        if (error) {
            return { connected: false, error: error.message };
        }

        return { connected: true };

    } catch (error) {
        return { connected: false, error: error.message };
    }
}

// ===== نهاية نظام مزامنة محسن مع Supabase =====

// ===== وظيفة اختبار تحرير العقارات =====

// اختبار شامل لوظيفة تحرير العقارات
async function testPropertyEditFunction() {
    console.log('🧪 بدء اختبار وظيفة تحرير العقارات...');

    try {
        // البحث عن عقار للاختبار
        const testProperty = properties.find(p => p['اسم العقار'] && p['اسم العقار'].trim() !== '');

        if (!testProperty) {
            console.log('❌ لا توجد عقارات للاختبار');
            showToast('لا توجد عقارات للاختبار', 'error');
            return;
        }

        const originalPropertyName = testProperty['اسم العقار'];
        console.log(`🏢 اختبار العقار: ${originalPropertyName}`);

        // إنشاء بيانات اختبار
        const testData = {
            name: originalPropertyName + ' - محدث',
            city: testProperty['المدينة'] || 'الرياض',
            deed: 'TEST_DEED_' + Date.now(),
            area: '500',
            registry: 'TEST_REG_' + Date.now(),
            owner: 'مالك اختبار',
            location: 'https://maps.google.com/test'
        };

        console.log('📝 بيانات الاختبار:', testData);

        // محاكاة تحرير العقار
        const originalData = { ...testProperty };

        // تحديث البيانات
        const relatedProperties = properties.filter(p => p['اسم العقار'] === originalPropertyName);
        relatedProperties.forEach(property => {
            property['اسم العقار'] = testData.name;
            property['المدينة'] = testData.city;
            property['رقم الصك'] = testData.deed;
            property['مساحةالصك'] = testData.area;
            property['السجل العيني '] = testData.registry;
            property['المالك'] = testData.owner;
            property['موقع العقار'] = testData.location;
            property['تاريخ آخر تحديث'] = new Date().toLocaleDateString('ar-SA');
        });

        // حفظ البيانات محلياً
        saveDataLocally();

        // تسجيل التغيير في سجل التتبع
        const changes = {
            'اسم العقار': {
                fieldName: 'اسم العقار',
                old: originalPropertyName,
                new: testData.name
            },
            'رقم الصك': {
                fieldName: 'رقم الصك',
                old: originalData['رقم الصك'] || '',
                new: testData.deed
            },
            'مساحةالصك': {
                fieldName: 'مساحة الصك',
                old: originalData['مساحةالصك'] || '',
                new: testData.area
            }
        };

        const changeLog = createChangeLog(
            OPERATION_TYPES.EDIT_DATA,
            {
                'رقم  الوحدة ': testProperty['رقم  الوحدة '] || 'اختبار',
                'اسم العقار': testData.name,
                'اسم المستأجر': testProperty['اسم المستأجر'] || ''
            },
            changes,
            {
                affectedUnits: relatedProperties.length,
                originalPropertyName: originalPropertyName,
                testMode: true
            }
        );

        changeTrackingLogs.push(changeLog);

        // حفظ سجل التتبع محلياً
        try {
            localStorage.setItem('changeTrackingLogs', JSON.stringify(changeTrackingLogs.slice(0, 1000)));
            console.log('✅ تم حفظ سجل التتبع محلياً');
        } catch (error) {
            console.warn('⚠️ لم يتم حفظ سجل التتبع محلياً:', error);
        }

        // اختبار المزامنة مع Supabase
        console.log('🔄 اختبار المزامنة مع Supabase...');
        const syncResult = await syncToSupabase(true);

        if (syncResult.success) {
            console.log('✅ نجح اختبار المزامنة مع Supabase');
            showToast('نجح اختبار تحرير العقار والمزامنة', 'success');
        } else {
            console.warn('⚠️ فشل اختبار المزامنة:', syncResult.message);
            showToast('نجح التحرير محلياً، فشلت المزامنة', 'warning');
        }

        // إعادة تعيين البيانات الأصلية
        setTimeout(() => {
            console.log('🔄 إعادة تعيين البيانات الأصلية...');
            relatedProperties.forEach(property => {
                property['اسم العقار'] = originalPropertyName;
                property['المدينة'] = originalData['المدينة'];
                property['رقم الصك'] = originalData['رقم الصك'];
                property['مساحةالصك'] = originalData['مساحةالصك'];
                property['السجل العيني '] = originalData['السجل العيني '];
                property['المالك'] = originalData['المالك'];
                property['موقع العقار'] = originalData['موقع العقار'];
            });

            saveDataLocally();
            renderData();
            console.log('✅ تم إعادة تعيين البيانات الأصلية');
        }, 5000);

        // تحديث العرض
        renderData();
        updateTotalStats();

        console.log('🎉 انتهى اختبار تحرير العقارات بنجاح');

        return {
            success: true,
            message: 'نجح اختبار تحرير العقارات',
            syncResult: syncResult
        };

    } catch (error) {
        console.error('❌ خطأ في اختبار تحرير العقارات:', error);
        showToast('فشل اختبار تحرير العقارات: ' + error.message, 'error');

        return {
            success: false,
            message: error.message,
            error: error
        };
    }
}

// إضافة زر اختبار في وحدة التحكم
window.testPropertyEdit = testPropertyEditFunction;

// ===== نهاية وظيفة اختبار تحرير العقارات =====

// ===== وظيفة تشخيص مشاكل تحرير العقارات =====

// تشخيص شامل لمشاكل تحرير العقارات
function diagnosePropertyEditIssues() {
    console.log('🔍 بدء تشخيص مشاكل تحرير العقارات...');

    const diagnostics = {
        timestamp: new Date().toISOString(),
        functions: {},
        data: {},
        supabase: {},
        localStorage: {}
    };

    // فحص الوظائف المطلوبة
    diagnostics.functions.savePropertyChanges = typeof savePropertyChanges === 'function';
    diagnostics.functions.handleSavePropertyChanges = typeof handleSavePropertyChanges === 'function';
    diagnostics.functions.editPropertyData = typeof editPropertyData === 'function';
    diagnostics.functions.showToast = typeof showToast === 'function';
    diagnostics.functions.syncToSupabase = typeof syncToSupabase === 'function';
    diagnostics.functions.createChangeLog = typeof createChangeLog === 'function';
    diagnostics.functions.saveDataLocally = typeof saveDataLocally === 'function';

    // فحص البيانات
    diagnostics.data.propertiesArray = Array.isArray(properties);
    diagnostics.data.propertiesCount = properties ? properties.length : 0;
    diagnostics.data.changeTrackingLogs = Array.isArray(changeTrackingLogs);
    diagnostics.data.operationTypes = typeof OPERATION_TYPES === 'object';

    // فحص Supabase
    diagnostics.supabase.client = typeof supabaseClient !== 'undefined' && supabaseClient !== null;
    diagnostics.supabase.url = typeof supabaseUrl !== 'undefined';
    diagnostics.supabase.key = typeof supabaseKey !== 'undefined';

    // فحص localStorage
    try {
        diagnostics.localStorage.available = typeof localStorage !== 'undefined';
        diagnostics.localStorage.propertiesData = localStorage.getItem('propertiesData') !== null;
        diagnostics.localStorage.changeTrackingLogs = localStorage.getItem('changeTrackingLogs') !== null;
    } catch (error) {
        diagnostics.localStorage.error = error.message;
    }

    // طباعة النتائج
    console.log('📊 نتائج التشخيص:', diagnostics);

    // فحص العقارات الموجودة
    if (properties && properties.length > 0) {
        const sampleProperty = properties[0];
        console.log('📋 عينة من البيانات:', {
            propertyName: sampleProperty['اسم العقار'],
            city: sampleProperty['المدينة'],
            unitNumber: sampleProperty['رقم  الوحدة '],
            keys: Object.keys(sampleProperty).slice(0, 10)
        });
    }

    // اختبار وظيفة showToast
    if (diagnostics.functions.showToast) {
        showToast('اختبار التشخيص - تعمل الرسائل بشكل صحيح', 'info');
    }

    // تحديد المشاكل المحتملة
    const issues = [];

    if (!diagnostics.functions.savePropertyChanges) {
        issues.push('وظيفة savePropertyChanges غير موجودة');
    }

    if (!diagnostics.functions.showToast) {
        issues.push('وظيفة showToast غير موجودة');
    }

    if (!diagnostics.data.propertiesArray) {
        issues.push('مصفوفة properties غير صحيحة');
    }

    if (!diagnostics.supabase.client) {
        issues.push('عميل Supabase غير متاح');
    }

    if (!diagnostics.localStorage.available) {
        issues.push('localStorage غير متاح');
    }

    if (issues.length > 0) {
        console.error('❌ مشاكل تم اكتشافها:', issues);
        console.error(`تم اكتشاف ${issues.length} مشكلة في النظام`);
    } else {
        console.log('✅ جميع المكونات تعمل بشكل صحيح');
        console.log('جميع مكونات النظام تعمل بشكل صحيح');
    }

    return diagnostics;
}

// إضافة الوظيفة للوحة التحكم
window.diagnosePropertyEditIssues = diagnosePropertyEditIssues;

// تشغيل التشخيص تلقائياً عند تحميل الصفحة
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        console.log('🔄 تشغيل التشخيص التلقائي...');
        diagnosePropertyEditIssues();
    }, 2000);
});

// ===== نهاية وظيفة تشخيص مشاكل تحرير العقارات =====

// ===== اختبار مبسط لتحرير العقارات =====

// اختبار مبسط لوظيفة تحرير العقارات
function simplePropertyEditTest() {
    console.log('🧪 بدء الاختبار المبسط لتحرير العقارات...');

    try {
        // البحث عن عقار للاختبار
        if (!properties || properties.length === 0) {
            console.error('❌ لا توجد عقارات للاختبار');
            showToast('لا توجد عقارات للاختبار', 'error');
            return false;
        }

        const testProperty = properties.find(p => p['اسم العقار'] && p['اسم العقار'].trim() !== '');
        if (!testProperty) {
            console.error('❌ لا توجد عقارات صالحة للاختبار');
            showToast('لا توجد عقارات صالحة للاختبار', 'error');
            return false;
        }

        const originalPropertyName = testProperty['اسم العقار'];
        console.log(`🏢 اختبار العقار: ${originalPropertyName}`);

        // محاكاة تحديث البيانات
        const originalData = { ...testProperty };
        const testUpdates = {
            'رقم الصك': 'TEST_DEED_' + Date.now(),
            'مساحةالصك': '500',
            'المالك': 'مالك اختبار - ' + new Date().toLocaleString('ar-SA')
        };

        console.log('📝 التحديثات المطلوبة:', testUpdates);

        // تطبيق التحديثات
        const relatedProperties = properties.filter(p => p['اسم العقار'] === originalPropertyName);
        console.log(`🔄 تحديث ${relatedProperties.length} وحدة...`);

        relatedProperties.forEach(property => {
            Object.keys(testUpdates).forEach(key => {
                property[key] = testUpdates[key];
            });
            property['تاريخ آخر تحديث'] = new Date().toLocaleDateString('ar-SA');
        });

        // حفظ البيانات محلياً
        console.log('💾 حفظ البيانات محلياً...');
        saveDataLocally();

        // تسجيل التغيير في سجل التتبع
        console.log('📋 تسجيل التغيير في سجل التتبع...');
        const changes = {};
        Object.keys(testUpdates).forEach(key => {
            changes[key] = {
                fieldName: key,
                old: originalData[key] || '',
                new: testUpdates[key]
            };
        });

        const changeLog = createChangeLog(
            OPERATION_TYPES.EDIT_DATA,
            {
                'رقم  الوحدة ': testProperty['رقم  الوحدة '] || 'اختبار',
                'اسم العقار': originalPropertyName,
                'اسم المستأجر': testProperty['اسم المستأجر'] || ''
            },
            changes,
            {
                affectedUnits: relatedProperties.length,
                testMode: true
            }
        );

        changeTrackingLogs.push(changeLog);

        // حفظ سجل التتبع محلياً
        try {
            localStorage.setItem('changeTrackingLogs', JSON.stringify(changeTrackingLogs.slice(0, 1000)));
            console.log('✅ تم حفظ سجل التتبع محلياً');
        } catch (error) {
            console.warn('⚠️ لم يتم حفظ سجل التتبع محلياً:', error);
        }

        // اختبار المزامنة مع Supabase
        console.log('🔄 اختبار المزامنة مع Supabase...');
        syncToSupabase(false)
            .then((result) => {
                if (result.success) {
                    console.log('✅ نجح اختبار المزامنة مع Supabase');
                    showToast('نجح الاختبار المبسط لتحرير العقار', 'success');
                } else {
                    console.warn('⚠️ فشل اختبار المزامنة:', result.message);
                    showToast('نجح التحرير محلياً، فشلت المزامنة', 'warning');
                }
            })
            .catch((error) => {
                console.error('❌ خطأ في المزامنة:', error);
                showToast('نجح التحرير محلياً، خطأ في المزامنة', 'warning');
            });

        // إعادة تعيين البيانات الأصلية بعد 5 ثوان
        setTimeout(() => {
            console.log('🔄 إعادة تعيين البيانات الأصلية...');
            relatedProperties.forEach(property => {
                Object.keys(testUpdates).forEach(key => {
                    property[key] = originalData[key];
                });
            });
            saveDataLocally();
            renderData();
            console.log('✅ تم إعادة تعيين البيانات الأصلية');
        }, 5000);

        // تحديث العرض
        renderData();
        updateTotalStats();

        console.log('🎉 انتهى الاختبار المبسط بنجاح');
        return true;

    } catch (error) {
        console.error('❌ خطأ في الاختبار المبسط:', error);
        showToast('فشل الاختبار المبسط: ' + error.message, 'error');
        return false;
    }
}

// إضافة الوظيفة للوحة التحكم
window.simplePropertyEditTest = simplePropertyEditTest;

// ===== نهاية الاختبار المبسط لتحرير العقارات =====

// ===== وظائف مساعدة لحفظ العقارات =====

// حفظ العقارات مباشرة في Supabase (إصدار محسن ومُصلح)
async function savePropertiesDirectlyToSupabase(propertiesToSave) {
    console.log(`💾 حفظ مباشر لـ ${propertiesToSave.length} عقار في Supabase...`);

    if (!supabaseClient) {
        throw new Error('عميل Supabase غير متاح');
    }

    if (!propertiesToSave || propertiesToSave.length === 0) {
        console.warn('⚠️ لا توجد عقارات للحفظ');
        return { success: true, count: 0, message: 'لا توجد بيانات للحفظ' };
    }

    try {
        console.log('🔧 التحقق من هيكل قاعدة البيانات...');

        // تنظيف البيانات قبل المعالجة
        const cleanedProperties = sanitizeDataForSave(propertiesToSave);
        console.log(`🧹 تم تنظيف ${cleanedProperties.length} عقار`);

        // تحضير البيانات للحفظ مع معالجة شاملة للأخطاء
        const dataToSave = [];
        const errors = [];

        for (let i = 0; i < cleanedProperties.length; i++) {
            const property = cleanedProperties[i];

            try {
                // تحويل التواريخ إلى تنسيق صحيح لـ Supabase (YYYY-MM-DD)
                const parseDate = (dateStr) => {
                    if (!dateStr || dateStr === '') return null;
                    try {
                        // إذا كان التاريخ بالتنسيق العربي، حوله
                        if (typeof dateStr === 'string' && dateStr.includes('/')) {
                            const parts = dateStr.split('/');
                            if (parts.length === 3) {
                                // تنسيق DD/MM/YYYY
                                const day = parseInt(parts[0]);
                                const month = parseInt(parts[1]);
                                const year = parseInt(parts[2]);

                                // التحقق من صحة التاريخ
                                if (day >= 1 && day <= 31 && month >= 1 && month <= 12 && year >= 1900 && year <= 2100) {
                                    // التحقق الإضافي باستخدام Date object لتجنب تواريخ مثل 31 فبراير
                                    const testDate = new Date(year, month - 1, day, 12, 0, 0);
                                    if (testDate.getFullYear() === year && testDate.getMonth() === (month - 1) && testDate.getDate() === day) {
                                        // إرجاع التاريخ بصيغة YYYY-MM-DD لـ Supabase
                                        return `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
                                    }
                                }
                            }
                        }

                        // إذا كان التاريخ بتنسيق YYYY-MM-DD، تحقق من صحته وأرجعه
                        if (typeof dateStr === 'string' && dateStr.match(/^\d{4}-\d{1,2}-\d{1,2}$/)) {
                            const parts = dateStr.split('-');
                            const year = parseInt(parts[0]);
                            const month = parseInt(parts[1]);
                            const day = parseInt(parts[2]);

                            if (year >= 1900 && year <= 2100 && month >= 1 && month <= 12 && day >= 1 && day <= 31) {
                                const testDate = new Date(year, month - 1, day, 12, 0, 0);
                                if (testDate.getFullYear() === year && testDate.getMonth() === (month - 1) && testDate.getDate() === day) {
                                    return `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
                                }
                            }
                        }

                        return null;
                    } catch (error) {
                        console.warn('خطأ في تحويل التاريخ:', dateStr, error);
                        return null;
                    }
                };

                // إنشاء معرف فريد للعقار (متوافق مع UUID)
                const uniqueId = property.id || generateUUID();

                const propertyData = {
                    id: uniqueId,
                    property_name: String(property['اسم العقار'] || ''),
                    city: String(property['المدينة'] || ''),
                    unit_number: String(property['رقم  الوحدة '] || ''),
                    tenant_name: String(property['اسم المستأجر'] || ''),
                    contract_number: String(property['رقم العقد'] || ''),
                    rent_value: Number(property['قيمة  الايجار '] || 0),
                    start_date: parseDate(property['تاريخ البداية']),
                    end_date: String(property['تاريخ النهاية'] || ''),
                    total_amount: Number(property['الاجمالى'] || 0),
                    area: Number(property['المساحة'] || 0),
                    deed_number: String(property['رقم الصك'] || ''),
                    deed_area: String(property['مساحةالصك'] || ''),
                    real_estate_registry: String(property['السجل العيني '] || ''),
                    owner: String(property['المالك'] || ''),
                    property_location: String(property['موقع العقار'] || ''),
                    contract_type: String(property['نوع العقد'] || 'سكني'),
                    remaining_installments: Number(property['عدد الاقساط المتبقية'] || 0),
                    electricity_account: String(property['رقم حساب الكهرباء'] || ''),
                    height: String(property['الارتفاع'] || ''),
                    last_update: new Date().toLocaleDateString('ar-SA'),

                    // معلومات الأقساط
                    installment_count: Number(property['عدد الاقساط'] || 0),
                    first_installment_date: parseDate(property['تاريخ القسط الاول']),
                    first_installment_amount: Number(property['قيمة القسط الاول'] || 0),
                    second_installment_date: parseDate(property['تاريخ القسط الثاني']),
                    second_installment_amount: Number(property['قيمة القسط الثاني'] || 0),
                    third_installment_date: parseDate(property['تاريخ القسط الثالث']),
                    third_installment_amount: Number(property['قيمة القسط الثالث'] || 0),
                    fourth_installment_date: parseDate(property['تاريخ القسط الرابع']),
                    fourth_installment_amount: Number(property['قيمة القسط الرابع'] || 0),
                    fifth_installment_date: parseDate(property['تاريخ القسط الخامس']),
                    fifth_installment_amount: Number(property['قيمة القسط الخامس'] || 0),
                    sixth_installment_date: parseDate(property['تاريخ القسط السادس']),
                    sixth_installment_amount: Number(property['قيمة القسط السادس'] || 0),
                    seventh_installment_date: parseDate(property['تاريخ القسط السابع']),
                    seventh_installment_amount: Number(property['قيمة القسط السابع'] || 0),
                    eighth_installment_date: parseDate(property['تاريخ القسط الثامن']),
                    eighth_installment_amount: Number(property['قيمة القسط الثامن'] || 0),
                    ninth_installment_date: parseDate(property['تاريخ القسط التاسع']),
                    ninth_installment_amount: Number(property['قيمة القسط التاسع'] || 0),
                    tenth_installment_date: parseDate(property['تاريخ القسط العاشر']),
                    tenth_installment_amount: Number(property['قيمة القسط العاشر'] || 0),
                    installment_end_date: parseDate(property['تاريخ انتهاء الاقساط']),

                    // حفظ البيانات الكاملة
                    raw_data: property,

                    // تواريخ النظام
                    created_at: new Date().toISOString(),
                    updated_at: new Date().toISOString()
                };

                dataToSave.push(propertyData);

            } catch (propertyError) {
                console.error(`❌ خطأ في تحضير العقار ${i}:`, propertyError);
                errors.push(`العقار ${i}: ${propertyError.message}`);
            }
        }

        if (dataToSave.length === 0) {
            throw new Error(`فشل في تحضير البيانات. الأخطاء: ${errors.join(', ')}`);
        }

        console.log(`📝 تم تحضير ${dataToSave.length} عقار للحفظ`);

        // تحديث البيانات الموجودة بدلاً من الحذف والإدراج لمنع التكرار
        console.log(`🔄 تحديث البيانات الموجودة لمنع التكرار...`);

        let updatedCount = 0;
        let insertedCount = 0;
        const updateErrors = [];

        for (const propertyData of dataToSave) {
            try {
                // التحقق من وجود العقار بناءً على unit_number
                const { data: existingProperty, error: checkError } = await supabaseClient
                    .from('properties')
                    .select('id')
                    .eq('unit_number', propertyData.unit_number)
                    .single();

                if (checkError && checkError.code !== 'PGRST116') {
                    console.warn(`⚠️ خطأ في التحقق من العقار ${propertyData.unit_number}:`, checkError);
                }

                if (existingProperty) {
                    // تحديث العقار الموجود
                    const { error: updateError } = await supabaseClient
                        .from('properties')
                        .update({
                            ...propertyData,
                            updated_at: new Date().toISOString()
                        })
                        .eq('id', existingProperty.id);

                    if (updateError) {
                        console.error(`❌ خطأ في تحديث العقار ${propertyData.unit_number}:`, updateError);
                        updateErrors.push(`تحديث ${propertyData.unit_number}: ${updateError.message}`);
                    } else {
                        updatedCount++;
                        console.log(`✅ تم تحديث العقار: ${propertyData.unit_number}`);
                    }
                } else {
                    // إدراج عقار جديد
                    const { error: insertError } = await supabaseClient
                        .from('properties')
                        .insert([propertyData]);

                    if (insertError) {
                        console.error(`❌ خطأ في إدراج العقار ${propertyData.unit_number}:`, insertError);
                        updateErrors.push(`إدراج ${propertyData.unit_number}: ${insertError.message}`);
                    } else {
                        insertedCount++;
                        console.log(`✅ تم إدراج العقار الجديد: ${propertyData.unit_number}`);
                    }
                }
            } catch (propertyError) {
                console.error(`❌ خطأ في معالجة العقار ${propertyData.unit_number}:`, propertyError);
                updateErrors.push(`معالجة ${propertyData.unit_number}: ${propertyError.message}`);
            }
        }

        console.log(`✅ تم تحديث ${updatedCount} عقار وإدراج ${insertedCount} عقار جديد`);

        if (updateErrors.length > 0) {
            console.warn(`⚠️ حدثت ${updateErrors.length} أخطاء:`, updateErrors);
        }

        return {
            success: true,
            count: updatedCount + insertedCount,
            updated: updatedCount,
            inserted: insertedCount,
            method: 'individual_update',
            message: `تم تحديث ${updatedCount} عقار وإدراج ${insertedCount} عقار جديد`,
            errors: updateErrors.length > 0 ? updateErrors : null
        };



    } catch (error) {
        console.error('❌ خطأ عام في الحفظ المباشر:', error);

        // إرجاع تفاصيل الخطأ للمستخدم
        return {
            success: false,
            error: error.message,
            count: 0,
            message: `فشل في حفظ البيانات: ${error.message}`
        };
    }
}

// معالجة خطأ المفتاح المكرر
async function handleDuplicateKeyError(dataToSave, originalProperties) {
    console.log('🔧 معالجة خطأ المفتاح المكرر...');

    try {
        let successCount = 0;
        const errors = [];

        // حفظ كل عقار بشكل منفصل مع التحديث
        for (let i = 0; i < dataToSave.length; i++) {
            const propertyData = dataToSave[i];

            try {
                // محاولة التحديث أولاً
                const { data: updateData, error: updateError } = await supabaseClient
                    .from('properties')
                    .update(propertyData)
                    .eq('property_name', propertyData.property_name)
                    .eq('unit_number', propertyData.unit_number);

                if (updateError) {
                    // إذا فشل التحديث، جرب الإدراج مع معرف جديد
                    propertyData.id = generateUUID();

                    const { data: insertData, error: insertError } = await supabaseClient
                        .from('properties')
                        .insert([propertyData]);

                    if (insertError) {
                        throw insertError;
                    }
                }

                successCount++;

            } catch (itemError) {
                console.error(`❌ خطأ في حفظ العقار ${i}:`, itemError);
                errors.push(`العقار ${i}: ${itemError.message}`);
            }
        }

        if (successCount > 0) {
            console.log(`✅ تم حفظ ${successCount} عقار من أصل ${dataToSave.length}`);
            return {
                success: true,
                count: successCount,
                method: 'duplicate_handled',
                message: `تم حفظ ${successCount} عقار بنجاح (مع معالجة التكرار)`,
                errors: errors.length > 0 ? errors : null
            };
        } else {
            throw new Error(`فشل في حفظ جميع العقارات: ${errors.join(', ')}`);
        }

    } catch (error) {
        console.error('❌ فشل في معالجة خطأ المفتاح المكرر:', error);
        throw error;
    }
}

// حفظ بتنسيق مبسط
async function saveWithSimplifiedFormat(propertiesToSave) {
    console.log('📝 حفظ بتنسيق مبسط...');

    try {
        const simplifiedData = propertiesToSave.map((property, index) => ({
            id: generateUUID(),
            property_name: String(property['اسم العقار'] || ''),
            city: String(property['المدينة'] || ''),
            unit_number: String(property['رقم  الوحدة '] || ''),
            tenant_name: String(property['اسم المستأجر'] || ''),
            contract_number: String(property['رقم العقد'] || ''),
            rent_value: Number(property['قيمة  الايجار '] || 0),
            total_amount: Number(property['الاجمالى'] || 0),
            contract_type: String(property['نوع العقد'] || 'سكني'),
            last_update: new Date().toLocaleDateString('ar-SA'),
            raw_data: property,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        }));

        const { data, error } = await supabaseClient
            .from('properties')
            .insert(simplifiedData);

        if (error) {
            throw error;
        }

        console.log(`✅ تم حفظ ${propertiesToSave.length} عقار بالتنسيق المبسط`);
        return {
            success: true,
            count: propertiesToSave.length,
            method: 'simplified',
            message: `تم حفظ ${propertiesToSave.length} عقار بنجاح (تنسيق مبسط)`
        };

    } catch (error) {
        console.error('❌ فشل الحفظ بالتنسيق المبسط:', error);
        throw error;
    }
}

// طريقة احتياطية للحفظ
async function fallbackSaveMethod(propertiesToSave) {
    console.log('🆘 استخدام الطريقة الاحتياطية للحفظ...');

    try {
        // حفظ البيانات في localStorage كنسخة احتياطية
        const backupData = {
            timestamp: new Date().toISOString(),
            properties: propertiesToSave,
            saved: false
        };

        localStorage.setItem('properties_backup_' + Date.now(), JSON.stringify(backupData));

        // محاولة أخيرة بأبسط تنسيق ممكن
        const minimalData = propertiesToSave.map((property, index) => ({
            id: generateUUID(),
            property_name: String(property['اسم العقار'] || 'عقار غير محدد'),
            city: String(property['المدينة'] || 'غير محدد'),
            unit_number: String(property['رقم  الوحدة '] || 'غير محدد'),
            raw_data: property
        }));

        const { data, error } = await supabaseClient
            .from('properties')
            .insert(minimalData);

        if (error) {
            throw error;
        }

        console.log(`✅ تم حفظ ${propertiesToSave.length} عقار بالطريقة الاحتياطية`);
        return {
            success: true,
            count: propertiesToSave.length,
            method: 'fallback',
            message: `تم حفظ ${propertiesToSave.length} عقار بنجاح (طريقة احتياطية)`
        };

    } catch (error) {
        console.error('❌ فشل في الطريقة الاحتياطية:', error);

        return {
            success: false,
            error: error.message,
            count: 0,
            message: `فشل في جميع طرق الحفظ: ${error.message}. تم حفظ نسخة احتياطية محلياً.`
        };
    }
}

// التحقق من مزامنة البيانات (محسن)
async function verifyDataSync(propertyName, changes) {
    console.log(`🔍 التحقق من مزامنة البيانات للعقار: ${propertyName}`);

    if (!supabaseClient) {
        throw new Error('عميل Supabase غير متاح للتحقق');
    }

    try {
        // البحث عن العقار في Supabase بطرق متعددة
        let data, error;

        // الطريقة الأولى: البحث بـ property_name
        ({ data, error } = await supabaseClient
            .from('properties')
            .select('*')
            .eq('property_name', propertyName)
            .limit(1));

        // إذا فشلت الطريقة الأولى، جرب البحث في raw_data
        if (error || !data || data.length === 0) {
            ({ data, error } = await supabaseClient
                .from('properties')
                .select('*')
                .contains('raw_data', { 'اسم العقار': propertyName })
                .limit(1));
        }

        if (error) {
            throw error;
        }

        if (!data || data.length === 0) {
            console.warn('⚠️ لم يتم العثور على العقار في Supabase');
            return {
                success: false,
                message: 'العقار غير موجود في Supabase'
            };
        }

        const supabaseRecord = data[0];
        const supabaseProperty = supabaseRecord.raw_data || supabaseRecord;

        // التحقق من التغييرات
        let verificationPassed = true;
        const verificationResults = {};

        Object.keys(changes).forEach(fieldKey => {
            const expectedValue = changes[fieldKey].new;
            let actualValue;

            // البحث عن القيمة في البيانات المختلفة
            if (supabaseProperty[fieldKey] !== undefined) {
                actualValue = supabaseProperty[fieldKey];
            } else if (supabaseRecord[fieldKey] !== undefined) {
                actualValue = supabaseRecord[fieldKey];
            } else {
                // محاولة البحث بالأسماء المترجمة
                const fieldMapping = {
                    'اسم العقار': 'property_name',
                    'المدينة': 'city',
                    'رقم الصك': 'deed_number',
                    'مساحةالصك': 'deed_area',
                    'السجل العيني ': 'registry_number',
                    'السجل العيني ': 'real_estate_registry', // إضافة للتوافق مع العمود الموجود
                    'المالك': 'owner_name',
                    'المالك': 'owner', // إضافة للتوافق مع العمود الموجود
                    'موقع العقار': 'property_location'
                };

                const mappedField = fieldMapping[fieldKey];
                if (mappedField && supabaseRecord[mappedField] !== undefined) {
                    actualValue = supabaseRecord[mappedField];
                }
            }

            verificationResults[fieldKey] = {
                expected: expectedValue,
                actual: actualValue,
                match: String(expectedValue) === String(actualValue)
            };

            if (!verificationResults[fieldKey].match) {
                verificationPassed = false;
            }
        });

        if (verificationPassed) {
            console.log('✅ تم التحقق من مزامنة جميع التغييرات');
        } else {
            console.warn('⚠️ بعض التغييرات لم تتم مزامنتها:', verificationResults);
        }

        return {
            success: verificationPassed,
            results: verificationResults,
            supabaseData: supabaseRecord
        };

    } catch (error) {
        console.error('❌ خطأ في التحقق من المزامنة:', error);
        return {
            success: false,
            error: error.message
        };
    }
}

// إعادة محاولة المزامنة للعقارات المحددة
async function retryPropertySync(propertyName) {
    console.log(`🔄 إعادة محاولة مزامنة العقار: ${propertyName}`);

    try {
        // البحث عن العقار محلياً
        const relatedProperties = properties.filter(p => p['اسم العقار'] === propertyName);

        if (relatedProperties.length === 0) {
            throw new Error('لم يتم العثور على العقار محلياً');
        }

        // محاولة الحفظ المباشر
        await savePropertiesDirectlyToSupabase(relatedProperties);

        showToast(`تم مزامنة العقار "${propertyName}" بنجاح`, 'success');
        console.log(`✅ تم مزامنة العقار "${propertyName}" بنجاح`);

        return { success: true };

    } catch (error) {
        console.error(`❌ فشل في إعادة مزامنة العقار "${propertyName}":`, error);
        showToast(`فشل في مزامنة العقار "${propertyName}": ${error.message}`, 'error');

        return { success: false, error: error.message };
    }
}

// فحص حالة المزامنة لجميع العقارات
async function checkAllPropertiesSync() {
    console.log('🔍 فحص حالة مزامنة جميع العقارات...');

    if (!supabaseClient) {
        console.warn('⚠️ عميل Supabase غير متاح للفحص');
        return { success: false, error: 'عميل Supabase غير متاح' };
    }

    try {
        // الحصول على جميع العقارات من Supabase
        const { data: supabaseData, error } = await supabaseClient
            .from('properties')
            .select('data');

        if (error) {
            throw error;
        }

        const localProperties = getUniqueProperties();
        const supabaseProperties = supabaseData.map(item => item.data['اسم العقار']).filter(name => name);

        const syncStatus = {
            localCount: localProperties.length,
            supabaseCount: supabaseProperties.length,
            missingInSupabase: localProperties.filter(name => !supabaseProperties.includes(name)),
            extraInSupabase: supabaseProperties.filter(name => !localProperties.includes(name))
        };

        console.log('📊 حالة المزامنة:', syncStatus);

        if (syncStatus.missingInSupabase.length > 0) {
            console.warn(`⚠️ ${syncStatus.missingInSupabase.length} عقار مفقود في Supabase:`, syncStatus.missingInSupabase);
        }

        return { success: true, status: syncStatus };

    } catch (error) {
        console.error('❌ خطأ في فحص المزامنة:', error);
        return { success: false, error: error.message };
    }
}

// إضافة الوظائف للوحة التحكم
window.retryPropertySync = retryPropertySync;
window.checkAllPropertiesSync = checkAllPropertiesSync;
window.savePropertiesDirectlyToSupabase = savePropertiesDirectlyToSupabase;

// ===== نهاية وظائف مساعدة لحفظ العقارات =====

// ===== وظيفة اختبار شاملة لنظام تحرير العقارات =====

// اختبار شامل لنظام تحرير العقارات
async function testPropertyEditSystem() {
    console.log('🧪 بدء الاختبار الشامل لنظام تحرير العقارات...');

    // إظهار نافذة الاختبار
    const testModal = document.createElement('div');
    testModal.className = 'modal-overlay';
    testModal.style.display = 'flex';
    testModal.style.zIndex = '10003';
    testModal.innerHTML = `
        <div class="modal-box test-modal">
            <div class="test-header">
                <h3><i class="fas fa-vial"></i> اختبار نظام تحرير العقارات</h3>
                <button class="close-modal" onclick="closeModal()">×</button>
            </div>
            <div class="test-content">
                <div class="test-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" id="testProgressFill"></div>
                    </div>
                    <div class="progress-text" id="testProgressText">جاري التحضير...</div>
                </div>

                <div class="test-steps" id="testSteps">
                    <div class="test-step" id="step1">
                        <i class="fas fa-clock step-icon"></i>
                        <span>فحص المكونات الأساسية</span>
                        <div class="step-status" id="status1"></div>
                    </div>
                    <div class="test-step" id="step2">
                        <i class="fas fa-clock step-icon"></i>
                        <span>اختبار اتصال Supabase</span>
                        <div class="step-status" id="status2"></div>
                    </div>
                    <div class="test-step" id="step3">
                        <i class="fas fa-clock step-icon"></i>
                        <span>اختبار تحرير العقار</span>
                        <div class="step-status" id="status3"></div>
                    </div>
                    <div class="test-step" id="step4">
                        <i class="fas fa-clock step-icon"></i>
                        <span>اختبار المزامنة</span>
                        <div class="step-status" id="status4"></div>
                    </div>
                    <div class="test-step" id="step5">
                        <i class="fas fa-clock step-icon"></i>
                        <span>التحقق من النتائج</span>
                        <div class="step-status" id="status5"></div>
                    </div>
                </div>

                <div class="test-results" id="testResults" style="display: none;">
                    <h4>نتائج الاختبار:</h4>
                    <div id="testResultsContent"></div>
                </div>

                <div class="test-actions">
                    <button id="startTestBtn" onclick="runFullPropertyEditTest()" class="test-action-btn">
                        <i class="fas fa-play"></i> بدء الاختبار
                    </button>
                    <button onclick="closeModal()" class="test-action-btn secondary">
                        <i class="fas fa-times"></i> إغلاق
                    </button>
                </div>
            </div>
        </div>
    `;

    document.body.appendChild(testModal);

    // إضافة مستمع لإغلاق النافذة عند النقر خارجها
    testModal.addEventListener('click', function(e) {
        if (e.target === this) closeModal();
    });
}

// تشغيل الاختبار الشامل
async function runFullPropertyEditTest() {
    console.log('🚀 بدء تشغيل الاختبار الشامل...');

    const startBtn = document.getElementById('startTestBtn');
    startBtn.disabled = true;
    startBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> جاري الاختبار...';

    const results = {
        step1: false,
        step2: false,
        step3: false,
        step4: false,
        step5: false,
        details: {}
    };

    try {
        // الخطوة 1: فحص المكونات الأساسية
        updateTestStep(1, 'running', 'فحص المكونات...');
        updateTestProgress(20, 'فحص المكونات الأساسية...');

        const componentsCheck = await checkSystemComponents();
        results.step1 = componentsCheck.success;
        results.details.components = componentsCheck;

        updateTestStep(1, results.step1 ? 'success' : 'error',
            results.step1 ? 'تم بنجاح' : 'فشل');

        if (!results.step1) {
            throw new Error('فشل في فحص المكونات الأساسية');
        }

        // الخطوة 2: اختبار اتصال Supabase
        updateTestStep(2, 'running', 'اختبار الاتصال...');
        updateTestProgress(40, 'اختبار اتصال Supabase...');

        const connectionCheck = await checkSupabaseConnection();
        results.step2 = connectionCheck.connected;
        results.details.connection = connectionCheck;

        updateTestStep(2, results.step2 ? 'success' : 'error',
            results.step2 ? 'متصل' : 'غير متصل');

        // الخطوة 3: اختبار تحرير العقار
        updateTestStep(3, 'running', 'اختبار التحرير...');
        updateTestProgress(60, 'اختبار تحرير العقار...');

        const editTest = await testPropertyEdit();
        results.step3 = editTest.success;
        results.details.edit = editTest;

        updateTestStep(3, results.step3 ? 'success' : 'error',
            results.step3 ? 'نجح' : 'فشل');

        // الخطوة 4: اختبار المزامنة
        updateTestStep(4, 'running', 'اختبار المزامنة...');
        updateTestProgress(80, 'اختبار المزامنة...');

        if (results.step2) {
            const syncTest = await syncToSupabase(false);
            results.step4 = syncTest.success;
            results.details.sync = syncTest;
        } else {
            results.step4 = false;
            results.details.sync = { success: false, message: 'لا يوجد اتصال بـ Supabase' };
        }

        updateTestStep(4, results.step4 ? 'success' : 'warning',
            results.step4 ? 'نجحت' : 'فشلت');

        // الخطوة 5: التحقق من النتائج
        updateTestStep(5, 'running', 'التحقق...');
        updateTestProgress(100, 'انتهى الاختبار');

        const overallSuccess = results.step1 && results.step3;
        results.step5 = overallSuccess;

        updateTestStep(5, overallSuccess ? 'success' : 'warning', 'انتهى');

        // عرض النتائج
        showTestResults(results);

        console.log('✅ انتهى الاختبار الشامل:', results);

    } catch (error) {
        console.error('❌ خطأ في الاختبار الشامل:', error);
        updateTestProgress(100, 'فشل الاختبار');
        showTestResults(results, error);
    } finally {
        startBtn.disabled = false;
        startBtn.innerHTML = '<i class="fas fa-redo"></i> إعادة الاختبار';
    }
}

// تحديث خطوة الاختبار
function updateTestStep(stepNumber, status, message) {
    const step = document.getElementById(`step${stepNumber}`);
    const icon = step.querySelector('.step-icon');
    const statusDiv = step.querySelector('.step-status');

    // تحديث الأيقونة
    icon.className = status === 'running' ? 'fas fa-spinner fa-spin step-icon' :
                    status === 'success' ? 'fas fa-check step-icon success' :
                    status === 'error' ? 'fas fa-times step-icon error' :
                    'fas fa-exclamation-triangle step-icon warning';

    // تحديث الحالة
    statusDiv.textContent = message;
    statusDiv.className = `step-status ${status}`;
}

// تحديث شريط التقدم
function updateTestProgress(percentage, message) {
    const progressFill = document.getElementById('testProgressFill');
    const progressText = document.getElementById('testProgressText');

    if (progressFill) {
        progressFill.style.width = `${percentage}%`;
    }

    if (progressText) {
        progressText.textContent = message;
    }
}

// عرض نتائج الاختبار
function showTestResults(results, error = null) {
    const resultsDiv = document.getElementById('testResults');
    const contentDiv = document.getElementById('testResultsContent');

    let html = '';

    if (error) {
        html += `<div class="result-error">❌ خطأ في الاختبار: ${error.message}</div>`;
    }

    const overallSuccess = results.step1 && results.step3;
    html += `<div class="result-summary ${overallSuccess ? 'success' : 'warning'}">`;
    html += `<h5>${overallSuccess ? '✅ النظام يعمل بشكل صحيح' : '⚠️ يحتاج النظام إلى إصلاحات'}</h5>`;
    html += `</div>`;

    html += '<div class="result-details">';
    html += `<p><strong>المكونات الأساسية:</strong> ${results.step1 ? '✅ سليمة' : '❌ مشكلة'}</p>`;
    html += `<p><strong>اتصال Supabase:</strong> ${results.step2 ? '✅ متصل' : '❌ غير متصل'}</p>`;
    html += `<p><strong>تحرير العقارات:</strong> ${results.step3 ? '✅ يعمل' : '❌ لا يعمل'}</p>`;
    html += `<p><strong>المزامنة:</strong> ${results.step4 ? '✅ تعمل' : '⚠️ لا تعمل'}</p>`;
    html += '</div>';

    if (!overallSuccess) {
        html += '<div class="result-recommendations">';
        html += '<h5>التوصيات:</h5>';
        html += '<ul>';
        if (!results.step1) html += '<li>تحقق من تحميل جميع ملفات JavaScript</li>';
        if (!results.step2) html += '<li>تحقق من إعدادات Supabase</li>';
        if (!results.step3) html += '<li>تحقق من وظائف تحرير العقارات</li>';
        if (!results.step4) html += '<li>تحقق من اتصال الإنترنت</li>';
        html += '</ul>';
        html += '</div>';
    }

    contentDiv.innerHTML = html;
    resultsDiv.style.display = 'block';
}

// فحص المكونات الأساسية
async function checkSystemComponents() {
    const components = {
        properties: Array.isArray(properties),
        savePropertyChanges: typeof savePropertyChanges === 'function',
        editPropertyData: typeof editPropertyData === 'function',
        showToast: typeof showToast === 'function',
        syncToSupabase: typeof syncToSupabase === 'function',
        localStorage: typeof localStorage !== 'undefined'
    };

    const allGood = Object.values(components).every(Boolean);

    return {
        success: allGood,
        components: components,
        message: allGood ? 'جميع المكونات سليمة' : 'بعض المكونات مفقودة'
    };
}

// اختبار تحرير العقار
async function testPropertyEdit() {
    try {
        if (!properties || properties.length === 0) {
            return { success: false, message: 'لا توجد عقارات للاختبار' };
        }

        const testProperty = properties.find(p => p['اسم العقار'] && p['اسم العقار'].trim() !== '');
        if (!testProperty) {
            return { success: false, message: 'لا توجد عقارات صالحة للاختبار' };
        }

        // محاكاة تحرير بسيط
        const originalValue = testProperty['المالك'];
        const testValue = 'اختبار - ' + Date.now();

        testProperty['المالك'] = testValue;
        saveDataLocally();

        // التحقق من الحفظ
        const savedProperty = properties.find(p => p['اسم العقار'] === testProperty['اسم العقار']);
        const success = savedProperty && savedProperty['المالك'] === testValue;

        // إعادة القيمة الأصلية
        testProperty['المالك'] = originalValue;
        saveDataLocally();

        return {
            success: success,
            message: success ? 'تم اختبار التحرير بنجاح' : 'فشل في اختبار التحرير'
        };

    } catch (error) {
        return { success: false, message: error.message };
    }
}

// إضافة الوظيفة للوحة التحكم
window.testPropertyEditSystem = testPropertyEditSystem;

// ===== نهاية وظيفة اختبار شاملة لنظام تحرير العقارات =====

// ===== وظائف إنشاء جداول Supabase =====

// إنشاء جدول properties إذا لم يكن موجوداً
async function createPropertiesTableIfNotExists() {
    console.log('🔧 التحقق من وجود جدول properties...');

    if (!supabaseClient) {
        throw new Error('عميل Supabase غير متاح');
    }

    try {
        // محاولة الاستعلام عن الجدول للتحقق من وجوده
        const { data, error } = await supabaseClient
            .from('properties')
            .select('id')
            .limit(1);

        if (!error) {
            console.log('✅ جدول properties موجود بالفعل');
            return { success: true, exists: true };
        }

        // إذا كان الخطأ يشير إلى عدم وجود الجدول، أنشئه
        if (error.message.includes('does not exist') || error.message.includes('relation')) {
            console.log('🔧 إنشاء جدول properties...');

            // استخدام SQL لإنشاء الجدول
            const createTableSQL = `
                CREATE TABLE IF NOT EXISTS properties (
                    id TEXT PRIMARY KEY,
                    property_name TEXT,
                    city TEXT,
                    unit_number TEXT,
                    tenant_name TEXT,
                    contract_number TEXT,
                    rent_value NUMERIC DEFAULT 0
                    start_date TEXT,
                    end_date TEXT,
                    total_amount NUMERIC DEFAULT 0,
                    area NUMERIC,
                    deed_number TEXT,
                    deed_area NUMERIC,
                    registry_number TEXT,
                    real_estate_registry TEXT, -- إضافة للتوافق مع العمود الموجود
                    owner_name TEXT,
                    owner TEXT, -- إضافة للتوافق مع العمود الموجود
                    property_location TEXT,
                    contract_type TEXT DEFAULT 'سكني',
                    remaining_installments INTEGER,
                    last_update TEXT,
                    raw_data JSONB,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                );

                -- إنشاء فهارس للبحث السريع
                CREATE INDEX IF NOT EXISTS idx_properties_name ON properties(property_name);
                CREATE INDEX IF NOT EXISTS idx_properties_city ON properties(city);
                CREATE INDEX IF NOT EXISTS idx_properties_unit ON properties(unit_number);
                CREATE INDEX IF NOT EXISTS idx_properties_tenant ON properties(tenant_name);
            `;

            // تنفيذ SQL (هذا قد لا يعمل مع REST API، لذا سنستخدم طريقة بديلة)
            console.log('📝 SQL للإنشاء جاهز، سيتم استخدام طريقة بديلة...');

            return { success: true, created: true, sql: createTableSQL };
        }

        // خطأ آخر غير متوقع
        throw error;

    } catch (error) {
        console.error('❌ خطأ في التحقق من جدول properties:', error);
        return { success: false, error: error.message };
    }
}

// طريقة بديلة لإنشاء الجدول
async function createPropertiesTableAlternative() {
    console.log('🔧 إنشاء جدول properties بالطريقة البديلة...');

    try {
        // محاولة إدراج سجل تجريبي لإنشاء الجدول تلقائياً
        const testRecord = {
            id: 'test_record_' + Date.now(),
            property_name: 'عقار تجريبي',
            city: 'الرياض',
            unit_number: 'TEST_001',
            tenant_name: '',
            contract_number: '',
            rent_value: 0,
            start_date: null,
            end_date: null,
            total_amount: 0,
            area: null,
            deed_number: null,
            deed_area: null,
            registry_number: null,
            real_estate_registry: null, // إضافة للتوافق مع العمود الموجود
            owner_name: null,
            owner: null, // إضافة للتوافق مع العمود الموجود
            property_location: null,
            contract_type: 'سكني',
            remaining_installments: null,
            last_update: new Date().toLocaleDateString('ar-SA'),
            raw_data: JSON.stringify({ test: true }),
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        };

        const { data, error } = await supabaseClient
            .from('properties')
            .insert([testRecord]);

        if (error) {
            throw error;
        }

        // حذف السجل التجريبي
        await supabaseClient
            .from('properties')
            .delete()
            .eq('id', testRecord.id);

        console.log('✅ تم إنشاء جدول properties بنجاح');
        return { success: true };

    } catch (error) {
        console.error('❌ فشل في إنشاء الجدول بالطريقة البديلة:', error);
        throw error;
    }
}

// مزامنة بديلة للبيانات
async function syncMainDataAlternative(propertiesData) {
    console.log('🔄 مزامنة البيانات بالطريقة البديلة...');

    try {
        // تحضير البيانات بتنسيق مبسط
        const simplifiedData = propertiesData.map((property, index) => ({
            id: generateUUID(),
            property_name: String(property['اسم العقار'] || ''),
            city: String(property['المدينة'] || ''),
            unit_number: String(property['رقم  الوحدة '] || ''),
            tenant_name: String(property['اسم المستأجر'] || ''),
            contract_number: String(property['رقم العقد'] || ''),
            rent_value: Number(property['قيمة  الايجار '] || 0),
            total_amount: Number(property['الاجمالى'] || 0),
            raw_data: property, // حفظ البيانات الكاملة
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        }));

        // إدراج البيانات
        const { data, error } = await supabaseClient
            .from('properties')
            .insert(simplifiedData);

        if (error) {
            throw error;
        }

        console.log(`✅ تم مزامنة ${propertiesData.length} عقار بالطريقة البديلة`);
        return { success: true, count: propertiesData.length };

    } catch (error) {
        console.error('❌ خطأ في المزامنة البديلة:', error);
        throw error;
    }
}

// ===== نهاية وظائف إنشاء جداول Supabase =====

// ===== وظائف مساعدة لتحسين تجربة المستخدم =====

// إنشاء UUID متوافق مع جميع المتصفحات
function generateUUID() {
    // محاولة استخدام crypto.randomUUID() إذا كان متوفراً
    if (typeof crypto !== 'undefined' && crypto.randomUUID) {
        try {
            return crypto.randomUUID();
        } catch (error) {
            console.warn('فشل في استخدام crypto.randomUUID():', error);
        }
    }

    // طريقة بديلة لإنشاء UUID
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        const r = Math.random() * 16 | 0;
        const v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

// إنشاء معرف بسيط للاستخدام الاحتياطي
function generateSimpleId(prefix = 'item') {
    const timestamp = Date.now();
    const random = Math.random().toString(36).substring(2, 8);
    return `${prefix}_${timestamp}_${random}`;
}

// إصلاح المعرفات الخاطئة في البيانات
function fixInvalidIds(data) {
    if (!data || !Array.isArray(data)) return data;

    return data.map(item => {
        if (!item.id || typeof item.id !== 'string' || item.id.includes('fallback_')) {
            // إنشاء معرف جديد صحيح
            item.id = generateUUID();
        }
        return item;
    });
}

// تنظيف البيانات قبل الحفظ
function sanitizeDataForSave(propertiesToSave) {
    if (!propertiesToSave || !Array.isArray(propertiesToSave)) {
        return [];
    }

    return propertiesToSave.map((property, index) => {
        // التأكد من وجود البيانات الأساسية
        const sanitized = {
            ...property,
            'اسم العقار': property['اسم العقار'] || `عقار ${index + 1}`,
            'المدينة': property['المدينة'] || 'غير محدد',
            'رقم  الوحدة ': property['رقم  الوحدة '] || `وحدة_${index + 1}`,
            'اسم المستأجر': property['اسم المستأجر'] || '',
            'رقم العقد': property['رقم العقد'] || '',
            'قيمة  الايجار ': Number(property['قيمة  الايجار '] || 0),
            'الاجمالى': Number(property['الاجمالى'] || 0),
            'نوع العقد': property['نوع العقد'] || 'سكني'
        };

        return sanitized;
    });
}

// إعادة تحميل البيانات بعد تحرير العقار لضمان التحديث الفوري
async function refreshDataAfterPropertyEdit(propertyName) {
    console.log('🔄 إعادة تحميل البيانات بعد تحرير العقار:', propertyName);

    try {
        // إعادة تحميل البيانات من localStorage
        const savedData = localStorage.getItem('properties');
        if (savedData) {
            const localProperties = JSON.parse(savedData);

            // تحديث البيانات العامة
            properties = localProperties;
            console.log(`📊 تم تحميل ${properties.length} سجل من localStorage`);
        }

        // إعادة عرض البيانات في جميع الواجهات
        if (typeof renderData === 'function') {
            renderData();
            console.log('✅ تم تحديث عرض البيانات الرئيسي');
        }

        // تحديث الإحصائيات
        if (typeof updateTotalStats === 'function') {
            updateTotalStats();
            console.log('✅ تم تحديث الإحصائيات');
        }

        // تحديث تبويب العقارات
        const propertiesTab = document.getElementById('properties-tab');
        if (propertiesTab && typeof renderPropertiesTab === 'function') {
            propertiesTab.innerHTML = renderPropertiesTab();
            console.log('✅ تم تحديث تبويب العقارات');
        }

        // تحديث أي نوافذ مفتوحة لتفاصيل الوحدات
        const openModals = document.querySelectorAll('.modal-overlay');
        openModals.forEach(modal => {
            const modalContent = modal.querySelector('.unit-details-modal');
            if (modalContent) {
                // إغلاق النافذة وإعادة فتحها بالبيانات المحدثة
                const unitNumber = modalContent.querySelector('h3')?.textContent?.match(/\d+/)?.[0];
                if (unitNumber) {
                    closeModal();
                    setTimeout(() => {
                        showUnitDetails(unitNumber, propertyName);
                    }, 100);
                }
            }
        });

        console.log('✅ تم إعادة تحميل جميع البيانات بنجاح');

    } catch (error) {
        console.warn('⚠️ خطأ في إعادة تحميل البيانات:', error);
    }
}

// تحديث واجهة المستخدم بعد حفظ ناجح
function updatePropertyDisplayAfterSave(propertyName, changes) {
    console.log('🎨 تحديث واجهة المستخدم بعد الحفظ...');

    try {
        // تحديث عرض البطاقات
        const cards = document.querySelectorAll('.property-card');
        cards.forEach(card => {
            const cardPropertyName = card.querySelector('.property-name')?.textContent;
            if (cardPropertyName === propertyName) {
                // إضافة مؤشر بصري للنجاح
                card.style.border = '2px solid #28a745';
                card.style.boxShadow = '0 0 10px rgba(40, 167, 69, 0.3)';

                // إزالة المؤشر بعد 3 ثوان
                setTimeout(() => {
                    card.style.border = '';
                    card.style.boxShadow = '';
                }, 3000);

                // تحديث البيانات المعروضة
                Object.keys(changes).forEach(fieldKey => {
                    const fieldElement = card.querySelector(`[data-field="${fieldKey}"]`);
                    if (fieldElement) {
                        fieldElement.textContent = changes[fieldKey].new;

                        // إضافة تأثير بصري للتغيير
                        fieldElement.style.backgroundColor = '#d4edda';
                        setTimeout(() => {
                            fieldElement.style.backgroundColor = '';
                        }, 2000);
                    }
                });
            }
        });

        // تحديث الإحصائيات إذا كانت موجودة
        updateStatisticsAfterSave();

        // تحديث قوائم التصفية
        updateFiltersAfterSave();

        console.log('✅ تم تحديث واجهة المستخدم بنجاح');

    } catch (error) {
        console.warn('⚠️ خطأ في تحديث واجهة المستخدم:', error);
    }
}

// تحديث الإحصائيات بعد الحفظ
function updateStatisticsAfterSave() {
    try {
        // إعادة حساب الإحصائيات بالطريقة الصحيحة
        console.log('🔄 تحديث الإحصائيات بعد الحفظ...');

        // إعادة تحميل البيانات من localStorage
        const savedData = localStorage.getItem('properties');
        if (savedData) {
            properties = JSON.parse(savedData);
            console.log(`📊 تم تحميل ${properties.length} سجل من localStorage`);
        }

        // إعادة عرض الإحصائيات
        if (typeof renderTotals === 'function' && properties) {
            renderTotals(properties);
            console.log('✅ تم تحديث إحصائيات الشاشة الكبيرة');
        }

        if (typeof renderMobileTotals === 'function' && properties) {
            renderMobileTotals(properties);
            console.log('✅ تم تحديث إحصائيات الموبايل');
        }

        // إعادة عرض البيانات
        if (typeof renderTable === 'function' && properties) {
            renderTable(properties);
            console.log('✅ تم تحديث عرض الجدول');
        }

        // تحديث الفلاتر
        if (typeof updateFilters === 'function') {
            updateFilters();
            console.log('✅ تم تحديث الفلاتر');
        }

        // تحديث عدادات المدن
        if (typeof updateCityFilter === 'function') {
            updateCityFilter();
        }

    } catch (error) {
        console.warn('⚠️ خطأ في تحديث الإحصائيات:', error);
    }
}

// تحديث قوائم التصفية بعد الحفظ
function updateFiltersAfterSave() {
    try {
        // تحديث قائمة المدن
        const cityFilter = document.getElementById('cityFilter');
        if (cityFilter && typeof populateCityFilter === 'function') {
            populateCityFilter();
        }

        // تحديث قوائم البحث
        const searchInputs = document.querySelectorAll('input[type="search"]');
        searchInputs.forEach(input => {
            if (input.value) {
                // إعادة تطبيق البحث
                const event = new Event('input', { bubbles: true });
                input.dispatchEvent(event);
            }
        });

    } catch (error) {
        console.warn('⚠️ خطأ في تحديث قوائم التصفية:', error);
    }
}

// إضافة مؤشرات بصرية للحفظ
function addSaveIndicators(element, status = 'saving') {
    if (!element) return;

    const indicators = {
        saving: {
            icon: 'fas fa-spinner fa-spin',
            color: '#007bff',
            text: 'جاري الحفظ...'
        },
        success: {
            icon: 'fas fa-check-circle',
            color: '#28a745',
            text: 'تم الحفظ'
        },
        error: {
            icon: 'fas fa-exclamation-triangle',
            color: '#dc3545',
            text: 'خطأ في الحفظ'
        }
    };

    const indicator = indicators[status];
    if (!indicator) return;

    // إضافة أو تحديث مؤشر الحفظ
    let saveIndicator = element.querySelector('.save-indicator');
    if (!saveIndicator) {
        saveIndicator = document.createElement('div');
        saveIndicator.className = 'save-indicator';
        saveIndicator.style.cssText = `
            position: absolute;
            top: 5px;
            right: 5px;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 12px;
            color: white;
            z-index: 1000;
        `;
        element.style.position = 'relative';
        element.appendChild(saveIndicator);
    }

    saveIndicator.innerHTML = `<i class="${indicator.icon}"></i> ${indicator.text}`;
    saveIndicator.style.backgroundColor = indicator.color;

    // إزالة المؤشر بعد فترة (للنجاح والخطأ)
    if (status !== 'saving') {
        setTimeout(() => {
            if (saveIndicator && saveIndicator.parentNode) {
                saveIndicator.remove();
            }
        }, 3000);
    }
}

// ===== نهاية وظائف مساعدة لتحسين تجربة المستخدم =====

// ===== اختبار شامل للحل النهائي =====

// اختبار شامل لحل مشكلة حفظ العقارات
async function testPropertySavingSolution() {
    console.log('🧪 بدء الاختبار الشامل لحل مشكلة حفظ العقارات...');

    const testResults = {
        databaseConnection: false,
        tableStructure: false,
        propertyInsert: false,
        propertyUpdate: false,
        propertyDelete: false,
        saveFunction: false,
        errorHandling: false,
        userInterface: false,
        overallSuccess: false,
        errors: []
    };

    try {
        // 1. اختبار الاتصال بقاعدة البيانات
        console.log('🔗 اختبار الاتصال بقاعدة البيانات...');
        try {
            const connectionTest = await checkSupabaseConnection();
            testResults.databaseConnection = connectionTest.connected;

            if (!testResults.databaseConnection) {
                testResults.errors.push('فشل الاتصال بقاعدة البيانات');
                throw new Error(connectionTest.error);
            }

            console.log('✅ الاتصال بقاعدة البيانات يعمل');
        } catch (connError) {
            testResults.errors.push(`خطأ الاتصال: ${connError.message}`);
            console.error('❌ فشل اختبار الاتصال:', connError);
        }

        // 2. اختبار هيكل الجدول
        console.log('🏗️ اختبار هيكل جدول properties...');
        try {
            const { data, error } = await supabaseClient
                .from('properties')
                .select('id, property_name, city, unit_number, tenant_name, last_update')
                .limit(1);

            testResults.tableStructure = !error;

            if (error) {
                testResults.errors.push(`خطأ هيكل الجدول: ${error.message}`);
                throw error;
            }

            console.log('✅ هيكل الجدول صحيح');
        } catch (structError) {
            testResults.errors.push(`خطأ في هيكل الجدول: ${structError.message}`);
            console.error('❌ فشل اختبار هيكل الجدول:', structError);
        }

        // 3. اختبار إدراج عقار جديد
        console.log('➕ اختبار إدراج عقار جديد...');
        const testPropertyId = generateUUID();
        const testProperty = {
            id: testPropertyId,
            property_name: 'عقار اختبار الحل',
            city: 'الرياض',
            unit_number: 'TEST_SOLUTION_001',
            tenant_name: 'مستأجر اختبار',
            contract_number: 'TEST_C001',
            rent_value: 3000,
            total_amount: 36000,
            contract_type: 'سكني',
            last_update: new Date().toLocaleDateString('ar-SA'),
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        };

        try {
            const { data: insertData, error: insertError } = await supabaseClient
                .from('properties')
                .insert([testProperty]);

            testResults.propertyInsert = !insertError;

            if (insertError) {
                testResults.errors.push(`خطأ الإدراج: ${insertError.message}`);
                throw insertError;
            }

            console.log('✅ إدراج العقار نجح');
        } catch (insertErr) {
            testResults.errors.push(`فشل الإدراج: ${insertErr.message}`);
            console.error('❌ فشل اختبار الإدراج:', insertErr);
        }

        // 4. اختبار تحديث العقار
        console.log('✏️ اختبار تحديث العقار...');
        try {
            const { data: updateData, error: updateError } = await supabaseClient
                .from('properties')
                .update({
                    tenant_name: 'مستأجر محدث',
                    rent_value: 3500,
                    last_update: new Date().toLocaleDateString('ar-SA'),
                    updated_at: new Date().toISOString()
                })
                .eq('id', testPropertyId);

            testResults.propertyUpdate = !updateError;

            if (updateError) {
                testResults.errors.push(`خطأ التحديث: ${updateError.message}`);
                throw updateError;
            }

            console.log('✅ تحديث العقار نجح');
        } catch (updateErr) {
            testResults.errors.push(`فشل التحديث: ${updateErr.message}`);
            console.error('❌ فشل اختبار التحديث:', updateErr);
        }

        // 5. اختبار وظيفة الحفظ المباشر
        console.log('💾 اختبار وظيفة الحفظ المباشر...');
        try {
            const testPropertyForSave = {
                'اسم العقار': 'عقار اختبار الحفظ',
                'المدينة': 'جدة',
                'رقم  الوحدة ': 'SAVE_TEST_001',
                'اسم المستأجر': 'مستأجر حفظ',
                'رقم العقد': 'SAVE_C001',
                'قيمة  الايجار ': 4000,
                'الاجمالى': 48000,
                'نوع العقد': 'راكض'
            };

            const saveResult = await savePropertiesDirectlyToSupabase([testPropertyForSave]);
            testResults.saveFunction = saveResult.success;

            if (!saveResult.success) {
                testResults.errors.push(`خطأ وظيفة الحفظ: ${saveResult.error || saveResult.message}`);
                throw new Error(saveResult.error || saveResult.message);
            }

            console.log('✅ وظيفة الحفظ المباشر تعمل');
        } catch (saveErr) {
            testResults.errors.push(`فشل وظيفة الحفظ: ${saveErr.message}`);
            console.error('❌ فشل اختبار وظيفة الحفظ:', saveErr);
        }

        // 6. اختبار حذف البيانات التجريبية
        console.log('🗑️ تنظيف البيانات التجريبية...');
        try {
            const { data: deleteData, error: deleteError } = await supabaseClient
                .from('properties')
                .delete()
                .in('unit_number', ['TEST_SOLUTION_001', 'SAVE_TEST_001']);

            testResults.propertyDelete = !deleteError;

            if (deleteError) {
                console.warn('⚠️ تحذير في حذف البيانات التجريبية:', deleteError);
            } else {
                console.log('✅ تم تنظيف البيانات التجريبية');
            }
        } catch (deleteErr) {
            console.warn('⚠️ لم يتم حذف البيانات التجريبية:', deleteErr);
        }

        // 7. اختبار معالجة الأخطاء
        console.log('🛡️ اختبار معالجة الأخطاء...');
        try {
            // محاولة إدراج بيانات خاطئة لاختبار معالجة الأخطاء
            const invalidProperty = {
                id: null, // معرف خاطئ
                property_name: null, // اسم خاطئ
                city: '',
                unit_number: ''
            };

            const errorTestResult = await savePropertiesDirectlyToSupabase([invalidProperty]);

            // إذا نجح الحفظ رغم البيانات الخاطئة، فهذا يعني أن معالجة الأخطاء تعمل
            testResults.errorHandling = true;
            console.log('✅ معالجة الأخطاء تعمل بشكل صحيح');

        } catch (errorTestErr) {
            // إذا فشل بشكل صحيح، فهذا جيد أيضاً
            testResults.errorHandling = true;
            console.log('✅ معالجة الأخطاء تعمل (فشل متوقع)');
        }

        // 8. اختبار واجهة المستخدم
        console.log('🎨 اختبار واجهة المستخدم...');
        try {
            // التحقق من وجود العناصر المطلوبة
            const saveButtons = document.querySelectorAll('[onclick*="savePropertyChanges"]');
            const editButtons = document.querySelectorAll('[onclick*="editProperty"]');

            testResults.userInterface = saveButtons.length > 0 && editButtons.length > 0;

            if (testResults.userInterface) {
                console.log('✅ واجهة المستخدم تحتوي على الأزرار المطلوبة');
            } else {
                testResults.errors.push('واجهة المستخدم لا تحتوي على الأزرار المطلوبة');
                console.warn('⚠️ واجهة المستخدم قد تحتاج إلى تحديث');
            }
        } catch (uiErr) {
            testResults.errors.push(`خطأ في واجهة المستخدم: ${uiErr.message}`);
            console.error('❌ خطأ في اختبار واجهة المستخدم:', uiErr);
        }

    } catch (generalError) {
        testResults.errors.push(`خطأ عام: ${generalError.message}`);
        console.error('❌ خطأ عام في الاختبار:', generalError);
    }

    // تقييم النتائج الإجمالية
    const criticalTests = [
        testResults.databaseConnection,
        testResults.tableStructure,
        testResults.propertyInsert,
        testResults.propertyUpdate,
        testResults.saveFunction
    ];

    testResults.overallSuccess = criticalTests.every(test => test === true);

    // عرض النتائج
    console.log('📊 نتائج الاختبار الشامل:', testResults);

    if (testResults.overallSuccess) {
        console.log('🎉 تم حل جميع مشاكل حفظ العقارات بنجاح!');
        console.log('🎉 الحل النهائي يعمل بشكل مثالي!');

        // عرض ملخص النجاح في الكونسول فقط
        setTimeout(() => {
            console.log(`
                ✅ تم حل جميع المشاكل بنجاح!

                🔧 المشاكل التي تم حلها:
                • إصلاح هيكل قاعدة البيانات
                • حل مشكلة المفتاح المكرر
                • إضافة الأعمدة المفقودة
                • تحسين وظائف الحفظ
                • معالجة شاملة للأخطاء
                • تحسين تجربة المستخدم

                🎯 النتائج:
                • حفظ العقارات: يعمل ✅
                • تحديث العقارات: يعمل ✅
                • مزامنة السحابة: تعمل ✅
                • معالجة الأخطاء: تعمل ✅

                💡 يمكنك الآن تحرير العقارات بثقة!
            `);
        }, 2000);

    } else {
        const failedTests = [];
        if (!testResults.databaseConnection) failedTests.push('الاتصال بقاعدة البيانات');
        if (!testResults.tableStructure) failedTests.push('هيكل الجدول');
        if (!testResults.propertyInsert) failedTests.push('إدراج العقارات');
        if (!testResults.propertyUpdate) failedTests.push('تحديث العقارات');
        if (!testResults.saveFunction) failedTests.push('وظيفة الحفظ');

        showToast(`❌ فشل في: ${failedTests.join(', ')}`, 'error');
        console.error('❌ بعض الاختبارات فشلت:', failedTests);

        // عرض تفاصيل الأخطاء في الكونسول فقط
        if (testResults.errors.length > 0) {
            setTimeout(() => {
                console.error(`
                    ❌ تفاصيل الأخطاء:

                    ${testResults.errors.map((error, index) => `${index + 1}. ${error}`).join('\n')}

                    🔧 يرجى مراجعة هذه المشاكل وإعادة المحاولة.
                `);
            }, 1000);
        }
    }

    return testResults;
}

// إضافة الوظيفة للوحة التحكم
window.testPropertySavingSolution = testPropertySavingSolution;

// تشغيل الاختبار يدوياً فقط
// يمكن استدعاؤه من الكونسول: testPropertySavingSolution()

// ===== نهاية اختبار شامل للحل النهائي =====

// ===== اختبار سريع لإصلاح مشكلة UUID =====

// اختبار سريع للتأكد من إصلاح مشكلة UUID
function testUUIDFix() {
    console.log('🔧 اختبار إصلاح مشكلة UUID...');

    try {
        // اختبار إنشاء UUID
        const uuid1 = generateUUID();
        const uuid2 = generateUUID();
        const simpleId1 = generateSimpleId('test');
        const simpleId2 = generateSimpleId('test');

        console.log('UUID 1:', uuid1);
        console.log('UUID 2:', uuid2);
        console.log('Simple ID 1:', simpleId1);
        console.log('Simple ID 2:', simpleId2);

        // التحقق من صحة التنسيق
        const uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        const isUuid1Valid = uuidPattern.test(uuid1);
        const isUuid2Valid = uuidPattern.test(uuid2);

        console.log('UUID 1 صحيح:', isUuid1Valid);
        console.log('UUID 2 صحيح:', isUuid2Valid);
        console.log('UUID مختلفان:', uuid1 !== uuid2);
        console.log('Simple ID مختلفان:', simpleId1 !== simpleId2);

        // اختبار تنظيف البيانات
        const testData = [
            {
                'اسم العقار': 'عقار اختبار',
                'المدينة': 'الرياض',
                'رقم  الوحدة ': '001'
            },
            {
                'اسم العقار': '',
                'المدينة': '',
                'رقم  الوحدة ': ''
            }
        ];

        const cleanedData = sanitizeDataForSave(testData);
        console.log('البيانات الأصلية:', testData);
        console.log('البيانات المنظفة:', cleanedData);

        const success = isUuid1Valid && isUuid2Valid && uuid1 !== uuid2 && cleanedData.length === 2;

        if (success) {
            console.log('✅ تم إصلاح مشكلة UUID بنجاح!');
            console.log('✅ جميع اختبارات UUID نجحت');
        } else {
            console.error('❌ مازالت هناك مشكلة في UUID');
            console.error('❌ بعض اختبارات UUID فشلت');
        }

        return success;

    } catch (error) {
        console.error('❌ خطأ في اختبار UUID:', error);
        showToast(`❌ خطأ في اختبار UUID: ${error.message}`, 'error');
        return false;
    }
}

// إضافة الوظيفة للوحة التحكم
window.testUUIDFix = testUUIDFix;

// تشغيل الاختبار يدوياً فقط
// يمكن استدعاؤه من الكونسول: testUUIDFix()

// ===== نهاية اختبار سريع لإصلاح مشكلة UUID =====

// ===== إصلاح حساب عدد الوحدات =====

// وظيفة لحساب عدد الوحدات الصحيح
function calculateCorrectUnitsCount(data) {
    if (!data || !Array.isArray(data)) {
        return 0;
    }

    // إنشاء مجموعة للوحدات الفريدة
    const uniqueUnits = new Set();

    data.forEach(property => {
        // التأكد من وجود اسم العقار ورقم الوحدة
        const propertyName = property['اسم العقار'];
        const unitNumber = property['رقم  الوحدة '];

        if (propertyName && unitNumber &&
            propertyName.toString().trim() !== '' &&
            unitNumber.toString().trim() !== '') {

            // إنشاء مفتاح فريد للوحدة
            const unitKey = `${propertyName.trim()}_${unitNumber.toString().trim()}`;
            uniqueUnits.add(unitKey);
        }
    });

    return uniqueUnits.size;
}

// وظيفة لحساب عدد المستأجرين الصحيح
function calculateCorrectTenantsCount(data) {
    if (!data || !Array.isArray(data)) {
        return 0;
    }

    // تجميع العقود الفريدة
    const uniqueContracts = new Set();

    data.forEach(property => {
        const tenantName = property['اسم المستأجر'];
        const contractNumber = property['رقم العقد'];

        // التأكد من وجود مستأجر وعقد
        if (tenantName && contractNumber &&
            tenantName.toString().trim() !== '' &&
            contractNumber.toString().trim() !== '') {

            // استخدام رقم العقد كمفتاح فريد
            uniqueContracts.add(contractNumber.toString().trim());
        }
    });

    return uniqueContracts.size;
}

// وظيفة لحساب الوحدات الفارغة الصحيح
function calculateCorrectEmptyUnitsCount(data) {
    if (!data || !Array.isArray(data)) {
        return 0;
    }

    const uniqueEmptyUnits = new Set();

    data.forEach(property => {
        const propertyName = property['اسم العقار'];
        const unitNumber = property['رقم  الوحدة '];
        const tenantName = property['اسم المستأجر'];

        // التأكد من أن الوحدة موجودة ولكن فارغة
        if (propertyName && unitNumber &&
            propertyName.toString().trim() !== '' &&
            unitNumber.toString().trim() !== '' &&
            (!tenantName || tenantName.toString().trim() === '')) {

            const unitKey = `${propertyName.trim()}_${unitNumber.toString().trim()}`;
            uniqueEmptyUnits.add(unitKey);
        }
    });

    return uniqueEmptyUnits.size;
}

// وظيفة لاختبار دقة حساب الوحدات
function testUnitsCountAccuracy() {
    console.log('🧮 اختبار دقة حساب عدد الوحدات...');

    if (!properties || !Array.isArray(properties)) {
        console.error('❌ البيانات غير متوفرة للاختبار');
        return false;
    }

    const totalUnitsOld = properties.length;
    const totalUnitsNew = calculateCorrectUnitsCount(properties);
    const tenantsCountNew = calculateCorrectTenantsCount(properties);
    const emptyUnitsNew = calculateCorrectEmptyUnitsCount(properties);

    console.log('📊 نتائج الاختبار:');
    console.log(`   العدد القديم (data.length): ${totalUnitsOld}`);
    console.log(`   العدد الجديد (فريد): ${totalUnitsNew}`);
    console.log(`   عدد المستأجرين: ${tenantsCountNew}`);
    console.log(`   الوحدات الفارغة: ${emptyUnitsNew}`);
    console.log(`   الوحدات المؤجرة: ${totalUnitsNew - emptyUnitsNew}`);

    // التحقق من المنطق
    const isLogical = (tenantsCountNew + emptyUnitsNew) <= totalUnitsNew;

    if (isLogical) {
        console.log('✅ الحسابات منطقية ودقيقة');
        console.log(`✅ تم إصلاح حساب الوحدات: ${totalUnitsNew} وحدة فريدة`);
    } else {
        console.warn('⚠️ هناك خطأ في المنطق');
        console.warn('⚠️ هناك خطأ في حساب الوحدات');
    }

    return isLogical;
}

// إضافة الوظيفة للوحة التحكم
window.testUnitsCountAccuracy = testUnitsCountAccuracy;
window.calculateCorrectUnitsCount = calculateCorrectUnitsCount;

// تشغيل الاختبار يدوياً فقط
// يمكن استدعاؤه من الكونسول: testUnitsCountAccuracy()

// وظيفة لإصلاح الإحصائيات فوراً
function fixStatisticsNow() {
    console.log('🔧 إصلاح الإحصائيات فوراً...');

    try {
        // التأكد من وجود البيانات
        if (!properties || !Array.isArray(properties)) {
            console.warn('⚠️ البيانات غير متوفرة');
            showToast('⚠️ البيانات غير متوفرة', 'warning');
            return false;
        }

        // إعادة حساب الإحصائيات
        const correctUnitsCount = calculateCorrectUnitsCount(properties);
        const correctTenantsCount = calculateCorrectTenantsCount(properties);
        const correctEmptyUnitsCount = calculateCorrectEmptyUnitsCount(properties);

        console.log('📊 الإحصائيات المصححة:');
        console.log(`   إجمالي الوحدات: ${correctUnitsCount}`);
        console.log(`   عدد المستأجرين: ${correctTenantsCount}`);
        console.log(`   الوحدات الفارغة: ${correctEmptyUnitsCount}`);
        console.log(`   الوحدات المؤجرة: ${correctUnitsCount - correctEmptyUnitsCount}`);

        // إعادة عرض الإحصائيات
        updateStatisticsAfterSave();

        console.log(`✅ تم إصلاح الإحصائيات: ${correctUnitsCount} وحدة`);

        return true;

    } catch (error) {
        console.error('❌ خطأ في إصلاح الإحصائيات:', error);
        showToast(`❌ خطأ في إصلاح الإحصائيات: ${error.message}`, 'error');
        return false;
    }
}

// إضافة الوظيفة للوحة التحكم
window.fixStatisticsNow = fixStatisticsNow;

// ===== نهاية إصلاح حساب عدد الوحدات =====

// ===== اختبار سريع نهائي لإصلاح المشكلة =====

// اختبار سريع للتأكد من إصلاح مشكلة Supabase
async function finalSupabaseFixTest() {
    console.log('🧪 اختبار نهائي لإصلاح مشكلة Supabase...');

    const results = {
        connection: false,
        tableStructure: false,
        canInsert: false,
        canUpdate: false,
        canDelete: false,
        propertyEditWorks: false,
        error: null
    };

    try {
        // 1. اختبار الاتصال
        console.log('🔗 اختبار الاتصال...');
        const connectionTest = await checkSupabaseConnection();
        results.connection = connectionTest.connected;

        if (!results.connection) {
            results.error = connectionTest.error;
            return results;
        }

        // 2. اختبار هيكل الجدول
        console.log('🏗️ اختبار هيكل الجدول...');
        try {
            const { data, error } = await supabaseClient
                .from('properties')
                .select('id, property_name, city, unit_number')
                .limit(1);

            results.tableStructure = !error;

            if (error) {
                console.error('❌ خطأ في هيكل الجدول:', error);
                results.error = error.message;
                return results;
            }
        } catch (structureError) {
            console.error('❌ خطأ في فحص هيكل الجدول:', structureError);
            results.error = structureError.message;
            return results;
        }

        // 3. اختبار الإدراج
        console.log('➕ اختبار الإدراج...');
        const testId = crypto.randomUUID();
        const testData = {
            id: testId,
            property_name: 'اختبار إصلاح',
            city: 'الرياض',
            unit_number: 'FIX_TEST_001',
            tenant_name: 'مستأجر اختبار',
            contract_number: 'FIX_C001',
            rent_value: 1000,
            total_amount: 12000,
            contract_type: 'سكني',
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        };

        try {
            const { data: insertData, error: insertError } = await supabaseClient
                .from('properties')
                .insert([testData]);

            results.canInsert = !insertError;

            if (insertError) {
                console.error('❌ خطأ في الإدراج:', insertError);
                results.error = insertError.message;
                return results;
            }

            console.log('✅ نجح اختبار الإدراج');

        } catch (insertErr) {
            console.error('❌ خطأ في اختبار الإدراج:', insertErr);
            results.error = insertErr.message;
            return results;
        }

        // 4. اختبار التحديث
        console.log('✏️ اختبار التحديث...');
        try {
            const { data: updateData, error: updateError } = await supabaseClient
                .from('properties')
                .update({
                    tenant_name: 'مستأجر محدث',
                    rent_value: 1500,
                    updated_at: new Date().toISOString()
                })
                .eq('id', testId);

            results.canUpdate = !updateError;

            if (updateError) {
                console.error('❌ خطأ في التحديث:', updateError);
                results.error = updateError.message;
            } else {
                console.log('✅ نجح اختبار التحديث');
            }

        } catch (updateErr) {
            console.error('❌ خطأ في اختبار التحديث:', updateErr);
            results.error = updateErr.message;
        }

        // 5. اختبار الحذف
        console.log('🗑️ اختبار الحذف...');
        try {
            const { data: deleteData, error: deleteError } = await supabaseClient
                .from('properties')
                .delete()
                .eq('id', testId);

            results.canDelete = !deleteError;

            if (deleteError) {
                console.error('❌ خطأ في الحذف:', deleteError);
                results.error = deleteError.message;
            } else {
                console.log('✅ نجح اختبار الحذف');
            }

        } catch (deleteErr) {
            console.error('❌ خطأ في اختبار الحذف:', deleteErr);
            results.error = deleteErr.message;
        }

        // 6. اختبار وظيفة تحرير العقارات
        console.log('🏠 اختبار وظيفة تحرير العقارات...');
        try {
            if (properties && properties.length > 0) {
                const testProperty = properties[0];
                const originalValue = testProperty['المالك'];
                const testValue = 'مالك اختبار - ' + Date.now();

                // تحديث محلي
                testProperty['المالك'] = testValue;

                // اختبار الحفظ في Supabase
                const saveResult = await savePropertiesDirectlyToSupabase([testProperty]);
                results.propertyEditWorks = saveResult.success;

                // إعادة القيمة الأصلية
                testProperty['المالك'] = originalValue;

                if (results.propertyEditWorks) {
                    console.log('✅ نجح اختبار تحرير العقارات');
                } else {
                    console.error('❌ فشل اختبار تحرير العقارات');
                }
            } else {
                console.warn('⚠️ لا توجد عقارات لاختبار التحرير');
                results.propertyEditWorks = true; // نفترض أنه يعمل
            }

        } catch (editErr) {
            console.error('❌ خطأ في اختبار تحرير العقارات:', editErr);
            results.error = editErr.message;
        }

    } catch (error) {
        console.error('❌ خطأ عام في الاختبار:', error);
        results.error = error.message;
    }

    // عرض النتائج
    console.log('📊 نتائج الاختبار النهائي:', results);

    const allTestsPassed = results.connection &&
                          results.tableStructure &&
                          results.canInsert &&
                          results.canUpdate &&
                          results.canDelete &&
                          results.propertyEditWorks;

    if (allTestsPassed) {
        console.log('🎉 تم إصلاح جميع مشاكل Supabase بنجاح!');
        console.log('🎉 جميع الاختبارات نجحت - المشكلة تم حلها!');
    } else {
        const failedTests = [];
        if (!results.connection) failedTests.push('الاتصال');
        if (!results.tableStructure) failedTests.push('هيكل الجدول');
        if (!results.canInsert) failedTests.push('الإدراج');
        if (!results.canUpdate) failedTests.push('التحديث');
        if (!results.canDelete) failedTests.push('الحذف');
        if (!results.propertyEditWorks) failedTests.push('تحرير العقارات');

        showToast(`❌ فشل في: ${failedTests.join(', ')}`, 'error');
        console.error('❌ بعض الاختبارات فشلت:', failedTests);
    }

    return results;
}

// إضافة الوظيفة للوحة التحكم
window.finalSupabaseFixTest = finalSupabaseFixTest;

// تشغيل الاختبار يدوياً فقط
// يمكن استدعاؤه من الكونسول: finalSupabaseFixTest()

// ===== نهاية اختبار سريع نهائي لإصلاح المشكلة =====

// ===== اختبار سريع لإصلاح مشكلة Supabase =====

// اختبار سريع للتحقق من إصلاح مشكلة الجدول
async function quickSupabaseTest() {
    console.log('🧪 اختبار سريع لـ Supabase...');

    const results = {
        connection: false,
        tableExists: false,
        canInsert: false,
        canQuery: false,
        error: null
    };

    try {
        // اختبار الاتصال
        const connectionTest = await checkSupabaseConnection();
        results.connection = connectionTest.connected;

        if (!results.connection) {
            results.error = connectionTest.error;
            return results;
        }

        console.log('✅ الاتصال بـ Supabase يعمل');

        // اختبار وجود الجدول
        try {
            const { data, error } = await supabaseClient
                .from('properties')
                .select('id')
                .limit(1);

            results.tableExists = !error;
            results.canQuery = !error;

            if (error && error.message.includes('does not exist')) {
                console.log('⚠️ جدول properties غير موجود، سيتم إنشاؤه...');

                // محاولة إنشاء الجدول
                await createPropertiesTableIfNotExists();

                // اختبار الإدراج
                const testData = {
                    id: 'test_' + Date.now(),
                    property_name: 'اختبار',
                    city: 'الرياض',
                    unit_number: 'TEST_001',
                    raw_data: { test: true },
                    created_at: new Date().toISOString(),
                    updated_at: new Date().toISOString()
                };

                const { data: insertData, error: insertError } = await supabaseClient
                    .from('properties')
                    .insert([testData]);

                if (!insertError) {
                    results.canInsert = true;
                    results.tableExists = true;

                    // حذف البيانات التجريبية
                    await supabaseClient
                        .from('properties')
                        .delete()
                        .eq('id', testData.id);

                    console.log('✅ تم إنشاء الجدول واختبار الإدراج بنجاح');
                } else {
                    console.error('❌ فشل في اختبار الإدراج:', insertError);
                    results.error = insertError.message;
                }
            } else if (error) {
                console.error('❌ خطأ في الاستعلام:', error);
                results.error = error.message;
            } else {
                console.log('✅ جدول properties موجود ويعمل');
                results.tableExists = true;
                results.canQuery = true;
                results.canInsert = true; // نفترض أنه يعمل إذا كان الاستعلام يعمل
            }

        } catch (tableError) {
            console.error('❌ خطأ في اختبار الجدول:', tableError);
            results.error = tableError.message;
        }

    } catch (error) {
        console.error('❌ خطأ في الاختبار السريع:', error);
        results.error = error.message;
    }

    // عرض النتائج
    console.log('📊 نتائج الاختبار السريع:', results);

    const success = results.connection && results.tableExists && results.canInsert;

    if (success) {
        showToast('✅ Supabase يعمل بشكل صحيح الآن!', 'success');
    } else {
        showToast(`❌ مشكلة في Supabase: ${results.error}`, 'error');
    }

    return results;
}

// إضافة الوظيفة للوحة التحكم
window.quickSupabaseTest = quickSupabaseTest;

// تشغيل الاختبار تلقائياً عند تحميل الصفحة
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        console.log('🔄 تشغيل اختبار Supabase التلقائي...');
        quickSupabaseTest();
    }, 3000);
});

// ===== نهاية اختبار سريع لإصلاح مشكلة Supabase =====

// ===== نظام فلترة الجداول التفاعلي =====

// تطبيق نظام الفلترة على جدول سجلات التتبع
function initializeTrackingTableFilter(logs) {
    console.log('🔧 تهيئة نظام الفلترة لجدول سجلات التتبع...');

    // إنشاء جدول HTML للسجلات
    const tableHtml = createTrackingLogsTable(logs);

    // إضافة الجدول للحاوية
    const container = document.getElementById('trackingLogsContainer');
    if (container) {
        container.innerHTML = tableHtml;

        // تهيئة نظام الفلترة مع تأخير أطول للتأكد من تحميل DOM
        setTimeout(() => {
            if (window.tableFilterSystem) {
                console.log('🔧 محاولة تهيئة نظام الفلترة...');

                // التحقق من وجود الجدول
                const table = document.getElementById('trackingLogsTable');
                if (!table) {
                    console.error('❌ لم يتم العثور على جدول trackingLogsTable');
                    return;
                }

                console.log('✅ تم العثور على الجدول، بدء تهيئة الفلترة...');
                const success = window.tableFilterSystem.initializeTable('trackingLogsTable', logs);

                if (success) {
                    console.log('✅ تم تفعيل نظام الفلترة لجدول سجلات التتبع بنجاح');

                    // إضافة عداد النتائج
                    addTrackingTableCounter(logs.length);

                    // إضافة معالج لتحديث العداد عند الفلترة
                    updateTrackingTableCounter();
                } else {
                    console.warn('⚠️ فشل في تفعيل نظام الفلترة');
                }
            } else {
                console.error('❌ نظام الفلترة غير متوفر (window.tableFilterSystem)');
            }
        }, 300);
    }
}

// دمج وتجميع سجلات التتبع حسب رقم العقد ونوع العملية والتاريخ
function consolidateTrackingLogs(logs) {
    if (!logs || logs.length === 0) {
        return [];
    }

    console.log('🔄 بدء دمج سجلات التتبع...');

    const groupedLogs = new Map();

    logs.forEach(log => {
        // إنشاء مفتاح التجميع: رقم العقد + نوع العملية + التاريخ
        const contractNumber = log.contractNumber || log.contract_number || 'غير محدد';
        const operationType = log.operationType || log.operation_type || 'غير محدد';
        const date = log.date || formatDate(log.timestamp);

        const groupKey = `${contractNumber}|${operationType}|${date}`;

        if (!groupedLogs.has(groupKey)) {
            // إنشاء مجموعة جديدة
            groupedLogs.set(groupKey, {
                date: date,
                time: log.time || formatTime(log.timestamp),
                operationType: operationType,
                tenantName: log.tenantName || log.tenant_name || 'غير محدد',
                contractNumber: contractNumber,
                user: log.user || log.user_name || 'غير محدد',
                propertyName: log.propertyName || log.property_name || 'غير محدد',
                city: log.city || 'غير محدد',
                unitNumbers: new Set(),
                changes: new Set(),
                events: new Set(), // مجموعة الأحداث الجديدة
                originalLogs: []
            });
        }

        const group = groupedLogs.get(groupKey);

        // إضافة رقم الوحدة
        const unitNumber = log.unitNumber || log.unit_number || 'غير محدد';
        if (unitNumber && unitNumber !== 'غير محدد') {
            group.unitNumbers.add(unitNumber);
        }

        // استخراج التغييرات
        const logChanges = extractChangesFromLog(log);
        logChanges.forEach(change => group.changes.add(change));

        // استخراج الأحداث (للعمود الجديد)
        const logEvents = extractEventsFromLog(log);
        logEvents.forEach(event => group.events.add(event));

        // حفظ السجل الأصلي
        group.originalLogs.push(log);
    });

    // تحويل المجموعات إلى مصفوفة
    const consolidatedLogs = Array.from(groupedLogs.values()).map(group => ({
        date: group.date,
        time: group.time,
        operationType: group.operationType,
        tenantName: group.tenantName,
        contractNumber: group.contractNumber,
        user: group.user,
        propertyName: group.propertyName,
        unitNumbers: Array.from(group.unitNumbers).join('-'),
        city: group.city,
        changes: Array.from(group.changes).map(change => `✔ ${change}`).join('\n'),
        events: Array.from(group.events).map(event => `• ${event}`).join('\n'), // عمود الأحداث الجديد
        recordCount: group.originalLogs.length
    }));

    console.log(`✅ تم دمج ${logs.length} سجل إلى ${consolidatedLogs.length} سجل موحد`);
    return consolidatedLogs;
}

// استخراج التغييرات من السجل
function extractChangesFromLog(log) {
    const changes = [];

    // إذا كان هناك حقل changes في JSON
    if (log.changes) {
        try {
            let parsedChanges;
            if (typeof log.changes === 'string') {
                parsedChanges = JSON.parse(log.changes);
            } else {
                parsedChanges = log.changes;
            }

            if (Array.isArray(parsedChanges)) {
                changes.push(...parsedChanges);
            } else if (typeof parsedChanges === 'object') {
                Object.entries(parsedChanges).forEach(([field, change]) => {
                    if (typeof change === 'object' && change.old !== change.new) {
                        const fieldName = getArabicFieldName(field);
                        changes.push(`تم تغيير ${fieldName} من ${change.old || '(فارغ)'} إلى ${change.new}`);
                    }
                });
            }
        } catch (e) {
            // إذا فشل التحليل، أضف النص كما هو
            changes.push(log.changes);
        }
    }

    // إضافة وصف العملية إذا كان متوفراً
    if (log.description || log.operationDescription) {
        changes.push(log.description || log.operationDescription);
    }

    // إضافة تغييرات افتراضية بناءً على نوع العملية
    const operationType = log.operationType || log.operation_type || '';
    const unitNumber = log.unitNumber || log.unit_number || '';

    if (operationType.includes('تحرير') || operationType.includes('تعديل')) {
        changes.push(`تم تعديل بيانات الوحدة ${unitNumber}`);
    } else if (operationType.includes('عميل جديد') || operationType.includes('مستأجر جديد')) {
        const tenantName = log.tenantName || log.tenant_name || 'غير محدد';
        changes.push(`تم تغيير المستأجر من (فارغ) إلى ${tenantName}`);
    } else if (operationType.includes('إفراغ')) {
        changes.push(`تم إفراغ الوحدة ${unitNumber}`);
    }

    return changes.filter(change => change && change.trim());
}

// استخراج الأحداث من السجل (للعمود الجديد)
function extractEventsFromLog(log) {
    const events = [];

    // تحليل التغييرات المنظمة
    if (log.changes) {
        try {
            let parsedChanges;
            if (typeof log.changes === 'string') {
                parsedChanges = JSON.parse(log.changes);
            } else {
                parsedChanges = log.changes;
            }

            if (typeof parsedChanges === 'object' && !Array.isArray(parsedChanges)) {
                Object.entries(parsedChanges).forEach(([field, change]) => {
                    if (typeof change === 'object' && change.old !== change.new) {
                        const fieldName = getArabicFieldName(field);
                        const oldValue = change.old || '(فارغ)';
                        const newValue = change.new || '(فارغ)';

                        // تنسيق مختلف للأحداث
                        if (field === 'tenant_name') {
                            if (!change.old) {
                                events.push(`إضافة مستأجر جديد: ${newValue}`);
                            } else {
                                events.push(`تغيير المستأجر: ${oldValue} ← ${newValue}`);
                            }
                        } else if (field === 'start_date') {
                            events.push(`تحديث تاريخ البداية: ${oldValue} ← ${newValue}`);
                        } else if (field === 'end_date') {
                            events.push(`تحديث تاريخ النهاية: ${oldValue} ← ${newValue}`);
                        } else if (field === 'rent_value') {
                            events.push(`تعديل قيمة الإيجار: ${oldValue} ريال ← ${newValue} ريال`);
                        } else if (field === 'contract_status') {
                            events.push(`تغيير حالة العقد: ${oldValue} ← ${newValue}`);
                        } else if (field === 'unit_status') {
                            events.push(`تغيير حالة الوحدة: ${oldValue} ← ${newValue}`);
                        } else if (field === 'phone_number') {
                            events.push(`تحديث رقم الهاتف: ${oldValue} ← ${newValue}`);
                        } else if (field === 'email') {
                            events.push(`تحديث البريد الإلكتروني: ${oldValue} ← ${newValue}`);
                        } else if (field === 'address') {
                            events.push(`تحديث العنوان: ${oldValue} ← ${newValue}`);
                        } else {
                            events.push(`تحديث ${fieldName}: ${oldValue} ← ${newValue}`);
                        }
                    }
                });
            }
        } catch (e) {
            // في حالة فشل التحليل
            events.push(`تحديث البيانات: ${log.changes}`);
        }
    }

    // إضافة أحداث بناءً على نوع العملية
    const operationType = log.operationType || log.operation_type || '';
    const unitNumber = log.unitNumber || log.unit_number || '';
    const tenantName = log.tenantName || log.tenant_name || '';

    if (operationType.includes('عميل جديد') || operationType.includes('مستأجر جديد')) {
        if (!events.some(event => event.includes('إضافة مستأجر'))) {
            events.push(`إضافة مستأجر جديد للوحدة ${unitNumber}`);
        }
        if (tenantName && tenantName !== 'غير محدد') {
            events.push(`ربط العقد بالمستأجر: ${tenantName}`);
        }
    } else if (operationType.includes('إفراغ')) {
        events.push(`إفراغ الوحدة ${unitNumber}`);
        if (tenantName && tenantName !== 'غير محدد') {
            events.push(`إنهاء عقد المستأجر: ${tenantName}`);
        }
    } else if (operationType.includes('تحرير') || operationType.includes('تعديل')) {
        if (events.length === 0) {
            events.push(`تعديل بيانات الوحدة ${unitNumber}`);
        }
    } else if (operationType.includes('تجديد')) {
        events.push(`تجديد عقد الوحدة ${unitNumber}`);
    } else if (operationType.includes('نقل')) {
        events.push(`نقل بيانات الوحدة ${unitNumber}`);
    }

    // إضافة وصف إضافي إذا كان متوفراً
    if (log.description || log.operationDescription) {
        const description = log.description || log.operationDescription;
        if (!events.some(event => event.includes(description))) {
            events.push(`تفاصيل إضافية: ${description}`);
        }
    }

    return events.filter(event => event && event.trim());
}

// ترجمة أسماء الحقول للعربية
function getArabicFieldName(fieldName) {
    const fieldTranslations = {
        'tenant_name': 'المستأجر',
        'tenantName': 'المستأجر',
        'start_date': 'تاريخ البداية',
        'startDate': 'تاريخ البداية',
        'end_date': 'تاريخ النهاية',
        'endDate': 'تاريخ النهاية',
        'rent_value': 'قيمة الإيجار',
        'rentValue': 'قيمة الإيجار',
        'phone_number': 'رقم الهاتف',
        'phoneNumber': 'رقم الهاتف',
        'contract_type': 'نوع العقد',
        'contractType': 'نوع العقد',
        'unit_status': 'حالة الوحدة',
        'unitStatus': 'حالة الوحدة',
        'contract_status': 'حالة العقد',
        'contractStatus': 'حالة العقد'
    };

    return fieldTranslations[fieldName] || fieldName;
}

// إنشاء جدول HTML لسجلات التتبع مع التجميع
function createTrackingLogsTable(logs) {
    return createTrackingLogsTableWithToggle(logs);
}

// متغير لحفظ حالة التجميع
let isConsolidationEnabled = true;
let originalTrackingLogs = [];

// تبديل بين العرض المدموج والعرض الأصلي
function toggleConsolidation() {
    isConsolidationEnabled = !isConsolidationEnabled;

    const currentLogs = window.currentTrackingLogs || [];

    // إعادة إنشاء الجدول
    const tableHtml = createTrackingLogsTableWithToggle(currentLogs);
    const container = document.getElementById('trackingLogsContainer');
    if (container) {
        container.innerHTML = tableHtml;

        // إعادة تهيئة نظام الفلترة
        setTimeout(() => {
            if (window.tableFilterSystem) {
                const table = document.getElementById('trackingLogsTable');
                if (table) {
                    window.tableFilterSystem.initializeTable('trackingLogsTable', currentLogs);
                }
            }
        }, 300);
    }

    const mode = isConsolidationEnabled ? 'المدموج' : 'الأصلي';
    showToast(`تم التبديل إلى العرض ${mode}`, 'info');
}

// إنشاء جدول مع إمكانية التبديل
function createTrackingLogsTableWithToggle(logs) {
    if (!logs || logs.length === 0) {
        return '<div class="no-logs">لا توجد سجلات تتبع</div>';
    }

    let displayLogs;
    let counterText;

    if (isConsolidationEnabled) {
        displayLogs = consolidateTrackingLogs(logs);
        counterText = `عرض ${displayLogs.length} سجل مدموج من أصل ${logs.length} سجل أصلي`;
    } else {
        displayLogs = logs.map(log => ({
            date: log.date || formatDate(log.timestamp),
            time: log.time || formatTime(log.timestamp),
            operationType: log.operationType || log.operation_type || 'غير محدد',
            tenantName: log.tenantName || log.tenant_name || 'غير محدد',
            contractNumber: log.contractNumber || log.contract_number || 'غير محدد',
            user: log.user || log.user_name || 'غير محدد',
            propertyName: log.propertyName || log.property_name || 'غير محدد',
            unitNumbers: log.unitNumber || log.unit_number || 'غير محدد',
            city: log.city || 'غير محدد',
            changes: extractChangesFromLog(log).map(change => `✔ ${change}`).join('\n') || 'لا توجد تغييرات',
            events: extractEventsFromLog(log).map(event => `• ${event}`).join('\n') || 'لا توجد أحداث',
            recordCount: 1
        }));
        counterText = `عرض ${displayLogs.length} سجل أصلي`;
    }

    return `
        <div class="tracking-table-container">
            <div class="table-controls">
                <div class="table-counter" id="trackingTableCounter" data-table-counter="trackingLogsTable">
                    ${counterText}
                </div>
                <div class="table-actions">
                    <button class="clear-filters-btn" onclick="clearTrackingTableFilters()">
                        <i class="fas fa-eraser"></i> مسح الفلاتر
                    </button>
                    <button class="clear-search-btn" onclick="clearTrackingSearch()">
                        <i class="fas fa-times"></i> مسح البحث
                    </button>
                    <button class="toggle-consolidation-btn ${isConsolidationEnabled ? 'active' : ''}" onclick="toggleConsolidation()" title="تبديل بين العرض المدموج والعرض الأصلي">
                        <i class="fas fa-layer-group"></i> ${isConsolidationEnabled ? 'عرض أصلي' : 'عرض مدموج'}
                    </button>
                </div>
            </div>

            <div class="table-wrapper">
                <table class="tracking-logs-table" id="trackingLogsTable">
                    <thead>
                        <tr>
                            <th>التاريخ</th>
                            <th>الوقت</th>
                            <th>نوع العملية</th>
                            <th>المستأجر</th>
                            <th>رقم العقد</th>
                            <th>المستخدم</th>
                            <th>العقار</th>
                            <th>رقم الوحدة</th>
                            <th>المدينة</th>
                            <th>الحدث</th>
                            <th>التغيرات</th>
                            ${isConsolidationEnabled ? '<th>عدد السجلات</th>' : ''}
                        </tr>
                    </thead>
                    <tbody>
                        ${displayLogs.map(log => `
                            <tr>
                                <td>${log.date}</td>
                                <td>${log.time}</td>
                                <td>${log.operationType}</td>
                                <td>${log.tenantName}</td>
                                <td>${log.contractNumber}</td>
                                <td>${log.user}</td>
                                <td>${log.propertyName}</td>
                                <td class="unit-numbers-cell">${log.unitNumbers}</td>
                                <td>${log.city}</td>
                                <td class="events-cell">${log.events}</td>
                                <td class="changes-cell">${log.changes}</td>
                                ${isConsolidationEnabled ? `<td class="record-count-cell">${log.recordCount}</td>` : ''}
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            </div>
        </div>
    `;
}

// إضافة عداد النتائج
function addTrackingTableCounter(totalCount) {
    const counterHtml = `
        <style>
            .tracking-table-container {
                background: white;
                border-radius: 10px;
                overflow: hidden;
                box-shadow: 0 4px 15px rgba(0,0,0,0.1);
                margin: 20px 0;
            }

            .table-controls {
                background: #f8f9fa;
                padding: 15px 20px;
                border-bottom: 1px solid #dee2e6;
                display: flex;
                justify-content: space-between;
                align-items: center;
                flex-wrap: wrap;
                gap: 10px;
            }

            .table-counter {
                font-weight: 600;
                color: #495057;
                font-size: 14px;
            }

            .table-actions {
                display: flex;
                gap: 10px;
                align-items: center;
            }

            .clear-filters-btn, .clear-search-btn {
                border: none;
                padding: 8px 15px;
                border-radius: 5px;
                cursor: pointer;
                font-size: 13px;
                transition: all 0.3s ease;
                display: flex;
                align-items: center;
                gap: 5px;
                font-weight: 500;
            }

            .clear-filters-btn {
                background: #dc3545;
                color: white;
            }

            .clear-filters-btn:hover {
                background: #c82333;
                transform: translateY(-1px);
            }

            .clear-search-btn {
                background: #6c757d;
                color: white;
            }

            .clear-search-btn:hover {
                background: #5a6268;
                transform: translateY(-1px);
            }

            .table-wrapper {
                overflow-x: auto;
                max-height: 600px;
                overflow-y: auto;
            }

            .tracking-logs-table {
                width: 100%;
                border-collapse: collapse;
                font-size: 13px;
                min-width: 800px;
            }

            .tracking-logs-table thead {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                position: sticky;
                top: 0;
                z-index: 10;
            }

            .tracking-logs-table th {
                padding: 12px 8px;
                text-align: right;
                font-weight: 600;
                border-bottom: 2px solid #dee2e6;
                white-space: nowrap;
            }

            .tracking-logs-table td {
                padding: 10px 8px;
                border-bottom: 1px solid #dee2e6;
                text-align: right;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
                max-width: 150px;
            }

            .tracking-logs-table tbody tr:hover {
                background: #f8f9fa;
            }

            .tracking-logs-table tbody tr:nth-child(even) {
                background: #f9f9f9;
            }

            .tracking-logs-table tbody tr:nth-child(even):hover {
                background: #f1f1f1;
            }

            /* تحسينات البحث السلس */
            input[type="text"], input[type="search"] {
                transition: all 0.3s ease;
                border: 2px solid #ced4da;
            }

            input[type="text"]:focus, input[type="search"]:focus {
                outline: none;
                border-color: #007bff;
                box-shadow: 0 0 0 0.2rem rgba(0,123,255,0.25);
            }

            /* مؤشرات البحث */
            .search-indicator {
                position: relative;
            }

            .search-indicator::after {
                content: '';
                position: absolute;
                right: 10px;
                top: 50%;
                transform: translateY(-50%);
                width: 12px;
                height: 12px;
                border: 2px solid #007bff;
                border-top: 2px solid transparent;
                border-radius: 50%;
                animation: spin 1s linear infinite;
                opacity: 0;
                transition: opacity 0.3s ease;
            }

            .search-indicator.searching::after {
                opacity: 1;
            }

            @keyframes spin {
                0% { transform: translateY(-50%) rotate(0deg); }
                100% { transform: translateY(-50%) rotate(360deg); }
            }

            /* أنماط أزرار التبديل */
            .view-toggle-group {
                display: flex;
                gap: 5px;
                background: #f8f9fa;
                border-radius: 8px;
                padding: 4px;
            }

            .view-toggle-btn {
                padding: 8px 15px;
                border: none;
                background: transparent;
                color: #6c757d;
                border-radius: 6px;
                cursor: pointer;
                font-size: 13px;
                font-weight: 500;
                transition: all 0.3s ease;
                display: flex;
                align-items: center;
                gap: 5px;
            }

            .view-toggle-btn:hover {
                background: #e9ecef;
                color: #495057;
            }

            .view-toggle-btn.active {
                background: #007bff;
                color: white;
                box-shadow: 0 2px 4px rgba(0,123,255,0.3);
            }

            .action-buttons-group {
                display: flex;
                gap: 10px;
                align-items: center;
            }

            .tracking-actions {
                display: flex;
                justify-content: space-between;
                align-items: center;
                flex-wrap: wrap;
                gap: 15px;
                margin-bottom: 20px;
                padding: 15px 20px;
                background: #f8f9fa;
                border-radius: 10px;
                border: 1px solid #dee2e6;
            }

            @media (max-width: 768px) {
                .table-controls {
                    flex-direction: column;
                    align-items: stretch;
                }

                .table-counter {
                    text-align: center;
                }

                .tracking-logs-table {
                    font-size: 11px;
                }

                .tracking-logs-table th,
                .tracking-logs-table td {
                    padding: 6px 4px;
                    max-width: 100px;
                }

                .tracking-actions {
                    flex-direction: column;
                    align-items: stretch;
                }

                .view-toggle-group,
                .action-buttons-group {
                    justify-content: center;
                }

                .action-buttons-group {
                    flex-wrap: wrap;
                }

                .table-actions {
                    flex-direction: column;
                    gap: 8px;
                }

                .clear-filters-btn, .clear-search-btn {
                    width: 100%;
                    justify-content: center;
                }
            }
        </style>
    `;

    // إضافة الأنماط إذا لم تكن موجودة
    if (!document.getElementById('tracking-table-styles')) {
        const styleElement = document.createElement('div');
        styleElement.id = 'tracking-table-styles';
        styleElement.innerHTML = counterHtml;
        document.head.appendChild(styleElement);
    }
}

// متغير لحفظ مؤقت البحث
let searchTimeout = null;

// معالج البحث المحسن مع debouncing وحماية شاملة
function handleTrackingSearch(event) {
    // منع إعادة تحميل الصفحة إذا كان الحدث من نموذج
    if (event && event.preventDefault) {
        event.preventDefault();
    }
    if (event && event.stopPropagation) {
        event.stopPropagation();
    }

    const searchInput = document.getElementById('trackingSearch');
    if (!searchInput) {
        console.warn('⚠️ لم يتم العثور على حقل البحث');
        // محاولة إصلاح حقل البحث
        setTimeout(() => {
            fixMissingSearchField();
        }, 100);
        return false;
    }

    // تأكيد التنسيقات في كل مرة
    forceSearchFieldStyling();

    // حفظ قيمة البحث فوراً
    const searchValue = searchInput.value;
    preserveSearchState();

    // إلغاء البحث السابق إذا كان موجوداً
    if (searchTimeout) {
        clearTimeout(searchTimeout);
    }

    // إضافة مؤشر بصري للبحث
    searchInput.classList.add('search-indicator', 'searching');

    // تأخير البحث لـ 300ms بعد توقف الكتابة
    searchTimeout = setTimeout(() => {
        try {
            const currentSearchInput = document.getElementById('trackingSearch');
            if (!currentSearchInput) {
                console.error('❌ حقل البحث اختفى أثناء البحث!');
                fixMissingSearchField();
                return;
            }

            const searchTerm = currentSearchInput.value.trim();
            console.log(`🔍 تنفيذ البحث: "${searchTerm}"`);

            // تنفيذ البحث الفعلي بدون إعادة تحميل الصفحة
            executeTrackingSearch(searchTerm);

            // التحقق من وجود حقل البحث بعد البحث
            setTimeout(() => {
                const searchInputAfterSearch = document.getElementById('trackingSearch');
                if (searchInputAfterSearch) {
                    searchInputAfterSearch.classList.remove('searching');

                    // إضافة مؤشر النجاح مؤقتاً
                    if (searchTerm) {
                        searchInputAfterSearch.style.borderColor = '#28a745';
                        setTimeout(() => {
                            if (searchInputAfterSearch) {
                                searchInputAfterSearch.style.borderColor = '';
                            }
                        }, 1000);
                    }
                } else {
                    console.error('❌ حقل البحث اختفى بعد البحث!');
                    fixMissingSearchField();
                }
            }, 100);

        } catch (error) {
            console.error('❌ خطأ في البحث:', error);
            const currentSearchInput = document.getElementById('trackingSearch');
            if (currentSearchInput) {
                currentSearchInput.classList.remove('searching');
                currentSearchInput.style.borderColor = '#dc3545';
                setTimeout(() => {
                    if (currentSearchInput) {
                        currentSearchInput.style.borderColor = '';
                    }
                }, 2000);
            }
        }
    }, 300); // تأخير 300ms

    return false; // منع إرسال النموذج
}

// تنفيذ البحث الفعلي في سجلات التتبع
function executeTrackingSearch(searchTerm) {
    try {
        console.log(`🔍 تنفيذ البحث: "${searchTerm}"`);

        // التأكد من وجود حقل البحث قبل المتابعة
        const searchInput = document.getElementById('trackingSearch');
        if (!searchInput) {
            console.warn('⚠️ حقل البحث غير موجود، إيقاف البحث');
            return;
        }

        // تحديد نوع العرض الحالي
        const tableContainer = document.getElementById('trackingLogsTable');
        const isTableView = tableContainer && tableContainer.style.display !== 'none';

        if (isTableView) {
            // تطبيق البحث على الجدول
            console.log('📊 تطبيق البحث على عرض الجدول');
            applySearchToTable(searchTerm);
        } else {
            // تطبيق البحث على البطاقات (الطريقة الأصلية)
            console.log('📋 تطبيق البحث على عرض البطاقات');
            filterTrackingLogs();
        }

        // التأكد من أن حقل البحث ما زال موجوداً بعد البحث
        setTimeout(() => {
            const searchInputAfter = document.getElementById('trackingSearch');
            if (!searchInputAfter) {
                console.error('❌ حقل البحث اختفى بعد البحث!');
                showToast('حدث خطأ في حقل البحث', 'error');
            }
        }, 100);

    } catch (error) {
        console.error('❌ خطأ في تنفيذ البحث:', error);
        showToast('حدث خطأ أثناء البحث', 'error');
    }
}

// تطبيق البحث على الجدول
function applySearchToTable(searchTerm) {
    console.log(`🔍 تطبيق البحث "${searchTerm}" على الجدول...`);

    if (window.tableFilterSystem) {
        if (searchTerm && searchTerm.trim() !== '') {
            window.tableFilterSystem.applySearch('trackingLogsTable', searchTerm.trim());
        } else {
            window.tableFilterSystem.clearSearch('trackingLogsTable');
        }
    } else {
        console.warn('⚠️ نظام الفلترة غير متوفر');
    }
}

// تحديث عداد جدول التتبع
function updateTrackingTableCounter() {
    const table = document.getElementById('trackingLogsTable');
    const counter = document.getElementById('trackingTableCounter');

    if (table && counter) {
        const totalRows = table.querySelectorAll('tbody tr').length;
        const visibleRows = table.querySelectorAll('tbody tr:not([style*="display: none"])').length;

        counter.textContent = `عرض ${visibleRows} من أصل ${totalRows} سجل`;

        // تحديث العداد كل ثانية للتأكد من دقة البيانات
        setTimeout(updateTrackingTableCounter, 1000);
    }
}

// مسح فلاتر جدول التتبع
function clearTrackingTableFilters() {
    if (window.tableFilterSystem) {
        window.tableFilterSystem.clearAllFilters('trackingLogsTable');
        showToast('تم مسح جميع فلاتر الجدول', 'success');

        // تحديث العداد بعد مسح الفلاتر
        setTimeout(updateTrackingTableCounter, 100);
    }
}

// مسح البحث في سجلات التتبع
function clearTrackingSearch() {
    const searchInput = document.getElementById('trackingSearch');
    if (searchInput) {
        searchInput.value = '';

        // تطبيق البحث الفارغ
        handleTrackingSearch();

        showToast('تم مسح البحث', 'info');
    }
}

// حفظ حالة حقل البحث قبل إعادة التحميل
function preserveSearchState() {
    const searchInput = document.getElementById('trackingSearch');
    if (searchInput && searchInput.value) {
        sessionStorage.setItem('trackingSearchValue', searchInput.value);
    }
}

// استعادة حالة حقل البحث بعد إعادة التحميل
function restoreSearchState() {
    const savedValue = sessionStorage.getItem('trackingSearchValue');
    if (savedValue) {
        const searchInput = document.getElementById('trackingSearch');
        if (searchInput) {
            searchInput.value = savedValue;
            sessionStorage.removeItem('trackingSearchValue');
        }
    }
}

// إصلاح حقل البحث إذا اختفى
function fixMissingSearchField() {
    const searchInput = document.getElementById('trackingSearch');
    if (!searchInput) {
        console.log('🔧 محاولة إصلاح حقل البحث المفقود...');

        // البحث عن حاوية الفلاتر
        const filtersContainer = document.querySelector('.tracking-filters');
        if (filtersContainer) {
            // البحث عن مجموعة البحث
            const searchGroup = Array.from(filtersContainer.querySelectorAll('.filter-group'))
                .find(group => group.querySelector('label')?.textContent?.includes('البحث'));

            if (searchGroup && !searchGroup.querySelector('#trackingSearch')) {
                // إعادة إنشاء حقل البحث
                const searchHTML = `
                    <input type="text" id="trackingSearch" placeholder="بحث في الوحدات، العقارات، أو المستأجرين (يشمل الوحدات المرتبطة)..."
                           oninput="return handleTrackingSearch(event)"
                           onkeydown="if(event.key==='Enter') { event.preventDefault(); return false; }"
                           onsubmit="return false"
                           autocomplete="off">
                `;
                searchGroup.insertAdjacentHTML('beforeend', searchHTML);

                // استعادة القيمة المحفوظة
                restoreSearchState();

                // تطبيق التنسيقات بقوة
                forceSearchFieldStyling();

                // إعداد مراقب DOM للحقل الجديد
                setupSearchFieldObserver();

                console.log('✅ تم إصلاح حقل البحث');
                showToast('تم إصلاح حقل البحث', 'success');
                return true;
            }
        }
    } else {
        // إذا كان الحقل موجوداً، تأكد من التنسيقات
        forceSearchFieldStyling();
    }
    return false;
}

// تطبيق التنسيقات بقوة على حقل البحث
function forceSearchFieldStyling() {
    const searchInput = document.getElementById('trackingSearch');
    if (!searchInput) return;

    console.log('🎨 تطبيق التنسيقات بقوة على حقل البحث...');

    // تطبيق الأنماط مباشرة عبر JavaScript
    const styles = {
        'width': '100%',
        'padding': '12px 16px',
        'border': '2px solid #007bff',
        'border-radius': '8px',
        'font-size': '16px',
        'font-family': "'Cairo', 'Tajawal', sans-serif",
        'background': '#ffffff',
        'background-color': '#ffffff',
        'color': '#212529',
        'direction': 'rtl',
        'text-align': 'right',
        'outline': 'none',
        'box-shadow': '0 2px 4px rgba(0, 123, 255, 0.15)',
        'font-weight': '500',
        'line-height': '1.5',
        'transition': 'all 0.3s ease',
        'opacity': '1',
        'visibility': 'visible',
        'display': 'block',
        'box-sizing': 'border-box'
    };

    // تطبيق كل نمط
    Object.entries(styles).forEach(([property, value]) => {
        searchInput.style.setProperty(property, value, 'important');
    });

    // تطبيق أنماط خاصة للنص
    searchInput.style.setProperty('-webkit-text-fill-color', '#212529', 'important');
    searchInput.style.setProperty('text-rendering', 'optimizeLegibility', 'important');
    searchInput.style.setProperty('-webkit-font-smoothing', 'antialiased', 'important');

    // إضافة معالجات الأحداث للحفاظ على التنسيقات
    searchInput.addEventListener('focus', function() {
        this.style.setProperty('color', '#212529', 'important');
        this.style.setProperty('background', '#ffffff', 'important');
        this.style.setProperty('border-color', '#0056b3', 'important');
        this.style.setProperty('box-shadow', '0 0 0 3px rgba(0, 123, 255, 0.25), 0 4px 8px rgba(0, 123, 255, 0.2)', 'important');
    });

    searchInput.addEventListener('blur', function() {
        this.style.setProperty('color', '#212529', 'important');
        this.style.setProperty('background', '#ffffff', 'important');
        this.style.setProperty('border-color', '#007bff', 'important');
        this.style.setProperty('box-shadow', '0 2px 4px rgba(0, 123, 255, 0.15)', 'important');
    });

    searchInput.addEventListener('input', function() {
        this.style.setProperty('color', '#212529', 'important');
        this.style.setProperty('background', '#ffffff', 'important');
    });

    console.log('✅ تم تطبيق التنسيقات بقوة');
}

// إعداد مراقب DOM لحقل البحث
function setupSearchFieldObserver() {
    const searchInput = document.getElementById('trackingSearch');
    if (!searchInput) return;

    // إنشاء مراقب DOM
    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.type === 'childList') {
                // التحقق من إزالة حقل البحث
                mutation.removedNodes.forEach((node) => {
                    if (node.nodeType === Node.ELEMENT_NODE) {
                        const removedSearchInput = node.querySelector('#trackingSearch') ||
                                                 (node.id === 'trackingSearch' ? node : null);
                        if (removedSearchInput) {
                            console.warn('⚠️ تم اكتشاف إزالة حقل البحث!');
                            setTimeout(() => {
                                fixMissingSearchField();
                            }, 50);
                        }
                    }
                });
            }
        });
    });

    // مراقبة التغييرات في الحاوية الرئيسية
    const trackingContainer = document.querySelector('.tracking-main-view') || document.body;
    observer.observe(trackingContainer, {
        childList: true,
        subtree: true
    });

    console.log('👁️ تم إعداد مراقب DOM لحقل البحث');
}

// تبديل عرض سجلات التتبع بين الجدول والبطاقات
function toggleTrackingView(viewType) {
    console.log(`🔄 تبديل عرض سجلات التتبع إلى: ${viewType}`);

    const container = document.getElementById('trackingLogsContainer');
    if (!container) return;

    // تحديث أزرار التبديل
    const cardsBtn = document.getElementById('trackingCardsBtn');
    const tableBtn = document.getElementById('trackingTableBtn');

    if (cardsBtn && tableBtn) {
        cardsBtn.classList.remove('active');
        tableBtn.classList.remove('active');

        if (viewType === 'cards') {
            cardsBtn.classList.add('active');
        } else {
            tableBtn.classList.add('active');
        }
    }

    // الحصول على البيانات الحالية
    const currentLogs = window.currentTrackingLogs || [];

    if (viewType === 'table') {
        // عرض الجدول مع الفلترة
        console.log('🔄 تبديل إلى عرض الجدول...');
        initializeTrackingTableFilter(currentLogs);

        // تطبيق البحث الحالي على الجدول إذا وجد
        const searchInput = document.getElementById('trackingSearch');
        if (searchInput && searchInput.value.trim() !== '') {
            console.log('🔍 تطبيق البحث الحالي على الجدول...');
            setTimeout(() => {
                applySearchToTable(searchInput.value.trim());
            }, 500);
        }
    } else {
        // عرض البطاقات (العرض الأصلي)
        console.log('🔄 تبديل إلى عرض البطاقات...');
        container.innerHTML = renderTrackingLogs(currentLogs);
    }

    // حفظ تفضيل العرض
    localStorage.setItem('trackingViewPreference', viewType);

    showToast(`تم التبديل إلى عرض ${viewType === 'table' ? 'الجدول' : 'البطاقات'}`, 'info');
}

// الحصول على السجلات الظاهرة فقط (المفلترة)
function getVisibleTrackingLogs() {
    console.log('🔍 جمع السجلات الظاهرة للطباعة...');

    const table = document.getElementById('trackingLogsTable');
    if (!table) {
        console.warn('⚠️ لم يتم العثور على جدول سجلات التتبع');
        // إذا لم يكن هناك جدول، استخدم جميع السجلات الحالية
        return window.currentTrackingLogs || [];
    }

    const visibleRows = table.querySelectorAll('tbody tr:not([style*="display: none"])');
    const visibleLogs = [];

    visibleRows.forEach((row, index) => {
        const cells = row.querySelectorAll('td');
        if (cells.length >= 9) {
            // استخراج البيانات من خلايا الجدول
            const log = {
                date: cells[0].textContent.trim(),
                time: cells[1].textContent.trim(),
                operationType: cells[2].textContent.trim(),
                tenantName: cells[3].textContent.trim(),
                contractNumber: cells[4].textContent.trim(),
                user: cells[5].textContent.trim(),
                propertyName: cells[6].textContent.trim(),
                unitNumber: cells[7].textContent.trim(),
                city: cells[8].textContent.trim()
            };

            visibleLogs.push(log);
        }
    });

    console.log(`📋 تم جمع ${visibleLogs.length} سجل ظاهر من أصل ${table.querySelectorAll('tbody tr').length} سجل`);
    return visibleLogs;
}

// تنسيق التاريخ - ميلادي بصيغة dd/mm/yyyy
function formatDate(timestamp) {
    if (!timestamp) return 'غير محدد';

    try {
        const date = new Date(timestamp);
        if (isNaN(date.getTime())) return 'غير محدد';

        // تنسيق ميلادي بصيغة dd/mm/yyyy
        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const year = date.getFullYear();

        return `${day}/${month}/${year}`;
    } catch (error) {
        console.warn('خطأ في تنسيق التاريخ:', error);
        return 'غير محدد';
    }
}

// تنسيق الوقت - بصيغة 24 ساعة
function formatTime(timestamp) {
    if (!timestamp) return 'غير محدد';

    try {
        const date = new Date(timestamp);
        if (isNaN(date.getTime())) return 'غير محدد';

        // تنسيق الوقت بصيغة HH:MM
        const hours = date.getHours().toString().padStart(2, '0');
        const minutes = date.getMinutes().toString().padStart(2, '0');

        return `${hours}:${minutes}`;
    } catch (error) {
        console.warn('خطأ في تنسيق الوقت:', error);
        return 'غير محدد';
    }
}

// عرض سجلات التتبع
function renderTrackingLogs(logs) {
    if (logs.length === 0) {
        return '<div class="no-logs">لا توجد سجلات تتبع</div>';
    }

    return logs.map(log => `
        <div class="change-log-entry">
            <div class="change-log-header">
                <div class="change-log-operation">${log.operationType}</div>
                <div class="change-log-timestamp">
                    <div class="timestamp-main">
                        <strong>${log.dayName || getDayName(new Date(log.timestamp))}</strong>
                    </div>
                    <div class="timestamp-dates">
                        <div class="gregorian-date">
                            <i class="fas fa-calendar"></i>
                            ${log.date} - ${log.time}
                        </div>
                        <div class="hijri-date">
                            <i class="fas fa-moon"></i>
                            ${log.hijriDate || getHijriDate(new Date(log.timestamp))}
                        </div>
                    </div>
                    <div class="timestamp-user">
                        <i class="fas fa-user"></i>
                        ${log.user}
                    </div>
                </div>
            </div>

            <div class="change-log-details">
                <div class="change-detail-item">
                    <div class="change-detail-label">رقم الوحدة:</div>
                    <div class="change-detail-value">${log.unitNumber}</div>
                </div>
                <div class="change-detail-item">
                    <div class="change-detail-label">اسم العقار:</div>
                    <div class="change-detail-value">${log.propertyName}</div>
                </div>
                <div class="change-detail-item">
                    <div class="change-detail-label">المدينة:</div>
                    <div class="change-detail-value">${log.city}</div>
                </div>
                ${log.tenantName ? `
                <div class="change-detail-item">
                    <div class="change-detail-label">المستأجر:</div>
                    <div class="change-detail-value">${log.tenantName}</div>
                </div>` : ''}
                ${log.contractNumber ? `
                <div class="change-detail-item">
                    <div class="change-detail-label">رقم العقد:</div>
                    <div class="change-detail-value">${log.contractNumber}</div>
                </div>` : ''}

                ${renderChangeDetails(log)}

                ${log.sourceProperty && log.destinationProperty ? `
                <div class="change-detail-item">
                    <div class="change-detail-label">نقل من:</div>
                    <div class="change-detail-value">${log.sourceProperty} → ${log.destinationProperty}</div>
                </div>` : ''}

                ${log.reason ? `
                <div class="change-detail-item">
                    <div class="change-detail-label">السبب:</div>
                    <div class="change-detail-value">${log.reason}</div>
                </div>` : ''}
            </div>
        </div>
    `).join('');
}

// عرض تفاصيل التغييرات
function renderChangeDetails(log) {
    if (!log.changes || Object.keys(log.changes).length === 0) {
        return '';
    }

    return Object.entries(log.changes).map(([field, change]) => {
        // التحقق من صحة بيانات التغيير
        if (!change || typeof change !== 'object') {
            console.warn('⚠️ بيانات تغيير غير صحيحة:', field, change);
            return '';
        }

        const fieldName = change.fieldName || field || 'حقل غير محدد';
        const oldValue = change.old || 'فارغ';
        const newValue = change.new || 'فارغ';

        return `
            <div class="change-detail-item">
                <div class="change-detail-label">${fieldName}:</div>
                <div class="change-detail-value">
                    <span class="change-detail-old">${oldValue}</span>
                    →
                    <span class="change-detail-new">${newValue}</span>
                </div>
            </div>
        `;
    }).filter(item => item !== '').join('');
}

// التحقق من ارتباط الوحدة بمصطلح البحث
function isUnitLinkedToSearchTerm(unitNumber, propertyName, contractNumber, searchTerm) {
    try {
        // إذا لم تكن هناك بيانات أو عقد، لا يمكن البحث في الوحدات المرتبطة
        if (!properties || !contractNumber || contractNumber.trim() === '') {
            return false;
        }

        // البحث عن جميع الوحدات المرتبطة بنفس العقد
        const linkedUnits = properties.filter(p =>
            p['رقم العقد'] === contractNumber &&
            p['اسم العقار'] === propertyName
        );

        // التحقق من وجود مصطلح البحث في أي من الوحدات المرتبطة
        return linkedUnits.some(unit => {
            const unitFields = [
                unit['رقم  الوحدة '] || '',
                unit['اسم المستأجر'] || '',
                unit['رقم الجوال'] || '',
                unit['رقم الجوال الاضافي'] || '',
                unit['المساحة'] || '',
                unit['ملاحظات الوحدة'] || ''
            ];

            return unitFields.some(field =>
                field.toString().toLowerCase().includes(searchTerm.toLowerCase())
            );
        });
    } catch (error) {
        console.warn('⚠️ خطأ في البحث عن الوحدات المرتبطة:', error);
        return false;
    }
}

// متغير لحفظ السجلات المحملة مؤقتاً
let cachedTrackingLogs = null;
let lastCacheTime = 0;
const CACHE_DURATION = 30000; // 30 ثانية

// مسح كاش سجلات التتبع
function clearTrackingLogsCache() {
    cachedTrackingLogs = null;
    lastCacheTime = 0;
    console.log('🗑️ تم مسح كاش سجلات التتبع');
}

// فلترة سجلات التتبع المحسنة والمصححة
async function filterTrackingLogs() {
    console.log('🔍 بدء فلترة سجلات التتبع...');

    // تشخيص حالة حقل البحث قبل الفلترة
    const searchInputBefore = document.getElementById('trackingSearch');
    console.log('🔍 حالة حقل البحث قبل الفلترة:', {
        exists: !!searchInputBefore,
        value: searchInputBefore?.value || 'غير موجود',
        visible: searchInputBefore ? window.getComputedStyle(searchInputBefore).display !== 'none' : false
    });

    const dateFilter = document.getElementById('trackingDateFilter')?.value;
    const monthFilter = document.getElementById('trackingMonthFilter')?.value;
    const operationType = document.getElementById('trackingOperationType')?.value;
    const searchTerm = document.getElementById('trackingSearch')?.value?.toLowerCase() || '';
    const dataEditFilter = document.getElementById('trackingDataEditFilter')?.value || 'all';

    console.log('📋 معايير الفلترة:', { dateFilter, monthFilter, operationType, searchTerm, dataEditFilter });

    // استخدام الكاش إذا كان متوفراً وحديثاً
    let uniqueLogs;
    const currentTime = Date.now();

    if (cachedTrackingLogs && (currentTime - lastCacheTime) < CACHE_DURATION) {
        console.log('📦 استخدام السجلات المحفوظة مؤقتاً');
        uniqueLogs = cachedTrackingLogs;
    } else {
        console.log('🔄 تحميل السجلات من قاعدة البيانات...');
        // تحميل جميع السجلات
        const cloudLogs = await loadChangeLogsFromSupabase(1000);
        const allLogs = [...cloudLogs, ...changeTrackingLogs];

        // إزالة المكررات
        uniqueLogs = allLogs.filter((log, index, self) =>
            index === self.findIndex(l => l.id === log.id)
        );

        // حفظ في الكاش
        cachedTrackingLogs = uniqueLogs;
        lastCacheTime = currentTime;
    }

    console.log(`📊 إجمالي السجلات قبل الفلترة: ${uniqueLogs.length}`);

    // تطبيق الفلاتر
    let filteredLogs = uniqueLogs.filter(log => {
        // التأكد من وجود timestamp صحيح
        if (!log.timestamp) {
            console.warn('⚠️ سجل بدون timestamp:', log.id);
            return false;
        }

        const logDate = new Date(log.timestamp);

        // فلتر التاريخ المحدد
        if (dateFilter) {
            const filterDate = new Date(dateFilter);
            const logDateString = logDate.toISOString().split('T')[0];
            const filterDateString = filterDate.toISOString().split('T')[0];

            if (logDateString !== filterDateString) {
                return false;
            }
        }

        // فلتر الشهر والسنة
        if (monthFilter) {
            const [filterYear, filterMonth] = monthFilter.split('-');
            const logYear = logDate.getFullYear();
            const logMonth = logDate.getMonth() + 1;

            if (logYear !== parseInt(filterYear) || logMonth !== parseInt(filterMonth)) {
                return false;
            }
        }

        // فلتر نوع العملية
        if (operationType && log.operationType !== operationType) {
            return false;
        }

        // فلتر البحث المحسن مع دعم الوحدات المرتبطة
        if (searchTerm) {
            const searchFields = [
                log.unitNumber || '',
                log.propertyName || '',
                log.city || '',
                log.contractNumber || '',
                log.tenantName || '',
                log.newTenant || '',
                log.previousTenant || '',
                log.user || ''
            ];

            // البحث العادي في الحقول
            let matchFound = searchFields.some(field =>
                field.toString().toLowerCase().includes(searchTerm)
            );

            // إذا لم يتم العثور على تطابق، ابحث في الوحدات المرتبطة
            if (!matchFound && log.unitNumber && log.propertyName && log.contractNumber) {
                matchFound = isUnitLinkedToSearchTerm(log.unitNumber, log.propertyName, log.contractNumber, searchTerm);
            }

            if (!matchFound) {
                return false;
            }
        }

        return true;
    });

    // تطبيق فلتر عمليات تعديل البيانات
    if (dataEditFilter !== 'all') {
        if (dataEditFilter === 'hide') {
            // إخفاء جميع عمليات تعديل البيانات
            filteredLogs = filteredLogs.filter(log =>
                log.operationType !== 'تحرير بيانات' &&
                log.operationType !== 'تعديل بيانات'
            );
        } else if (dataEditFilter === 'first_only') {
            // إظهار أول عملية تعديل فقط لكل وحدة
            const editOperationsMap = new Map();
            const nonEditLogs = [];

            filteredLogs.forEach(log => {
                if (log.operationType === 'تحرير بيانات' || log.operationType === 'تعديل بيانات') {
                    const unitKey = `${log.propertyName}_${log.unitNumber}`;
                    if (!editOperationsMap.has(unitKey)) {
                        editOperationsMap.set(unitKey, log);
                    }
                } else {
                    nonEditLogs.push(log);
                }
            });

            // دمج العمليات غير التحريرية مع أول عملية تحرير لكل وحدة
            filteredLogs = [...nonEditLogs, ...Array.from(editOperationsMap.values())];
        }
    }

    // ترتيب حسب التاريخ (الأحدث أولاً)
    filteredLogs.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

    console.log(`✅ تم العثور على ${filteredLogs.length} سجل بعد الفلترة`);

    // تحديث العرض - حقول البحث منفصلة عن النتائج
    const container = document.getElementById('trackingLogsContainer');
    if (container) {
        console.log('📦 تحديث محتوى النتائج...');

        // تحديث النتائج فقط - حقول البحث في مكان منفصل
        container.innerHTML = renderTrackingLogs(filteredLogs);

        // حفظ السجلات الحالية للاستخدام في الجدول
        window.currentTrackingLogs = filteredLogs;

        // تشخيص حالة حقل البحث بعد التحديث
        setTimeout(() => {
            const searchInputAfter = document.getElementById('trackingSearch');
            console.log('🔍 حالة حقل البحث بعد الفلترة:', {
                exists: !!searchInputAfter,
                value: searchInputAfter?.value || 'غير موجود',
                visible: searchInputAfter ? window.getComputedStyle(searchInputAfter).display !== 'none' : false,
                parent: searchInputAfter?.parentElement?.className || 'لا يوجد والد'
            });

            if (!searchInputAfter) {
                console.error('❌ حقل البحث اختفى بعد الفلترة!');

                // محاولة إصلاح حقل البحث
                const fixed = fixMissingSearchField();
                if (!fixed) {
                    showToast('حقل البحث اختفى - يرجى إعادة تحميل الصفحة', 'error');
                }
            }
        }, 50);
    }

    // تحديث إحصائيات الفلترة
    const resultsCount = filteredLogs.length;
    const totalCount = uniqueLogs.length;

    const statsElement = document.querySelector('.tracking-stats');
    if (statsElement) {
        if (resultsCount === totalCount) {
            statsElement.textContent = `إجمالي السجلات: ${totalCount}`;
        } else {
            statsElement.textContent = `عرض ${resultsCount} من أصل ${totalCount} سجل`;
        }
    }

    // إظهار رسالة إذا لم توجد نتائج
    if (resultsCount === 0 && (dateFilter || monthFilter || operationType || searchTerm)) {
        const container = document.getElementById('trackingLogsContainer');
        if (container) {
            container.innerHTML = `
                <div class="no-logs">
                    <i class="fas fa-search"></i>
                    <h3>لا توجد نتائج</h3>
                    <p>لم يتم العثور على سجلات تطابق معايير البحث المحددة</p>
                    <button onclick="clearTrackingFilters()" class="clear-filters-btn">
                        <i class="fas fa-times"></i> مسح الفلاتر
                    </button>
                </div>
            `;
        }
    }

    // إظهار/إخفاء زر الحالة التاريخية للوحدة
    const unitHistoryBtn = document.getElementById('unitHistoryBtn');
    if (unitHistoryBtn) {
        // إظهار الزر إذا كان هناك بحث عن رقم وحدة محدد
        const isUnitSearch = searchTerm && searchTerm.length >= 2 && filteredLogs.some(log =>
            log.unitNumber && log.unitNumber.toLowerCase().includes(searchTerm)
        );

        if (isUnitSearch) {
            unitHistoryBtn.style.display = 'inline-flex';
            // حفظ رقم الوحدة المبحوث عنها
            window.currentSearchedUnit = searchTerm;

            // تحديث نص الزر ليشمل رقم الوحدة
            const unitCount = filteredLogs.filter(log =>
                log.unitNumber && log.unitNumber.toLowerCase().includes(searchTerm)
            ).length;
            unitHistoryBtn.innerHTML = `
                <i class="fas fa-history"></i>
                الحالة التاريخية للوحدة (${unitCount} سجل)
            `;
        } else {
            unitHistoryBtn.style.display = 'none';
            window.currentSearchedUnit = null;
        }
    }

    console.log(`🔍 انتهت عملية الفلترة: ${resultsCount}/${totalCount} سجل`);
}

// مسح فلاتر التتبع المحسن
function clearTrackingFilters() {
    console.log('🧹 مسح جميع فلاتر التتبع...');

    // مسح جميع حقول الفلترة
    const dateFilter = document.getElementById('trackingDateFilter');
    const monthFilter = document.getElementById('trackingMonthFilter');
    const operationType = document.getElementById('trackingOperationType');
    const searchInput = document.getElementById('trackingSearch');
    const dataEditFilter = document.getElementById('trackingDataEditFilter');

    if (dateFilter) dateFilter.value = '';
    if (monthFilter) monthFilter.value = '';
    if (operationType) operationType.value = '';
    if (searchInput) searchInput.value = '';
    if (dataEditFilter) dataEditFilter.value = 'all';

    // إخفاء زر الحالة التاريخية للوحدة
    const unitHistoryBtn = document.getElementById('unitHistoryBtn');
    if (unitHistoryBtn) {
        unitHistoryBtn.style.display = 'none';
    }
    window.currentSearchedUnit = null;

    // إعادة تطبيق الفلتر لعرض جميع السجلات
    filterTrackingLogs();

    // إعادة تعيين إحصائيات العرض
    const statsElement = document.querySelector('.tracking-stats');
    if (statsElement) {
        // سيتم تحديثها في filterTrackingLogs()
    }

    console.log('✅ تم مسح جميع فلاتر التتبع وإعادة عرض جميع السجلات');
}

// ===== ميزة الحالة التاريخية للوحدة =====

// عرض الحالة التاريخية للوحدة في القسم الحالي
async function showUnitHistoryModal() {
    console.log('📋 عرض الحالة التاريخية للوحدة...');

    const searchTerm = window.currentSearchedUnit;
    if (!searchTerm) {
        showToast('يرجى البحث عن رقم وحدة أولاً', 'warning');
        return;
    }

    // تحميل جميع السجلات المتعلقة بالوحدة
    const cloudLogs = await loadChangeLogsFromSupabase(2000);
    const allLogs = [...cloudLogs, ...changeTrackingLogs];

    // إزالة المكررات وفلترة السجلات المتعلقة بالوحدة
    const uniqueLogs = allLogs.filter((log, index, self) =>
        index === self.findIndex(l => l.id === log.id)
    );

    // البحث عن جميع السجلات المتعلقة بالوحدة المحددة
    const unitLogs = uniqueLogs.filter(log =>
        log.unitNumber && log.unitNumber.toLowerCase().includes(searchTerm.toLowerCase())
    );

    if (unitLogs.length === 0) {
        showToast('لا توجد سجلات لهذه الوحدة', 'info');
        return;
    }

    // ترتيب السجلات حسب التاريخ (الأقدم أولاً للحالة التاريخية)
    unitLogs.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));

    // تجميع البيانات التاريخية
    const unitHistory = buildUnitHistory(unitLogs);

    // عرض البيانات في القسم الحالي
    displayUnitHistoryInSection(searchTerm, unitHistory, unitLogs);

    console.log('✅ تم عرض الحالة التاريخية للوحدة');
}

// عرض الحالة التاريخية للوحدة في القسم الحالي
function displayUnitHistoryInSection(unitNumber, unitHistory, unitLogs) {
    // العثور على منطقة عرض السجلات
    const logsContainer = document.getElementById('trackingLogsContainer');
    if (!logsContainer) {
        showToast('خطأ في العثور على منطقة العرض', 'error');
        return;
    }

    // إخفاء السجلات العادية وعرض الحالة التاريخية
    const originalContent = logsContainer.innerHTML;

    // حفظ المحتوى الأصلي للعودة إليه
    window.originalTrackingContent = originalContent;

    // إنشاء واجهة الحالة التاريخية
    const historyHtml = `
        <div class="unit-history-section">
            <!-- رأس القسم -->
            <div class="unit-history-header">
                <div class="header-content">
                    <button onclick="returnToTrackingLogs()" class="back-to-logs-btn">
                        <i class="fas fa-arrow-right"></i> العودة للسجلات
                    </button>
                    <div class="unit-title">
                        <h3><i class="fas fa-history"></i> الحالة التاريخية للوحدة</h3>
                        <p class="unit-number">رقم الوحدة: <strong>${unitNumber}</strong></p>
                    </div>
                    <div class="quick-actions">
                        <button onclick="exportCurrentUnitHistory()" class="quick-export-btn">
                            <i class="fas fa-download"></i> تصدير Excel
                        </button>
                        <button onclick="printCurrentUnitHistory()" class="quick-print-btn">
                            <i class="fas fa-print"></i> طباعة
                        </button>
                    </div>
                </div>

                <!-- إحصائيات سريعة -->
                <div class="unit-stats-bar">
                    <div class="stat-item">
                        <i class="fas fa-users"></i>
                        <span class="stat-number">${unitHistory.tenants.length}</span>
                        <span class="stat-label">مستأجر</span>
                    </div>
                    <div class="stat-item">
                        <i class="fas fa-list"></i>
                        <span class="stat-number">${unitHistory.operations.length}</span>
                        <span class="stat-label">عملية</span>
                    </div>
                    <div class="stat-item">
                        <i class="fas fa-calendar"></i>
                        <span class="stat-number">${getDateRange(unitLogs)}</span>
                        <span class="stat-label">الفترة الزمنية</span>
                    </div>
                </div>
            </div>

            <!-- محتوى الحالة التاريخية -->
            <div class="unit-history-content-inline">
                ${renderUnitHistoryInline(unitHistory)}
            </div>
        </div>
    `;

    // عرض المحتوى الجديد
    logsContainer.innerHTML = historyHtml;

    // حفظ البيانات للتصدير والطباعة
    window.currentUnitHistory = {
        unitNumber: unitNumber,
        history: unitHistory,
        logs: unitLogs
    };

    // تمرير سلس إلى أعلى القسم
    logsContainer.scrollIntoView({ behavior: 'smooth', block: 'start' });

    // إظهار رسالة ترحيبية
    showToast(`تم عرض الحالة التاريخية للوحدة ${unitNumber} بنجاح`, 'success');
}

// العودة إلى السجلات العادية
function returnToTrackingLogs() {
    const logsContainer = document.getElementById('trackingLogsContainer');
    if (logsContainer && window.originalTrackingContent) {
        logsContainer.innerHTML = window.originalTrackingContent;
        window.originalTrackingContent = null;
        window.currentUnitHistory = null;
        showToast('تم العودة إلى سجلات التتبع', 'info');
    }
}

// حساب النطاق الزمني للسجلات
function getDateRange(logs) {
    if (logs.length === 0) return 'غير محدد';

    const dates = logs.map(log => new Date(log.timestamp)).sort((a, b) => a - b);
    const firstDate = formatDateToGregorian(dates[0]);
    const lastDate = formatDateToGregorian(dates[dates.length - 1]);

    if (firstDate === lastDate) {
        return firstDate;
    }

    return `${firstDate} - ${lastDate}`;
}

// عرض تاريخ الوحدة في القسم الحالي (مبسط)
function renderUnitHistoryInline(unitHistory) {
    return `
        <div class="inline-history-tabs">
            <div class="inline-tab-buttons">
                <button class="inline-tab-btn active" onclick="switchInlineTab('tenants')">
                    <i class="fas fa-users"></i> المستأجرين (${unitHistory.tenants.length})
                </button>
                <button class="inline-tab-btn" onclick="switchInlineTab('operations')">
                    <i class="fas fa-list"></i> العمليات (${unitHistory.operations.length})
                </button>
            </div>

            <div class="inline-tab-content">
                <!-- جدول المستأجرين -->
                <div id="inline-tenants-tab" class="inline-tab-panel active">
                    <div class="inline-table-container">
                        <table class="inline-history-table">
                            <thead>
                                <tr>
                                    <th><i class="fas fa-user"></i> اسم المستأجر</th>
                                    <th><i class="fas fa-file-contract"></i> رقم العقد</th>
                                    <th><i class="fas fa-calendar-plus"></i> تاريخ البداية</th>
                                    <th><i class="fas fa-calendar-minus"></i> تاريخ النهاية</th>
                                    <th><i class="fas fa-clock"></i> أول ظهور</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${unitHistory.tenants.map((tenant, index) => `
                                    <tr class="tenant-row" style="animation-delay: ${index * 0.1}s">
                                        <td class="tenant-name">
                                            <strong>${tenant.name}</strong>
                                        </td>
                                        <td class="contract-number">${tenant.contractNumber}</td>
                                        <td class="start-date">${tenant.startDate}</td>
                                        <td class="end-date">${tenant.endDate}</td>
                                        <td class="first-seen">${tenant.firstSeen}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- جدول العمليات -->
                <div id="inline-operations-tab" class="inline-tab-panel">
                    <div class="inline-table-container">
                        <table class="inline-history-table">
                            <thead>
                                <tr>
                                    <th><i class="fas fa-calendar"></i> التاريخ</th>
                                    <th><i class="fas fa-clock"></i> الوقت</th>
                                    <th><i class="fas fa-cog"></i> نوع العملية</th>
                                    <th><i class="fas fa-user"></i> المستأجر</th>
                                    <th><i class="fas fa-file-contract"></i> رقم العقد</th>
                                    <th><i class="fas fa-user-cog"></i> المستخدم</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${unitHistory.operations.map((op, index) => `
                                    <tr class="operation-row" style="animation-delay: ${index * 0.05}s">
                                        <td class="operation-date">${op.date}</td>
                                        <td class="operation-time">${op.time}</td>
                                        <td class="operation-type">
                                            <span class="operation-badge-inline">${op.operation}</span>
                                        </td>
                                        <td class="operation-tenant">${op.tenant}</td>
                                        <td class="operation-contract">${op.contractNumber}</td>
                                        <td class="operation-user">${op.user}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    `;
}

// التبديل بين التبويبات في العرض المضمن
function switchInlineTab(tabName) {
    // إزالة التفعيل من جميع الأزرار والتبويبات
    document.querySelectorAll('.inline-tab-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.inline-tab-panel').forEach(panel => panel.classList.remove('active'));

    // تفعيل التبويب المحدد
    document.querySelector(`[onclick="switchInlineTab('${tabName}')"]`).classList.add('active');
    document.getElementById(`inline-${tabName}-tab`).classList.add('active');
}

// تصدير سريع للحالة التاريخية الحالية
async function exportCurrentUnitHistory() {
    if (!window.currentUnitHistory) {
        showToast('لا توجد بيانات للتصدير', 'error');
        return;
    }

    const { unitNumber, history } = window.currentUnitHistory;

    // إنشاء ورقة عمل للمستأجرين
    const tenantsData = [
        ['اسم المستأجر', 'رقم العقد', 'تاريخ البداية', 'تاريخ النهاية', 'تاريخ أول ظهور'],
        ...history.tenants.map(tenant => [
            tenant.name,
            tenant.contractNumber,
            tenant.startDate,
            tenant.endDate,
            tenant.firstSeen
        ])
    ];

    // إنشاء ورقة عمل للعمليات
    const operationsData = [
        ['التاريخ', 'الوقت', 'نوع العملية', 'المستأجر', 'رقم العقد', 'تاريخ البداية', 'تاريخ النهاية', 'المستخدم'],
        ...history.operations.map(op => [
            op.date,
            op.time,
            op.operation,
            op.tenant,
            op.contractNumber,
            op.startDate,
            op.endDate,
            op.user
        ])
    ];

    // إنشاء كتاب العمل
    const wb = XLSX.utils.book_new();
    const tenantsWs = XLSX.utils.aoa_to_sheet(tenantsData);
    const operationsWs = XLSX.utils.aoa_to_sheet(operationsData);

    XLSX.utils.book_append_sheet(wb, tenantsWs, 'المستأجرين');
    XLSX.utils.book_append_sheet(wb, operationsWs, 'العمليات');

    // تحميل الملف
    const fileName = `تاريخ_الوحدة_${unitNumber}_${formatDateToGregorian(new Date()).replace(/\//g, '-')}.xlsx`;
    XLSX.writeFile(wb, fileName);

    showToast('تم تصدير تاريخ الوحدة بنجاح', 'success');
}

// طباعة سريعة للحالة التاريخية الحالية
function printCurrentUnitHistory() {
    if (!window.currentUnitHistory) {
        showToast('لا توجد بيانات للطباعة', 'error');
        return;
    }

    const { unitNumber, history } = window.currentUnitHistory;
    const printWindow = window.open('', '_blank');

    printWindow.document.write(`
        <html dir="rtl">
        <head>
            <title>تاريخ الوحدة ${unitNumber}</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; direction: rtl; }
                .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 10px; }
                .section { margin-bottom: 30px; }
                .section h3 { background: #f5f5f5; padding: 10px; margin: 0 0 15px 0; }
                table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: right; }
                th { background-color: #f2f2f2; font-weight: bold; }
                .operation-badge { background: #007bff; color: white; padding: 2px 6px; border-radius: 3px; font-size: 12px; }
                @media print { body { margin: 0; } }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>تاريخ الوحدة ${unitNumber}</h1>
                <p>تاريخ الطباعة: ${formatDateToGregorian(new Date())}</p>
                <p>إجمالي المستأجرين: ${history.tenants.length} | إجمالي العمليات: ${history.operations.length}</p>
            </div>

            <div class="section">
                <h3>المستأجرين</h3>
                <table>
                    <thead>
                        <tr>
                            <th>اسم المستأجر</th>
                            <th>رقم العقد</th>
                            <th>تاريخ البداية</th>
                            <th>تاريخ النهاية</th>
                            <th>تاريخ أول ظهور</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${history.tenants.map(tenant => `
                            <tr>
                                <td><strong>${tenant.name}</strong></td>
                                <td>${tenant.contractNumber}</td>
                                <td>${tenant.startDate}</td>
                                <td>${tenant.endDate}</td>
                                <td>${tenant.firstSeen}</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            </div>

            <div class="section">
                <h3>جميع العمليات</h3>
                <table>
                    <thead>
                        <tr>
                            <th>التاريخ</th>
                            <th>الوقت</th>
                            <th>نوع العملية</th>
                            <th>المستأجر</th>
                            <th>رقم العقد</th>
                            <th>المستخدم</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${history.operations.map(op => `
                            <tr>
                                <td>${op.date}</td>
                                <td>${op.time}</td>
                                <td><span class="operation-badge">${op.operation}</span></td>
                                <td>${op.tenant}</td>
                                <td>${op.contractNumber}</td>
                                <td>${op.user}</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            </div>
        </body>
        </html>
    `);

    printWindow.document.close();
    printWindow.print();
}

// بناء تاريخ الوحدة من السجلات
function buildUnitHistory(unitLogs) {
    const tenants = [];
    const operations = [];

    unitLogs.forEach(log => {
        // إضافة العملية
        operations.push({
            date: formatDateToGregorian(new Date(log.timestamp)),
            time: formatTime(log.timestamp), // استخدام الوقت المبسط
            operation: log.operationType || log.operation_type || 'غير محدد',
            tenant: log.tenantName || log.tenant_name || log.newTenant || 'غير محدد',
            contractNumber: log.contractNumber || log.contract_number || 'غير محدد',
            startDate: formatDateField(log.startDate || log.start_date) || 'غير محدد',
            endDate: formatDateField(log.endDate || log.end_date) || 'غير محدد',
            user: log.user || log.user_name || 'النظام',
            description: log.description || ''
        });

        // تجميع المستأجرين الفريدين
        const tenantName = log.tenantName || log.tenant_name || log.newTenant;
        if (tenantName && tenantName !== 'غير محدد' && tenantName.trim() !== '') {
            const existingTenant = tenants.find(t => t.name === tenantName);
            if (!existingTenant) {
                tenants.push({
                    name: tenantName,
                    contractNumber: log.contractNumber || log.contract_number || 'غير محدد',
                    startDate: formatDateField(log.startDate || log.start_date) || 'غير محدد',
                    endDate: formatDateField(log.endDate || log.end_date) || 'غير محدد',
                    firstSeen: formatDateToGregorian(new Date(log.timestamp))
                });
            }
        }
    });

    return {
        tenants: tenants,
        operations: operations
    };
}

// تنسيق التاريخ إلى التقويم الميلادي
function formatDateToGregorian(date) {
    if (!date || isNaN(date.getTime())) return 'غير محدد';

    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();

    return `${day}/${month}/${year}`;
}

// تنسيق حقل التاريخ من البيانات
function formatDateField(dateStr) {
    if (!dateStr || dateStr === 'غير محدد') return null;

    // إذا كان التاريخ بصيغة dd/mm/yyyy فهو صحيح
    if (typeof dateStr === 'string' && dateStr.match(/^\d{1,2}\/\d{1,2}\/\d{4}$/)) {
        return dateStr;
    }

    // إذا كان التاريخ بصيغة yyyy-mm-dd، قم بتحويله
    if (typeof dateStr === 'string' && dateStr.match(/^\d{4}-\d{1,2}-\d{1,2}/)) {
        const parts = dateStr.split('-');
        if (parts.length >= 3) {
            const year = parseInt(parts[0]);
            const month = parseInt(parts[1]);
            const day = parseInt(parts[2]);

            if (year >= 1900 && year <= 2100 && month >= 1 && month <= 12 && day >= 1 && day <= 31) {
                return `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}/${year}`;
            }
        }
    }

    // محاولة تحويل التاريخ كـ Date object
    try {
        const date = new Date(dateStr);
        if (!isNaN(date.getTime())) {
            return formatDateToGregorian(date);
        }
    } catch (e) {
        // تجاهل الأخطاء
    }

    return dateStr; // إرجاع القيمة الأصلية إذا لم يتم التحويل
}

// تنسيق التاريخ لقاعدة البيانات (YYYY-MM-DD)
function formatDateForDatabase(dateStr) {
    if (!dateStr || dateStr === 'غير محدد') return null;

    // إزالة النص العربي إذا كان موجوداً (مثل: "15/03/2024 (15/مارس/2024)")
    if (typeof dateStr === 'string' && dateStr.includes('(') && dateStr.includes(')')) {
        const numericPart = dateStr.split('(')[0].trim();
        if (numericPart) {
            dateStr = numericPart;
        }
    }

    // إذا كان التاريخ بصيغة dd/mm/yyyy، قم بتحويله إلى yyyy-mm-dd
    if (typeof dateStr === 'string' && dateStr.match(/^\d{1,2}\/\d{1,2}\/\d{4}$/)) {
        const parts = dateStr.split('/');
        if (parts.length === 3) {
            const day = parseInt(parts[0]);
            const month = parseInt(parts[1]);
            const year = parseInt(parts[2]);

            if (year >= 1900 && year <= 2100 && month >= 1 && month <= 12 && day >= 1 && day <= 31) {
                return `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
            }
        }
    }

    // إذا كان التاريخ بصيغة yyyy-mm-dd، فهو صحيح
    if (typeof dateStr === 'string' && dateStr.match(/^\d{4}-\d{1,2}-\d{1,2}$/)) {
        const parts = dateStr.split('-');
        if (parts.length === 3) {
            const year = parseInt(parts[0]);
            const month = parseInt(parts[1]);
            const day = parseInt(parts[2]);

            if (year >= 1900 && year <= 2100 && month >= 1 && month <= 12 && day >= 1 && day <= 31) {
                return `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
            }
        }
    }

    // محاولة تحويل التاريخ كـ Date object
    try {
        const date = new Date(dateStr);
        if (!isNaN(date.getTime())) {
            const year = date.getFullYear();
            const month = date.getMonth() + 1;
            const day = date.getDate();

            if (year >= 1900 && year <= 2100) {
                return `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
            }
        }
    } catch (e) {
        // تجاهل الأخطاء
    }

    return null; // إرجاع null إذا لم يتم التحويل
}

// عرض جدول تاريخ الوحدة
function renderUnitHistoryTable(unitHistory) {
    return `
        <div class="unit-history-tabs">
            <div class="tab-buttons">
                <button class="tab-btn active" onclick="switchUnitHistoryTab('tenants')">
                    <i class="fas fa-users"></i> المستأجرين (${unitHistory.tenants.length})
                </button>
                <button class="tab-btn" onclick="switchUnitHistoryTab('operations')">
                    <i class="fas fa-list"></i> جميع العمليات (${unitHistory.operations.length})
                </button>
            </div>

            <div class="tab-content">
                <!-- جدول المستأجرين -->
                <div id="tenants-tab" class="tab-panel active">
                    <div class="table-container">
                        <table class="unit-history-table">
                            <thead>
                                <tr>
                                    <th>اسم المستأجر</th>
                                    <th>رقم العقد</th>
                                    <th>تاريخ البداية</th>
                                    <th>تاريخ النهاية</th>
                                    <th>تاريخ أول ظهور</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${unitHistory.tenants.map(tenant => `
                                    <tr>
                                        <td><strong>${tenant.name}</strong></td>
                                        <td>${tenant.contractNumber}</td>
                                        <td>${tenant.startDate}</td>
                                        <td>${tenant.endDate}</td>
                                        <td>${tenant.firstSeen}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- جدول العمليات -->
                <div id="operations-tab" class="tab-panel">
                    <div class="table-container">
                        <table class="unit-history-table">
                            <thead>
                                <tr>
                                    <th>التاريخ</th>
                                    <th>الوقت</th>
                                    <th>نوع العملية</th>
                                    <th>المستأجر</th>
                                    <th>رقم العقد</th>
                                    <th>تاريخ البداية</th>
                                    <th>تاريخ النهاية</th>
                                    <th>المستخدم</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${unitHistory.operations.map(op => `
                                    <tr>
                                        <td>${op.date}</td>
                                        <td>${op.time}</td>
                                        <td><span class="operation-badge">${op.operation}</span></td>
                                        <td>${op.tenant}</td>
                                        <td>${op.contractNumber}</td>
                                        <td>${op.startDate}</td>
                                        <td>${op.endDate}</td>
                                        <td>${op.user}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    `;
}

// التبديل بين تبويبات تاريخ الوحدة
function switchUnitHistoryTab(tabName) {
    // إزالة التفعيل من جميع الأزرار والتبويبات
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.tab-panel').forEach(panel => panel.classList.remove('active'));

    // تفعيل التبويب المحدد
    document.querySelector(`[onclick="switchUnitHistoryTab('${tabName}')"]`).classList.add('active');
    document.getElementById(`${tabName}-tab`).classList.add('active');
}

// تصدير تاريخ الوحدة إلى Excel
async function exportUnitHistory(unitNumber) {
    if (!window.currentUnitHistory) {
        showToast('لا توجد بيانات للتصدير', 'error');
        return;
    }

    const { history } = window.currentUnitHistory;

    // إنشاء ورقة عمل للمستأجرين
    const tenantsData = [
        ['اسم المستأجر', 'رقم العقد', 'تاريخ البداية', 'تاريخ النهاية', 'تاريخ أول ظهور'],
        ...history.tenants.map(tenant => [
            tenant.name,
            tenant.contractNumber,
            tenant.startDate,
            tenant.endDate,
            tenant.firstSeen
        ])
    ];

    // إنشاء ورقة عمل للعمليات
    const operationsData = [
        ['التاريخ', 'الوقت', 'نوع العملية', 'المستأجر', 'رقم العقد', 'تاريخ البداية', 'تاريخ النهاية', 'المستخدم'],
        ...history.operations.map(op => [
            op.date,
            op.time,
            op.operation,
            op.tenant,
            op.contractNumber,
            op.startDate,
            op.endDate,
            op.user
        ])
    ];

    // إنشاء كتاب العمل
    const wb = XLSX.utils.book_new();
    const tenantsWs = XLSX.utils.aoa_to_sheet(tenantsData);
    const operationsWs = XLSX.utils.aoa_to_sheet(operationsData);

    XLSX.utils.book_append_sheet(wb, tenantsWs, 'المستأجرين');
    XLSX.utils.book_append_sheet(wb, operationsWs, 'العمليات');

    // تحميل الملف
    const fileName = `تاريخ_الوحدة_${unitNumber}_${formatDateToGregorian(new Date()).replace(/\//g, '-')}.xlsx`;
    XLSX.writeFile(wb, fileName);

    showToast('تم تصدير تاريخ الوحدة بنجاح', 'success');
}

// طباعة تاريخ الوحدة
function printUnitHistory(unitNumber) {
    if (!window.currentUnitHistory) {
        showToast('لا توجد بيانات للطباعة', 'error');
        return;
    }

    const { history } = window.currentUnitHistory;
    const printWindow = window.open('', '_blank');

    printWindow.document.write(`
        <html dir="rtl">
        <head>
            <title>تاريخ الوحدة ${unitNumber}</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; direction: rtl; }
                .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 10px; }
                .section { margin-bottom: 30px; }
                .section h3 { background: #f5f5f5; padding: 10px; margin: 0 0 15px 0; }
                table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: right; }
                th { background-color: #f2f2f2; font-weight: bold; }
                .operation-badge { background: #007bff; color: white; padding: 2px 6px; border-radius: 3px; font-size: 12px; }
                @media print { body { margin: 0; } }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>تاريخ الوحدة ${unitNumber}</h1>
                <p>تاريخ الطباعة: ${formatDateToGregorian(new Date())}</p>
                <p>إجمالي المستأجرين: ${history.tenants.length} | إجمالي العمليات: ${history.operations.length}</p>
            </div>

            <div class="section">
                <h3>المستأجرين</h3>
                <table>
                    <thead>
                        <tr>
                            <th>اسم المستأجر</th>
                            <th>رقم العقد</th>
                            <th>تاريخ البداية</th>
                            <th>تاريخ النهاية</th>
                            <th>تاريخ أول ظهور</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${history.tenants.map(tenant => `
                            <tr>
                                <td><strong>${tenant.name}</strong></td>
                                <td>${tenant.contractNumber}</td>
                                <td>${tenant.startDate}</td>
                                <td>${tenant.endDate}</td>
                                <td>${tenant.firstSeen}</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            </div>

            <div class="section">
                <h3>جميع العمليات</h3>
                <table>
                    <thead>
                        <tr>
                            <th>التاريخ</th>
                            <th>الوقت</th>
                            <th>نوع العملية</th>
                            <th>المستأجر</th>
                            <th>رقم العقد</th>
                            <th>تاريخ البداية</th>
                            <th>تاريخ النهاية</th>
                            <th>المستخدم</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${history.operations.map(op => `
                            <tr>
                                <td>${op.date}</td>
                                <td>${op.time}</td>
                                <td><span class="operation-badge">${op.operation}</span></td>
                                <td>${op.tenant}</td>
                                <td>${op.contractNumber}</td>
                                <td>${op.startDate}</td>
                                <td>${op.endDate}</td>
                                <td>${op.user}</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            </div>
        </body>
        </html>
    `);

    printWindow.document.close();
    printWindow.print();
}

// تصدير سجلات التتبع إلى Excel - محسنة لتصدير المفلتر فقط
async function exportTrackingLogs() {
    console.log('📊 بدء تصدير سجلات التتبع المفلترة...');

    // الحصول على السجلات الظاهرة فقط
    const visibleLogs = getVisibleTrackingLogs();

    if (visibleLogs.length === 0) {
        showToast('لا توجد سجلات ظاهرة للتصدير', 'warning');
        return;
    }

    console.log(`📊 سيتم تصدير ${visibleLogs.length} سجل من السجلات المفلترة`);

    // تحويل البيانات للتصدير مع التاريخ الميلادي
    const exportData = visibleLogs.map(log => {
        // استخراج الأحداث والتغييرات
        const events = log.events || extractEventsFromLog(log).join('; ') || 'لا توجد أحداث';
        const changes = log.changes || extractChangesFromLog(log).join('; ') || 'لا توجد تغييرات';

        return {
            'التاريخ': log.date || formatDate(log.timestamp),
            'الوقت': log.time || formatTime(log.timestamp),
            'نوع العملية': log.operationType || log.operation_type || 'غير محدد',
            'المستأجر': log.tenantName || log.tenant_name || 'غير محدد',
            'رقم العقد': log.contractNumber || log.contract_number || 'غير محدد',
            'المستخدم': log.user || log.user_name || 'غير محدد',
            'العقار': log.propertyName || log.property_name || 'غير محدد',
            'رقم الوحدة': log.unitNumbers || log.unitNumber || log.unit_number || 'غير محدد',
            'المدينة': log.city || 'غير محدد',
            'الحدث': events,
            'التغييرات التقنية': changes,
            'عدد السجلات المدموجة': log.recordCount || 1
        };
    });

    // إنشاء ملف Excel
    const ws = XLSX.utils.json_to_sheet(exportData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'سجل التتبع');

    // تحديد عرض الأعمدة
    const colWidths = [
        { wch: 12 }, // التاريخ
        { wch: 10 }, // الوقت
        { wch: 20 }, // نوع العملية
        { wch: 20 }, // المستأجر
        { wch: 15 }, // رقم العقد
        { wch: 15 }, // المستخدم
        { wch: 25 }, // العقار
        { wch: 20 }, // رقم الوحدة
        { wch: 12 }, // المدينة
        { wch: 40 }, // الحدث
        { wch: 50 }, // التغييرات التقنية
        { wch: 10 }  // عدد السجلات المدموجة
    ];
    ws['!cols'] = colWidths;

    // تحميل الملف مع التاريخ الميلادي
    const currentDate = formatDate(new Date()).replace(/\//g, '-');
    const fileName = `سجل_التتبع_${currentDate}.xlsx`;
    XLSX.writeFile(wb, fileName);

    console.log('✅ تم تصدير سجلات التتبع بنجاح');
    showToast(`تم تصدير ${exportData.length} سجل إلى ملف Excel`, 'success');
}

// طباعة سجلات التتبع - محسنة لطباعة المفلتر فقط
function printTrackingLogs() {
    console.log('🖨️ بدء طباعة سجلات التتبع المفلترة...');

    // الحصول على الصفوف الظاهرة فقط من الجدول
    const visibleLogs = getVisibleTrackingLogs();

    if (visibleLogs.length === 0) {
        showToast('لا توجد سجلات ظاهرة للطباعة', 'warning');
        return;
    }

    console.log(`📋 سيتم طباعة ${visibleLogs.length} سجل من السجلات المفلترة`);

    const printWindow = window.open('', '_blank');
    const currentDate = formatDate(new Date());
    const currentTime = formatTime(new Date());

    printWindow.document.write(`
        <html dir="rtl">
        <head>
            <title>سجل تتبع التغييرات</title>
            <meta charset="UTF-8">
            <style>
                @page {
                    size: A4 landscape;
                    margin: 15mm;
                }

                body {
                    font-family: 'Arial', sans-serif;
                    margin: 0;
                    padding: 0;
                    font-size: 12px;
                    line-height: 1.4;
                    direction: rtl;
                }

                .header {
                    text-align: center;
                    margin-bottom: 20px;
                    border-bottom: 2px solid #333;
                    padding-bottom: 15px;
                }

                .header h1 {
                    margin: 0 0 10px 0;
                    font-size: 24px;
                    color: #333;
                }

                .header .print-info {
                    font-size: 14px;
                    color: #666;
                    margin: 5px 0;
                }

                .summary-info {
                    background: #f8f9fa;
                    padding: 10px;
                    border-radius: 5px;
                    margin-bottom: 20px;
                    text-align: center;
                    border: 1px solid #dee2e6;
                }

                .tracking-table {
                    width: 100%;
                    border-collapse: collapse;
                    margin-top: 20px;
                    font-size: 11px;
                }

                .tracking-table th {
                    background: #343a40;
                    color: white;
                    padding: 8px 6px;
                    text-align: center;
                    font-weight: bold;
                    border: 1px solid #dee2e6;
                    white-space: nowrap;
                }

                .tracking-table td {
                    padding: 6px 4px;
                    border: 1px solid #dee2e6;
                    text-align: center;
                    vertical-align: middle;
                    word-wrap: break-word;
                    max-width: 120px;
                }

                .tracking-table tbody tr:nth-child(even) {
                    background: #f8f9fa;
                }

                .tracking-table tbody tr:hover {
                    background: #e9ecef;
                }

                .operation-type {
                    font-weight: bold;
                    color: #495057;
                }

                .tenant-name {
                    color: #007bff;
                    font-weight: 500;
                }

                .contract-number {
                    color: #28a745;
                    font-weight: 500;
                }

                .date-cell {
                    color: #6c757d;
                    font-size: 10px;
                }

                .time-cell {
                    color: #6c757d;
                    font-size: 10px;
                }

                .events-cell-print {
                    background: #fff3e0;
                    color: #e65100;
                    font-size: 9px;
                    line-height: 1.3;
                    white-space: pre-wrap;
                    word-wrap: break-word;
                    max-width: 150px;
                    text-align: right;
                    padding: 4px !important;
                    vertical-align: top;
                }

                .changes-cell-print {
                    background: #f8f9fa;
                    color: #28a745;
                    font-size: 9px;
                    line-height: 1.3;
                    white-space: pre-wrap;
                    word-wrap: break-word;
                    max-width: 150px;
                    text-align: right;
                    padding: 4px !important;
                    vertical-align: top;
                }

                .footer {
                    margin-top: 30px;
                    text-align: center;
                    font-size: 10px;
                    color: #6c757d;
                    border-top: 1px solid #dee2e6;
                    padding-top: 10px;
                }

                @media print {
                    body {
                        font-size: 10px;
                    }

                    .tracking-table {
                        font-size: 9px;
                    }

                    .tracking-table th,
                    .tracking-table td {
                        padding: 4px 3px;
                    }

                    .header h1 {
                        font-size: 20px;
                    }

                    .print-info {
                        font-size: 12px;
                    }
                }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>سجل تتبع التغييرات</h1>
                <div class="print-info">تاريخ الطباعة: ${currentDate}</div>
                <div class="print-info">وقت الطباعة: ${currentTime}</div>
            </div>

            <div class="summary-info">
                عرض ${visibleLogs.length} سجل مفلتر للطباعة
            </div>

            <table class="tracking-table">
                <thead>
                    <tr>
                        <th>التاريخ</th>
                        <th>الوقت</th>
                        <th>نوع العملية</th>
                        <th>المستأجر</th>
                        <th>رقم العقد</th>
                        <th>المستخدم</th>
                        <th>العقار</th>
                        <th>رقم الوحدة</th>
                        <th>المدينة</th>
                        <th>الحدث</th>
                        <th>التغييرات</th>
                    </tr>
                </thead>
                <tbody>
                    ${visibleLogs.map(log => {
                        // استخراج الأحداث والتغييرات للطباعة
                        const events = log.events || extractEventsFromLog(log).map(event => `• ${event}`).join('\n') || 'لا توجد أحداث';
                        const changes = log.changes || extractChangesFromLog(log).map(change => `✔ ${change}`).join('\n') || 'لا توجد تغييرات';

                        return `
                        <tr>
                            <td class="date-cell">${log.date || formatDate(log.timestamp)}</td>
                            <td class="time-cell">${log.time || formatTime(log.timestamp)}</td>
                            <td class="operation-type">${log.operationType || log.operation_type || 'غير محدد'}</td>
                            <td class="tenant-name">${log.tenantName || log.tenant_name || 'غير محدد'}</td>
                            <td class="contract-number">${log.contractNumber || log.contract_number || 'غير محدد'}</td>
                            <td>${log.user || log.user_name || 'غير محدد'}</td>
                            <td>${log.propertyName || log.property_name || 'غير محدد'}</td>
                            <td>${log.unitNumbers || log.unitNumber || log.unit_number || 'غير محدد'}</td>
                            <td>${log.city || 'غير محدد'}</td>
                            <td class="events-cell-print">${events}</td>
                            <td class="changes-cell-print">${changes}</td>
                        </tr>`;
                    }).join('')}
                </tbody>
            </table>

            <div class="footer">
                تم إنشاء هذا التقرير بواسطة نظام إدارة المرفقات - ${currentDate} ${currentTime}
            </div>
        </body>
        </html>
    `);

    printWindow.document.close();
    printWindow.print();

    console.log('✅ تم إرسال سجلات التتبع للطباعة');
    showToast('تم إرسال سجلات التتبع للطباعة', 'success');
}

// ==================== نظام الصلاحيات ====================

// متغيرات نظام الصلاحيات
let currentUser = null;
let userPermissions = null;

// بيانات المستخدمين
const users = {
    'عمر': {
        password: '159',
        role: 'admin',
        fullName: 'المدير - عمر',
        permissions: {
            viewData: true,
            editData: true,
            deleteData: true,
            manageProperties: true,
            manageAttachments: true,
            exportData: true,
            importData: true,
            manageSettings: true,
            clearFilters: true
        }
    },
    'محمد': {
        password: 'm12345',
        role: 'assistant_admin',
        fullName: 'المدير المساعد - محمد',
        permissions: {
            viewData: true,
            editData: true,
            deleteData: true,
            manageProperties: true,
            manageAttachments: true,
            exportData: true,
            importData: true,
            manageSettings: true,
            clearFilters: true
        }
    },
    '1234': {
        password: '1234',
        role: 'restricted_assistant',
        fullName: 'شركة السنيدي',
        permissions: {
            viewData: true,
            editData: false,
            deleteData: false,
            manageProperties: false,
            manageAttachments: true,  // Can view attachments only
            addAttachments: false,    // Cannot upload attachments
            deleteAttachments: false, // Cannot delete attachments
            exportData: true,
            importData: true,
            manageSettings: false,
            clearFilters: true        // Can use clear filters functionality
        }
    }
};

// تهيئة نظام الصلاحيات عند تحميل الصفحة
function initializePermissionSystem() {
    // التحقق من وجود جلسة مستخدم محفوظة
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
        try {
            const userData = JSON.parse(savedUser);
            if (users[userData.username] && userData.loginTime) {
                // الجلسة صالحة دائماً - لا انتهاء صلاحية تلقائي
                // الجلسة تنتهي فقط عند تسجيل الخروج اليدوي
                console.log('✅ استعادة جلسة المستخدم - لا انتهاء صلاحية تلقائي');
                setCurrentUser(userData.username);

                // للمستخدم المحدود: إخفاء شاشة التحميل فوراً
                if (users[userData.username] && users[userData.username].role === 'limited') {
                    console.log('👤 مستخدم محدود - إخفاء شاشة التحميل فوراً من initializePermissionSystem');
                    hideCrystalLoading();
                }

                // إضافة زر تسجيل الخروج فور استعادة الجلسة
                setTimeout(() => {
                    addLogoutButton();
                    updateMobileUserSection();
                    console.log('🔑 إضافة زر تسجيل الخروج من initializePermissionSystem');
                }, 300);

                return;
            }
        } catch (error) {
            console.error('خطأ في قراءة بيانات المستخدم المحفوظة:', error);
        }
    }

    // إظهار نافذة تسجيل الدخول
    showLoginModal();
}

// إظهار نافذة تسجيل الدخول
function showLoginModal() {
    const loginModal = document.getElementById('loginModal');
    if (loginModal) {
        loginModal.classList.add('show');

        // منع التفاعل مع باقي الصفحة
        document.body.style.overflow = 'hidden';

        // التركيز على حقل اسم المستخدم
        setTimeout(() => {
            const usernameInput = document.getElementById('username');
            if (usernameInput) {
                usernameInput.focus();
            }
        }, 300);
    }
}

// إخفاء نافذة تسجيل الدخول
function hideLoginModal() {
    const loginModal = document.getElementById('loginModal');
    if (loginModal) {
        loginModal.classList.remove('show');
        document.body.style.overflow = '';
    }
}

// معالجة تسجيل الدخول
function handleLogin(event) {
    event.preventDefault();

    const username = document.getElementById('username').value.trim();
    const password = document.getElementById('password').value;

    if (!username || !password) {
        alert('يرجى إدخال اسم المستخدم وكلمة المرور');
        return;
    }

    // التحقق من بيانات المستخدم
    if (users[username] && users[username].password === password) {
        // تسجيل دخول ناجح
        setCurrentUser(username);

        // حفظ الجلسة مع معلومات الدور
        const userData = {
            username: username,
            role: users[username].role,
            fullName: users[username].fullName,
            loginTime: new Date().toISOString()
        };
        localStorage.setItem('currentUser', JSON.stringify(userData));
        console.log('💾 تم حفظ بيانات المستخدم:', userData);

        // إخفاء نافذة تسجيل الدخول
        hideLoginModal();

        // إظهار شاشة التحميل البلورية بعد تسجيل الدخول
        console.log('🔮 إظهار شاشة التحميل بعد تسجيل الدخول الناجح');
        showCrystalLoading();

        // للمستخدمين محدودي الصلاحية: السماح بعرض شاشة التحميل الهادئة
        if (users[username].role === 'limited') {
            console.log('👤 مستخدم محدود الصلاحية - عرض شاشة التحميل الهادئة');
            // لا نخفي الشاشة فوراً، بل نتركها تعمل بشكل طبيعي مع التصميم الهادئ
        }

        // إظهار رسالة ترحيب
        showWelcomeMessage(users[username].fullName);

        // تحديث رؤية عناصر إدارة المرفقات بناءً على المستخدم (مع تأخير قصير)
        setTimeout(() => {
            toggleAttachmentManagementVisibility();
            showAttachmentManagementButtons();
        }, 500);

        // للمستخدم المحدود: إزالة جميع الإشعارات بسرعة ومراقبة دورية
        if (users[username].role === 'limited') {
            setTimeout(() => {
                clearAllNotificationsForLimitedUser();
            }, 1000);

            // مراقب دوري لإزالة أي إشعارات جديدة تظهر
            const notificationWatcher = setInterval(() => {
                clearAllNotificationsForLimitedUser();
            }, 3000); // كل 3 ثوانٍ

            // حفظ المراقب لإيقافه عند تسجيل الخروج
            window.limitedUserNotificationWatcher = notificationWatcher;
        }

        // تحديث قسم المستخدم في الهاتف وإضافة زر تسجيل الخروج
        setTimeout(() => {
            updateMobileUserSection();
            addLogoutButton();
            console.log('🔑 إضافة زر تسجيل الخروج من handleLogin');
        }, 100);

        // مسح النموذج
        document.getElementById('username').value = '';
        document.getElementById('password').value = '';

    } else {
        // تسجيل دخول فاشل
        alert('اسم المستخدم أو كلمة المرور غير صحيحة');

        // التركيز على حقل كلمة المرور
        document.getElementById('password').focus();
        document.getElementById('password').select();
    }
}

// تعيين المستخدم الحالي
function setCurrentUser(username) {
    if (users[username]) {
        currentUser = username;
        userPermissions = users[username].permissions;

        // تسجيل خاص لأبو تميم للتحقق من الصلاحيات
        if (username === '1234') {
            console.log('🔍 صلاحيات أبو تميم:', userPermissions);
            console.log('🔍 صلاحية إدارة المرفقات:', userPermissions.manageAttachments);
        }

        // إعادة تعيين الفلاتر إلى الافتراضي عند تسجيل الدخول
        resetFiltersToDefault();

        // تطبيق الصلاحيات على الواجهة
        applyUserPermissions();

        // التأكد من ظهور زر سجلات التتبع في القائمة المحمولة لشركة السنيدي
        if (username === '1234') {
            ensureTrackingButtonVisibilityForSenidi();
        }

        // تطبيق قيود الوصول للأزرار الإدارية للمستخدم محدود الصلاحية
        if (users[username].role === 'limited') {
            console.log('🔒 تطبيق قيود الوصول للأزرار الإدارية...');

            // السماح لشاشة التحميل الهادئة بالعمل بشكل طبيعي
            console.log('👤 مستخدم محدود - شاشة التحميل الهادئة ستعمل بشكل طبيعي');

            // تطبيق فوري للقيود
            restrictAdminButtonsForLimitedUser();

            // تطبيق قيود محسن مع أوقات أقل
            setTimeout(() => restrictAdminButtonsForLimitedUser(), 50);
            setTimeout(() => restrictAdminButtonsForLimitedUser(), 150);

            // تفعيل مراقب المرفقات
            setTimeout(() => {
                setupAttachmentsPermissionObserver();
            }, 500);

            // تفعيل مراقب الأزرار الإدارية
            setTimeout(() => {
                setupAdminButtonsObserver();
            }, 1000);
        }

        // إضافة زر تسجيل الخروج فور تسجيل الدخول
        setTimeout(() => {
            addLogoutButton();
            updateMobileUserSection();
        }, 100);

        // التأكد من ظهور زر سجلات التتبع لشركة السنيدي (مع تأخير إضافي)
        if (username === '1234') {
            setTimeout(() => {
                ensureTrackingButtonVisibilityForSenidi();
            }, 1500);

            // تحقق إضافي بعد 3 ثوان
            setTimeout(() => {
                ensureTrackingButtonVisibilityForSenidi();
            }, 3000);
        }

        console.log(`✅ تم تسجيل دخول المستخدم: ${users[username].fullName}`);
    }
}

// إعادة تعيين الفلاتر إلى القيم الافتراضية عند تسجيل الدخول
function resetFiltersToDefault() {
    console.log('🔄 إعادة تعيين الفلاتر إلى القيم الافتراضية...');

    // إعادة تعيين جميع الفلاتر إلى "الكل"
    currentCountry = null;
    currentProperty = null;
    filterStatus = null;

    // إعادة تعيين فلاتر أخرى إذا وُجدت
    if (typeof contractTypeFilter !== 'undefined') {
        contractTypeFilter = null;
    }

    if (typeof propertyTypeFilter !== 'undefined') {
        propertyTypeFilter = null;
    }

    if (typeof multiFilterSelectedCity !== 'undefined') {
        multiFilterSelectedCity = null;
    }

    if (typeof multiFilterSelectedProperties !== 'undefined') {
        multiFilterSelectedProperties = [];
    }

    // إعادة تعيين فلاتر التاريخ
    if (typeof dateFilterType !== 'undefined') {
        dateFilterType = '';
        dateFilterDay = '';
        dateFilterMonth = '';
        dateFilterYear = '';
    }

    // إعادة تعيين فلاتر إضافية
    if (typeof searchState !== 'undefined') {
        searchState.global = '';
        searchState.property = '';
        searchState.isSearchActive = false;
    }

    // إعادة تعيين فلاتر التتبع إذا وُجدت
    if (typeof trackingFilters !== 'undefined') {
        trackingFilters = {};
    }

    // مسح حقول البحث وإعادة تعيين النماذج
    setTimeout(() => {
        clearAllSearchFields();
        resetAllForms();
        resetUIElements();
    }, 100);

    // تحديث الواجهة لتعكس الفلاتر الافتراضية
    setTimeout(() => {
        // تحديث أزرار المدن (التأكد من تحديد "الكل")
        initCountryButtons();

        // تحديث قائمة العقارات (عرض جميع العقارات)
        initPropertyList();

        // إعادة تعيين فلتر الحالة في الواجهة
        const statusFilterButtons = document.querySelectorAll('.status-filter button');
        statusFilterButtons.forEach(btn => {
            btn.classList.remove('active');
            if (btn.textContent.includes('الكل')) {
                btn.classList.add('active');
            }
        });

        // تحديث عرض البيانات (عرض جميع البيانات)
        renderData();

        // تحديث الإحصائيات
        if (typeof updateTotalStats === 'function') {
            updateTotalStats();
        }

        console.log('✅ تم إعادة تعيين جميع الفلاتر إلى "الكل" وتحديث الواجهة');
    }, 200);

    // حفظ الحالة الجديدة
    setTimeout(() => {
        saveAppState();
    }, 400);
}

// إعادة تعيين عناصر الواجهة
function resetUIElements() {
    try {
        console.log('🔄 إعادة تعيين عناصر الواجهة...');

        // إعادة تعيين أزرار الفلاتر
        const filterButtons = document.querySelectorAll('.filter-btn, .status-filter button, .city-btn');
        filterButtons.forEach(btn => {
            btn.classList.remove('active', 'selected');
            if (btn.textContent.includes('الكل') || btn.textContent.includes('جميع')) {
                btn.classList.add('active');
            }
        });

        // إعادة تعيين القوائم المنسدلة
        const selects = document.querySelectorAll('select');
        selects.forEach(select => {
            if (select.options.length > 0) {
                select.selectedIndex = 0;
            }
        });

        // إعادة تعيين حقول التاريخ
        const dateInputs = document.querySelectorAll('input[type="date"], input[type="month"]');
        dateInputs.forEach(input => {
            input.value = '';
        });

        // إعادة تعيين checkboxes و radio buttons
        const checkboxes = document.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(checkbox => {
            checkbox.checked = false;
        });

        const radios = document.querySelectorAll('input[type="radio"]');
        radios.forEach(radio => {
            radio.checked = false;
        });

        // إخفاء أزرار الإلغاء في جميع أنحاء التطبيق
        const cancelButtons = document.querySelectorAll('.cancel-btn, .clear-btn, .global-cancel-btn');
        cancelButtons.forEach(btn => {
            if (btn.style) {
                btn.style.display = 'none';
            }
        });

        // إعادة تعيين مؤشرات البحث
        const searchIndicators = document.querySelectorAll('.search-indicator, .search-loading');
        searchIndicators.forEach(indicator => {
            indicator.classList.remove('searching', 'active');
            if (indicator.style) {
                indicator.style.display = 'none';
            }
        });

        console.log('✅ تم إعادة تعيين عناصر الواجهة');

    } catch (error) {
        console.error('❌ خطأ في إعادة تعيين عناصر الواجهة:', error);
    }
}

// إعادة تعيين جميع النماذج والقوائم المنسدلة
function resetAllForms() {
    try {
        // إعادة تعيين قوائم المدن
        const citySelects = document.querySelectorAll('select[id*="city"], select[id*="City"]');
        citySelects.forEach(select => {
            if (select.options.length > 0) {
                select.selectedIndex = 0; // اختيار الخيار الأول (عادة "الكل")
            }
        });

        // إعادة تعيين قوائم العقارات
        const propertySelects = document.querySelectorAll('select[id*="property"], select[id*="Property"]');
        propertySelects.forEach(select => {
            if (select.options.length > 0) {
                select.selectedIndex = 0; // اختيار الخيار الأول (عادة "الكل")
            }
        });

        // إعادة تعيين أزرار الفلاتر
        const filterButtons = document.querySelectorAll('.filter-btn, .status-filter button');
        filterButtons.forEach(btn => {
            btn.classList.remove('active');
            if (btn.textContent.includes('الكل') || btn.textContent.includes('جميع')) {
                btn.classList.add('active');
            }
        });

        // إعادة تعيين حقول التاريخ
        const dateInputs = document.querySelectorAll('input[type="date"], input[type="month"]');
        dateInputs.forEach(input => {
            input.value = '';
        });

        // إعادة تعيين قوائم السنوات والشهور
        const yearSelects = document.querySelectorAll('select[id*="year"], select[id*="Year"]');
        const monthSelects = document.querySelectorAll('select[id*="month"], select[id*="Month"]');

        yearSelects.forEach(select => {
            if (select.options.length > 0) {
                select.selectedIndex = 0;
            }
        });

        monthSelects.forEach(select => {
            if (select.options.length > 0) {
                select.selectedIndex = 0;
            }
        });

        console.log('✅ تم إعادة تعيين جميع النماذج والقوائم المنسدلة');

    } catch (error) {
        console.error('❌ خطأ في إعادة تعيين النماذج:', error);
    }
}

// تطبيق صلاحيات المستخدم على الواجهة
function applyUserPermissions() {
    if (!userPermissions) return;

    const body = document.body;

    // إزالة جميع كلاسات الصلاحيات السابقة
    body.classList.remove('limited-user', 'admin-user', 'assistant-admin-user');

    // إضافة كلاس حسب نوع المستخدم
    if (users[currentUser].role === 'limited') {
        body.classList.add('limited-user');
        hideLimitedUserElements();

        // تطبيق قيود الوصول محسن مع أوقات أقل
        setTimeout(() => {
            restrictAdminButtonsForLimitedUser();
        }, 100);

        setTimeout(() => {
            restrictAdminButtonsForLimitedUser();
        }, 300);
    } else {
        body.classList.add('admin-user');
    }

    // إضافة كلاس خاص لعمر لإظهار أزرار الاختبار والحماية
    if (currentUser === 'عمر') {
        body.classList.add('user-omar');
        console.log('🔧 تم تفعيل أزرار الاختبار والحماية لعمر');
        // إظهار أزرار المرفقات لعمر
        setTimeout(() => showAttachmentButtonsForAuthorizedUser(), 100);
    } else {
        body.classList.remove('user-omar');
        console.log('🔒 تم إخفاء أزرار الاختبار والحماية');
    }

    // إضافة كلاس خاص لمحمد لإظهار أزرار حذف البيانات
    if (currentUser === 'محمد') {
        body.classList.add('user-mohammed');
        console.log('🔧 تم تفعيل أزرار حذف البيانات لمحمد');
        // إظهار أزرار المرفقات لمحمد
        setTimeout(() => showAttachmentButtonsForAuthorizedUser(), 100);
    } else {
        body.classList.remove('user-mohammed');
    }

    // إضافة كلاس خاص لأبو تميم لتطبيق القيود المطلوبة
    if (currentUser === '1234') {
        body.classList.add('user-abu-tameem');
        console.log('🔒 تم تطبيق قيود أبو تميم - إخفاء أزرار التحرير والحذف والإعدادات');
    } else {
        body.classList.remove('user-abu-tameem');
    }

    // تحديث وظيفة getCurrentUser
    window.getCurrentUser = function() {
        return users[currentUser]?.fullName || currentUser || 'النظام';
    };

    // دالة اختبار للمستخدم الجديد أبو تميم
    window.testAbuTameemPermissions = function() {
        if (currentUser !== '1234') {
            alert('هذا الاختبار مخصص للمستخدم أبو تميم فقط');
            return;
        }

        const permissions = users['1234'].permissions;
        const testResults = {
            viewData: permissions.viewData,
            editData: permissions.editData,
            deleteData: permissions.deleteData,
            manageProperties: permissions.manageProperties,
            manageAttachments: permissions.manageAttachments,
            addAttachments: permissions.addAttachments,
            deleteAttachments: permissions.deleteAttachments,
            exportData: permissions.exportData,
            importData: permissions.importData,
            manageSettings: permissions.manageSettings
        };

        console.log('🧪 اختبار صلاحيات أبو تميم:', testResults);

        const message = `
🧪 نتائج اختبار صلاحيات أبو تميم:

✅ المسموح:
• عرض البيانات: ${testResults.viewData ? 'نعم' : 'لا'}
• إدارة المرفقات (عرض/تحميل): ${testResults.manageAttachments ? 'نعم' : 'لا'}
• تصدير البيانات: ${testResults.exportData ? 'نعم' : 'لا'}
• استيراد البيانات: ${testResults.importData ? 'نعم' : 'لا'}

❌ المحظور:
• تحرير البيانات: ${testResults.editData ? 'نعم' : 'لا'}
• حذف البيانات: ${testResults.deleteData ? 'نعم' : 'لا'}
• إدارة العقارات: ${testResults.manageProperties ? 'نعم' : 'لا'}
• إضافة مرفقات: ${testResults.addAttachments ? 'نعم' : 'لا'}
• حذف مرفقات: ${testResults.deleteAttachments ? 'نعم' : 'لا'}
• إدارة الإعدادات: ${testResults.manageSettings ? 'نعم' : 'لا'}

🎯 الحالة: ${testResults.editData || testResults.deleteData || testResults.manageProperties || testResults.addAttachments || testResults.deleteAttachments || testResults.manageSettings ? '⚠️ خطأ في الصلاحيات' : '✅ الصلاحيات صحيحة'}
        `;

        alert(message);
        return testResults;
    };

    // دالة اختبار مسح الفلاتر للمستخدم أبو تميم (شركة السنيدي)
    window.testAlSenidiClearFilters = function() {
        if (currentUser !== '1234') {
            alert('هذا الاختبار مخصص لمستخدم شركة السنيدي فقط');
            return;
        }

        console.log('🧪 اختبار وظيفة مسح الفلاتر لشركة السنيدي...');

        // فحص وجود أزرار مسح الفلاتر
        const clearButtons = document.querySelectorAll('.clear-all-filters-btn');
        console.log(`🔍 عدد أزرار مسح الفلاتر الموجودة: ${clearButtons.length}`);

        clearButtons.forEach((btn, index) => {
            console.log(`🔘 زر ${index + 1}: مرئي = ${btn.style.display !== 'none'}, معطل = ${btn.disabled}`);
        });

        // فحص صلاحية مسح الفلاتر
        const hasPermission = users['1234'].permissions.clearFilters;
        console.log(`✅ صلاحية مسح الفلاتر: ${hasPermission ? 'مسموح' : 'ممنوع'}`);

        // اختبار تنفيذ وظيفة مسح الفلاتر
        if (typeof clearAllFilters === 'function') {
            console.log('✅ وظيفة clearAllFilters متوفرة');

            // محاكاة تطبيق بعض الفلاتر أولاً
            if (typeof selectCountry === 'function') {
                selectCountry('الرياض');
                console.log('🎭 تم تطبيق فلتر المدينة للاختبار');
            }

            setTimeout(() => {
                // تنفيذ مسح الفلاتر
                clearAllFilters();
                console.log('🗑️ تم تنفيذ مسح الفلاتر بنجاح');

                // فحص النتيجة
                setTimeout(() => {
                    const isCleared = !currentCountry && !currentProperty && !filterStatus;
                    console.log(`📊 نتيجة الاختبار: ${isCleared ? 'نجح مسح الفلاتر' : 'فشل مسح الفلاتر'}`);
                    alert(`اختبار مسح الفلاتر لشركة السنيدي: ${isCleared ? 'نجح ✅' : 'فشل ❌'}`);
                }, 500);
            }, 1000);
        } else {
            console.log('❌ وظيفة clearAllFilters غير متوفرة');
            alert('❌ وظيفة مسح الفلاتر غير متوفرة');
        }

        return {
            buttonsFound: clearButtons.length,
            hasPermission: hasPermission,
            functionAvailable: typeof clearAllFilters === 'function'
        };
    };
}

// تطبيق قيود الوصول للمستخدم محدود الصلاحيات (بدون إخفاء الأزرار)
function hideLimitedUserElements() {
    console.log('🔒 تطبيق قيود الوصول للمستخدم محدود الصلاحيات...');

    // تطبيق قيود على الأزرار الإدارية بدلاً من إخفائها
    restrictAdminButtonsForLimitedUser();

    // إخفاء أزرار التحرير والحذف في البطاقات فقط
    const editBtns = document.querySelectorAll('.edit-btn, .delete-btn, .add-btn');
    editBtns.forEach(btn => {
        if (btn) btn.style.display = 'none';
    });

    // إخفاء زر إدارة سجلات التتبع
    const trackingManagementBtn = document.getElementById('trackingManagementBtn');
    if (trackingManagementBtn) {
        trackingManagementBtn.style.display = 'none';
    }

    // تطبيق قيود المرفقات
    applyAttachmentsRestrictions();

    console.log('✅ تم تطبيق قيود الوصول للمستخدم محدود الصلاحيات');
}

// تطبيق قيود على الأزرار الإدارية للمستخدم محدود الصلاحية
function restrictAdminButtonsForLimitedUser() {
    console.log('🔒 تطبيق قيود الوصول على الأزرار الإدارية...');

    // قائمة الأزرار الإدارية المحظورة
    const restrictedButtons = [
        // أزرار إدارة العقارات - إخفاء كامل
        { selector: '#propertyManagerBtn', name: 'إدارة العقارات', hide: true },
        { selector: '.management-btn', name: 'إدارة العقارات', hide: true },
        { selector: '#mobile-property-manager-btn', name: 'إدارة العقارات', hide: true },

        // أزرار تحديث التواريخ
        { selector: '#updateDatesBtn', name: 'تحديث التواريخ' },
        { selector: '#mobile-date-update-btn', name: 'تحديث التواريخ' },

        // أزرار إصلاح الإحصائيات
        { selector: '#fixStatisticsBtn', name: 'إصلاح الإحصائيات' },
        { selector: '#mobile-fix-statistics-btn', name: 'إصلاح الإحصائيات' },

        // أزرار إعادة تعيين الحالة
        { selector: '#mobile-clear-state-btn', name: 'إعادة تعيين الحالة' },

        // أزرار الإعدادات - إخفاء في الشاشات الكبيرة، تقييد في المحمول
        { selector: '.settings-btn', name: 'الإعدادات', hide: true },
        { selector: '.header-dropdown:has(.settings-btn)', name: 'قائمة الإعدادات', hide: true },
        { selector: '#mobile-settings-btn', name: 'الإعدادات' },

        // أزرار التحرير والحذف في البطاقات
        { selector: '.edit-btn', name: 'تحرير البطاقة' },
        { selector: '.delete-btn', name: 'حذف البطاقة' },
        { selector: '.add-btn', name: 'إضافة جديد' }
    ];

    restrictedButtons.forEach(buttonInfo => {
        const buttons = document.querySelectorAll(buttonInfo.selector);
        buttons.forEach(button => {
            if (button) {
                if (buttonInfo.hide) {
                    // إخفاء الزر كاملاً (للعقارات)
                    button.style.display = 'none';
                    console.log(`🚫 تم إخفاء زر: ${buttonInfo.name}`);
                } else {
                    // تقييد الوصول مع الاحتفاظ بالزر مرئياً
                    // إزالة جميع معالجات الأحداث السابقة
                    const newButton = button.cloneNode(true);
                    button.parentNode.replaceChild(newButton, button);

                    // إضافة معالج جديد يظهر رسالة عدم الصلاحية
                    newButton.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        showNoPermissionMessage(`ليس لديك صلاحية للوصول إلى "${buttonInfo.name}"`);
                        return false;
                    });

                    // إضافة كلاس للتصميم المحظور
                    newButton.classList.add('restricted-button');
                    newButton.title = `ليس لديك صلاحية للوصول إلى "${buttonInfo.name}"`;

                    console.log(`🔒 تم تقييد الوصول لزر: ${buttonInfo.name}`);
                }
            }
        });
    });

    // تطبيق قيود على عناصر القائمة المنسدلة
    const dropdownItems = [
        { selector: '[onclick*="showPropertyManager"]', name: 'إدارة العقارات', hide: true },
        { selector: '[onclick*="fixStatisticsNow"]', name: 'إصلاح الإحصائيات' },
        { selector: '[onclick*="showDateUpdateModal"]', name: 'تحديث التواريخ' },
        { selector: '[onclick*="openDateUpdateModal"]', name: 'تحديث التواريخ' },
        { selector: '[onclick*="clearAppStateWithConfirmation"]', name: 'إعادة تعيين الحالة' }
    ];

    dropdownItems.forEach(itemInfo => {
        const items = document.querySelectorAll(itemInfo.selector);
        items.forEach(item => {
            if (item) {
                if (itemInfo.hide) {
                    // إخفاء العنصر كاملاً
                    item.style.display = 'none';
                    console.log(`🚫 تم إخفاء عنصر القائمة: ${itemInfo.name}`);
                } else {
                    // تقييد الوصول مع الاحتفاظ بالعنصر مرئياً
                    // إزالة onclick السابق
                    item.removeAttribute('onclick');

                    // إضافة معالج جديد
                    item.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        showNoPermissionMessage(`ليس لديك صلاحية للوصول إلى "${itemInfo.name}"`);
                        closeAllDropdowns(); // إغلاق القائمة المنسدلة
                        return false;
                    });

                    // إضافة مؤشر بصري
                    item.style.opacity = '0.6';
                    item.style.cursor = 'not-allowed';
                    item.title = `ليس لديك صلاحية للوصول إلى "${itemInfo.name}"`;

                    console.log(`🔒 تم تقييد الوصول لعنصر القائمة: ${itemInfo.name}`);
                }
            }
        });
    });

    console.log('✅ تم تطبيق قيود الوصول على جميع الأزرار الإدارية');
}

// تطبيق قيود المرفقات للمستخدم محدود الصلاحيات
function applyAttachmentsRestrictions() {
    console.log('📎 تطبيق قيود المرفقات للمستخدم محدود الصلاحيات...');

    // إخفاء مناطق الرفع (منع إضافة مرفقات جديدة)
    const uploadElements = document.querySelectorAll(`
        .upload-area, .upload-section, .upload-dropzone, .upload-zone,
        .file-upload-area, .totals-upload-zone, .enhanced-upload,
        .upload-notes-sidebar, .mobile-upload-section, .add-attachment-btn,
        .upload-btn, .file-input-wrapper, .drag-drop-area
    `);
    uploadElements.forEach(element => {
        if (element) element.style.display = 'none';
    });

    // إخفاء أزرار الحذف والمزامنة والتحرير
    const deleteElements = document.querySelectorAll(`
        .btn-delete, .delete-btn, .mobile-action-btn.delete,
        .attachment-btn.delete-btn, .btn-enhanced.btn-delete,
        .sync-btn, .attachment-btn.sync-btn, .edit-attachment-btn,
        .modify-btn, .update-btn
    `);
    deleteElements.forEach(element => {
        if (element) element.style.display = 'none';
    });

    // إعادة تخطيط المحتوى
    const contentLayouts = document.querySelectorAll('.content-layout-new');
    contentLayouts.forEach(layout => {
        if (layout) {
            layout.style.gridTemplateColumns = '1fr';
        }
    });

    const attachmentLists = document.querySelectorAll('.attachments-list');
    attachmentLists.forEach(list => {
        if (list) {
            list.style.width = '100%';
            list.style.maxWidth = '100%';
        }
    });

    // إضافة معالجات أحداث لمنع الرفع
    const fileInputs = document.querySelectorAll('input[type="file"]');
    fileInputs.forEach(input => {
        if (input.id && (input.id.includes('Upload') || input.id.includes('File'))) {
            input.disabled = true;
            input.style.display = 'none';
        }
    });

    // منع أحداث السحب والإفلات
    const dragElements = document.querySelectorAll('.upload-area, .upload-dropzone, .enhanced-upload');
    dragElements.forEach(element => {
        if (element) {
            element.style.pointerEvents = 'none';
            element.style.cursor = 'not-allowed';
            element.onclick = function(e) {
                e.preventDefault();
                e.stopPropagation();
                showNoPermissionMessage();
                return false;
            };
        }
    });

    console.log('✅ تم تطبيق قيود المرفقات');
}

// إضافة رسالة إعلامية للمستخدم محدود الصلاحيات في نوافذ المرفقات
function addLimitedUserNoticeToAttachments() {
    if (!userPermissions || userPermissions.manageAttachments) return;

    // البحث عن نوافذ المرفقات المفتوحة
    const attachmentModals = document.querySelectorAll('.attachments-modal, .card-attachments-modal, .mobile-attachments-modal');

    attachmentModals.forEach(modal => {
        // التحقق من عدم وجود الرسالة مسبقاً
        if (modal.querySelector('.limited-user-attachments-notice')) return;

        // إنشاء الرسالة الإعلامية
        const notice = document.createElement('div');
        notice.className = 'limited-user-attachments-notice';
        notice.innerHTML = `
            <i class="fas fa-info-circle"></i>
            وضع العرض فقط - يمكنك مشاهدة وتحميل المرفقات ولكن لا يمكنك رفع أو حذف ملفات
        `;

        // إدراج الرسالة في بداية محتوى النافذة
        const modalContent = modal.querySelector('.attachments-modal-content, .card-modal-content, .mobile-attachments-content');
        if (modalContent) {
            modalContent.insertBefore(notice, modalContent.firstChild);
        }
    });
}

// تحديث وظائف إظهار نوافذ المرفقات لتطبيق القيود
const originalShowAttachmentsModal = window.showAttachmentsModal;
window.showAttachmentsModal = function(city, propertyName) {
    if (originalShowAttachmentsModal) {
        originalShowAttachmentsModal(city, propertyName);

        // تطبيق القيود بعد إظهار النافذة
        setTimeout(() => {
            if (users[currentUser]?.role === 'limited') {
                applyAttachmentsRestrictions();
                addLimitedUserNoticeToAttachments();
            } else if (currentUser === 'عمر' || currentUser === 'محمد') {
                // إظهار أزرار المرفقات للمستخدمين المخولين
                showAttachmentButtonsForAuthorizedUser();
            }
        }, 100);
    }
};

const originalShowCardAttachmentsModal = window.showCardAttachmentsModal;
window.showCardAttachmentsModal = function(city, propertyName, contractNumber, unitNumber) {
    if (originalShowCardAttachmentsModal) {
        originalShowCardAttachmentsModal(city, propertyName, contractNumber, unitNumber);

        // تطبيق القيود بعد إظهار النافذة
        setTimeout(() => {
            if (users[currentUser]?.role === 'limited') {
                applyAttachmentsRestrictions();
                addLimitedUserNoticeToAttachments();
            } else if (currentUser === 'عمر' || currentUser === 'محمد') {
                // إظهار أزرار المرفقات للمستخدمين المخولين
                showAttachmentButtonsForAuthorizedUser();
            }
        }, 100);
    }
};

// التحقق من صلاحية المستخدم لعملية معينة
function checkPermission(action) {
    if (!userPermissions) {
        showNoPermissionMessage();
        return false;
    }

    const hasPermission = userPermissions[action] === true;

    if (!hasPermission) {
        showNoPermissionMessage();
    }

    return hasPermission;
}

// التحقق من صلاحية المرفقات (مقصورة على عمر ومحمد فقط)
function checkAttachmentPermission(operation = 'manage', showError = true) {
    // الحصول على اسم المستخدم الحالي
    let currentUserName = null;

    // محاولة الحصول على اسم المستخدم من localStorage
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
        try {
            const userData = JSON.parse(savedUser);
            currentUserName = userData.username;
        } catch (e) {
            // إذا فشل parsing، قد يكون المستخدم محفوظ كنص بسيط
            currentUserName = savedUser;
        }
    }

    // إذا لم نجد في localStorage، تحقق من المتغير العام
    if (!currentUserName && window.currentUser) {
        currentUserName = window.currentUser;
    }

    // السماح فقط لعمر ومحمد
    const allowedUsers = ['عمر', 'محمد'];

    if (!allowedUsers.includes(currentUserName)) {
        if (showError) {
            let operationText = '';
            switch(operation) {
                case 'upload':
                    operationText = 'رفع المرفقات';
                    break;
                case 'delete':
                    operationText = 'حذف المرفقات';
                    break;
                case 'bulk_delete':
                    operationText = 'الحذف المتعدد للمرفقات';
                    break;
                default:
                    operationText = 'إدارة المرفقات';
            }

            showNoPermissionMessage(`عذراً، ${operationText} مقصور على المديرين (عمر ومحمد) فقط`);
        }
        return false;
    }

    return true;
}

// دالة مساعدة للتحقق من المستخدم المخول للرفع والحذف (عمر ومحمد فقط)
function isAuthorizedUser() {
    let currentUserName = null;

    // محاولة الحصول على اسم المستخدم من localStorage
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
        try {
            const userData = JSON.parse(savedUser);
            currentUserName = userData.username;
        } catch (e) {
            // إذا فشل parsing، قد يكون المستخدم محفوظ كنص بسيط
            currentUserName = savedUser;
        }
    }

    // إذا لم نجد في localStorage، تحقق من المتغير العام
    if (!currentUserName && window.currentUser) {
        currentUserName = window.currentUser;
    }

    const allowedUsers = ['عمر', 'محمد'];
    const isAuthorized = allowedUsers.includes(currentUserName);

    console.log(`🔐 التحقق من صلاحية الرفع/الحذف للمستخدم: ${currentUserName} - مخول: ${isAuthorized}`);

    return isAuthorized;
}

// دالة للتحقق من إمكانية عرض المرفقات (جميع المستخدمين يمكنهم العرض)
function canViewAttachments() {
    let currentUserName = null;

    // محاولة الحصول على اسم المستخدم من localStorage
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
        try {
            const userData = JSON.parse(savedUser);
            currentUserName = userData.username;
        } catch (e) {
            currentUserName = savedUser;
        }
    }

    // إذا لم نجد في localStorage، تحقق من المتغير العام
    if (!currentUserName && window.currentUser) {
        currentUserName = window.currentUser;
    }

    // جميع المستخدمين المسجلين يمكنهم عرض المرفقات
    const allUsers = ['عمر', 'محمد', '1234'];
    const canView = allUsers.includes(currentUserName);

    console.log(`👁️ التحقق من صلاحية عرض المرفقات للمستخدم: ${currentUserName} - يمكن العرض: ${canView}`);

    return canView;
}

// دالة لإظهار أزرار المرفقات للمستخدمين المخولين (عمر ومحمد)
function showAttachmentButtonsForAuthorizedUser() {
    console.log('🔓 إظهار أزرار المرفقات للمستخدم المخول');

    // إظهار جميع أزرار الحذف والإرفاق
    const deleteButtons = document.querySelectorAll('.delete-btn, .attachment-btn.delete-btn, .btn-delete');
    const uploadAreas = document.querySelectorAll('.upload-area, .upload-section, .upload-dropzone, .upload-zone, .file-upload-area');
    const attachmentActions = document.querySelectorAll('.attachment-actions');

    deleteButtons.forEach(btn => {
        btn.style.display = '';
        btn.style.visibility = 'visible';
    });

    uploadAreas.forEach(area => {
        area.style.display = '';
        area.style.visibility = 'visible';
    });

    attachmentActions.forEach(actions => {
        actions.style.display = 'flex';
        actions.style.visibility = 'visible';
    });

    console.log(`✅ تم إظهار ${deleteButtons.length} زر حذف و ${uploadAreas.length} منطقة رفع`);
}

// دالة للتحقق من إمكانية عرض إدارة المرفقات (جميع المستخدمين المسجلين)
function canViewAttachmentManager() {
    let currentUserName = null;

    // محاولة الحصول على اسم المستخدم من localStorage
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
        try {
            const userData = JSON.parse(savedUser);
            currentUserName = userData.username;
        } catch (e) {
            currentUserName = savedUser;
        }
    }

    // إذا لم نجد في localStorage، تحقق من المتغير العام
    if (!currentUserName && window.currentUser) {
        currentUserName = window.currentUser;
    }

    // جميع المستخدمين المسجلين يمكنهم عرض إدارة المرفقات
    const canView = currentUserName && currentUserName !== 'guest';

    console.log(`👁️ التحقق من إمكانية عرض إدارة المرفقات للمستخدم: ${currentUserName} - يمكن العرض: ${canView}`);

    return canView;
}

// إخفاء/إظهار عناصر إدارة المرفقات بناءً على المستخدم
function toggleAttachmentManagementVisibility() {
    const canView = canViewAttachmentManager();

    console.log(`🔐 بدء تحديث رؤية عناصر إدارة المرفقات - يمكن العرض: ${canView}`);

    // عناصر إدارة المرفقات في القوائم والأزرار
    const attachmentElements = [
        // القائمة المنسدلة
        {
            element: document.querySelector('.dropdown-item[onclick*="showAttachmentsManagerFromDropdown"]'),
            name: 'القائمة المنسدلة'
        },
        // زر إدارة المرفقات في الهيدر
        {
            element: document.getElementById('attachmentsManagerBtn'),
            name: 'زر الهيدر'
        },
        // زر إدارة المرفقات في الجوال
        {
            element: document.getElementById('mobile-attachments-btn'),
            name: 'زر الجوال'
        }
    ];

    attachmentElements.forEach(({element, name}) => {
        if (element) {
            if (canView) {
                element.style.display = '';
                element.style.visibility = 'visible';
                element.style.opacity = '1';
                console.log(`✅ تم إظهار ${name}`);
            } else {
                element.style.display = 'none';
                element.style.visibility = 'hidden';
                element.style.opacity = '0';
                console.log(`❌ تم إخفاء ${name}`);
            }
        } else {
            console.log(`⚠️ لم يتم العثور على ${name}`);
        }
    });

    // تحديث أزرار إدارة المرفقات في الهيدر أيضاً
    const headerAttachmentBtns = document.querySelectorAll('[onclick*="showAttachmentsManager"]');
    headerAttachmentBtns.forEach(btn => {
        if (btn) {
            if (canView) {
                btn.style.display = '';
                btn.style.visibility = 'visible';
            } else {
                btn.style.display = 'none';
                btn.style.visibility = 'hidden';
            }
        }
    });

    console.log(`🔐 انتهى تحديث رؤية عناصر إدارة المرفقات - ${canView ? 'مرئية' : 'مخفية'}`);
}

// إظهار أزرار إدارة المرفقات بشكل صريح (لجميع المستخدمين المسجلين)
function showAttachmentManagementButtons() {
    const canView = canViewAttachmentManager();

    if (!canView) {
        console.log('🔐 المستخدم غير مسجل دخول - لن يتم إظهار أزرار إدارة المرفقات');
        return;
    }

    console.log('🔐 إظهار أزرار إدارة المرفقات للمستخدم المسجل');

    // إظهار زر إدارة المرفقات في الهيدر
    const headerBtn = document.getElementById('attachmentsManagerBtn');
    if (headerBtn) {
        headerBtn.style.display = 'inline-block';
        headerBtn.style.visibility = 'visible';
        headerBtn.style.opacity = '1';

        // إضافة event listener إذا لم يكن موجود
        if (!headerBtn.onclick) {
            headerBtn.onclick = function() {
                showAttachmentsManager();
            };
        }

        console.log('✅ تم إظهار زر إدارة المرفقات في الهيدر');
    }

    // إظهار زر إدارة المرفقات في الجوال
    const mobileBtn = document.getElementById('mobile-attachments-btn');
    if (mobileBtn) {
        mobileBtn.style.display = 'block';
        mobileBtn.style.visibility = 'visible';
        mobileBtn.style.opacity = '1';

        // إضافة event listener إذا لم يكن موجود
        if (!mobileBtn.onclick) {
            mobileBtn.onclick = function() {
                showAttachmentsManager();
                // إغلاق قائمة الجوال
                const mobileMenu = document.getElementById('mobileMenu');
                const menuOverlay = document.getElementById('menuOverlay');
                if (mobileMenu) mobileMenu.classList.remove('active');
                if (menuOverlay) menuOverlay.classList.remove('active');
            };
        }

        console.log('✅ تم إظهار زر إدارة المرفقات في الجوال');
    }

    // إظهار عنصر القائمة المنسدلة
    const dropdownItem = document.querySelector('.dropdown-item[onclick*="showAttachmentsManagerFromDropdown"]');
    if (dropdownItem) {
        dropdownItem.style.display = 'block';
        dropdownItem.style.visibility = 'visible';
        dropdownItem.style.opacity = '1';
        console.log('✅ تم إظهار عنصر إدارة المرفقات في القائمة المنسدلة');
    }
}

// إظهار رسالة عدم وجود صلاحيات
function showNoPermissionMessage(customMessage = null) {
    // إزالة أي رسالة سابقة
    const existingMessage = document.querySelector('.no-permission-message');
    if (existingMessage) {
        existingMessage.remove();
    }

    // إنشاء رسالة جديدة
    const message = document.createElement('div');
    message.className = 'no-permission-message';

    const messageText = customMessage || 'ليس لديك صلاحية للقيام بهذا الإجراء';

    message.innerHTML = `
        <div style="display: flex; align-items: center; justify-content: center;">
            <i class="fas fa-lock" style="margin-left: 8px; color: #dc3545;"></i>
            <span>${messageText}</span>
        </div>
    `;

    // تحسين تصميم الرسالة
    message.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: linear-gradient(135deg, #fff, #f8f9fa);
        color: #721c24;
        padding: 20px 30px;
        border-radius: 10px;
        box-shadow: 0 8px 25px rgba(220, 53, 69, 0.3);
        z-index: 10000;
        font-weight: 600;
        font-size: 16px;
        border: 2px solid #dc3545;
        min-width: 300px;
        text-align: center;
        animation: slideInScale 0.3s ease-out;
    `;

    // إضافة CSS للأنيميشن
    if (!document.querySelector('#noPermissionAnimation')) {
        const style = document.createElement('style');
        style.id = 'noPermissionAnimation';
        style.textContent = `
            @keyframes slideInScale {
                0% {
                    opacity: 0;
                    transform: translate(-50%, -50%) scale(0.8);
                }
                100% {
                    opacity: 1;
                    transform: translate(-50%, -50%) scale(1);
                }
            }

            .no-permission-message:hover {
                transform: translate(-50%, -50%) scale(1.02) !important;
                transition: transform 0.2s ease;
            }
        `;
        document.head.appendChild(style);
    }

    document.body.appendChild(message);

    // إضافة صوت تنبيه (اختياري)
    try {
        const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSuBzvLZiTYIG2m98OScTgwOUarm7blmGgU7k9n1unEiBC13yO/eizEIHWq+8+OWT');
        audio.volume = 0.1;
        audio.play().catch(() => {}); // تجاهل الأخطاء إذا لم يُسمح بالصوت
    } catch (e) {}

    // تحديد مدة عرض الرسالة حسب نوع المستخدم
    let displayDuration = 4000; // 4 ثوان للمستخدمين العاديين

    // للمستخدم محدود الصلاحية: إخفاء الرسالة بعد ثانيتين فقط
    if (currentUser && users[currentUser] && users[currentUser].role === 'limited') {
        displayDuration = 2000; // ثانيتان فقط
    }

    // إزالة الرسالة
    setTimeout(() => {
        if (message.parentNode) {
            message.style.animation = 'slideInScale 0.3s ease-out reverse';
            setTimeout(() => {
                if (message.parentNode) {
                    message.remove();
                }
            }, 300);
        }
    }, displayDuration);

    console.log('🔒 تم عرض رسالة عدم الصلاحية:', messageText);
}

// إظهار رسالة ترحيب
function showWelcomeMessage(fullName) {
    const message = document.createElement('div');
    message.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
        padding: 1rem 2rem;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        z-index: 2500;
        font-weight: 600;
        transform: translateX(100%);
        transition: transform 0.3s ease;
    `;

    // رسالة خاصة للمستخدم الجديد أبو تميم
    if (currentUser === '1234') {
        message.innerHTML = `
            <i class="fas fa-user-check" style="margin-left: 8px;"></i>
            مرحباً ${fullName} - مستخدم محدود الصلاحيات
        `;
    } else {
        message.innerHTML = `
            <i class="fas fa-check-circle" style="margin-left: 8px;"></i>
            مرحباً ${fullName}
        `;
    }

    document.body.appendChild(message);

    // إظهار الرسالة
    setTimeout(() => {
        message.style.transform = 'translateX(0)';
    }, 100);

    // تحديد مدة عرض الرسالة حسب نوع المستخدم
    let displayDuration = 4000; // 4 ثوان للمستخدمين العاديين

    // للمستخدم محدود الصلاحية: إخفاء الرسالة بسرعة لتحسين الأداء
    if (currentUser && users[currentUser] && users[currentUser].role === 'limited') {
        displayDuration = 800; // أقل من ثانية واحدة
        console.log('👤 مستخدم محدود الصلاحية - إخفاء رسالة الترحيب بسرعة');
    }

    // إخفاء الرسالة
    setTimeout(() => {
        message.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (message.parentNode) {
                message.remove();
            }
        }, 300);
    }, displayDuration);
}

// إزالة جميع الإشعارات للمستخدم المحدود لتحسين الأداء
function clearAllNotificationsForLimitedUser() {
    console.log('🧹 إزالة جميع الإشعارات للمستخدم المحدود...');

    // إزالة رسائل الترحيب
    const welcomeMessages = document.querySelectorAll('div[style*="position: fixed"][style*="top: 20px"][style*="right: 20px"]');
    welcomeMessages.forEach(message => {
        if (message.textContent.includes('مرحباً')) {
            message.remove();
        }
    });

    // إزالة إشعارات الاتصال
    const connectionNotifications = document.querySelectorAll('.connection-notification');
    connectionNotifications.forEach(notification => notification.remove());

    // إزالة أي إشعارات أخرى
    const allNotifications = document.querySelectorAll('[class*="notification"], [class*="alert"], [class*="toast"], .message-toast');
    allNotifications.forEach(notification => {
        if (notification.style.position === 'fixed' || notification.style.position === 'absolute') {
            notification.remove();
        }
    });

    // إزالة جميع العناصر ذات position: fixed في الجزء العلوي
    const fixedElements = document.querySelectorAll('div[style*="position: fixed"][style*="top:"]');
    fixedElements.forEach(element => {
        // تجاهل شاشة التحميل والعناصر المهمة
        if (!element.id.includes('loading') &&
            !element.classList.contains('crystal-loading-overlay') &&
            !element.classList.contains('sidebar') &&
            !element.classList.contains('navbar')) {
            element.remove();
        }
    });

    console.log('✅ تم إزالة جميع الإشعارات للمستخدم المحدود');
}

// تسجيل الخروج
function logout() {
    if (confirm('هل أنت متأكد من تسجيل الخروج؟')) {
        // إيقاف مراقب الإشعارات للمستخدم المحدود
        if (window.limitedUserNotificationWatcher) {
            clearInterval(window.limitedUserNotificationWatcher);
            window.limitedUserNotificationWatcher = null;
        }

        // إخفاء قسم المستخدم في الهاتف
        hideMobileUserSection();

        // مسح بيانات الجلسة
        localStorage.removeItem('currentUser');

        // إعادة تعيين المتغيرات
        currentUser = null;
        userPermissions = null;

        // إزالة كلاسات المستخدم
        document.body.classList.remove('user-omar', 'admin-user', 'limited-user');

        // إخفاء عناصر إدارة المرفقات
        toggleAttachmentManagementVisibility();

        // إعادة تحميل الصفحة
        location.reload();
    }
}

// إضافة زر تسجيل الخروج للمستخدمين المسجلين
function addLogoutButton() {
    if (!currentUser) {
        console.log('⚠️ لا يوجد مستخدم مسجل دخول - تخطي إضافة زر الخروج');
        return;
    }

    console.log('🔑 إضافة زر تسجيل الخروج للمستخدم:', currentUser);

    // إضافة زر تسجيل الخروج في الشاشات الكبيرة
    const header = document.querySelector('.header-section.header-actions');
    if (header && !document.getElementById('logoutBtn')) {
        const logoutBtn = document.createElement('button');
        logoutBtn.id = 'logoutBtn';
        logoutBtn.className = 'header-btn logout-btn';
        logoutBtn.innerHTML = `
            <i class="fas fa-sign-out-alt"></i>
            خروج (${users[currentUser].fullName})
        `;
        logoutBtn.onclick = logout;
        logoutBtn.style.cssText = `
            background: linear-gradient(135deg, #dc3545, #c82333);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-size: 0.9rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-right: 1rem;
        `;

        header.appendChild(logoutBtn);
        console.log('✅ تم إضافة زر تسجيل الخروج بنجاح');
    } else if (!header) {
        console.warn('⚠️ لم يتم العثور على header للأزرار');
    } else {
        console.log('ℹ️ زر تسجيل الخروج موجود بالفعل');
    }

    // إضافة معلومات المستخدم في القائمة المحمولة
    updateMobileUserSection();
}

// تحديث قسم المستخدم في الهاتف
function updateMobileUserSection() {
    const mobileUserSection = document.getElementById('mobileUserSection');
    const mobileUserName = document.getElementById('mobileUserName');
    const mobileUserRole = document.getElementById('mobileUserRole');

    if (!mobileUserSection || !mobileUserName || !mobileUserRole) return;

    if (currentUser && users[currentUser]) {
        // إظهار قسم المستخدم
        mobileUserSection.style.display = 'block';
        mobileUserSection.classList.remove('hidden');

        // تحديث معلومات المستخدم
        mobileUserName.textContent = users[currentUser].fullName;

        // تحديد دور المستخدم
        let roleText = '';
        let roleColor = '';

        switch (users[currentUser].role) {
            case 'admin':
                roleText = 'مدير النظام';
                roleColor = '#28a745';
                break;
            case 'assistant_admin':
                roleText = 'مدير مساعد';
                roleColor = '#17a2b8';
                break;
            case 'limited':
                roleText = 'مستخدم محدود';
                roleColor = '#ffc107';
                break;
            default:
                roleText = 'مستخدم';
                roleColor = '#6c757d';
        }

        mobileUserRole.textContent = roleText;
        mobileUserRole.style.color = roleColor;

        console.log('📱 تم تحديث قسم المستخدم في الهاتف');
    } else {
        // إخفاء قسم المستخدم
        mobileUserSection.style.display = 'none';
        mobileUserSection.classList.add('hidden');
    }
}

// إخفاء قسم المستخدم عند تسجيل الخروج
function hideMobileUserSection() {
    const mobileUserSection = document.getElementById('mobileUserSection');
    if (mobileUserSection) {
        mobileUserSection.style.display = 'none';
        mobileUserSection.classList.add('hidden');
    }
}

// تحديث وظائف التحرير والحذف للتحقق من الصلاحيات
const originalEditCard = window.editCard;
window.editCard = function(index) {
    if (!checkPermission('editData')) return;
    if (originalEditCard) originalEditCard(index);
};

const originalDeleteCard = window.deleteCard;
window.deleteCard = function(index) {
    if (!checkPermission('deleteData')) return;
    if (originalDeleteCard) originalDeleteCard(index);
};

const originalShowPropertyManager = window.showPropertyManager;
window.showPropertyManager = function() {
    if (!checkPermission('manageProperties')) return;
    if (originalShowPropertyManager) originalShowPropertyManager();
};

// حماية وظائف المرفقات
const originalDeletePropertyAttachment = window.deletePropertyAttachment;
window.deletePropertyAttachment = function(propertyKey, fileIndex) {
    if (!checkAttachmentPermission('delete')) return;
    if (originalDeletePropertyAttachment) originalDeletePropertyAttachment(propertyKey, fileIndex);
};

const originalDeletePropertyAttachmentFromSupabase = window.deletePropertyAttachmentFromSupabase;
window.deletePropertyAttachmentFromSupabase = function(attachmentId, propertyKey) {
    if (!checkAttachmentPermission('delete')) return;
    if (originalDeletePropertyAttachmentFromSupabase) originalDeletePropertyAttachmentFromSupabase(attachmentId, propertyKey);
};

const originalDeleteCardAttachment = window.deleteCardAttachment;
window.deleteCardAttachment = function(cardKey, fileName) {
    if (!checkAttachmentPermission('delete')) return;
    if (originalDeleteCardAttachment) originalDeleteCardAttachment(cardKey, fileName);
};

const originalDeleteCardAttachmentFromSupabase = window.deleteCardAttachmentFromSupabase;
window.deleteCardAttachmentFromSupabase = function(attachmentId, cardKey) {
    if (!checkAttachmentPermission('delete')) return;
    if (originalDeleteCardAttachmentFromSupabase) originalDeleteCardAttachmentFromSupabase(attachmentId, cardKey);
};

const originalDeleteAttachment = window.deleteAttachment;
window.deleteAttachment = function(propertyKey, fileName, city, propertyName) {
    if (!checkAttachmentPermission('delete')) return;
    if (originalDeleteAttachment) originalDeleteAttachment(propertyKey, fileName, city, propertyName);
};

const originalDeleteAttachmentFromSupabase = window.deleteAttachmentFromSupabase;
window.deleteAttachmentFromSupabase = function(attachmentId, propertyKey) {
    if (!checkAttachmentPermission('delete')) return;
    if (originalDeleteAttachmentFromSupabase) originalDeleteAttachmentFromSupabase(attachmentId, propertyKey);
};

// حماية وظائف رفع الملفات
const originalHandleFileUploadEnhanced = window.handleFileUploadEnhanced;
window.handleFileUploadEnhanced = function(event, city, propertyName) {
    if (!checkAttachmentPermission('upload')) return;
    if (originalHandleFileUploadEnhanced) originalHandleFileUploadEnhanced(event, city, propertyName);
};

const originalHandleCardFileUpload = window.handleCardFileUpload;
window.handleCardFileUpload = function(event, cardKey) {
    if (!checkAttachmentPermission('upload')) return;
    if (originalHandleCardFileUpload) originalHandleCardFileUpload(event, cardKey);
};

// حماية وظائف المزامنة
const originalSyncLocalAttachment = window.syncLocalAttachment;
window.syncLocalAttachment = function(propertyKey, fileName) {
    if (!checkPermission('manageAttachments')) return;
    if (originalSyncLocalAttachment) originalSyncLocalAttachment(propertyKey, fileName);
};

// حماية وظائف إدارة المرفقات العامة - السماح للمستخدمين الذين لديهم صلاحية manageAttachments
const originalShowAttachmentsManager = window.showAttachmentsManager;
window.showAttachmentsManager = function() {
    // السماح لجميع المستخدمين المسجلين بعرض إدارة المرفقات
    if (!canViewAttachmentManager()) {
        showNoPermissionMessage('يجب تسجيل الدخول أولاً للوصول إلى إدارة المرفقات');
        return;
    }
    if (originalShowAttachmentsManager) originalShowAttachmentsManager();
};

const originalShowAttachmentsManagerFromDropdown = window.showAttachmentsManagerFromDropdown;
window.showAttachmentsManagerFromDropdown = function() {
    // السماح لجميع المستخدمين المسجلين بعرض إدارة المرفقات
    if (!canViewAttachmentManager()) {
        showNoPermissionMessage('يجب تسجيل الدخول أولاً للوصول إلى إدارة المرفقات');
        return;
    }
    if (originalShowAttachmentsManagerFromDropdown) originalShowAttachmentsManagerFromDropdown();
};

// حماية وظائف تحديث الإجماليات (تحتوي على رفع ملفات)
const originalShowUpdateTotalsModal = window.showUpdateTotalsModal;
window.showUpdateTotalsModal = function() {
    if (!checkPermission('manageAttachments')) return;
    if (originalShowUpdateTotalsModal) originalShowUpdateTotalsModal();
};

const originalShowDataImportModal = window.showDataImportModal;
window.showDataImportModal = function() {
    if (!checkPermission('importData')) return;
    if (originalShowDataImportModal) originalShowDataImportModal();
};

// التحقق من المصادقة
function checkAuthentication() {
    console.log('🔐 التحقق من المصادقة...');

    // التحقق من وجود مستخدم محفوظ في localStorage
    const savedUser = localStorage.getItem('currentUser');

    if (savedUser && users[savedUser]) {
        console.log('✅ تم العثور على مستخدم محفوظ:', savedUser);
        setCurrentUser(savedUser);
        return true;
    } else {
        console.log('❌ لا يوجد مستخدم محفوظ، سيتم استخدام صلاحيات افتراضية');
        // تعيين صلاحيات افتراضية للمستخدم غير المسجل
        currentUser = 'guest';
        userPermissions = {
            viewData: true,
            editData: true,
            deleteData: true,
            manageProperties: true,
            manageAttachments: true,
            exportData: true,
            importData: true,
            manageSettings: true
        };
        return false;
    }
}

// تهيئة نظام الصلاحيات عند تحميل الصفحة
document.addEventListener('DOMContentLoaded', function() {
    // تأخير قصير للتأكد من تحميل جميع العناصر
    setTimeout(() => {
        // التحقق من المصادقة أولاً
        checkAuthentication();

        initializePermissionSystem();

        // إضافة زر تسجيل الخروج إذا كان المستخدم مسجل دخول
        if (currentUser && currentUser !== 'guest') {
            addLogoutButton();
            // تحديث رؤية عناصر إدارة المرفقات (مع تأخير قصير)
            setTimeout(() => {
                toggleAttachmentManagementVisibility();
                showAttachmentManagementButtons();
            }, 1000);
            updateMobileUserSection();
        }

        // تحميل سجلات التتبع
        loadLocalChangeTrackingLogs();

        // إضافة حقول التتبع للبيانات الموجودة
        addTrackingFieldsToExistingData();

        // إنشاء بيانات تجريبية للتتبع (للاختبار)
        createSampleTrackingData();
    }, 1000);
});

// ==================== وظائف إخفاء/إظهار أزرار الهيدر ====================

// تبديل إظهار/إخفاء أزرار الهيدر
function toggleHeaderButtons() {
    areHeaderButtonsVisible = !areHeaderButtonsVisible;

    // حفظ الحالة في localStorage
    localStorage.setItem('headerButtonsVisible', areHeaderButtonsVisible);

    updateHeaderButtonsDisplay();
}

// تحديث عرض الأزرار
function updateHeaderButtonsDisplay() {
    const hideableButtons = document.querySelectorAll('.hideable-header-btn');
    const toggleIcon = document.getElementById('toggleHeaderIcon');
    const toggleText = document.getElementById('toggleHeaderText');

    hideableButtons.forEach(button => {
        if (areHeaderButtonsVisible) {
            // إظهار الأزرار
            button.style.opacity = '1';
            button.style.transform = 'scale(1)';
            button.style.visibility = 'visible';
            button.style.pointerEvents = 'auto';
        } else {
            // إخفاء الأزرار
            button.style.opacity = '0';
            button.style.transform = 'scale(0.8)';
            button.style.visibility = 'hidden';
            button.style.pointerEvents = 'none';
        }
    });

    // تحديث أيقونة ونص الزر
    if (toggleIcon && toggleText) {
        if (areHeaderButtonsVisible) {
            toggleIcon.className = 'fas fa-eye';
            toggleText.textContent = 'إخفاء الأزرار';
            document.getElementById('toggleHeaderBtn').title = 'إخفاء الأزرار';
        } else {
            toggleIcon.className = 'fas fa-eye-slash';
            toggleText.textContent = 'إظهار الأزرار';
            document.getElementById('toggleHeaderBtn').title = 'إظهار الأزرار';
        }
    }
}

// تهيئة حالة الأزرار عند تحميل الصفحة
function initializeHeaderButtons() {
    // استعادة الحالة المحفوظة من localStorage
    const savedState = localStorage.getItem('headerButtonsVisible');
    if (savedState !== null) {
        areHeaderButtonsVisible = savedState === 'true';
    }

    const hideableButtons = document.querySelectorAll('.hideable-header-btn');

    hideableButtons.forEach(button => {
        // إضافة تأثيرات الانتقال
        button.style.transition = 'all 0.3s ease';
    });

    // تطبيق الحالة المحفوظة
    updateHeaderButtonsDisplay();
}

// ==================== وظيفة إفراغ الوحدة ====================

// إفراغ الوحدة من جميع بيانات المستأجر
async function emptyUnit(contractNumber, propertyName, unitNumber) {
    // رسالة تأكيد
    const confirmMessage = `هل أنت متأكد من إفراغ هذه الوحدة؟\n\nسيتم حذف جميع البيانات التالية:\n- اسم المستأجر\n- رقم العقد\n- تواريخ العقد\n- المبالغ المالية\n- جميع الأقساط\n\nسيتم الاحتفاظ بالمعلومات الأساسية للوحدة فقط.`;

    if (!confirm(confirmMessage)) {
        return;
    }

    // البحث عن الوحدة
    let propertyIndex = -1;

    if (contractNumber && propertyName) {
        propertyIndex = properties.findIndex(p =>
            p['رقم العقد'] === contractNumber && p['اسم العقار'] === propertyName
        );
    } else if (unitNumber && propertyName) {
        propertyIndex = properties.findIndex(p =>
            p['رقم  الوحدة '] === unitNumber && p['اسم العقار'] === propertyName
        );
    }

    if (propertyIndex === -1) {
        alert('لم يتم العثور على الوحدة المطلوبة');
        return;
    }

    const property = properties[propertyIndex];

    // الاحتفاظ بالمعلومات الأساسية للوحدة فقط
    const basicInfo = {
        'Column1': property['Column1'],
        'اسم العقار': property['اسم العقار'],
        'المدينة': property['المدينة'],
        'رقم  الوحدة ': property['رقم  الوحدة '],
        'المساحة': property['المساحة'],
        'رقم حساب الكهرباء': property['رقم حساب الكهرباء'],
        'الارتفاع': property['الارتفاع'],
        'موقع العقار': property['موقع العقار'],
        'رقم الصك': property['رقم الصك'],
        'السجل العيني ': property['السجل العيني '],
        'مساحةالصك': property['مساحةالصك'],
        'المالك': property['المالك']
    };

    // حذف جميع البيانات الأخرى
    const fieldsToEmpty = [
        'اسم المستأجر',
        'رقم العقد',
        'نوع العقد',
        'تاريخ البداية',
        'تاريخ النهاية',
        'تاريخ نهاية القسط',
        'قيمة  الايجار ',
        'الاجمالى',
        'عدد الاقساط المتبقية',
        'الحالة النهائية',
        'الحالة الجديدة'
    ];

    // حذف جميع الأقساط (من 1 إلى 10)
    for (let i = 1; i <= 10; i++) {
        const dateKey = i === 1 ? 'تاريخ القسط الاول' :
                       i === 2 ? 'تاريخ القسط الثاني' :
                       `تاريخ القسط ${getArabicNumber(i)}`;
        const amountKey = i === 1 ? 'مبلغ القسط الاول' :
                         i === 2 ? 'مبلغ القسط الثاني' :
                         `مبلغ القسط ${getArabicNumber(i)}`;

        fieldsToEmpty.push(dateKey, amountKey);
    }

    // تطبيق الإفراغ
    fieldsToEmpty.forEach(field => {
        basicInfo[field] = null;
    });

    // إضافة سجل التتبع لإفراغ الوحدة
    try {
        await addChangeLog(
            OPERATION_TYPES.EMPTY_UNIT,
            basicInfo,
            {},
            {
                previousTenant: originalTenant,
                reason: 'إفراغ وحدة من المستأجر'
            }
        );
        console.log('📝 تم إضافة سجل تتبع إفراغ الوحدة');
    } catch (error) {
        console.error('❌ خطأ في إضافة سجل تتبع إفراغ الوحدة:', error);
    }

    // تحديث العقار
    properties[propertyIndex] = basicInfo;

    // إعادة حساب الحالات
    initializeApp();

    // إغلاق النافذة وإظهار رسالة نجاح
    closeModal();
    alert('تم إفراغ الوحدة بنجاح!\nتم حذف جميع بيانات المستأجر والعقد والأقساط.');

    // إعادة تحميل البيانات
    renderData();
}

// ==================== معالجات الأخطاء العامة ====================

// معالج أخطاء عام لمنع الإغلاق المفاجئ للنوافذ
window.addEventListener('error', function(event) {
    console.error('❌ خطأ عام في التطبيق:', event.error);
    // منع إغلاق النوافذ بسبب الأخطاء
    event.preventDefault();
    return false;
});

window.addEventListener('unhandledrejection', function(event) {
    console.error('❌ خطأ في Promise غير معالج:', event.reason);
    // منع إغلاق النوافذ بسبب أخطاء Promise
    event.preventDefault();
});

// تهيئة التطبيق عند تحميل الصفحة
document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 بدء تحميل التطبيق...');
    try {
        initializeApp();

        // إعادة تعيين الفلاتر إلى الافتراضي عند تحميل الصفحة
        setTimeout(() => {
            console.log('🔄 إعادة تعيين الفلاتر إلى الافتراضي عند تحميل الصفحة...');
            resetFiltersToDefault();
        }, 1500);

        // تهيئة نظام حفظ حالة التصفح
        setTimeout(() => {
            console.log('💾 تهيئة نظام حفظ حالة التصفح...');
            initializeStatePersistence();
        }, 2000);

        // تهيئة الشات بوت الذكي
        setTimeout(() => {
            if (typeof initializeChatBot === 'function') {
                console.log('🤖 تهيئة الشات بوت الذكي...');
                initializeChatBot();
            }
        }, 3000);

    } catch (initError) {
        console.error('❌ خطأ في تهيئة التطبيق:', initError);
        // إعادة المحاولة بعد ثانية واحدة
        setTimeout(() => {
            try {
                initializeApp();
            } catch (retryError) {
                console.error('❌ فشل في إعادة تهيئة التطبيق:', retryError);
            }
        }, 1000);
    }
});

// مراقب DOM لتطبيق قيود المرفقات تلقائياً
function setupAttachmentsPermissionObserver() {
    if (!currentUser || users[currentUser]?.role !== 'limited') return;

    // إنشاء مراقب للتغييرات في DOM
    const observer = new MutationObserver(function(mutations) {
        let shouldApplyRestrictions = false;

        mutations.forEach(function(mutation) {
            // التحقق من إضافة عقد جديدة
            if (mutation.type === 'childList') {
                mutation.addedNodes.forEach(function(node) {
                    if (node.nodeType === Node.ELEMENT_NODE) {
                        // التحقق من وجود عناصر مرفقات جديدة
                        if (node.classList && (
                            node.classList.contains('attachments-modal') ||
                            node.classList.contains('card-attachments-modal') ||
                            node.classList.contains('mobile-attachments-modal') ||
                            node.querySelector && (
                                node.querySelector('.upload-area') ||
                                node.querySelector('.delete-btn') ||
                                node.querySelector('.btn-delete')
                            )
                        )) {
                            shouldApplyRestrictions = true;
                        }
                    }
                });
            }
        });

        if (shouldApplyRestrictions) {
            setTimeout(() => {
                applyAttachmentsRestrictions();
                addLimitedUserNoticeToAttachments();
            }, 100);
        }
    });

    // بدء مراقبة التغييرات
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });

    console.log('👁️ تم تفعيل مراقب قيود المرفقات');
}

// تحديث وظيفة setCurrentUser لتشمل مراقب المرفقات
// (تم دمجها مع الوظيفة الأصلية بدلاً من إعادة تعريفها)

// ==================== وظائف مكافحة التكرار ====================

// التحقق من وجود وحدات مكررة
function checkForDuplicateUnits(unitNumber, propertyName) {
    if (!unitNumber || !propertyName) {
        return { hasDuplicates: false, count: 0, indices: [] };
    }

    const duplicateIndices = [];
    properties.forEach((p, index) => {
        if (p['رقم  الوحدة '] === unitNumber && p['اسم العقار'] === propertyName) {
            duplicateIndices.push(index);
        }
    });

    const hasDuplicates = duplicateIndices.length > 1;

    if (hasDuplicates) {
        console.warn(`⚠️ تم اكتشاف ${duplicateIndices.length} نسخة من الوحدة "${unitNumber}" في العقار "${propertyName}"`);
        console.log('📍 فهارس النسخ المكررة:', duplicateIndices);
    }

    return {
        hasDuplicates: hasDuplicates,
        count: duplicateIndices.length,
        indices: duplicateIndices
    };
}

// إصلاح الوحدات المكررة بالاحتفاظ بالأحدث
function fixDuplicateUnits(unitNumber, propertyName) {
    const duplicateCheck = checkForDuplicateUnits(unitNumber, propertyName);

    if (!duplicateCheck.hasDuplicates) {
        return { fixed: false, message: 'لا توجد وحدات مكررة' };
    }

    console.log(`🔧 بدء إصلاح ${duplicateCheck.count} نسخة مكررة من الوحدة "${unitNumber}"`);

    // العثور على أحدث نسخة (بناءً على تاريخ آخر تحديث)
    let latestIndex = duplicateCheck.indices[0];
    let latestDate = new Date(0); // تاريخ قديم جداً

    duplicateCheck.indices.forEach(index => {
        const unit = properties[index];
        const updateDate = unit['تاريخ آخر تحديث'] ? new Date(unit['تاريخ آخر تحديث']) : new Date(0);

        if (updateDate > latestDate) {
            latestDate = updateDate;
            latestIndex = index;
        }
    });

    console.log(`📅 أحدث نسخة في الفهرس: ${latestIndex} (تاريخ: ${properties[latestIndex]['تاريخ آخر تحديث'] || 'غير محدد'})`);

    // حذف النسخ المكررة (من الأعلى للأسفل لتجنب تغيير الفهارس)
    let deletedCount = 0;
    for (let i = duplicateCheck.indices.length - 1; i >= 0; i--) {
        const index = duplicateCheck.indices[i];
        if (index !== latestIndex) {
            console.log(`🗑️ حذف النسخة المكررة من الفهرس: ${index}`);
            properties.splice(index, 1);
            deletedCount++;
        }
    }

    // حفظ البيانات
    localStorage.setItem('properties', JSON.stringify(properties));

    console.log(`✅ تم إصلاح التكرار: حُذفت ${deletedCount} نسخة، تبقت نسخة واحدة`);

    return {
        fixed: true,
        deletedCount: deletedCount,
        keptIndex: latestIndex,
        message: `تم حذف ${deletedCount} نسخة مكررة والاحتفاظ بالأحدث`
    };
}

// فحص شامل للتكرار في جميع الوحدات
function performGlobalDuplicateCheck() {
    console.log('🔍 بدء فحص شامل للتكرار في جميع الوحدات...');

    const unitMap = new Map();
    const duplicates = [];

    // تجميع الوحدات حسب المفتاح الفريد
    properties.forEach((unit, index) => {
        const unitKey = `${unit['اسم العقار']}_${unit['رقم  الوحدة ']}`;

        if (!unitMap.has(unitKey)) {
            unitMap.set(unitKey, []);
        }

        unitMap.get(unitKey).push({ unit, index });
    });

    // العثور على المكررات
    unitMap.forEach((units, unitKey) => {
        if (units.length > 1) {
            duplicates.push({
                key: unitKey,
                count: units.length,
                units: units
            });
        }
    });

    if (duplicates.length > 0) {
        console.warn(`⚠️ تم اكتشاف ${duplicates.length} مجموعة من الوحدات المكررة:`);
        duplicates.forEach(dup => {
            console.log(`   - ${dup.key}: ${dup.count} نسخة`);
        });
    } else {
        console.log('✅ لا توجد وحدات مكررة');
    }

    return {
        hasDuplicates: duplicates.length > 0,
        duplicateGroups: duplicates,
        totalDuplicates: duplicates.reduce((sum, dup) => sum + dup.count - 1, 0)
    };
}

// إصلاح جميع الوحدات المكررة
function fixAllDuplicates() {
    const globalCheck = performGlobalDuplicateCheck();

    if (!globalCheck.hasDuplicates) {
        return { fixed: false, message: 'لا توجد وحدات مكررة للإصلاح' };
    }

    console.log(`🔧 بدء إصلاح ${globalCheck.duplicateGroups.length} مجموعة من الوحدات المكررة...`);

    let totalFixed = 0;
    globalCheck.duplicateGroups.forEach(group => {
        const [propertyName, unitNumber] = group.key.split('_');
        const result = fixDuplicateUnits(unitNumber, propertyName);
        if (result.fixed) {
            totalFixed += result.deletedCount;
        }
    });

    console.log(`✅ تم إصلاح جميع التكرارات: حُذفت ${totalFixed} وحدة مكررة`);

    return {
        fixed: true,
        totalFixed: totalFixed,
        message: `تم إصلاح جميع التكرارات وحذف ${totalFixed} وحدة مكررة`
    };
}

// إصلاح التكرار مع نافذة تأكيد
function fixAllDuplicatesWithConfirmation() {
    console.log('🔍 فحص الوحدات المكررة...');

    const globalCheck = performGlobalDuplicateCheck();

    if (!globalCheck.hasDuplicates) {
        alert('✅ لا توجد وحدات مكررة!\n\nجميع الوحدات فريدة ولا تحتاج إلى إصلاح.');
        return;
    }

    // إنشاء نافذة تأكيد مع تفاصيل التكرار
    const confirmModal = document.createElement('div');
    confirmModal.className = 'modal-overlay';
    confirmModal.style.display = 'flex';
    confirmModal.innerHTML = `
        <div class="modal-box" style="max-width: 600px;">
            <div class="modal-header">
                <h3 style="color: #dc3545; margin: 0;">
                    <i class="fas fa-exclamation-triangle"></i> تم اكتشاف وحدات مكررة
                </h3>
            </div>
            <div class="modal-body" style="padding: 20px;">
                <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 15px; margin-bottom: 20px;">
                    <p style="margin: 0; color: #856404;">
                        <i class="fas fa-info-circle"></i>
                        <strong>تم العثور على ${globalCheck.duplicateGroups.length} مجموعة من الوحدات المكررة</strong>
                    </p>
                    <p style="margin: 10px 0 0 0; color: #856404;">
                        إجمالي الوحدات المكررة: ${globalCheck.totalDuplicates}
                    </p>
                </div>

                <div style="background: #f8f9fa; border-radius: 8px; padding: 15px; margin-bottom: 20px; max-height: 200px; overflow-y: auto;">
                    <h4 style="margin: 0 0 10px 0; color: #495057;">تفاصيل الوحدات المكررة:</h4>
                    ${globalCheck.duplicateGroups.map(group => {
                        const [propertyName, unitNumber] = group.key.split('_');
                        return `<p style="margin: 5px 0;">• الوحدة "${unitNumber}" في "${propertyName}" (${group.count} نسخة)</p>`;
                    }).join('')}
                </div>

                <div style="background: #d1ecf1; border: 1px solid #bee5eb; border-radius: 8px; padding: 15px; margin-bottom: 20px;">
                    <p style="margin: 0; color: #0c5460;">
                        <i class="fas fa-lightbulb"></i>
                        <strong>ما سيحدث عند الإصلاح:</strong>
                    </p>
                    <ul style="margin: 10px 0 0 20px; color: #0c5460;">
                        <li>سيتم الاحتفاظ بأحدث نسخة من كل وحدة</li>
                        <li>سيتم حذف النسخ المكررة الأقدم</li>
                        <li>سيتم حفظ البيانات تلقائياً</li>
                        <li>لن تفقد أي بيانات مهمة</li>
                    </ul>
                </div>

                <p style="color: #dc3545; font-weight: 600; text-align: center;">
                    هل تريد المتابعة وإصلاح جميع الوحدات المكررة؟
                </p>
            </div>
            <div class="modal-actions">
                <button class="modal-action-btn close-btn" onclick="closeDuplicateFixModal()">
                    <i class="fas fa-times"></i> إلغاء
                </button>
                <button class="modal-action-btn print-btn" onclick="confirmFixAllDuplicates()"
                        style="background: #28a745; border-color: #28a745;">
                    <i class="fas fa-broom"></i> إصلاح التكرار
                </button>
            </div>
        </div>
    `;

    document.body.appendChild(confirmModal);
}

// إغلاق نافذة إصلاح التكرار
function closeDuplicateFixModal() {
    const modal = document.querySelector('.modal-overlay');
    if (modal) {
        modal.remove();
    }
}

// تأكيد إصلاح التكرار
function confirmFixAllDuplicates() {
    closeDuplicateFixModal();

    // إظهار مؤشر التحميل
    const loadingModal = document.createElement('div');
    loadingModal.className = 'modal-overlay';
    loadingModal.style.display = 'flex';
    loadingModal.innerHTML = `
        <div class="modal-box" style="text-align: center; padding: 40px;">
            <i class="fas fa-spinner fa-spin" style="font-size: 2rem; color: #28a745; margin-bottom: 20px;"></i>
            <h3>جاري إصلاح التكرار...</h3>
            <p>يرجى الانتظار، جاري إصلاح جميع الوحدات المكررة</p>
        </div>
    `;
    document.body.appendChild(loadingModal);

    try {
        const result = fixAllDuplicates();

        // إزالة مؤشر التحميل
        loadingModal.remove();

        if (result.fixed) {
            // إعادة تحميل البيانات
            renderData();
            updateTotalStats();

            // إظهار رسالة نجاح
            showSuccessMessage(
                'تم إصلاح التكرار بنجاح! 🎉',
                `تم حذف ${result.totalFixed} وحدة مكررة والاحتفاظ بأحدث نسخة من كل وحدة.\n\nالآن جميع الوحدات فريدة ولن تظهر مكررة عند التعديل.`
            );
        } else {
            alert('لم يتم العثور على وحدات مكررة للإصلاح.');
        }

    } catch (error) {
        console.error('❌ خطأ في إصلاح التكرار:', error);
        loadingModal.remove();
        // تم إزالة رسالة الخطأ حسب طلب المستخدم
    }
}

// ==================== نافذة "قيد التطوير" ====================

// عرض نافذة منبثقة لرسالة "قيد التطوير"
function showDevelopmentModal() {
    // التحقق من وجود نافذة مفتوحة بالفعل
    const existingModal = document.getElementById('developmentModal');
    if (existingModal) {
        return; // لا تفتح نافذة جديدة إذا كانت موجودة
    }

    // إنشاء النافذة المنبثقة
    const modalHtml = `
        <div id="developmentModal" class="modal-overlay" style="
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
            backdrop-filter: blur(5px);
            animation: fadeIn 0.3s ease;
        ">
            <div class="development-modal-box" style="
                background: linear-gradient(135deg, #ff9800, #f57c00);
                color: white;
                padding: 40px;
                border-radius: 20px;
                text-align: center;
                box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
                max-width: 500px;
                width: 90%;
                position: relative;
                animation: slideIn 0.4s ease;
                border: 3px solid #fff3e0;
            ">
                <!-- أيقونة الإغلاق -->
                <button onclick="closeDevelopmentModal()" style="
                    position: absolute;
                    top: 15px;
                    right: 15px;
                    background: rgba(255, 255, 255, 0.2);
                    border: none;
                    color: white;
                    font-size: 24px;
                    width: 40px;
                    height: 40px;
                    border-radius: 50%;
                    cursor: pointer;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    transition: all 0.3s ease;
                " onmouseover="this.style.background='rgba(255,255,255,0.3)'" onmouseout="this.style.background='rgba(255,255,255,0.2)'">
                    ×
                </button>

                <!-- محتوى النافذة -->
                <div style="margin-bottom: 30px;">
                    <div style="
                        font-size: 80px;
                        margin-bottom: 20px;
                        animation: bounce 2s infinite;
                    ">🚧</div>

                    <h2 style="
                        margin: 0 0 15px 0;
                        font-size: 28px;
                        font-weight: bold;
                        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
                    ">هذه الميزة قيد التطوير</h2>

                    <p style="
                        margin: 0 0 20px 0;
                        font-size: 18px;
                        opacity: 0.9;
                        line-height: 1.6;
                    ">نعتذر، هذه الميزة غير متاحة حالياً<br>وسيتم تفعيلها قريباً</p>
                </div>

                <!-- شريط التقدم -->
                <div style="
                    background: rgba(255, 255, 255, 0.3);
                    height: 6px;
                    border-radius: 3px;
                    overflow: hidden;
                    margin-bottom: 15px;
                ">
                    <div id="developmentProgressBar" style="
                        background: white;
                        height: 100%;
                        width: 0%;
                        border-radius: 3px;
                        transition: width 0.1s linear;
                    "></div>
                </div>

                <!-- نص العد التنازلي -->
                <p style="
                    margin: 0;
                    font-size: 14px;
                    opacity: 0.8;
                ">سيتم إغلاق هذه النافذة خلال <span id="developmentCountdown">5</span> ثوان</p>
            </div>
        </div>

        <style>
            @keyframes fadeIn {
                from { opacity: 0; }
                to { opacity: 1; }
            }

            @keyframes slideIn {
                from {
                    transform: translateY(-50px) scale(0.9);
                    opacity: 0;
                }
                to {
                    transform: translateY(0) scale(1);
                    opacity: 1;
                }
            }

            @keyframes bounce {
                0%, 20%, 50%, 80%, 100% {
                    transform: translateY(0);
                }
                40% {
                    transform: translateY(-10px);
                }
                60% {
                    transform: translateY(-5px);
                }
            }

            @keyframes fadeOut {
                from { opacity: 1; }
                to { opacity: 0; }
            }

            @keyframes slideOut {
                from {
                    transform: translateY(0) scale(1);
                    opacity: 1;
                }
                to {
                    transform: translateY(-50px) scale(0.9);
                    opacity: 0;
                }
            }
        </style>
    `;

    // إضافة النافذة للصفحة
    document.body.insertAdjacentHTML('beforeend', modalHtml);

    // بدء العد التنازلي
    startDevelopmentCountdown();

    // إغلاق تلقائي بعد 5 ثوان
    setTimeout(() => {
        closeDevelopmentModal();
    }, 5000);

    console.log('🚧 تم عرض نافذة "قيد التطوير" لمدة 5 ثوان');
}

// بدء العد التنازلي وشريط التقدم
function startDevelopmentCountdown() {
    let timeLeft = 5;
    const countdownElement = document.getElementById('developmentCountdown');
    const progressBar = document.getElementById('developmentProgressBar');

    const interval = setInterval(() => {
        timeLeft--;

        if (countdownElement) {
            countdownElement.textContent = timeLeft;
        }

        if (progressBar) {
            const progress = ((5 - timeLeft) / 5) * 100;
            progressBar.style.width = progress + '%';
        }

        if (timeLeft <= 0) {
            clearInterval(interval);
        }
    }, 1000);
}

// إغلاق نافذة "قيد التطوير"
function closeDevelopmentModal() {
    const modal = document.getElementById('developmentModal');
    if (modal) {
        // إضافة تأثير الإغلاق
        modal.style.animation = 'fadeOut 0.3s ease';
        const modalBox = modal.querySelector('.development-modal-box');
        if (modalBox) {
            modalBox.style.animation = 'slideOut 0.3s ease';
        }

        // إزالة النافذة بعد انتهاء التأثير
        setTimeout(() => {
            modal.remove();
        }, 300);

        console.log('🚧 تم إغلاق نافذة "قيد التطوير"');
    }
}

// إضافة الدوال للنافذة العامة
window.showDevelopmentModal = showDevelopmentModal;
window.closeDevelopmentModal = closeDevelopmentModal;

// ==================== ضمان ظهور زر سجلات التتبع لشركة السنيدي ====================

// التأكد من ظهور زر سجلات التتبع في القائمة المحمولة لشركة السنيدي
function ensureTrackingButtonVisibilityForSenidi() {
    console.log('🔍 التحقق من ظهور زر سجلات التتبع في القائمة المحمولة لشركة السنيدي...');

    // التحقق من وجود الزر في القائمة المحمولة
    const mobileTrackingBtn = document.getElementById('mobile-change-tracking-btn');

    if (mobileTrackingBtn) {
        // التأكد من أن الزر مرئي
        mobileTrackingBtn.style.display = 'block';
        mobileTrackingBtn.style.visibility = 'visible';
        mobileTrackingBtn.style.opacity = '1';

        // التأكد من أن العنصر الأب (li) مرئي أيضاً
        const parentLi = mobileTrackingBtn.closest('li');
        if (parentLi) {
            parentLi.style.display = 'block';
            parentLi.style.visibility = 'visible';
            parentLi.style.opacity = '1';
        }

        // إزالة أي معالجات أحداث سابقة وإضافة معالج جديد
        const newButton = mobileTrackingBtn.cloneNode(true);
        mobileTrackingBtn.parentNode.replaceChild(newButton, mobileTrackingBtn);

        // إضافة معالج الحدث الجديد الذي يظهر النافذة المنبثقة
        newButton.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();

            // إغلاق القائمة المحمولة
            const mobileMenu = document.getElementById('mobileMenu');
            const menuOverlay = document.getElementById('menuOverlay');
            if (mobileMenu) mobileMenu.classList.remove('active');
            if (menuOverlay) menuOverlay.classList.remove('active');
            document.body.style.overflow = '';

            // عرض النافذة المنبثقة "قيد التطوير"
            console.log('🚧 عرض نافذة "قيد التطوير" من القائمة المحمولة');
            showDevelopmentModal();

            return false;
        });

        // إضافة تنسيق مرئي للزر
        newButton.style.background = 'linear-gradient(135deg, #ff9800, #f57c00)';
        newButton.style.color = 'white';
        newButton.style.border = '2px solid #fff3e0';
        newButton.style.borderRadius = '8px';
        newButton.style.padding = '12px 16px';
        newButton.style.margin = '4px 0';
        newButton.style.width = '100%';
        newButton.style.textAlign = 'right';
        newButton.style.fontSize = '16px';
        newButton.style.fontWeight = '500';
        newButton.style.transition = 'all 0.3s ease';

        // إضافة تأثير hover
        newButton.addEventListener('mouseenter', function() {
            this.style.background = 'linear-gradient(135deg, #f57c00, #ef6c00)';
            this.style.transform = 'translateX(-5px)';
        });

        newButton.addEventListener('mouseleave', function() {
            this.style.background = 'linear-gradient(135deg, #ff9800, #f57c00)';
            this.style.transform = 'translateX(0)';
        });

        console.log('✅ تم ضمان ظهور وعمل زر سجلات التتبع في القائمة المحمولة');

    } else {
        console.warn('⚠️ لم يتم العثور على زر سجلات التتبع في القائمة المحمولة');

        // إنشاء الزر إذا لم يكن موجوداً
        createMobileTrackingButtonForSenidi();
    }

    // التحقق من الأزرار الأخرى في الشاشات الكبيرة أيضاً
    ensureDesktopTrackingButtonsForSenidi();
}

// إنشاء زر سجلات التتبع في القائمة المحمولة إذا لم يكن موجوداً
function createMobileTrackingButtonForSenidi() {
    console.log('🔧 إنشاء زر سجلات التتبع في القائمة المحمولة...');

    const mobileMenuContent = document.querySelector('.mobile-menu-content ol');
    if (mobileMenuContent) {
        // إنشاء عنصر li جديد
        const newLi = document.createElement('li');

        // إنشاء الزر
        const newButton = document.createElement('button');
        newButton.id = 'mobile-change-tracking-btn';
        newButton.innerHTML = '<i class="fas fa-history"></i> سجل التتبع';

        // إضافة معالج الحدث
        newButton.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();

            // إغلاق القائمة المحمولة
            const mobileMenu = document.getElementById('mobileMenu');
            const menuOverlay = document.getElementById('menuOverlay');
            if (mobileMenu) mobileMenu.classList.remove('active');
            if (menuOverlay) menuOverlay.classList.remove('active');
            document.body.style.overflow = '';

            // عرض النافذة المنبثقة
            showDevelopmentModal();

            return false;
        });

        // إضافة التنسيق
        newButton.style.background = 'linear-gradient(135deg, #ff9800, #f57c00)';
        newButton.style.color = 'white';
        newButton.style.border = '2px solid #fff3e0';
        newButton.style.borderRadius = '8px';
        newButton.style.padding = '12px 16px';
        newButton.style.margin = '4px 0';
        newButton.style.width = '100%';
        newButton.style.textAlign = 'right';
        newButton.style.fontSize = '16px';
        newButton.style.fontWeight = '500';

        // إضافة الزر إلى li
        newLi.appendChild(newButton);

        // إضافة li إلى القائمة (في بداية القائمة)
        mobileMenuContent.insertBefore(newLi, mobileMenuContent.firstChild);

        console.log('✅ تم إنشاء زر سجلات التتبع في القائمة المحمولة');
    }
}

// التأكد من عمل أزرار سجلات التتبع في الشاشات الكبيرة أيضاً
function ensureDesktopTrackingButtonsForSenidi() {
    console.log('🖥️ التحقق من أزرار سجلات التتبع في الشاشات الكبيرة...');

    // البحث عن جميع أزرار سجلات التتبع
    const trackingButtons = document.querySelectorAll('[onclick*="createSampleTrackingDataAndShow"], [onclick*="showChangeTrackingModal"]');

    trackingButtons.forEach((button, index) => {
        // تجاهل الزر المحمول (تم التعامل معه بالفعل)
        if (button.id === 'mobile-change-tracking-btn') {
            return;
        }

        // إزالة معالج الحدث القديم وإضافة معالج جديد
        const newButton = button.cloneNode(true);
        button.parentNode.replaceChild(newButton, button);

        // إضافة معالج الحدث الجديد
        newButton.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();

            console.log('🚧 عرض نافذة "قيد التطوير" من الشاشة الكبيرة');
            showDevelopmentModal();

            return false;
        });

        console.log(`✅ تم تحديث زر سجلات التتبع #${index + 1} في الشاشة الكبيرة`);
    });
}

// ==================== اختبار منع الوصول لسجلات التتبع ====================

// دالة اختبار منع الوصول لسجلات التتبع لشركة السنيدي
function testTrackingAccessRestriction() {
    console.log('🧪 اختبار منع الوصول لسجلات التتبع...');

    const currentUserName = getCurrentUser();
    const currentUserKey = window.currentUser;

    console.log('👤 المستخدم الحالي:', {
        userKey: currentUserKey,
        userName: currentUserName,
        fullUserData: users[currentUserKey]
    });

    // فحص شروط المنع
    const isBlocked = currentUserKey === '1234' ||
                     currentUserName === 'شركة السنيدي' ||
                     currentUserName === 'شركة السنيدي1234' ||
                     (currentUserName && currentUserName.includes('السنيدي'));

    console.log('🔍 نتيجة فحص المنع:', {
        isBlocked: isBlocked,
        reason: isBlocked ? 'المستخدم ممنوع من الوصول' : 'المستخدم مسموح له بالوصول'
    });

    if (isBlocked) {
        showToast('✅ اختبار ناجح: المستخدم ممنوع من الوصول لسجلات التتبع', 'success');
        console.log('✅ الفحص يعمل بشكل صحيح - المستخدم ممنوع');

        // عرض النافذة التجريبية
        setTimeout(() => {
            showDevelopmentModal();
        }, 1000);
    } else {
        showToast('ℹ️ المستخدم الحالي مسموح له بالوصول لسجلات التتبع', 'info');
        console.log('ℹ️ المستخدم الحالي مسموح له بالوصول');
    }

    return isBlocked;
}

// دالة لاختبار جميع نقاط الوصول لسجلات التتبع
function testAllTrackingAccessPoints() {
    console.log('🔬 اختبار جميع نقاط الوصول لسجلات التتبع...');

    const currentUserName = getCurrentUser();
    const currentUserKey = window.currentUser;

    console.log('👤 بيانات المستخدم:', {
        userKey: currentUserKey,
        userName: currentUserName
    });

    // اختبار 1: دالة عرض سجلات التتبع
    console.log('1️⃣ اختبار showChangeTrackingModal...');
    try {
        // محاكاة الاستدعاء (بدون تنفيذ فعلي)
        const isBlocked1 = currentUserKey === '1234' ||
                          currentUserName === 'شركة السنيدي' ||
                          currentUserName === 'شركة السنيدي1234' ||
                          (currentUserName && currentUserName.includes('السنيدي'));
        console.log('   النتيجة:', isBlocked1 ? 'ممنوع ✅' : 'مسموح ❌');
    } catch (e) {
        console.log('   خطأ:', e.message);
    }

    // اختبار 2: دالة إدارة سجلات التتبع
    console.log('2️⃣ اختبار showTrackingManagementModal...');
    try {
        const isBlocked2 = currentUserKey === '1234' ||
                          currentUserName === 'شركة السنيدي' ||
                          currentUserName === 'شركة السنيدي1234' ||
                          (currentUserName && currentUserName.includes('السنيدي'));
        console.log('   النتيجة:', isBlocked2 ? 'ممنوع ✅' : 'مسموح ❌');
    } catch (e) {
        console.log('   خطأ:', e.message);
    }

    // اختبار 3: دالة إنشاء البيانات التجريبية
    console.log('3️⃣ اختبار createSampleTrackingDataAndShow...');
    try {
        const isBlocked3 = currentUserKey === '1234' ||
                          currentUserName === 'شركة السنيدي' ||
                          currentUserName === 'شركة السنيدي1234' ||
                          (currentUserName && currentUserName.includes('السنيدي'));
        console.log('   النتيجة:', isBlocked3 ? 'ممنوع ✅' : 'مسموح ❌');
    } catch (e) {
        console.log('   خطأ:', e.message);
    }

    const allBlocked = currentUserKey === '1234' ||
                      currentUserName === 'شركة السنيدي' ||
                      currentUserName === 'شركة السنيدي1234' ||
                      (currentUserName && currentUserName.includes('السنيدي'));

    if (allBlocked) {
        showToast('✅ جميع نقاط الوصول محمية بشكل صحيح', 'success');
        console.log('✅ جميع الاختبارات نجحت - المستخدم ممنوع من جميع نقاط الوصول');
    } else {
        showToast('ℹ️ المستخدم الحالي مسموح له بالوصول', 'info');
        console.log('ℹ️ المستخدم الحالي مسموح له بالوصول لسجلات التتبع');
    }

    return allBlocked;
}

// إضافة الدوال للنافذة العامة للاختبار
window.testTrackingAccessRestriction = testTrackingAccessRestriction;
window.testAllTrackingAccessPoints = testAllTrackingAccessPoints;

// ==================== وظائف عميل جديد وتجديد العقد ====================

// تعيين عميل جديد
function setNewClient(contractNumber, propertyName, unitNumber) {
    if (!checkPermission('editData')) return;

    const confirmMessage = 'هل أنت متأكد من تعيين عميل جديد لهذه الوحدة؟\n\nسيتم مسح بيانات العميل الحالي وإعداد الوحدة لعميل جديد.';

    if (!confirm(confirmMessage)) {
        return;
    }

    try {
        // البحث عن الوحدة
        const propertyIndex = properties.findIndex(p => {
            if (contractNumber && propertyName) {
                return p['رقم العقد'] === contractNumber && p['اسم العقار'] === propertyName;
            } else if (unitNumber && propertyName) {
                return p['رقم  الوحدة '] === unitNumber && p['اسم العقار'] === propertyName;
            }
            return false;
        });

        if (propertyIndex === -1) {
            alert('❌ لم يتم العثور على الوحدة المطلوبة');
            return;
        }

        // مسح بيانات العميل الحالي
        const property = properties[propertyIndex];
        const fieldsToKeep = [
            'المدينة', 'اسم العقار', 'رقم  الوحدة ', 'نوع الوحدة',
            'المساحة', 'عدد الغرف', 'عدد دورات المياه', 'الطابق',
            'موقع الوحدة', 'حالة الوحدة', 'ملاحظات الوحدة'
        ];

        // إنشاء كائن جديد يحتوي على البيانات الأساسية فقط
        const newProperty = {};
        fieldsToKeep.forEach(field => {
            if (property[field] !== undefined) {
                newProperty[field] = property[field];
            }
        });

        // إضافة معلومات التحديث
        newProperty['تاريخ آخر تحديث'] = new Date().toLocaleDateString('ar-SA');
        newProperty['نوع التحديث'] = 'عميل جديد';
        newProperty['المسؤول عن التحديث'] = getCurrentUser();
        newProperty['حالة الوحدة'] = 'فارغ';

        // استبدال البيانات القديمة
        properties[propertyIndex] = newProperty;

        // حفظ البيانات
        saveDataLocally();

        // مزامنة مع Supabase إذا متاح
        if (typeof syncToSupabase === 'function') {
            syncToSupabase().catch(error => {
                console.error('⚠️ خطأ في مزامنة Supabase:', error);
            });
        }

        // إعادة تحميل البيانات
        renderData();
        updateTotalStats();

        // إغلاق النافذة
        closeModal();

        alert('✅ تم تعيين الوحدة لعميل جديد بنجاح!\n\nتم مسح بيانات العميل السابق والاحتفاظ بالمعلومات الأساسية للوحدة فقط.');

    } catch (error) {
        console.error('❌ خطأ في تعيين عميل جديد:', error);
        // تم إزالة رسالة الخطأ حسب طلب المستخدم
    }
}

// تجديد العقد
function renewContract(contractNumber, propertyName, unitNumber) {
    if (!checkPermission('editData')) return;

    // البحث عن الوحدة
    const property = properties.find(p => {
        if (contractNumber && propertyName) {
            return p['رقم العقد'] === contractNumber && p['اسم العقار'] === propertyName;
        } else if (unitNumber && propertyName) {
            return p['رقم  الوحدة '] === unitNumber && p['اسم العقار'] === propertyName;
        }
        return false;
    });

    if (!property) {
        alert('❌ لم يتم العثور على الوحدة المطلوبة');
        return;
    }

    // إنشاء نافذة تجديد العقد
    const renewalModalHtml = `
        <div class="modal-overlay" style="display:flex;">
            <div class="modal-box renewal-modal">
                <button class="close-modal" onclick="closeModal()">×</button>
                <div class="modal-header">
                    <h2><i class="fas fa-sync-alt"></i> تجديد العقد</h2>
                    <p>تجديد عقد الوحدة: ${property['رقم  الوحدة ']} - ${propertyName}</p>
                </div>
                <div class="modal-content">
                    <div class="current-contract-info">
                        <h3>معلومات العقد الحالي:</h3>
                        <div class="info-grid">
                            <div><strong>المستأجر:</strong> ${property['اسم المستأجر'] || 'غير محدد'}</div>
                            <div><strong>رقم العقد:</strong> ${property['رقم العقد'] || 'غير محدد'}</div>
                            <div><strong>تاريخ البداية:</strong> ${property['تاريخ بداية العقد'] || 'غير محدد'}</div>
                            <div><strong>تاريخ النهاية:</strong> ${property['تاريخ نهاية العقد'] || 'غير محدد'}</div>
                            <div><strong>قيمة الإيجار:</strong> ${property['قيمة  الايجار '] ? parseFloat(property['قيمة  الايجار ']).toLocaleString() + ' ريال' : 'غير محدد'}</div>
                        </div>
                    </div>

                    <form id="renewalForm" onsubmit="processContractRenewal(event, '${contractNumber}', '${propertyName}', '${unitNumber}')">
                        <div class="renewal-section">
                            <h3>بيانات التجديد:</h3>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>رقم العقد الجديد:</label>
                                    <input type="text" name="newContractNumber" value="${property['رقم العقد'] || ''}" required>
                                </div>
                                <div class="form-group">
                                    <label>تاريخ بداية العقد الجديد:</label>
                                    <input type="date" name="newStartDate" required>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label>تاريخ نهاية العقد الجديد:</label>
                                    <input type="date" name="newEndDate" required>
                                </div>
                                <div class="form-group">
                                    <label>قيمة الإيجار الجديدة:</label>
                                    <input type="number" name="newRentAmount" value="${property['قيمة  الايجار '] || ''}" step="0.01" min="0">
                                </div>
                            </div>
                            <div class="form-group">
                                <label>ملاحظات التجديد:</label>
                                <textarea name="renewalNotes" rows="3" placeholder="أي ملاحظات خاصة بالتجديد..."></textarea>
                            </div>
                        </div>

                        <div class="modal-actions">
                            <button type="submit" class="btn-primary">
                                <i class="fas fa-check"></i> تأكيد التجديد
                            </button>
                            <button type="button" onclick="closeModal()" class="btn-secondary">
                                <i class="fas fa-times"></i> إلغاء
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    `;

    document.body.insertAdjacentHTML('beforeend', renewalModalHtml);
}

// معالجة تجديد العقد
function processContractRenewal(event, contractNumber, propertyName, unitNumber) {
    event.preventDefault();

    const formData = new FormData(event.target);
    const renewalData = {
        newContractNumber: formData.get('newContractNumber'),
        newStartDate: formData.get('newStartDate'),
        newEndDate: formData.get('newEndDate'),
        newRentAmount: formData.get('newRentAmount'),
        renewalNotes: formData.get('renewalNotes')
    };

    if (!renewalData.newContractNumber || !renewalData.newStartDate || !renewalData.newEndDate) {
        alert('يرجى ملء جميع الحقول المطلوبة');
        return;
    }

    try {
        // البحث عن الوحدة وتحديثها
        const propertyIndex = properties.findIndex(p => {
            if (contractNumber && propertyName) {
                return p['رقم العقد'] === contractNumber && p['اسم العقار'] === propertyName;
            } else if (unitNumber && propertyName) {
                return p['رقم  الوحدة '] === unitNumber && p['اسم العقار'] === propertyName;
            }
            return false;
        });

        if (propertyIndex === -1) {
            alert('❌ لم يتم العثور على الوحدة المطلوبة');
            return;
        }

        // تحديث بيانات العقد
        const property = properties[propertyIndex];
        property['رقم العقد'] = renewalData.newContractNumber;
        property['تاريخ بداية العقد'] = renewalData.newStartDate;
        property['تاريخ نهاية العقد'] = renewalData.newEndDate;

        if (renewalData.newRentAmount) {
            property['قيمة  الايجار '] = parseFloat(renewalData.newRentAmount);
        }

        if (renewalData.renewalNotes) {
            property['ملاحظات التجديد'] = renewalData.renewalNotes;
        }

        // إضافة معلومات التحديث
        property['تاريخ آخر تحديث'] = new Date().toLocaleDateString('ar-SA');
        property['نوع التحديث'] = 'تجديد العقد';
        property['المسؤول عن التحديث'] = getCurrentUser();
        property['تاريخ التجديد'] = new Date().toLocaleDateString('ar-SA');

        // حفظ البيانات
        saveDataLocally();

        // مزامنة مع Supabase إذا متاح
        if (typeof syncToSupabase === 'function') {
            syncToSupabase().catch(error => {
                console.error('⚠️ خطأ في مزامنة Supabase:', error);
            });
        }

        // إعادة تحميل البيانات
        renderData();
        updateTotalStats();

        // إغلاق النافذة
        closeModal();

        alert('✅ تم تجديد العقد بنجاح!\n\nتم تحديث جميع بيانات العقد الجديد.');

    } catch (error) {
        console.error('❌ خطأ في تجديد العقد:', error);
        alert('❌ حدث خطأ أثناء تجديد العقد: ' + error.message);
    }
}

// تشغيل اختبار إصلاح التاريخ عند تحميل الصفحة
setTimeout(() => {
    testDateFix();
}, 2000);

// تم إيقاف التنظيف التلقائي لمنع حذف البيانات المهمة
// يمكن استخدام زر التنظيف اليدوي في نافذة التحرير المتعددة عند الحاجة

// 🚀 دالة التنظيف والإصلاح الشاملة لقاعدة البيانات
async function comprehensiveDatabaseCleanup() {
    console.log('🚀 بدء التنظيف والإصلاح الشامل لقاعدة البيانات...');

    if (!supabaseClient) {
        alert('❌ Supabase غير متاح! تأكد من الاتصال بالإنترنت.');
        return;
    }

    const confirmCleanup = confirm(
        `🧹 التنظيف والإصلاح الشامل لقاعدة البيانات\n\n` +
        `هذه العملية ستقوم بـ:\n` +
        `✅ إنشاء نسخة احتياطية من البيانات الحالية\n` +
        `✅ تحديد وحذف الوحدات المكررة من Supabase\n` +
        `✅ جلب جميع البيانات المنظفة\n` +
        `✅ تحديث البيانات المحلية\n` +
        `✅ عرض تقرير شامل بالنتائج\n\n` +
        `هل تريد المتابعة؟`
    );

    if (!confirmCleanup) return;

    // إنشاء نافذة تقدم متقدمة
    const progressModal = createAdvancedProgressModal();
    document.body.appendChild(progressModal);

    const statusEl = document.getElementById('cleanupStatus');
    const progressEl = document.getElementById('cleanupProgress');
    const detailsEl = document.getElementById('cleanupDetails');
    const logEl = document.getElementById('cleanupLog');

    let cleanupResults = {
        originalCount: properties.length,
        duplicatesFound: 0,
        duplicatesDeleted: 0,
        finalCount: 0,
        cities: new Set(),
        properties: new Set(),
        errors: []
    };

    try {
        // 1. إنشاء نسخة احتياطية
        await executeStep1_CreateBackup(statusEl, progressEl, detailsEl, logEl, cleanupResults);

        // 2. الاتصال بـ Supabase والتحقق
        await executeStep2_ConnectSupabase(statusEl, progressEl, detailsEl, logEl, cleanupResults);

        // 3. تحديد الوحدات المكررة
        await executeStep3_IdentifyDuplicates(statusEl, progressEl, detailsEl, logEl, cleanupResults);

        // 4. حذف الوحدات المكررة
        await executeStep4_DeleteDuplicates(statusEl, progressEl, detailsEl, logEl, cleanupResults);

        // 5. جلب جميع البيانات المنظفة
        await executeStep5_FetchCleanData(statusEl, progressEl, detailsEl, logEl, cleanupResults);

        // 6. تحديث البيانات المحلية
        await executeStep6_UpdateLocalData(statusEl, progressEl, detailsEl, logEl, cleanupResults);

        // 7. تحديث العرض
        await executeStep7_UpdateDisplay(statusEl, progressEl, detailsEl, logEl, cleanupResults);

        // 8. عرض التقرير النهائي
        await executeStep8_ShowFinalReport(statusEl, progressEl, detailsEl, logEl, cleanupResults);

        // إزالة نافذة التقدم
        setTimeout(() => {
            document.body.removeChild(progressModal);
        }, 3000);

    } catch (error) {
        console.error('❌ خطأ في التنظيف الشامل:', error);
        cleanupResults.errors.push(error.message);

        statusEl.textContent = '❌ فشل في التنظيف';
        detailsEl.textContent = error.message;
        logEl.innerHTML += `<div style="color: #dc3545;">❌ خطأ: ${error.message}</div>`;

        setTimeout(() => {
            document.body.removeChild(progressModal);
            alert(`❌ فشل في التنظيف الشامل:\n${error.message}`);
        }, 2000);
    }
}

// إنشاء نافذة تقدم متقدمة
function createAdvancedProgressModal() {
    const modal = document.createElement('div');
    modal.innerHTML = `
        <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                    background: rgba(0,0,0,0.9); z-index: 10000; display: flex;
                    align-items: center; justify-content: center;">
            <div style="background: white; padding: 30px; border-radius: 15px;
                       box-shadow: 0 10px 30px rgba(0,0,0,0.5); text-align: center;
                       min-width: 600px; max-width: 80%; max-height: 80%; overflow-y: auto;">
                <h2 style="margin: 0 0 20px 0; color: #007bff;">🧹 تنظيف قاعدة البيانات</h2>

                <div id="cleanupStatus" style="font-size: 18px; margin-bottom: 15px; color: #333; font-weight: bold;">
                    جاري التحضير...
                </div>

                <div style="width: 100%; height: 10px; background: #f0f0f0; border-radius: 5px; overflow: hidden; margin-bottom: 15px;">
                    <div id="cleanupProgress" style="width: 0%; height: 100%;
                                                   background: linear-gradient(90deg, #007bff, #28a745);
                                                   transition: width 0.5s ease;"></div>
                </div>

                <div id="cleanupDetails" style="font-size: 14px; color: #666; margin-bottom: 20px;">
                    جاري التحضير للتنظيف...
                </div>

                <div style="text-align: left; max-height: 200px; overflow-y: auto;
                           background: #f8f9fa; padding: 15px; border-radius: 8px;
                           font-family: monospace; font-size: 12px;">
                    <div id="cleanupLog" style="color: #333;">
                        📋 سجل العمليات:<br>
                    </div>
                </div>
            </div>
        </div>
    `;
    return modal;
}

// الخطوة 1: إنشاء نسخة احتياطية
async function executeStep1_CreateBackup(statusEl, progressEl, detailsEl, logEl, results) {
    statusEl.textContent = '💾 إنشاء نسخة احتياطية...';
    progressEl.style.width = '5%';
    detailsEl.textContent = 'حفظ البيانات الحالية كنسخة احتياطية';

    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupKey = `properties_backup_${timestamp}`;

    try {
        localStorage.setItem(backupKey, JSON.stringify(properties));
        localStorage.setItem('latest_backup_key', backupKey);

        logEl.innerHTML += `<div style="color: #28a745;">✅ تم إنشاء نسخة احتياطية: ${backupKey}</div>`;
        console.log(`✅ تم إنشاء نسخة احتياطية: ${properties.length} وحدة`);

        await new Promise(resolve => setTimeout(resolve, 500));
    } catch (error) {
        throw new Error(`فشل في إنشاء النسخة الاحتياطية: ${error.message}`);
    }
}

// الخطوة 2: الاتصال بـ Supabase والتحقق
async function executeStep2_ConnectSupabase(statusEl, progressEl, detailsEl, logEl, results) {
    statusEl.textContent = '🔗 الاتصال بـ Supabase...';
    progressEl.style.width = '10%';
    detailsEl.textContent = 'التحقق من الاتصال وجلب إحصائيات أولية';

    try {
        // اختبار الاتصال
        const { data: testData, error: testError } = await supabaseClient
            .from('properties')
            .select('id')
            .limit(1);

        if (testError) {
            throw new Error(`فشل الاتصال بـ Supabase: ${testError.message}`);
        }

        // جلب العدد الإجمالي
        const { data: countData, error: countError } = await supabaseClient
            .from('properties')
            .select('id', { count: 'exact', head: true });

        if (countError) {
            throw new Error(`فشل في جلب العدد الإجمالي: ${countError.message}`);
        }

        const totalCount = countData?.length || 0;

        logEl.innerHTML += `<div style="color: #007bff;">🔗 تم الاتصال بـ Supabase بنجاح</div>`;
        logEl.innerHTML += `<div style="color: #6c757d;">📊 العدد الإجمالي في Supabase: ${totalCount} وحدة</div>`;

        console.log(`✅ الاتصال بـ Supabase ناجح - العدد الإجمالي: ${totalCount}`);

        await new Promise(resolve => setTimeout(resolve, 500));
    } catch (error) {
        throw new Error(`خطأ في الاتصال بـ Supabase: ${error.message}`);
    }
}

// الخطوة 3: تحديد الوحدات المكررة
async function executeStep3_IdentifyDuplicates(statusEl, progressEl, detailsEl, logEl, results) {
    statusEl.textContent = '🔍 تحديد الوحدات المكررة...';
    progressEl.style.width = '25%';
    detailsEl.textContent = 'البحث عن الوحدات المكررة في Supabase';

    try {
        logEl.innerHTML += `<div style="color: #ffc107;">🔍 جاري البحث عن الوحدات المكررة...</div>`;

        // جلب جميع البيانات لتحليل التكرار
        let allData = [];
        let from = 0;
        const batchSize = 1000;
        let hasMore = true;

        while (hasMore) {
            const { data: batchData, error } = await supabaseClient
                .from('properties')
                .select('id, "اسم العقار", "رقم  الوحدة ", "تاريخ آخر تحديث", created_at')
                .range(from, from + batchSize - 1)
                .order('id', { ascending: true });

            if (error) {
                throw new Error(`خطأ في جلب البيانات للتحليل: ${error.message}`);
            }

            if (batchData && batchData.length > 0) {
                allData.push(...batchData);
                from += batchSize;
                hasMore = batchData.length === batchSize;

                detailsEl.textContent = `تم تحليل ${allData.length} وحدة...`;
            } else {
                hasMore = false;
            }
        }

        // تحليل التكرار
        const unitMap = new Map();
        const duplicates = [];

        allData.forEach(unit => {
            if (!unit['اسم العقار'] || !unit['رقم  الوحدة ']) {
                return; // تجاهل الوحدات الناقصة
            }

            const unitKey = `${unit['اسم العقار']}_${unit['رقم  الوحدة ']}`;

            if (unitMap.has(unitKey)) {
                const existing = unitMap.get(unitKey);
                const existingDate = new Date(existing['تاريخ آخر تحديث'] || existing.created_at || '1900-01-01');
                const currentDate = new Date(unit['تاريخ آخر تحديث'] || unit.created_at || '1900-01-01');

                if (currentDate > existingDate) {
                    // الوحدة الحالية أحدث - احذف القديمة
                    duplicates.push(existing.id);
                    unitMap.set(unitKey, unit);
                } else {
                    // الوحدة الموجودة أحدث - احذف الحالية
                    duplicates.push(unit.id);
                }
            } else {
                unitMap.set(unitKey, unit);
            }
        });

        results.duplicatesFound = duplicates.length;
        results.duplicateIds = duplicates;

        logEl.innerHTML += `<div style="color: #dc3545;">📊 تم العثور على ${duplicates.length} وحدة مكررة</div>`;
        logEl.innerHTML += `<div style="color: #28a745;">✅ سيتم الاحتفاظ بـ ${unitMap.size} وحدة فريدة</div>`;

        console.log(`🔍 تحليل التكرار: ${duplicates.length} مكررة من أصل ${allData.length}`);

        await new Promise(resolve => setTimeout(resolve, 1000));
    } catch (error) {
        throw new Error(`خطأ في تحديد الوحدات المكررة: ${error.message}`);
    }
}

// الخطوة 4: حذف الوحدات المكررة
async function executeStep4_DeleteDuplicates(statusEl, progressEl, detailsEl, logEl, results) {
    statusEl.textContent = '🗑️ حذف الوحدات المكررة...';
    progressEl.style.width = '50%';

    if (!results.duplicateIds || results.duplicateIds.length === 0) {
        detailsEl.textContent = 'لا توجد وحدات مكررة للحذف';
        logEl.innerHTML += `<div style="color: #28a745;">✅ لا توجد وحدات مكررة للحذف</div>`;
        await new Promise(resolve => setTimeout(resolve, 500));
        return;
    }

    try {
        detailsEl.textContent = `حذف ${results.duplicateIds.length} وحدة مكررة...`;
        logEl.innerHTML += `<div style="color: #ffc107;">🗑️ جاري حذف ${results.duplicateIds.length} وحدة مكررة...</div>`;

        // حذف الوحدات المكررة على دفعات
        const batchSize = 100;
        let deletedCount = 0;

        for (let i = 0; i < results.duplicateIds.length; i += batchSize) {
            const batch = results.duplicateIds.slice(i, i + batchSize);

            const { error } = await supabaseClient
                .from('properties')
                .delete()
                .in('id', batch);

            if (error) {
                throw new Error(`خطأ في حذف الدفعة ${Math.floor(i/batchSize) + 1}: ${error.message}`);
            }

            deletedCount += batch.length;
            detailsEl.textContent = `تم حذف ${deletedCount} من ${results.duplicateIds.length} وحدة مكررة...`;

            // تأخير قصير بين الدفعات
            await new Promise(resolve => setTimeout(resolve, 200));
        }

        results.duplicatesDeleted = deletedCount;

        logEl.innerHTML += `<div style="color: #28a745;">✅ تم حذف ${deletedCount} وحدة مكررة بنجاح</div>`;
        console.log(`✅ تم حذف ${deletedCount} وحدة مكررة من Supabase`);

        await new Promise(resolve => setTimeout(resolve, 1000));
    } catch (error) {
        throw new Error(`خطأ في حذف الوحدات المكررة: ${error.message}`);
    }
}

// الخطوة 5: جلب جميع البيانات المنظفة
async function executeStep5_FetchCleanData(statusEl, progressEl, detailsEl, logEl, results) {
    statusEl.textContent = '📥 جلب البيانات المنظفة...';
    progressEl.style.width = '70%';
    detailsEl.textContent = 'جلب جميع البيانات المنظفة من Supabase';

    try {
        logEl.innerHTML += `<div style="color: #007bff;">📥 جاري جلب البيانات المنظفة...</div>`;

        let allCleanData = [];
        let from = 0;
        const batchSize = 1000;
        let hasMore = true;

        while (hasMore) {
            const { data: batchData, error } = await supabaseClient
                .from('properties')
                .select('*')
                .range(from, from + batchSize - 1)
                .order('id', { ascending: true });

            if (error) {
                throw new Error(`خطأ في جلب البيانات المنظفة: ${error.message}`);
            }

            if (batchData && batchData.length > 0) {
                allCleanData.push(...batchData);
                from += batchSize;
                hasMore = batchData.length === batchSize;

                detailsEl.textContent = `تم جلب ${allCleanData.length} وحدة منظفة...`;

                // جمع إحصائيات المدن والعقارات
                batchData.forEach(unit => {
                    if (unit['المدينة']) results.cities.add(unit['المدينة']);
                    if (unit['اسم العقار']) results.properties.add(unit['اسم العقار']);
                });
            } else {
                hasMore = false;
            }
        }

        results.cleanData = allCleanData;
        results.finalCount = allCleanData.length;

        logEl.innerHTML += `<div style="color: #28a745;">✅ تم جلب ${allCleanData.length} وحدة منظفة</div>`;
        logEl.innerHTML += `<div style="color: #6c757d;">📊 ${results.cities.size} مدينة، ${results.properties.size} عقار</div>`;

        console.log(`✅ تم جلب ${allCleanData.length} وحدة منظفة`);

        await new Promise(resolve => setTimeout(resolve, 1000));
    } catch (error) {
        throw new Error(`خطأ في جلب البيانات المنظفة: ${error.message}`);
    }
}

// الخطوة 6: تحديث البيانات المحلية
async function executeStep6_UpdateLocalData(statusEl, progressEl, detailsEl, logEl, results) {
    statusEl.textContent = '💾 تحديث البيانات المحلية...';
    progressEl.style.width = '85%';
    detailsEl.textContent = 'استبدال البيانات المحلية بالبيانات المنظفة';

    try {
        logEl.innerHTML += `<div style="color: #007bff;">💾 جاري تحديث البيانات المحلية...</div>`;

        // استبدال البيانات المحلية
        properties.length = 0;
        properties.push(...results.cleanData);

        // حفظ في localStorage
        saveDataLocally();

        logEl.innerHTML += `<div style="color: #28a745;">✅ تم تحديث البيانات المحلية (${properties.length} وحدة)</div>`;
        console.log(`✅ تم تحديث البيانات المحلية: ${properties.length} وحدة`);

        await new Promise(resolve => setTimeout(resolve, 500));
    } catch (error) {
        throw new Error(`خطأ في تحديث البيانات المحلية: ${error.message}`);
    }
}

// الخطوة 7: تحديث العرض
async function executeStep7_UpdateDisplay(statusEl, progressEl, detailsEl, logEl, results) {
    statusEl.textContent = '🖥️ تحديث العرض...';
    progressEl.style.width = '95%';
    detailsEl.textContent = 'تحديث واجهة المستخدم';

    try {
        logEl.innerHTML += `<div style="color: #007bff;">🖥️ جاري تحديث واجهة المستخدم...</div>`;

        // تحديث العرض
        renderData();
        updateTotalStats();

        logEl.innerHTML += `<div style="color: #28a745;">✅ تم تحديث واجهة المستخدم</div>`;
        console.log(`✅ تم تحديث واجهة المستخدم`);

        await new Promise(resolve => setTimeout(resolve, 500));
    } catch (error) {
        throw new Error(`خطأ في تحديث العرض: ${error.message}`);
    }
}

// الخطوة 8: عرض التقرير النهائي
async function executeStep8_ShowFinalReport(statusEl, progressEl, detailsEl, logEl, results) {
    statusEl.textContent = '✅ اكتمل التنظيف بنجاح!';
    progressEl.style.width = '100%';
    detailsEl.textContent = 'تم إنجاز جميع العمليات بنجاح';

    // إنشاء التقرير النهائي
    const citiesList = Array.from(results.cities).sort();
    const propertiesList = Array.from(results.properties).sort();

    const report = `
🎉 تقرير التنظيف والإصلاح الشامل

📊 الإحصائيات:
• البيانات الأصلية: ${results.originalCount} وحدة
• الوحدات المكررة المحذوفة: ${results.duplicatesDeleted} وحدة
• البيانات النهائية: ${results.finalCount} وحدة
• الفرق: ${results.finalCount - results.originalCount > 0 ? '+' : ''}${results.finalCount - results.originalCount} وحدة

🏙️ المدن المتاحة (${citiesList.length}):
${citiesList.slice(0, 10).join(', ')}${citiesList.length > 10 ? '...' : ''}

🏢 العقارات المتاحة (${propertiesList.length}):
${propertiesList.slice(0, 10).join(', ')}${propertiesList.length > 10 ? '...' : ''}

✅ تم إنجاز جميع العمليات بنجاح!
    `.trim();

    logEl.innerHTML += `<div style="color: #28a745; font-weight: bold;">✅ اكتمل التنظيف الشامل بنجاح!</div>`;

    console.log('✅ تقرير التنظيف الشامل:', results);

    // عرض التقرير للمستخدم
    setTimeout(() => {
        alert(report);
    }, 1000);

    await new Promise(resolve => setTimeout(resolve, 2000));
}

// 🚀 دالة سريعة لتشغيل التنظيف الشامل من وحدة التحكم
window.runDatabaseCleanup = comprehensiveDatabaseCleanup;

// 🎉 دالة تحديث البيانات بعد التنظيف الشامل
async function updateAfterCleanup() {
    console.log('🔄 تحديث البيانات بعد التنظيف الشامل...');

    if (!supabaseClient) {
        alert('❌ Supabase غير متاح!');
        return;
    }

    try {
        // إظهار رسالة تحميل
        const loadingDiv = document.createElement('div');
        loadingDiv.innerHTML = `
            <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
                        background: white; padding: 30px; border-radius: 15px;
                        box-shadow: 0 10px 30px rgba(0,0,0,0.3); z-index: 10000; text-align: center;">
                <h3 style="color: #28a745; margin-bottom: 15px;">🎉 تحديث البيانات بعد التنظيف</h3>
                <div style="margin-bottom: 15px;">جاري جلب البيانات المنظفة من Supabase...</div>
                <div style="width: 300px; height: 6px; background: #f0f0f0; border-radius: 3px; overflow: hidden;">
                    <div id="updateProgress" style="width: 0%; height: 100%; background: linear-gradient(90deg, #28a745, #20c997);
                                                  transition: width 0.3s ease;"></div>
                </div>
            </div>
        `;
        document.body.appendChild(loadingDiv);

        const progressBar = document.getElementById('updateProgress');

        // جلب البيانات المنظفة
        progressBar.style.width = '30%';

        const { data: cleanData, error } = await supabaseClient
            .from('properties')
            .select('*')
            .order('id', { ascending: true });

        if (error) {
            throw new Error(`خطأ في جلب البيانات: ${error.message}`);
        }

        progressBar.style.width = '60%';

        // تحديث البيانات المحلية
        const oldCount = properties.length;
        properties.length = 0;
        properties.push(...cleanData);

        progressBar.style.width = '80%';

        // حفظ محلياً
        saveDataLocally();

        progressBar.style.width = '90%';

        // تحديث العرض
        renderData();
        updateTotalStats();

        progressBar.style.width = '100%';

        // إزالة رسالة التحميل
        setTimeout(() => {
            document.body.removeChild(loadingDiv);

            // عرض تقرير النجاح
            alert(`🎉 تم التحديث بنجاح!\n\n` +
                  `📊 النتائج:\n` +
                  `• البيانات السابقة: ${oldCount} وحدة\n` +
                  `• البيانات المنظفة: ${properties.length} وحدة\n` +
                  `• تم حذف: ${3832 - properties.length} وحدة مكررة\n` +
                  `• لا توجد وحدات مكررة الآن\n\n` +
                  `✅ تم حل مشكلة اختفاء الوحدات نهائياً!`);
        }, 1000);

        console.log(`✅ تم التحديث: ${properties.length} وحدة منظفة`);

    } catch (error) {
        console.error('❌ خطأ في التحديث:', error);
        alert(`❌ خطأ في التحديث: ${error.message}`);
    }
}

// تشغيل التحديث تلقائياً
window.updateAfterCleanup = updateAfterCleanup;

// 🗑️ دالة حذف وحدة محددة وتحديث البيانات
async function deleteSpecificUnit(unitNumber) {
    console.log(`🗑️ حذف الوحدة: ${unitNumber}`);

    if (!supabaseClient) {
        alert('❌ Supabase غير متاح!');
        return;
    }

    try {
        // البحث عن الوحدة محلياً
        const localIndex = properties.findIndex(p => p['رقم  الوحدة '] === unitNumber);
        const localUnit = localIndex !== -1 ? properties[localIndex] : null;

        if (localUnit) {
            // حذف من البيانات المحلية
            properties.splice(localIndex, 1);
            saveDataLocally();

            // تحديث العرض
            renderData();
            updateTotalStats();

            console.log(`✅ تم حذف الوحدة ${unitNumber} من البيانات المحلية`);

            // إظهار رسالة نجاح
            showSuccessMessage(
                'تم الحذف!',
                `تم حذف الوحدة ${unitNumber} بنجاح\n` +
                `العقار: ${localUnit['اسم العقار'] || 'غير محدد'}\n` +
                `العدد الحالي: ${properties.length} وحدة`
            );
        } else {
            console.log(`⚠️ لم يتم العثور على الوحدة ${unitNumber} في البيانات المحلية`);

            // تحديث البيانات من Supabase للتأكد
            await updateAfterCleanup();
        }

    } catch (error) {
        console.error(`❌ خطأ في حذف الوحدة ${unitNumber}:`, error);
        showErrorMessage('خطأ في الحذف', error.message);
    }
}

// دالة سريعة لحذف STRU04000
window.deleteSTRU04000 = () => deleteSpecificUnit('STRU04000');

// 🧪 دالة اختبار تعديل رقم الوحدة
async function testUnitNumberEdit() {
    console.log('🧪 اختبار تعديل رقم الوحدة...');

    // البحث عن وحدة للاختبار
    const testUnit = properties.find(p => p['رقم  الوحدة '] === '8888');
    if (!testUnit) {
        console.log('❌ لم يتم العثور على الوحدة 8888 للاختبار');
        return;
    }

    console.log('📋 الوحدة قبل التعديل:', {
        unitNumber: testUnit['رقم  الوحدة '],
        propertyName: testUnit['اسم العقار'],
        tenant: testUnit['اسم المستأجر']
    });

    // عد الوحدات قبل التعديل
    const countBefore = properties.length;
    const unitsWithOldNumber = properties.filter(p => p['رقم  الوحدة '] === '8888').length;
    const unitsWithNewNumber = properties.filter(p => p['رقم  الوحدة '] === '7').length;

    console.log(`📊 قبل التعديل: العدد الكلي=${countBefore}, وحدات برقم 8888=${unitsWithOldNumber}, وحدات برقم 7=${unitsWithNewNumber}`);

    // محاكاة تعديل رقم الوحدة
    const unitIndex = properties.findIndex(p => p['رقم  الوحدة '] === '8888');
    if (unitIndex !== -1) {
        // تطبيق نفس منطق savePropertyEdit
        const originalUnitNumber = '8888';
        const newUnitNumber = '7';
        const originalPropertyName = testUnit['اسم العقار'];

        // التحقق من عدم وجود وحدة أخرى بنفس الرقم الجديد
        const existingUnitWithNewNumber = properties.find(p =>
            p['رقم  الوحدة '] === newUnitNumber &&
            p['اسم العقار'] === originalPropertyName &&
            properties.indexOf(p) !== unitIndex
        );

        if (existingUnitWithNewNumber) {
            console.log(`❌ يوجد وحدة أخرى برقم "${newUnitNumber}" في نفس العقار!`);
            return;
        }

        // حفظ بيانات الوحدة القديمة للحذف من Supabase
        const oldUnitDataForSupabase = { ...properties[unitIndex] };

        // حذف الوحدة القديمة من Supabase
        if (typeof deletePropertyFromSupabase === 'function') {
            try {
                console.log(`☁️ حذف الوحدة القديمة برقم "${originalUnitNumber}" من Supabase...`);
                const deleteResult = await deletePropertyFromSupabase(oldUnitDataForSupabase);
                console.log('🔍 نتيجة الحذف:', deleteResult);
            } catch (error) {
                console.error(`❌ خطأ في حذف الوحدة القديمة من Supabase:`, error);
            }
        }

        // تحديث الوحدة المحلية برقم الوحدة الجديد
        const newUnitData = { ...properties[unitIndex], 'رقم  الوحدة ': newUnitNumber };
        properties[unitIndex] = newUnitData;

        // عد الوحدات بعد التعديل
        const countAfter = properties.length;
        const unitsWithOldNumberAfter = properties.filter(p => p['رقم  الوحدة '] === '8888').length;
        const unitsWithNewNumberAfter = properties.filter(p => p['رقم  الوحدة '] === '7').length;

        console.log(`📊 بعد التعديل: العدد الكلي=${countAfter}, وحدات برقم 8888=${unitsWithOldNumberAfter}, وحدات برقم 7=${unitsWithNewNumberAfter}`);

        // حفظ البيانات محلياً
        saveDataLocally();

        // تحديث العرض
        renderData();
        updateTotalStats();

        console.log('✅ تم اختبار تعديل رقم الوحدة بنجاح!');

        // عرض النتائج
        alert(`🧪 نتائج اختبار تعديل رقم الوحدة:\n\n` +
              `قبل التعديل:\n` +
              `• العدد الكلي: ${countBefore}\n` +
              `• وحدات برقم 8888: ${unitsWithOldNumber}\n` +
              `• وحدات برقم 7: ${unitsWithNewNumber}\n\n` +
              `بعد التعديل:\n` +
              `• العدد الكلي: ${countAfter}\n` +
              `• وحدات برقم 8888: ${unitsWithOldNumberAfter}\n` +
              `• وحدات برقم 7: ${unitsWithNewNumberAfter}\n\n` +
              `${countAfter === countBefore && unitsWithOldNumberAfter === 0 && unitsWithNewNumberAfter === 1 ? '✅ نجح الاختبار!' : '❌ فشل الاختبار!'}`);
    }
}

// تشغيل الاختبار
window.testUnitNumberEdit = testUnitNumberEdit;

// 🚀 دالة استرداد كاملة وفورية لجميع البيانات
async function fullDataRecovery() {
    console.log('🚀 بدء الاسترداد الكامل من Supabase...');

    if (!supabaseClient) {
        alert('❌ Supabase غير متاح!');
        return;
    }

    const confirmRestore = confirm(
        `🔄 الاسترداد الكامل للبيانات\n\n` +
        `البيانات الحالية: ${properties.length} وحدة\n` +
        `سيتم جلب جميع البيانات من Supabase (حوالي 3800+ وحدة)\n\n` +
        `هل تريد المتابعة؟`
    );

    if (!confirmRestore) return;

    try {
        // إنشاء نافذة تقدم محسنة
        const progressModal = document.createElement('div');
        progressModal.innerHTML = `
            <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                        background: rgba(0,0,0,0.8); z-index: 10000; display: flex;
                        align-items: center; justify-content: center;">
                <div style="background: white; padding: 40px; border-radius: 15px;
                           box-shadow: 0 10px 30px rgba(0,0,0,0.3); text-align: center;
                           min-width: 400px;">
                    <h2 style="margin: 0 0 20px 0; color: #007bff;">🔄 استرداد البيانات</h2>
                    <div id="recoveryStatus" style="font-size: 16px; margin-bottom: 20px; color: #333;">
                        جاري الاتصال بـ Supabase...
                    </div>
                    <div style="width: 100%; height: 8px; background: #f0f0f0; border-radius: 4px; overflow: hidden; margin-bottom: 15px;">
                        <div id="recoveryProgress" style="width: 0%; height: 100%;
                                                          background: linear-gradient(90deg, #28a745, #20c997);
                                                          transition: width 0.3s ease;"></div>
                    </div>
                    <div id="recoveryDetails" style="font-size: 14px; color: #666;">
                        جاري التحضير...
                    </div>
                </div>
            </div>
        `;
        document.body.appendChild(progressModal);

        const statusEl = document.getElementById('recoveryStatus');
        const progressEl = document.getElementById('recoveryProgress');
        const detailsEl = document.getElementById('recoveryDetails');

        // جلب جميع البيانات على دفعات
        statusEl.textContent = 'جلب البيانات من Supabase...';
        progressEl.style.width = '10%';

        let allData = [];
        let from = 0;
        const batchSize = 1000;
        let hasMore = true;
        let batchCount = 0;

        while (hasMore) {
            batchCount++;
            detailsEl.textContent = `الدفعة ${batchCount} - تم جلب ${allData.length} وحدة`;

            const { data: batchData, error } = await supabaseClient
                .from('properties')
                .select('*')
                .range(from, from + batchSize - 1)
                .order('id', { ascending: true });

            if (error) {
                throw new Error(`خطأ في الدفعة ${batchCount}: ${error.message}`);
            }

            if (batchData && batchData.length > 0) {
                allData.push(...batchData);
                from += batchSize;
                hasMore = batchData.length === batchSize;

                // تحديث التقدم
                const progress = Math.min(10 + (allData.length / 4000) * 70, 80);
                progressEl.style.width = `${progress}%`;

                console.log(`📦 دفعة ${batchCount}: ${batchData.length} وحدة (الإجمالي: ${allData.length})`);
            } else {
                hasMore = false;
            }

            // تأخير قصير لتجنب إرهاق الخادم
            await new Promise(resolve => setTimeout(resolve, 100));
        }

        statusEl.textContent = 'معالجة البيانات...';
        progressEl.style.width = '85%';
        detailsEl.textContent = `تم جلب ${allData.length} وحدة - جاري المعالجة...`;

        // حفظ البيانات القديمة كنسخة احتياطية
        const oldData = [...properties];
        localStorage.setItem('properties_backup_before_recovery', JSON.stringify(oldData));

        // استبدال البيانات
        properties.length = 0;
        properties.push(...allData);

        statusEl.textContent = 'حفظ البيانات...';
        progressEl.style.width = '95%';

        // حفظ محلياً
        saveDataLocally();

        statusEl.textContent = 'تحديث العرض...';
        progressEl.style.width = '100%';

        // تحديث العرض
        renderData();
        updateTotalStats();

        // إزالة نافذة التقدم
        document.body.removeChild(progressModal);

        // رسالة النجاح
        alert(`✅ تم الاسترداد الكامل بنجاح!\n\n` +
              `البيانات السابقة: ${oldData.length} وحدة\n` +
              `البيانات الجديدة: ${properties.length} وحدة\n` +
              `تم استرداد: ${properties.length - oldData.length} وحدة إضافية\n\n` +
              `تم حفظ نسخة احتياطية من البيانات السابقة`);

        console.log(`✅ اكتمل الاسترداد: ${properties.length} وحدة`);

    } catch (error) {
        // إزالة نافذة التقدم في حالة الخطأ
        const modal = document.querySelector('[style*="position: fixed"]');
        if (modal) {
            document.body.removeChild(modal);
        }

        console.error('❌ خطأ في الاسترداد الكامل:', error);
        alert(`❌ فشل في الاسترداد الكامل:\n${error.message}`);
    }
}

// 🚨 استرداد فوري وكامل من Supabase
async function recoverDeletedData() {
    console.log('🔄 بدء الاسترداد الفوري من Supabase...');

    if (!supabaseClient) {
        alert('❌ Supabase غير متاح!');
        return;
    }

    const confirmRestore = confirm(
        '🚨 هذا سيستبدل جميع البيانات المحلية بالبيانات من Supabase\n\n' +
        'هل أنت متأكد من المتابعة؟'
    );

    if (!confirmRestore) return;

    try {
        // إظهار مؤشر التحميل
        const loadingMessage = document.createElement('div');
        loadingMessage.innerHTML = `
            <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
                        background: white; padding: 30px; border-radius: 10px; box-shadow: 0 4px 20px rgba(0,0,0,0.3);
                        z-index: 10000; text-align: center;">
                <div style="font-size: 18px; margin-bottom: 15px;">🔄 جاري الاسترداد من Supabase...</div>
                <div style="width: 300px; height: 6px; background: #f0f0f0; border-radius: 3px; overflow: hidden;">
                    <div id="progressBar" style="width: 0%; height: 100%; background: linear-gradient(90deg, #007bff, #0056b3);
                                                  transition: width 0.3s ease;"></div>
                </div>
                <div id="progressText" style="margin-top: 10px; color: #666;">جاري التحميل...</div>
            </div>
        `;
        document.body.appendChild(loadingMessage);

        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');

        // تحديث التقدم
        progressBar.style.width = '20%';
        progressText.textContent = 'الاتصال بـ Supabase...';

        console.log('📡 جلب جميع البيانات من Supabase...');

        // جلب البيانات على دفعات لضمان الحصول على جميع البيانات
        let allData = [];
        let from = 0;
        const batchSize = 1000;
        let hasMore = true;

        while (hasMore) {
            progressText.textContent = `جلب البيانات... (${allData.length} وحدة)`;

            const { data: batchData, error } = await supabaseClient
                .from('properties')
                .select('*')
                .range(from, from + batchSize - 1)
                .order('created_at', { ascending: false });

            if (error) {
                throw new Error(`خطأ في جلب البيانات: ${error.message}`);
            }

            if (batchData && batchData.length > 0) {
                allData.push(...batchData);
                from += batchSize;
                hasMore = batchData.length === batchSize;

                // تحديث شريط التقدم
                const progress = Math.min(60 + (allData.length / 4000) * 20, 80);
                progressBar.style.width = `${progress}%`;
            } else {
                hasMore = false;
            }
        }

        const supabaseData = allData;

        progressBar.style.width = '60%';
        progressText.textContent = 'معالجة البيانات...';

        if (error) {
            throw new Error(`خطأ في جلب البيانات من Supabase: ${error.message}`);
        }

        if (!supabaseData || supabaseData.length === 0) {
            throw new Error('لا توجد بيانات في Supabase للاسترداد');
        }

        console.log(`📊 تم جلب ${supabaseData.length} وحدة من Supabase`);

        progressBar.style.width = '80%';
        progressText.textContent = 'استبدال البيانات المحلية...';

        // استبدال البيانات المحلية بالكامل
        const oldCount = properties.length;
        properties.length = 0; // مسح البيانات المحلية
        properties.push(...supabaseData); // إضافة بيانات Supabase

        // حفظ محلياً
        saveDataLocally();

        progressBar.style.width = '100%';
        progressText.textContent = 'تحديث العرض...';

        // تحديث العرض
        renderData();
        updateTotalStats();

        // إزالة مؤشر التحميل
        document.body.removeChild(loadingMessage);

        // رسالة النجاح
        alert(`✅ تم الاسترداد بنجاح!\n\n` +
              `البيانات القديمة: ${oldCount} وحدة\n` +
              `البيانات الجديدة: ${properties.length} وحدة\n` +
              `الفرق: ${properties.length - oldCount > 0 ? '+' : ''}${properties.length - oldCount} وحدة`);

        console.log(`✅ تم استرداد ${properties.length} وحدة من Supabase بنجاح`);

    } catch (error) {
        // إزالة مؤشر التحميل في حالة الخطأ
        const loadingElement = document.querySelector('[style*="position: fixed"]');
        if (loadingElement) {
            document.body.removeChild(loadingElement.parentElement || loadingElement);
        }

        console.error('❌ خطأ في الاسترداد:', error);
        alert(`❌ فشل في الاسترداد:\n${error.message}`);
    }
}

// 🔧 دالة اختبار نظام ربط الوحدات المحسن
async function testEnhancedUnitLinking() {
    console.log('🧪 اختبار نظام ربط الوحدات المحسن...');

    try {
        // التحقق من وجود البيانات
        if (!properties || properties.length === 0) {
            throw new Error('لا توجد وحدات للاختبار');
        }

        // البحث عن وحدتين في نفس العقار للاختبار
        const testProperty = properties.find(p => p['اسم العقار']);
        if (!testProperty) {
            throw new Error('لا توجد عقارات للاختبار');
        }

        const propertyName = testProperty['اسم العقار'];
        const testUnits = properties.filter(p =>
            p['اسم العقار'] === propertyName
        ).slice(0, 2);

        if (testUnits.length < 2) {
            console.log('⚠️ يحتاج الاختبار إلى وحدتين على الأقل في نفس العقار');

            // إنشاء وحدة اختبار إضافية
            const newTestUnit = {
                'رقم  الوحدة ': 'TEST_LINK_' + Date.now(),
                'اسم العقار': propertyName,
                'المدينة': testProperty['المدينة'] || 'الرياض',
                'اسم المستأجر': '',
                'رقم العقد': '',
                'المساحة': '100',
                'تاريخ آخر تحديث': new Date().toLocaleDateString('ar-SA'),
                'نوع التحديث': 'إنشاء وحدة اختبار',
                'المسؤول عن التحديث': 'نظام الاختبار'
            };

            properties.push(newTestUnit);
            testUnits.push(newTestUnit);
            console.log(`✅ تم إنشاء وحدة اختبار: ${newTestUnit['رقم  الوحدة ']}`);
        }

        const testContractNumber = 'CONTRACT_TEST_' + Date.now();

        console.log(`📋 بدء اختبار ربط الوحدات:`);
        console.log(`- العقار: ${propertyName}`);
        console.log(`- الوحدات: ${testUnits.map(u => u['رقم  الوحدة ']).join(', ')}`);
        console.log(`- رقم العقد: ${testContractNumber}`);

        // الخطوة 1: ربط الوحدة الأولى بالعقد
        console.log('🔗 الخطوة 1: ربط الوحدة الأولى...');
        const firstUnit = testUnits[0];

        // تحديث بيانات الوحدة الأولى
        const firstUnitIndex = properties.findIndex(p =>
            p['رقم  الوحدة '] === firstUnit['رقم  الوحدة '] &&
            p['اسم العقار'] === firstUnit['اسم العقار']
        );

        if (firstUnitIndex !== -1) {
            properties[firstUnitIndex]['رقم العقد'] = testContractNumber;
            properties[firstUnitIndex]['اسم المستأجر'] = 'أحمد محمد (اختبار)';
            properties[firstUnitIndex]['رقم الجوال'] = '0501234567';
            properties[firstUnitIndex]['تاريخ البداية'] = '01/01/2024';
            properties[firstUnitIndex]['تاريخ النهاية'] = '31/12/2024';
            properties[firstUnitIndex]['قيمة  الايجار '] = '50000';
            properties[firstUnitIndex]['نوع العقد'] = 'سكني';
            properties[firstUnitIndex]['تاريخ القسط الاول'] = '01/01/2024';
            properties[firstUnitIndex]['مبلغ القسط الاول'] = '12500';
            properties[firstUnitIndex]['تاريخ القسط الثاني'] = '01/04/2024';
            properties[firstUnitIndex]['مبلغ القسط الثاني'] = '12500';

            console.log(`✅ تم تحديث الوحدة الأولى: ${firstUnit['رقم  الوحدة ']}`);
        }

        // الخطوة 2: ربط الوحدة الثانية بنفس العقد
        console.log('🔗 الخطوة 2: ربط الوحدة الثانية...');
        await linkUnitToContract(testUnits[1]['رقم  الوحدة '], propertyName, testContractNumber);

        // الخطوة 3: التحقق من المزامنة
        console.log('🔍 الخطوة 3: التحقق من مزامنة البيانات...');

        const linkedUnits = properties.filter(p =>
            p['رقم العقد'] === testContractNumber &&
            p['اسم العقار'] === propertyName
        );

        console.log(`📊 تم العثور على ${linkedUnits.length} وحدة مربوطة`);

        // التحقق من تطابق البيانات المشتركة
        const firstLinkedUnit = linkedUnits[0];
        const secondLinkedUnit = linkedUnits[1];

        const sharedFields = [
            'اسم المستأجر', 'رقم الجوال', 'رقم العقد',
            'تاريخ البداية', 'تاريخ النهاية', 'قيمة  الايجار ', 'نوع العقد',
            'تاريخ القسط الاول', 'مبلغ القسط الاول',
            'تاريخ القسط الثاني', 'مبلغ القسط الثاني'
        ];

        let syncedFields = 0;
        let totalFields = sharedFields.length;

        for (const field of sharedFields) {
            if (firstLinkedUnit[field] === secondLinkedUnit[field]) {
                syncedFields++;
                console.log(`✅ ${field}: متطابق (${firstLinkedUnit[field]})`);
            } else {
                console.log(`❌ ${field}: غير متطابق (${firstLinkedUnit[field]} ≠ ${secondLinkedUnit[field]})`);
            }
        }

        const syncPercentage = Math.round((syncedFields / totalFields) * 100);
        console.log(`📈 نسبة المزامنة: ${syncPercentage}% (${syncedFields}/${totalFields})`);

        // الخطوة 4: اختبار تحديث البيانات
        console.log('🔄 الخطوة 4: اختبار تحديث البيانات المشتركة...');

        const updatedData = {
            'اسم المستأجر': 'فاطمة أحمد (محدث)',
            'رقم الجوال': '0509876543',
            'قيمة  الايجار ': '60000',
            'مبلغ القسط الاول': '15000',
            'رقم العقد': testContractNumber,
            'اسم العقار': propertyName
        };

        const updateResult = await updateLinkedUnitsOnEdit(updatedData);

        if (updateResult.success) {
            console.log(`✅ تم تحديث ${updateResult.updatedCount} وحدة مربوطة`);
        } else {
            console.error(`❌ فشل في تحديث الوحدات المربوطة: ${updateResult.reason}`);
        }

        // الخطوة 5: التحقق النهائي
        console.log('🔍 الخطوة 5: التحقق النهائي من المزامنة...');

        const finalLinkedUnits = properties.filter(p =>
            p['رقم العقد'] === testContractNumber &&
            p['اسم العقار'] === propertyName
        );

        const finalSyncCheck = finalLinkedUnits.every(unit =>
            unit['اسم المستأجر'] === updatedData['اسم المستأجر'] &&
            unit['رقم الجوال'] === updatedData['رقم الجوال'] &&
            unit['قيمة  الايجار '] === updatedData['قيمة  الايجار ']
        );

        // النتائج النهائية
        const testResults = {
            success: finalSyncCheck && syncPercentage >= 80,
            linkedUnitsCount: finalLinkedUnits.length,
            syncPercentage,
            updateSuccess: updateResult.success,
            finalSyncCheck
        };

        console.log('🎯 نتائج الاختبار:');
        console.log(`- عدد الوحدات المربوطة: ${testResults.linkedUnitsCount}`);
        console.log(`- نسبة المزامنة الأولية: ${testResults.syncPercentage}%`);
        console.log(`- نجاح التحديث: ${testResults.updateSuccess ? 'نعم' : 'لا'}`);
        console.log(`- المزامنة النهائية: ${testResults.finalSyncCheck ? 'نعم' : 'لا'}`);
        console.log(`- النتيجة العامة: ${testResults.success ? '✅ نجح' : '❌ فشل'}`);

        // حفظ البيانات
        saveDataLocally();

        // إظهار رسالة للمستخدم
        const message = testResults.success
            ? `🎉 نجح اختبار نظام ربط الوحدات المحسن!\n\n✅ تم ربط ${testResults.linkedUnitsCount} وحدة\n✅ نسبة المزامنة: ${testResults.syncPercentage}%\n✅ تحديث البيانات المشتركة يعمل بشكل صحيح`
            : `⚠️ اختبار نظام ربط الوحدات يحتاج تحسين\n\nالمشاكل المكتشفة:\n${!testResults.updateSuccess ? '- فشل في تحديث البيانات\n' : ''}${!testResults.finalSyncCheck ? '- عدم تطابق البيانات النهائية\n' : ''}${testResults.syncPercentage < 80 ? '- نسبة مزامنة منخفضة\n' : ''}`;

        alert(message);
        showToast(testResults.success ? 'نجح اختبار ربط الوحدات المحسن' : 'اختبار ربط الوحدات يحتاج تحسين',
                 testResults.success ? 'success' : 'warning');

        return testResults;

    } catch (error) {
        console.error('❌ خطأ في اختبار نظام ربط الوحدات:', error);
        alert(`❌ فشل اختبار نظام ربط الوحدات:\n\n${error.message}`);
        showToast('فشل اختبار ربط الوحدات: ' + error.message, 'error');
        return { success: false, error: error.message };
    }
}

// 🧪 اختبار ميزة تحرير اسم العقار
function testPropertyNameEdit() {
    console.log('🧪 اختبار ميزة تحرير اسم العقار...');

    try {
        // التحقق من الصلاحية
        const hasPermission = canEditPropertyName();
        console.log(`🔍 فحص الصلاحية: ${hasPermission ? 'مسموح' : 'ممنوع'}`);

        // التحقق من سلامة البيانات
        const dataIntegrity = validateDataIntegrity();
        console.log(`🛡️ سلامة البيانات: ${dataIntegrity ? 'سليمة' : 'تحتاج إصلاح'}`);

        // التحقق من وجود عقارات
        if (properties && properties.length > 0) {
            const uniqueProperties = [...new Set(
                properties
                    .filter(p => p && typeof p === 'object' && p['اسم العقار'])
                    .map(p => p['اسم العقار'])
            )].filter(name => name && typeof name === 'string' && name.trim() !== '');

            console.log(`🏢 العقارات المتاحة: ${uniqueProperties.length}`);
            console.log(`📊 إجمالي الوحدات: ${properties.length}`);

            if (uniqueProperties.length > 0) {
                console.log(`📋 أول 5 عقارات:`, uniqueProperties.slice(0, 5));
            }
        } else {
            console.warn('⚠️ لا توجد بيانات للاختبار');
        }

        // اختبار دوال المساعدة
        const testResults = {
            permission: hasPermission,
            dataIntegrity: dataIntegrity,
            propertiesCount: properties ? properties.length : 0,
            uniquePropertiesCount: properties ? [...new Set(properties.map(p => p && p['اسم العقار']).filter(Boolean))].length : 0,
            functionsAvailable: {
                canEditPropertyName: typeof canEditPropertyName === 'function',
                validateDataIntegrity: typeof validateDataIntegrity === 'function',
                editPropertyName: typeof editPropertyName === 'function',
                showPropertyNameEditOptions: typeof showPropertyNameEditOptions === 'function'
            }
        };

        console.log('📊 نتائج الاختبار:', testResults);

        // رسالة للمستخدم
        const message = hasPermission
            ? `✅ ميزة تحرير اسم العقار جاهزة!\n\n🏢 العقارات المتاحة: ${testResults.uniquePropertiesCount}\n📊 إجمالي الوحدات: ${testResults.propertiesCount}\n🛡️ سلامة البيانات: ${dataIntegrity ? 'ممتازة' : 'تحتاج إصلاح'}`
            : `🔒 ميزة تحرير اسم العقار متاحة لعمر فقط\n\nيرجى تسجيل الدخول بحساب عمر لاستخدام هذه الميزة.`;

        alert(message);
        return testResults;

    } catch (error) {
        console.error('❌ خطأ في اختبار ميزة تحرير اسم العقار:', error);
        alert('❌ فشل اختبار ميزة تحرير اسم العقار: ' + error.message);
        return { success: false, error: error.message };
    }
}

// 🧪 اختبار تحديث اسم العقار بدون تكرار
async function testPropertyNameUpdateWithoutDuplication() {
    console.log('🧪 اختبار تحديث اسم العقار بدون إنشاء نسخ مكررة...');

    try {
        // التحقق من الصلاحية
        if (!canEditPropertyName()) {
            console.log('❌ المستخدم لا يملك صلاحية تحديث أسماء العقارات');
            alert('🔒 هذا الاختبار متاح لعمر فقط');
            return { success: false, reason: 'No permission' };
        }

        // التحقق من وجود البيانات
        if (!properties || properties.length === 0) {
            console.log('❌ لا توجد بيانات للاختبار');
            alert('❌ لا توجد بيانات للاختبار');
            return { success: false, reason: 'No data' };
        }

        // البحث عن عقار للاختبار
        const uniqueProperties = [...new Set(properties.map(p => p['اسم العقار']))].filter(Boolean);
        if (uniqueProperties.length === 0) {
            console.log('❌ لا توجد عقارات للاختبار');
            alert('❌ لا توجد عقارات للاختبار');
            return { success: false, reason: 'No properties' };
        }

        const testProperty = uniqueProperties[0];
        const testUnits = properties.filter(p => p['اسم العقار'] === testProperty);

        console.log(`📋 اختبار العقار: "${testProperty}" (${testUnits.length} وحدة)`);

        // إنشاء اسم اختبار مؤقت
        const testNewName = `${testProperty}_TEST_${Date.now()}`;

        console.log(`🔄 تحديث اسم العقار من "${testProperty}" إلى "${testNewName}"`);

        // تنفيذ التحديث
        const updateResult = await updatePropertyNameInAllSystems(testProperty, testNewName);

        if (updateResult.success) {
            console.log(`✅ نجح التحديث: ${updateResult.updatedUnits} وحدة محلياً، ${updateResult.supabaseUpdates} في السحابة`);

            // التحقق من عدم وجود تكرار في Supabase
            if (typeof supabaseClient !== 'undefined' && supabaseClient) {
                try {
                    const { data: duplicateCheck } = await supabaseClient
                        .from('properties')
                        .select('id, unit_number, property_name')
                        .eq('property_name', testNewName);

                    if (duplicateCheck) {
                        // تجميع حسب رقم الوحدة
                        const unitGroups = {};
                        duplicateCheck.forEach(record => {
                            const unitNumber = record.unit_number;
                            if (!unitGroups[unitNumber]) {
                                unitGroups[unitNumber] = [];
                            }
                            unitGroups[unitNumber].push(record);
                        });

                        let duplicatesFound = 0;
                        Object.values(unitGroups).forEach(group => {
                            if (group.length > 1) {
                                duplicatesFound += group.length - 1;
                            }
                        });

                        console.log(`🔍 فحص التكرار: ${duplicatesFound} سجل مكرر في Supabase`);

                        if (duplicatesFound === 0) {
                            console.log('✅ لا توجد سجلات مكررة - الاختبار نجح!');
                        } else {
                            console.warn(`⚠️ وُجدت ${duplicatesFound} سجلات مكررة - يحتاج تحسين`);
                        }
                    }
                } catch (checkError) {
                    console.warn('⚠️ فشل في فحص التكرار:', checkError);
                }
            }

            // إعادة الاسم الأصلي
            console.log(`🔄 إعادة الاسم الأصلي من "${testNewName}" إلى "${testProperty}"`);
            const restoreResult = await updatePropertyNameInAllSystems(testNewName, testProperty);

            if (restoreResult.success) {
                console.log('✅ تم إعادة الاسم الأصلي بنجاح');

                const testResults = {
                    success: true,
                    testProperty,
                    testNewName,
                    originalUnits: testUnits.length,
                    updatedUnits: updateResult.updatedUnits,
                    supabaseUpdates: updateResult.supabaseUpdates,
                    restoredUnits: restoreResult.updatedUnits,
                    restoredSupabaseUpdates: restoreResult.supabaseUpdates
                };

                const message = `🎉 نجح اختبار تحديث اسم العقار!\n\n` +
                    `📊 النتائج:\n` +
                    `• العقار المختبر: "${testProperty}"\n` +
                    `• عدد الوحدات: ${testUnits.length}\n` +
                    `• التحديث الأول: ${updateResult.updatedUnits} محلي، ${updateResult.supabaseUpdates} سحابي\n` +
                    `• الإعادة: ${restoreResult.updatedUnits} محلي، ${restoreResult.supabaseUpdates} سحابي\n\n` +
                    `✅ لا توجد نسخ مكررة في النظام`;

                alert(message);
                return testResults;

            } else {
                console.error('❌ فشل في إعادة الاسم الأصلي:', restoreResult.reason);
                alert(`❌ فشل في إعادة الاسم الأصلي: ${restoreResult.reason}\n\nيرجى إعادة تسمية العقار يدوياً من "${testNewName}" إلى "${testProperty}"`);
                return { success: false, reason: 'Failed to restore original name', partialSuccess: true };
            }

        } else {
            console.error('❌ فشل في تحديث اسم العقار:', updateResult.reason);
            alert(`❌ فشل في تحديث اسم العقار: ${updateResult.reason}`);
            return { success: false, reason: updateResult.reason };
        }

    } catch (error) {
        console.error('❌ خطأ في اختبار تحديث اسم العقار:', error);
        alert(`❌ خطأ في الاختبار: ${error.message}`);
        return { success: false, error: error.message };
    }
}

// 🧪 اختبار إعادة تعيين الفلاتر عند تسجيل الدخول
function testFilterResetOnLogin() {
    console.log('🧪 اختبار إعادة تعيين الفلاتر عند تسجيل الدخول...');

    try {
        // حفظ الحالة الحالية
        const originalState = {
            currentCountry,
            currentProperty,
            filterStatus,
            contractTypeFilter: typeof contractTypeFilter !== 'undefined' ? contractTypeFilter : null
        };

        console.log('📊 الحالة قبل الاختبار:', originalState);

        // تعيين فلاتر مختلفة للاختبار
        currentCountry = 'الرياض';
        currentProperty = 'عمارة النخيل';
        filterStatus = 'فعال';
        if (typeof contractTypeFilter !== 'undefined') {
            contractTypeFilter = 'سكني';
        }

        console.log('🔧 تم تعيين فلاتر اختبار:', {
            currentCountry,
            currentProperty,
            filterStatus,
            contractTypeFilter: typeof contractTypeFilter !== 'undefined' ? contractTypeFilter : null
        });

        // تنفيذ إعادة تعيين الفلاتر
        resetFiltersToDefault();

        // التحقق من النتائج بعد التأخير
        setTimeout(() => {
            const newState = {
                currentCountry,
                currentProperty,
                filterStatus,
                contractTypeFilter: typeof contractTypeFilter !== 'undefined' ? contractTypeFilter : null
            };

            console.log('📊 الحالة بعد إعادة التعيين:', newState);

            // التحقق من نجاح إعادة التعيين
            const isReset = (
                currentCountry === null &&
                currentProperty === null &&
                filterStatus === null &&
                (typeof contractTypeFilter === 'undefined' || contractTypeFilter === null)
            );

            const testResults = {
                success: isReset,
                originalState,
                newState,
                resetCorrectly: {
                    currentCountry: currentCountry === null,
                    currentProperty: currentProperty === null,
                    filterStatus: filterStatus === null,
                    contractTypeFilter: typeof contractTypeFilter === 'undefined' || contractTypeFilter === null
                }
            };

            console.log('📊 نتائج الاختبار:', testResults);

            const message = isReset
                ? `✅ نجح اختبار إعادة تعيين الفلاتر!\n\n🔄 جميع الفلاتر تم إعادة تعيينها إلى "الكل":\n• المدينة: ${currentCountry || 'الكل'}\n• العقار: ${currentProperty || 'الكل'}\n• الحالة: ${filterStatus || 'الكل'}\n• نوع العقد: ${(typeof contractTypeFilter !== 'undefined' ? contractTypeFilter : null) || 'الكل'}`
                : `❌ فشل اختبار إعادة تعيين الفلاتر\n\nالمشاكل:\n${!testResults.resetCorrectly.currentCountry ? '• المدينة لم يتم إعادة تعيينها\n' : ''}${!testResults.resetCorrectly.currentProperty ? '• العقار لم يتم إعادة تعيينه\n' : ''}${!testResults.resetCorrectly.filterStatus ? '• فلتر الحالة لم يتم إعادة تعيينه\n' : ''}${!testResults.resetCorrectly.contractTypeFilter ? '• فلتر نوع العقد لم يتم إعادة تعيينه\n' : ''}`;

            alert(message);

            return testResults;

        }, 1000);

    } catch (error) {
        console.error('❌ خطأ في اختبار إعادة تعيين الفلاتر:', error);
        alert('❌ فشل اختبار إعادة تعيين الفلاتر: ' + error.message);
        return { success: false, error: error.message };
    }
}

// دالة إصلاح مشاكل ربط الوحدات
async function fixUnitLinkingIssues() {
    console.log('🛠️ بدء إصلاح مشاكل ربط الوحدات...');

    try {
        let fixedIssues = [];
        let totalIssues = 0;

        // 1. فحص اتصال Supabase
        console.log('🔍 فحص اتصال Supabase...');
        if (!supabaseClient) {
            totalIssues++;
            console.error('❌ Supabase غير متصل');
            fixedIssues.push('❌ Supabase غير متصل - تحقق من الإعدادات');
        } else {
            try {
                const { error } = await supabaseClient.from('properties').select('count', { count: 'exact', head: true });
                if (error) {
                    totalIssues++;
                    fixedIssues.push(`❌ خطأ في اتصال Supabase: ${error.message}`);
                } else {
                    fixedIssues.push('✅ اتصال Supabase يعمل بشكل طبيعي');
                }
            } catch (error) {
                totalIssues++;
                fixedIssues.push(`❌ خطأ في اختبار Supabase: ${error.message}`);
            }
        }

        // 2. فحص الدوال المطلوبة
        console.log('🔍 فحص الدوال المطلوبة...');
        const requiredFunctions = [
            'saveUnitLinkingToSupabase',
            'linkUnitToContract',
            'unlinkUnit',
            'savePropertyToSupabase'
        ];

        requiredFunctions.forEach(funcName => {
            if (typeof window[funcName] === 'function') {
                fixedIssues.push(`✅ ${funcName} متوفرة`);
            } else {
                totalIssues++;
                fixedIssues.push(`❌ ${funcName} غير متوفرة`);
            }
        });

        // 3. اختبار سريع للربط
        console.log('🧪 اختبار سريع للربط...');
        if (supabaseClient && typeof saveUnitLinkingToSupabase === 'function') {
            try {
                const testResult = await quickUnitLinkingTest();
                if (testResult.success) {
                    fixedIssues.push('✅ اختبار الربط نجح');
                } else {
                    totalIssues++;
                    fixedIssues.push(`❌ فشل اختبار الربط: ${testResult.error}`);
                }
            } catch (error) {
                totalIssues++;
                fixedIssues.push(`❌ خطأ في اختبار الربط: ${error.message}`);
            }
        }

        // 4. النتيجة النهائية
        const successRate = Math.round(((fixedIssues.length - totalIssues) / fixedIssues.length) * 100);

        let message = `🛠️ تقرير إصلاح مشاكل ربط الوحدات\n\n`;
        message += `📊 النتيجة العامة: ${successRate}%\n`;
        message += `✅ العناصر السليمة: ${fixedIssues.length - totalIssues}\n`;
        message += `❌ المشاكل المكتشفة: ${totalIssues}\n\n`;
        message += `📋 التفاصيل:\n${fixedIssues.join('\n')}\n\n`;

        if (totalIssues === 0) {
            message += `🎉 ممتاز! النظام يعمل بشكل مثالي`;
            showToast('🎉 النظام يعمل بشكل مثالي', 'success');
        } else if (successRate >= 70) {
            message += `⚠️ يوجد بعض المشاكل البسيطة`;
            showToast('⚠️ يوجد بعض المشاكل البسيطة', 'warning');
        } else {
            message += `❌ يوجد مشاكل كبيرة تحتاج إصلاح`;
            showToast('❌ يوجد مشاكل كبيرة', 'error');
        }

        alert(message);
        console.log('🛠️ تم إكمال فحص مشاكل ربط الوحدات');

        return {
            success: totalIssues === 0,
            successRate,
            totalIssues,
            fixedIssues
        };

    } catch (error) {
        console.error('❌ خطأ في إصلاح مشاكل ربط الوحدات:', error);
        alert(`❌ خطأ في إصلاح مشاكل ربط الوحدات:\n\n${error.message}`);
        showToast('❌ خطأ في الإصلاح', 'error');
        return { success: false, error: error.message };
    }
}

// دالة اختبار سريعة لربط الوحدات - للاستدعاء من الهيدر
async function quickUnitLinkingTest() {
    console.log('🔗 اختبار سريع لربط الوحدات...');

    try {
        // التحقق من المتطلبات
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        if (typeof saveUnitLinkingToSupabase !== 'function') {
            throw new Error('دالة الربط غير متوفرة');
        }

        // إنشاء بيانات اختبار
        const testData = {
            'رقم  الوحدة ': 'QUICK-LINK-' + Date.now(),
            'اسم العقار': 'عقار اختبار سريع',
            'المدينة': 'الرياض',
            'اسم المستأجر': 'مستأجر اختبار',
            'رقم العقد': 'CONTRACT-QUICK-' + Date.now(),
            'قيمة  الايجار ': 1500,
            'المساحة': 100,
            'نوع العقد': 'سكني'
        };

        console.log('📝 بيانات الاختبار:', testData);

        // تنفيذ الربط
        const result = await saveUnitLinkingToSupabase(testData, 'link');

        if (result && result.id) {
            // التحقق من الحفظ
            const { data: verifyData, error: verifyError } = await supabaseClient
                .from('properties')
                .select('*')
                .eq('id', result.id)
                .single();

            if (verifyError) {
                console.warn('⚠️ تحذير: لم يتم التحقق من الحفظ:', verifyError);
            }

            const message = `✅ نجح اختبار ربط الوحدات!\n\n📋 تفاصيل النتيجة:\n- معرف السجل: ${result.id}\n- رقم الوحدة: ${testData['رقم  الوحدة ']}\n- العقد: ${testData['رقم العقد']}\n- المستأجر: ${testData['اسم المستأجر']}\n\n${verifyError ? '⚠️ تحذير: لم يتم التحقق من الحفظ' : '✅ تم التحقق من الحفظ بنجاح'}\n\n🔗 تحقق من Supabase Dashboard → Table Editor → properties`;

            alert(message);
            showToast('✅ نجح اختبار ربط الوحدات!', 'success');

            console.log('✅ نجح اختبار ربط الوحدات:', result);
            return { success: true, result, verified: !verifyError };

        } else {
            throw new Error('لم يتم إرجاع نتيجة صحيحة من الحفظ');
        }

    } catch (error) {
        const message = `❌ فشل اختبار ربط الوحدات!\n\nالخطأ: ${error.message}\n\n💡 تحقق من:\n- اتصال الإنترنت\n- إعدادات Supabase\n- تحميل الملفات المطلوبة`;

        alert(message);
        showToast('❌ فشل اختبار ربط الوحدات', 'error');

        console.error('❌ فشل اختبار ربط الوحدات:', error);
        return { success: false, error: error.message };
    }
}

// دالة اختبار سريعة للربط من الكونسول - يمكن استدعاؤها بـ testLinking()
async function testLinking() {
    console.log('🧪 اختبار سريع لربط الوحدات من الكونسول...');

    try {
        // التحقق من الاتصال
        if (!supabaseClient) {
            console.error('❌ Supabase غير متصل');
            alert('❌ Supabase غير متصل - تحقق من الإعدادات');
            return false;
        }

        console.log('✅ Supabase متصل');

        // إنشاء بيانات اختبار
        const timestamp = Date.now();
        const testUnit = {
            'رقم  الوحدة ': `TEST-${timestamp}`,
            'اسم العقار': 'عقار اختبار الربط',
            'المدينة': 'الرياض',
            'اسم المستأجر': 'مستأجر اختبار',
            'رقم العقد': `CONTRACT-${timestamp}`,
            'قيمة  الايجار ': 2000,
            'المساحة': 120,
            'نوع العقد': 'سكني',
            'تاريخ البداية': '01/01/2024',
            'تاريخ النهاية': '31/12/2024',
            'المالك': 'مالك اختبار',
            'رقم الصك': `DEED-${timestamp}`,
            'السجل العيني ': `REG-${timestamp}`
        };

        console.log('📝 بيانات الاختبار:', testUnit);

        // اختبار الربط
        console.log('🔗 بدء اختبار الربط...');
        const linkResult = await saveUnitLinkingToSupabase(testUnit, 'link');

        if (linkResult && linkResult.id) {
            console.log('✅ نجح الربط! معرف السجل:', linkResult.id);

            // التحقق من الحفظ
            const { data: savedData, error: fetchError } = await supabaseClient
                .from('properties')
                .select('*')
                .eq('id', linkResult.id)
                .single();

            if (fetchError) {
                console.warn('⚠️ تحذير: لم يتم التحقق من الحفظ:', fetchError);
            } else {
                console.log('✅ تم التحقق من الحفظ بنجاح:', savedData);
            }

            // اختبار الفصل
            console.log('🔓 بدء اختبار الفصل...');
            const unlinkResult = await saveUnitLinkingToSupabase(testUnit, 'unlink');

            if (unlinkResult && unlinkResult.id) {
                console.log('✅ نجح الفصل! معرف السجل:', unlinkResult.id);

                // التحقق من الفصل
                const { data: unlinkedData, error: unlinkFetchError } = await supabaseClient
                    .from('properties')
                    .select('*')
                    .eq('id', unlinkResult.id)
                    .single();

                if (unlinkFetchError) {
                    console.warn('⚠️ تحذير: لم يتم التحقق من الفصل:', unlinkFetchError);
                } else {
                    console.log('✅ تم التحقق من الفصل بنجاح:', unlinkedData);
                    console.log('🔍 العقد والمستأجر بعد الفصل:', {
                        contract: unlinkedData.contract_number,
                        tenant: unlinkedData.tenant_name
                    });
                }

                const successMessage = `🎉 نجح اختبار الربط والفصل!\n\n✅ الربط: ${linkResult.id}\n✅ الفصل: ${unlinkResult.id}\n\n🔗 تحقق من Supabase Dashboard`;
                alert(successMessage);
                showToast('🎉 نجح اختبار الربط والفصل!', 'success');

                return true;
            } else {
                throw new Error('فشل في الفصل');
            }
        } else {
            throw new Error('فشل في الربط');
        }

    } catch (error) {
        console.error('❌ فشل الاختبار:', error);
        alert(`❌ فشل الاختبار: ${error.message}`);
        showToast('❌ فشل الاختبار', 'error');
        return false;
    }
}

// إضافة الدالة للنطاق العام
window.testLinking = testLinking;

// دالة لإظهار دليل استخدام ربط الوحدات
function showUnitLinkingGuide() {
    const guideMessage = `
🔗 دليل استخدام ربط الوحدات

📋 كيفية ربط الوحدات:

1️⃣ انقر على الزر الأصفر "تحرير" للبطاقة
2️⃣ انزل للأسفل في نافذة التحرير
3️⃣ ستجد قسم "الوحدات المتاحة للربط"
4️⃣ انقر على زر "ربط" بجانب الوحدة المطلوبة
5️⃣ سيتم الربط فوراً وحفظه في Supabase

✅ المميزات الجديدة:
• الربط يحفظ فوراً في قاعدة البيانات السحابية
• لا يحتاج إعادة تحميل الصفحة
• يظهر رسائل تأكيد للنجاح أو الفشل
• يمكن التحقق من الحفظ في Supabase Dashboard

🧪 للاختبار:
• استخدم زر "اختبار ربط الوحدات" في الإعدادات
• أو اكتب testLinking() في الكونسول

🔧 في حالة المشاكل:
• تحقق من اتصال الإنترنت
• تحقق من إعدادات Supabase
• راجع رسائل الخطأ في الكونسول
    `;

    alert(guideMessage);
    console.log('📖 دليل استخدام ربط الوحدات:', guideMessage);
}

// إضافة الدالة للنطاق العام
window.showUnitLinkingGuide = showUnitLinkingGuide;

// ===== نظام اختبار متكامل لربط الوحدات =====

// دالة اختبار شاملة لجميع جوانب ربط الوحدات
async function comprehensiveUnitLinkingTest() {
    console.log('🧪 بدء الاختبار الشامل لنظام ربط الوحدات...');

    const testResults = {
        supabaseConnection: false,
        basicLinking: false,
        unlinking: false,
        dataVerification: false,
        uiIntegration: false,
        errors: []
    };

    try {
        // 1. اختبار اتصال Supabase
        console.log('🔍 اختبار 1: فحص اتصال Supabase...');
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        // اختبار بسيط للاتصال
        const { data: testConnection, error: connectionError } = await supabaseClient
            .from('properties')
            .select('id')
            .limit(1);

        if (connectionError) {
            throw new Error(`خطأ في الاتصال: ${connectionError.message}`);
        }

        testResults.supabaseConnection = true;
        console.log('✅ اختبار الاتصال نجح');

        // 2. اختبار الربط الأساسي
        console.log('🔗 اختبار 2: الربط الأساسي...');
        const timestamp = Date.now();
        const testUnit = {
            'رقم  الوحدة ': `COMPREHENSIVE-TEST-${timestamp}`,
            'اسم العقار': 'عقار اختبار شامل',
            'المدينة': 'الرياض',
            'اسم المستأجر': 'مستأجر اختبار شامل',
            'رقم العقد': `CONTRACT-COMPREHENSIVE-${timestamp}`,
            'قيمة  الايجار ': 2500,
            'المساحة': 150,
            'نوع العقد': 'سكني',
            'تاريخ البداية': '01/01/2024',
            'تاريخ النهاية': '31/12/2024',
            'المالك': 'مالك اختبار',
            'رقم الصك': `DEED-${timestamp}`,
            'السجل العيني ': `REG-${timestamp}`
        };

        const linkResult = await saveUnitLinkingToSupabase(testUnit, 'link');
        if (!linkResult || !linkResult.id) {
            throw new Error('فشل في الربط الأساسي');
        }

        testResults.basicLinking = true;
        console.log('✅ اختبار الربط الأساسي نجح');

        // 3. اختبار التحقق من البيانات
        console.log('🔍 اختبار 3: التحقق من البيانات...');
        const { data: verifyData, error: verifyError } = await supabaseClient
            .from('properties')
            .select('*')
            .eq('id', linkResult.id)
            .single();

        if (verifyError || !verifyData) {
            throw new Error('فشل في التحقق من البيانات');
        }

        if (verifyData.tenant_name !== testUnit['اسم المستأجر'] ||
            verifyData.contract_number !== testUnit['رقم العقد']) {
            throw new Error('البيانات المحفوظة لا تطابق البيانات المرسلة');
        }

        testResults.dataVerification = true;
        console.log('✅ اختبار التحقق من البيانات نجح');

        // 4. اختبار الفصل
        console.log('🔓 اختبار 4: فصل الوحدة...');
        const unlinkResult = await saveUnitLinkingToSupabase(testUnit, 'unlink');
        if (!unlinkResult || !unlinkResult.id) {
            throw new Error('فشل في فصل الوحدة');
        }

        // التحقق من الفصل
        const { data: unlinkVerifyData, error: unlinkVerifyError } = await supabaseClient
            .from('properties')
            .select('tenant_name, contract_number')
            .eq('id', unlinkResult.id)
            .single();

        if (unlinkVerifyError || !unlinkVerifyData) {
            throw new Error('فشل في التحقق من الفصل');
        }

        if (unlinkVerifyData.tenant_name !== '' || unlinkVerifyData.contract_number !== '') {
            throw new Error('لم يتم فصل الوحدة بشكل صحيح');
        }

        testResults.unlinking = true;
        console.log('✅ اختبار الفصل نجح');

        // 5. اختبار تكامل الواجهة
        console.log('🎨 اختبار 5: تكامل الواجهة...');
        const requiredFunctions = [
            'linkUnitToGroup',
            'unlinkUnitFromGroup',
            'saveUnitLinkingToSupabase',
            'updateLinkedUnitsDisplay',
            'updateAvailableUnitsForLinking'
        ];

        let missingFunctions = [];
        requiredFunctions.forEach(funcName => {
            if (typeof window[funcName] !== 'function') {
                missingFunctions.push(funcName);
            }
        });

        if (missingFunctions.length > 0) {
            throw new Error(`دوال مفقودة: ${missingFunctions.join(', ')}`);
        }

        testResults.uiIntegration = true;
        console.log('✅ اختبار تكامل الواجهة نجح');

        // النتيجة النهائية
        const allTestsPassed = Object.values(testResults).every(result =>
            typeof result === 'boolean' ? result : true
        );

        if (allTestsPassed) {
            const successMessage = `🎉 نجح الاختبار الشامل بنسبة 100%!

✅ جميع الاختبارات نجحت:
• اتصال Supabase: نجح
• الربط الأساسي: نجح
• التحقق من البيانات: نجح
• فصل الوحدات: نجح
• تكامل الواجهة: نجح

🔗 معرف الاختبار: ${linkResult.id}
📊 النظام جاهز للاستخدام بشكل كامل!`;

            alert(successMessage);
            showToast('🎉 نجح الاختبار الشامل!', 'success');
            console.log('🎉 نجح الاختبار الشامل لنظام ربط الوحدات');

            return { success: true, results: testResults, testId: linkResult.id };
        } else {
            throw new Error('بعض الاختبارات فشلت');
        }

    } catch (error) {
        testResults.errors.push(error.message);
        console.error('❌ فشل الاختبار الشامل:', error);

        const errorMessage = `❌ فشل الاختبار الشامل!

الخطأ: ${error.message}

📊 نتائج الاختبارات:
• اتصال Supabase: ${testResults.supabaseConnection ? '✅' : '❌'}
• الربط الأساسي: ${testResults.basicLinking ? '✅' : '❌'}
• التحقق من البيانات: ${testResults.dataVerification ? '✅' : '❌'}
• فصل الوحدات: ${testResults.unlinking ? '✅' : '❌'}
• تكامل الواجهة: ${testResults.uiIntegration ? '✅' : '❌'}

💡 تحقق من الكونسول للمزيد من التفاصيل`;

        alert(errorMessage);
        showToast('❌ فشل الاختبار الشامل', 'error');

        return { success: false, results: testResults, error: error.message };
    }
}

// دالة اختبار سريعة للربط من الواجهة
async function quickUILinkingTest() {
    console.log('🎨 اختبار سريع للربط من الواجهة...');

    try {
        // التحقق من وجود البيانات المطلوبة
        if (!window.allData || !Array.isArray(window.allData) || window.allData.length === 0) {
            throw new Error('لا توجد بيانات متاحة للاختبار');
        }

        // البحث عن وحدة فارغة للاختبار
        const emptyUnit = window.allData.find(unit =>
            !unit['اسم المستأجر'] || unit['اسم المستأجر'].trim() === ''
        );

        if (!emptyUnit) {
            // إنشاء وحدة اختبار مؤقتة
            const testUnit = {
                'رقم  الوحدة ': `UI-TEST-${Date.now()}`,
                'اسم العقار': 'عقار اختبار الواجهة',
                'المدينة': 'الرياض',
                'اسم المستأجر': '',
                'رقم العقد': '',
                'قيمة  الايجار ': 0,
                'المساحة': 100,
                'نوع العقد': 'سكني'
            };

            window.allData.push(testUnit);
            console.log('📝 تم إنشاء وحدة اختبار مؤقتة');
        }

        // محاكاة عملية الربط من الواجهة
        const testUnitNumber = emptyUnit ? emptyUnit['رقم  الوحدة '] : `UI-TEST-${Date.now()}`;
        const testPropertyName = emptyUnit ? emptyUnit['اسم العقار'] : 'عقار اختبار الواجهة';

        // تعيين البيانات المطلوبة للاختبار
        window.currentPrimaryUnit = {
            'اسم العقار': testPropertyName,
            'رقم  الوحدة ': testUnitNumber
        };

        window.currentEditingUnits = [];

        console.log(`🔗 محاولة ربط الوحدة ${testUnitNumber}...`);

        // استدعاء دالة الربط الفعلية
        await linkUnitToGroup(testUnitNumber);

        // التحقق من نجاح الربط
        const wasLinked = window.currentEditingUnits.some(unit =>
            unit['رقم  الوحدة '] === testUnitNumber
        );

        if (wasLinked) {
            const successMessage = `✅ نجح اختبار الربط من الواجهة!

🔗 تم ربط الوحدة: ${testUnitNumber}
🏢 في العقار: ${testPropertyName}
📱 تم تحديث الواجهة بنجاح
☁️ تم الحفظ في Supabase

🎯 النظام جاهز للاستخدام العادي!`;

            alert(successMessage);
            showToast('✅ نجح اختبار الربط من الواجهة!', 'success');
            console.log('✅ نجح اختبار الربط من الواجهة');

            return { success: true, unitNumber: testUnitNumber, propertyName: testPropertyName };
        } else {
            throw new Error('فشل في ربط الوحدة في الواجهة');
        }

    } catch (error) {
        console.error('❌ فشل اختبار الربط من الواجهة:', error);

        const errorMessage = `❌ فشل اختبار الربط من الواجهة!

الخطأ: ${error.message}

💡 تحقق من:
• وجود بيانات في النظام
• اتصال Supabase
• تحميل جميع الملفات المطلوبة`;

        alert(errorMessage);
        showToast('❌ فشل اختبار الربط من الواجهة', 'error');

        return { success: false, error: error.message };
    }
}

// دالة تشخيص شاملة لمشاكل الربط
async function diagnoseLinkingIssues() {
    console.log('🔍 بدء تشخيص شامل لمشاكل الربط...');

    const diagnostics = {
        supabase: { connected: false, tableExists: false, canWrite: false },
        functions: { linkUnitToGroup: false, saveUnitLinkingToSupabase: false },
        data: { allDataExists: false, hasUnits: false },
        ui: { editFormsExist: false, buttonsExist: false },
        issues: []
    };

    try {
        // 1. تشخيص Supabase
        console.log('🔍 تشخيص Supabase...');
        if (supabaseClient) {
            diagnostics.supabase.connected = true;

            try {
                const { data, error } = await supabaseClient.from('properties').select('id').limit(1);
                if (!error) {
                    diagnostics.supabase.tableExists = true;

                    // اختبار الكتابة
                    const testData = {
                        unit_number: `DIAG-TEST-${Date.now()}`,
                        property_name: 'تشخيص',
                        city: 'الرياض',
                        tenant_name: 'اختبار',
                        contract_number: 'TEST-DIAG'
                    };

                    const { data: writeData, error: writeError } = await supabaseClient
                        .from('properties')
                        .insert([testData])
                        .select();

                    if (!writeError && writeData && writeData.length > 0) {
                        diagnostics.supabase.canWrite = true;

                        // حذف بيانات الاختبار
                        await supabaseClient
                            .from('properties')
                            .delete()
                            .eq('id', writeData[0].id);
                    }
                }
            } catch (supabaseError) {
                diagnostics.issues.push(`خطأ في Supabase: ${supabaseError.message}`);
            }
        } else {
            diagnostics.issues.push('Supabase غير متصل');
        }

        // 2. تشخيص الدوال
        console.log('🔍 تشخيص الدوال...');
        diagnostics.functions.linkUnitToGroup = typeof linkUnitToGroup === 'function';
        diagnostics.functions.saveUnitLinkingToSupabase = typeof saveUnitLinkingToSupabase === 'function';

        if (!diagnostics.functions.linkUnitToGroup) {
            diagnostics.issues.push('دالة linkUnitToGroup مفقودة');
        }
        if (!diagnostics.functions.saveUnitLinkingToSupabase) {
            diagnostics.issues.push('دالة saveUnitLinkingToSupabase مفقودة');
        }

        // 3. تشخيص البيانات
        console.log('🔍 تشخيص البيانات...');
        if (window.allData && Array.isArray(window.allData)) {
            diagnostics.data.allDataExists = true;
            diagnostics.data.hasUnits = window.allData.length > 0;
        } else {
            diagnostics.issues.push('بيانات allData مفقودة أو غير صحيحة');
        }

        // 4. تشخيص الواجهة
        console.log('🔍 تشخيص الواجهة...');
        const editForms = document.querySelectorAll('#multiUnitEditForm, #propertyEditForm');
        diagnostics.ui.editFormsExist = editForms.length > 0;

        const linkButtons = document.querySelectorAll('[onclick*="linkUnitToGroup"]');
        diagnostics.ui.buttonsExist = linkButtons.length > 0;

        // إنشاء التقرير
        const report = generateDiagnosticReport(diagnostics);
        console.log('📊 تقرير التشخيص:', report);

        // عرض النتائج
        const issueCount = diagnostics.issues.length;
        const successRate = Math.round(((Object.keys(diagnostics).length - 1 - issueCount) / (Object.keys(diagnostics).length - 1)) * 100);

        const message = `🔍 تقرير تشخيص مشاكل الربط

📊 معدل النجاح: ${successRate}%
❌ عدد المشاكل: ${issueCount}

${report}

${issueCount === 0 ? '🎉 النظام يعمل بشكل مثالي!' : '💡 راجع المشاكل المذكورة أعلاه'}`;

        alert(message);

        if (issueCount === 0) {
            showToast('🎉 النظام يعمل بشكل مثالي!', 'success');
        } else {
            showToast(`⚠️ تم اكتشاف ${issueCount} مشكلة`, 'warning');
        }

        return { success: issueCount === 0, diagnostics, report };

    } catch (error) {
        console.error('❌ خطأ في التشخيص:', error);
        alert(`❌ خطأ في التشخيص: ${error.message}`);
        return { success: false, error: error.message };
    }
}

// دالة مساعدة لإنشاء تقرير التشخيص
function generateDiagnosticReport(diagnostics) {
    let report = '';

    // Supabase
    report += '☁️ Supabase:\n';
    report += `  • الاتصال: ${diagnostics.supabase.connected ? '✅' : '❌'}\n`;
    report += `  • الجدول: ${diagnostics.supabase.tableExists ? '✅' : '❌'}\n`;
    report += `  • الكتابة: ${diagnostics.supabase.canWrite ? '✅' : '❌'}\n\n`;

    // الدوال
    report += '⚙️ الدوال:\n';
    report += `  • linkUnitToGroup: ${diagnostics.functions.linkUnitToGroup ? '✅' : '❌'}\n`;
    report += `  • saveUnitLinkingToSupabase: ${diagnostics.functions.saveUnitLinkingToSupabase ? '✅' : '❌'}\n\n`;

    // البيانات
    report += '📊 البيانات:\n';
    report += `  • allData موجود: ${diagnostics.data.allDataExists ? '✅' : '❌'}\n`;
    report += `  • يحتوي وحدات: ${diagnostics.data.hasUnits ? '✅' : '❌'}\n\n`;

    // الواجهة
    report += '🎨 الواجهة:\n';
    report += `  • نماذج التحرير: ${diagnostics.ui.editFormsExist ? '✅' : '❌'}\n`;
    report += `  • أزرار الربط: ${diagnostics.ui.buttonsExist ? '✅' : '❌'}\n\n`;

    // المشاكل
    if (diagnostics.issues.length > 0) {
        report += '❌ المشاكل المكتشفة:\n';
        diagnostics.issues.forEach((issue, index) => {
            report += `  ${index + 1}. ${issue}\n`;
        });
    }

    return report;
}

// إضافة جميع دوال الاختبار للنطاق العام
window.comprehensiveUnitLinkingTest = comprehensiveUnitLinkingTest;
window.quickUILinkingTest = quickUILinkingTest;
window.diagnoseLinkingIssues = diagnoseLinkingIssues;

// دالة موحدة لتشغيل جميع الاختبارات
async function runAllLinkingTests() {
    console.log('🧪 تشغيل جميع اختبارات الربط...');

    const results = {
        comprehensive: null,
        uiTest: null,
        diagnostics: null,
        overallSuccess: false
    };

    try {
        // 1. التشخيص أولاً
        console.log('🔍 بدء التشخيص...');
        results.diagnostics = await diagnoseLinkingIssues();

        if (!results.diagnostics.success) {
            throw new Error('فشل التشخيص - يجب إصلاح المشاكل أولاً');
        }

        // 2. الاختبار الشامل
        console.log('🧪 بدء الاختبار الشامل...');
        results.comprehensive = await comprehensiveUnitLinkingTest();

        if (!results.comprehensive.success) {
            throw new Error('فشل الاختبار الشامل');
        }

        // 3. اختبار الواجهة
        console.log('🎨 بدء اختبار الواجهة...');
        results.uiTest = await quickUILinkingTest();

        if (!results.uiTest.success) {
            console.warn('⚠️ فشل اختبار الواجهة، لكن الاختبارات الأساسية نجحت');
        }

        results.overallSuccess = results.comprehensive.success && results.diagnostics.success;

        const finalMessage = `🎉 اكتملت جميع اختبارات الربط!

📊 النتائج:
✅ التشخيص: ${results.diagnostics.success ? 'نجح' : 'فشل'}
✅ الاختبار الشامل: ${results.comprehensive.success ? 'نجح' : 'فشل'}
${results.uiTest ? (results.uiTest.success ? '✅' : '⚠️') : '⚠️'} اختبار الواجهة: ${results.uiTest ? (results.uiTest.success ? 'نجح' : 'فشل') : 'لم يتم'}

🎯 النتيجة العامة: ${results.overallSuccess ? 'النظام جاهز للاستخدام!' : 'يحتاج إصلاحات'}

🔗 يمكنك الآن استخدام نظام ربط الوحدات بثقة!`;

        alert(finalMessage);
        showToast('🎉 اكتملت جميع الاختبارات!', 'success');

        return results;

    } catch (error) {
        console.error('❌ فشل في تشغيل الاختبارات:', error);

        const errorMessage = `❌ فشل في تشغيل الاختبارات!

الخطأ: ${error.message}

📊 النتائج الجزئية:
${results.diagnostics ? (results.diagnostics.success ? '✅' : '❌') : '⏳'} التشخيص: ${results.diagnostics ? (results.diagnostics.success ? 'نجح' : 'فشل') : 'لم يتم'}
${results.comprehensive ? (results.comprehensive.success ? '✅' : '❌') : '⏳'} الاختبار الشامل: ${results.comprehensive ? (results.comprehensive.success ? 'نجح' : 'فشل') : 'لم يتم'}
${results.uiTest ? (results.uiTest.success ? '✅' : '❌') : '⏳'} اختبار الواجهة: ${results.uiTest ? (results.uiTest.success ? 'نجح' : 'فشل') : 'لم يتم'}`;

        alert(errorMessage);
        showToast('❌ فشل في الاختبارات', 'error');

        return { ...results, overallSuccess: false, error: error.message };
    }
}

// إضافة الدالة الموحدة للنطاق العام
window.runAllLinkingTests = runAllLinkingTests;

// دالة اختبار مباشرة للربط - يمكن استدعاؤها من الكونسول
async function directLinkingTest() {
    console.log('🚀 اختبار مباشر لنظام الربط...');

    try {
        // التحقق من المتطلبات الأساسية
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        if (typeof saveUnitLinkingToSupabase !== 'function') {
            throw new Error('دالة saveUnitLinkingToSupabase غير متوفرة');
        }

        const timestamp = Date.now();

        // 1. إنشاء وحدة اختبار
        console.log('📝 إنشاء وحدة اختبار...');
        const testUnit = {
            'رقم  الوحدة ': `DIRECT-${timestamp}`,
            'اسم العقار': 'عقار اختبار مباشر',
            'المدينة': 'الرياض',
            'اسم المستأجر': 'مستأجر اختبار مباشر',
            'رقم العقد': `CONTRACT-DIRECT-${timestamp}`,
            'قيمة  الايجار ': 2800,
            'المساحة': 180,
            'نوع العقد': 'سكني',
            'تاريخ البداية': '01/01/2024',
            'تاريخ النهاية': '31/12/2024',
            'المالك': 'مالك اختبار مباشر',
            'رقم الصك': `DEED-DIRECT-${timestamp}`,
            'السجل العيني ': `REG-DIRECT-${timestamp}`
        };

        // 2. اختبار الربط
        console.log('🔗 اختبار الربط...');
        const linkResult = await saveUnitLinkingToSupabase(testUnit, 'link');

        if (!linkResult || !linkResult.id) {
            throw new Error('فشل في ربط الوحدة');
        }

        console.log('✅ نجح الربط - معرف السجل:', linkResult.id);

        // 3. التحقق من الربط
        console.log('🔍 التحقق من الربط...');
        const { data: verifyData, error: verifyError } = await supabaseClient
            .from('properties')
            .select('*')
            .eq('id', linkResult.id)
            .single();

        if (verifyError || !verifyData) {
            throw new Error('فشل في التحقق من الربط');
        }

        if (verifyData.tenant_name !== testUnit['اسم المستأجر'] ||
            verifyData.contract_number !== testUnit['رقم العقد']) {
            throw new Error('البيانات المحفوظة لا تطابق البيانات المرسلة');
        }

        console.log('✅ تم التحقق من الربط بنجاح');

        // 4. اختبار الفصل
        console.log('🔓 اختبار الفصل...');
        const unlinkResult = await saveUnitLinkingToSupabase(testUnit, 'unlink');

        if (!unlinkResult || !unlinkResult.id) {
            throw new Error('فشل في فصل الوحدة');
        }

        console.log('✅ نجح الفصل - معرف السجل:', unlinkResult.id);

        // 5. التحقق من الفصل
        console.log('🔍 التحقق من الفصل...');
        const { data: unlinkVerifyData, error: unlinkVerifyError } = await supabaseClient
            .from('properties')
            .select('tenant_name, contract_number')
            .eq('id', unlinkResult.id)
            .single();

        if (unlinkVerifyError || !unlinkVerifyData) {
            throw new Error('فشل في التحقق من الفصل');
        }

        if (unlinkVerifyData.tenant_name !== '' || unlinkVerifyData.contract_number !== '') {
            throw new Error('لم يتم فصل الوحدة بشكل صحيح');
        }

        console.log('✅ تم التحقق من الفصل بنجاح');

        // النتيجة النهائية
        const successMessage = `🎉 نجح الاختبار المباشر بنسبة 100%!

✅ جميع العمليات نجحت:
🔗 الربط: نجح (ID: ${linkResult.id})
🔍 التحقق من الربط: نجح
🔓 الفصل: نجح (ID: ${unlinkResult.id})
🔍 التحقق من الفصل: نجح

📊 رقم الوحدة: ${testUnit['رقم  الوحدة ']}
🏢 العقار: ${testUnit['اسم العقار']}
👤 المستأجر: ${testUnit['اسم المستأجر']}
📄 العقد: ${testUnit['رقم العقد']}

🎯 النظام يعمل بشكل مثالي!
🔗 يمكنك التحقق من البيانات في Supabase Dashboard`;

        alert(successMessage);
        showToast('🎉 نجح الاختبار المباشر!', 'success');
        console.log('🎉 نجح الاختبار المباشر لنظام الربط');

        return {
            success: true,
            linkId: linkResult.id,
            unlinkId: unlinkResult.id,
            unitNumber: testUnit['رقم  الوحدة '],
            testData: testUnit
        };

    } catch (error) {
        console.error('❌ فشل الاختبار المباشر:', error);

        const errorMessage = `❌ فشل الاختبار المباشر!

الخطأ: ${error.message}

💡 تحقق من:
• اتصال الإنترنت
• إعدادات Supabase
• تحميل جميع الملفات المطلوبة
• صلاحيات قاعدة البيانات

🔍 راجع الكونسول للمزيد من التفاصيل`;

        alert(errorMessage);
        showToast('❌ فشل الاختبار المباشر', 'error');

        return { success: false, error: error.message };
    }
}

// إضافة الدالة للنطاق العام
window.directLinkingTest = directLinkingTest;

// دالة محسنة لربط الوحدات الحقيقية في Supabase
async function linkRealUnitsInSupabase(primaryUnitNumber, secondaryUnitNumber) {
    console.log(`🔗 بدء ربط الوحدات الحقيقية: ${primaryUnitNumber} مع ${secondaryUnitNumber}`);

    try {
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        // 1. جلب بيانات الوحدة الأساسية
        console.log(`📋 جلب بيانات الوحدة الأساسية ${primaryUnitNumber}...`);
        const { data: primaryUnit, error: primaryError } = await supabaseClient
            .from('properties')
            .select('*')
            .eq('unit_number', primaryUnitNumber)
            .single();

        if (primaryError || !primaryUnit) {
            throw new Error(`لم يتم العثور على الوحدة الأساسية ${primaryUnitNumber}: ${primaryError?.message}`);
        }

        console.log('✅ تم جلب بيانات الوحدة الأساسية:', {
            unit: primaryUnit.unit_number,
            tenant: primaryUnit.tenant_name,
            contract: primaryUnit.contract_number,
            rent: primaryUnit.rent_value
        });

        // 2. جلب بيانات الوحدة الثانوية
        console.log(`📋 جلب بيانات الوحدة الثانوية ${secondaryUnitNumber}...`);
        const { data: secondaryUnit, error: secondaryError } = await supabaseClient
            .from('properties')
            .select('*')
            .eq('unit_number', secondaryUnitNumber)
            .single();

        if (secondaryError || !secondaryUnit) {
            throw new Error(`لم يتم العثور على الوحدة الثانوية ${secondaryUnitNumber}: ${secondaryError?.message}`);
        }

        console.log('✅ تم جلب بيانات الوحدة الثانوية:', {
            unit: secondaryUnit.unit_number,
            tenant: secondaryUnit.tenant_name || 'فارغ',
            contract: secondaryUnit.contract_number || 'فارغ'
        });

        // 3. نسخ البيانات من الوحدة الأساسية إلى الثانوية
        console.log(`📝 نسخ البيانات من ${primaryUnitNumber} إلى ${secondaryUnitNumber}...`);

        const updatedSecondaryData = {
            tenant_name: primaryUnit.tenant_name,
            contract_number: primaryUnit.contract_number,
            rent_value: primaryUnit.rent_value,
            contract_type: primaryUnit.contract_type,
            start_date: primaryUnit.start_date,
            end_date: primaryUnit.end_date,
            total_amount: primaryUnit.total_amount,
            owner: primaryUnit.owner,
            deed_number: primaryUnit.deed_number,
            real_estate_registry: primaryUnit.real_estate_registry,
            electricity_account: primaryUnit.electricity_account,
            remaining_installments: primaryUnit.remaining_installments,
            first_installment_date: primaryUnit.first_installment_date,
            first_installment_amount: primaryUnit.first_installment_amount,
            second_installment_date: primaryUnit.second_installment_date,
            second_installment_amount: primaryUnit.second_installment_amount,
            installment_end_date: primaryUnit.installment_end_date,
            updated_at: new Date().toISOString()
        };

        // 4. تحديث الوحدة الثانوية في Supabase
        console.log(`☁️ حفظ البيانات المنسوخة في Supabase...`);
        const { data: updatedUnit, error: updateError } = await supabaseClient
            .from('properties')
            .update(updatedSecondaryData)
            .eq('id', secondaryUnit.id)
            .select();

        if (updateError) {
            throw new Error(`فشل في تحديث الوحدة الثانوية: ${updateError.message}`);
        }

        if (!updatedUnit || updatedUnit.length === 0) {
            throw new Error('لم يتم إرجاع بيانات من عملية التحديث');
        }

        console.log('✅ تم تحديث الوحدة الثانوية في Supabase بنجاح');

        // 5. تحديث البيانات المحلية إذا كانت متوفرة
        if (window.allData && Array.isArray(window.allData)) {
            console.log('📱 تحديث البيانات المحلية...');

            const localSecondaryIndex = window.allData.findIndex(unit =>
                unit['رقم  الوحدة '] === secondaryUnitNumber
            );

            if (localSecondaryIndex !== -1) {
                // نسخ البيانات محلياً
                const localPrimary = window.allData.find(unit =>
                    unit['رقم  الوحدة '] === primaryUnitNumber
                );

                if (localPrimary) {
                    const fieldsToSync = [
                        'اسم المستأجر',
                        'رقم العقد',
                        'نوع العقد',
                        'قيمة  الايجار ',
                        'تاريخ البداية',
                        'تاريخ النهاية',
                        'الاجمالى',
                        'المالك',
                        'رقم الصك',
                        'السجل العيني ',
                        'رقم حساب الكهرباء',
                        'عدد الاقساط المتبقية',
                        'تاريخ القسط الاول',
                        'مبلغ القسط الاول',
                        'تاريخ القسط الثاني',
                        'مبلغ القسط الثاني',
                        'تاريخ انتهاء الاقساط'
                    ];

                    fieldsToSync.forEach(field => {
                        if (localPrimary[field] !== undefined && localPrimary[field] !== null) {
                            window.allData[localSecondaryIndex][field] = localPrimary[field];
                        }
                    });

                    // حفظ البيانات المحلية
                    localStorage.setItem('propertyData', JSON.stringify(window.allData));
                    console.log('✅ تم تحديث البيانات المحلية');
                }
            }
        }

        // 6. النتيجة النهائية
        const successMessage = `🎉 تم ربط الوحدات بنجاح!

🔗 الوحدة الأساسية: ${primaryUnitNumber}
🔗 الوحدة المربوطة: ${secondaryUnitNumber}

📋 البيانات المنسوخة:
👤 المستأجر: ${primaryUnit.tenant_name || 'غير محدد'}
📄 العقد: ${primaryUnit.contract_number || 'غير محدد'}
💰 الإيجار: ${primaryUnit.rent_value ? parseFloat(primaryUnit.rent_value).toLocaleString() + ' ريال' : 'غير محدد'}

✅ تم الحفظ في Supabase بنجاح
📱 تم تحديث البيانات المحلية
🔄 ستظهر الوحدتان في بطاقة واحدة

🔗 يمكنك التحقق من النتيجة في Supabase Dashboard`;

        alert(successMessage);
        showToast(`تم ربط ${primaryUnitNumber} مع ${secondaryUnitNumber} بنجاح!`, 'success');

        console.log(`🎉 تم ربط الوحدات بنجاح: ${primaryUnitNumber} مع ${secondaryUnitNumber}`);

        return {
            success: true,
            primaryUnit: primaryUnit,
            secondaryUnit: updatedUnit[0],
            message: 'تم الربط بنجاح'
        };

    } catch (error) {
        console.error('❌ فشل في ربط الوحدات:', error);

        const errorMessage = `❌ فشل في ربط الوحدات!

🔗 الوحدة الأساسية: ${primaryUnitNumber}
🔗 الوحدة المراد ربطها: ${secondaryUnitNumber}

الخطأ: ${error.message}

💡 تحقق من:
• وجود الوحدتين في قاعدة البيانات
• اتصال الإنترنت
• صلاحيات Supabase`;

        alert(errorMessage);
        showToast('❌ فشل في ربط الوحدات', 'error');

        return {
            success: false,
            error: error.message
        };
    }
}

// إضافة الدالة للنطاق العام
window.linkRealUnitsInSupabase = linkRealUnitsInSupabase;

// دالة لإظهار نافذة ربط الوحدات الحقيقية
function showRealUnitLinkingModal() {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.innerHTML = `
        <div class="modal-content" style="max-width: 600px;">
            <div class="modal-header">
                <h2><i class="fas fa-link"></i> ربط وحدات حقيقية</h2>
                <p>ربط وحدتين أو أكثر لتظهرا في بطاقة واحدة مع نفس البيانات</p>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="primaryUnitNumber">رقم الوحدة الأساسية (التي تحتوي على البيانات):</label>
                    <input type="text" id="primaryUnitNumber" placeholder="مثال: STDM080101" class="form-control">
                    <small class="form-text">الوحدة التي تحتوي على بيانات المستأجر والعقد</small>
                </div>

                <div class="form-group">
                    <label for="secondaryUnitNumber">رقم الوحدة المراد ربطها:</label>
                    <input type="text" id="secondaryUnitNumber" placeholder="مثال: STDM080124" class="form-control">
                    <small class="form-text">الوحدة التي ستحصل على نفس البيانات</small>
                </div>

                <div class="info-box" style="background: #e3f2fd; padding: 15px; border-radius: 8px; margin: 15px 0;">
                    <h4><i class="fas fa-info-circle"></i> كيف يعمل الربط:</h4>
                    <ul style="margin: 10px 0; padding-left: 20px;">
                        <li>سيتم نسخ جميع بيانات المستأجر والعقد من الوحدة الأساسية</li>
                        <li>ستحصل الوحدة المربوطة على نفس البيانات تماماً</li>
                        <li>ستظهر الوحدتان في بطاقة واحدة في النظام</li>
                        <li>سيتم حفظ التغييرات في Supabase فوراً</li>
                    </ul>
                </div>

                <div class="example-box" style="background: #f3e5f5; padding: 15px; border-radius: 8px; margin: 15px 0;">
                    <h4><i class="fas fa-lightbulb"></i> مثال:</h4>
                    <p><strong>الوحدة الأساسية:</strong> STDM080101 (مربوطة بشركة رامسونز)</p>
                    <p><strong>الوحدة المراد ربطها:</strong> STDM080124 (فارغة)</p>
                    <p><strong>النتيجة:</strong> كلا الوحدتين ستظهران مربوطتين بشركة رامسونز</p>
                </div>
            </div>
            <div class="modal-actions">
                <button class="btn-primary" onclick="executeRealUnitLinking()">
                    <i class="fas fa-link"></i> ربط الوحدات
                </button>
                <button class="btn-secondary" onclick="closeModal()">
                    <i class="fas fa-times"></i> إلغاء
                </button>
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    // إغلاق النافذة عند النقر خارجها
    modal.addEventListener('click', function(e) {
        if (e.target === this) closeModal();
    });

    // تركيز على الحقل الأول
    setTimeout(() => {
        document.getElementById('primaryUnitNumber').focus();
    }, 100);
}

// دالة تنفيذ ربط الوحدات الحقيقية
async function executeRealUnitLinking() {
    const primaryUnitNumber = document.getElementById('primaryUnitNumber').value.trim();
    const secondaryUnitNumber = document.getElementById('secondaryUnitNumber').value.trim();

    if (!primaryUnitNumber || !secondaryUnitNumber) {
        alert('يرجى إدخال أرقام الوحدتين');
        return;
    }

    if (primaryUnitNumber === secondaryUnitNumber) {
        alert('لا يمكن ربط الوحدة بنفسها');
        return;
    }

    // تأكيد العملية
    const confirmMessage = `هل أنت متأكد من ربط الوحدات؟

🔗 الوحدة الأساسية: ${primaryUnitNumber}
🔗 الوحدة المراد ربطها: ${secondaryUnitNumber}

⚠️ سيتم نسخ جميع بيانات المستأجر والعقد من الوحدة الأساسية إلى الوحدة المربوطة.
✅ سيتم حفظ التغييرات في Supabase فوراً.`;

    if (!confirm(confirmMessage)) {
        return;
    }

    // تعطيل الزر أثناء المعالجة
    const linkButton = document.querySelector('.btn-primary');
    const originalText = linkButton.innerHTML;
    linkButton.disabled = true;
    linkButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> جاري الربط...';

    try {
        // تنفيذ الربط
        const result = await linkRealUnitsInSupabase(primaryUnitNumber, secondaryUnitNumber);

        if (result.success) {
            // إغلاق النافذة عند النجاح
            closeModal();

            // إعادة تحميل البيانات إذا كانت متوفرة
            if (typeof loadDataFromSupabase === 'function') {
                console.log('🔄 إعادة تحميل البيانات من Supabase...');
                await loadDataFromSupabase();
            }

            // تحديث العرض
            if (typeof renderProperties === 'function') {
                renderProperties();
            }

        } else {
            throw new Error(result.error || 'فشل في الربط');
        }

    } catch (error) {
        console.error('❌ خطأ في ربط الوحدات:', error);
        alert(`❌ فشل في ربط الوحدات: ${error.message}`);

        // إعادة تفعيل الزر
        linkButton.disabled = false;
        linkButton.innerHTML = originalText;
    }
}

// إضافة الدوال للنطاق العام
window.showRealUnitLinkingModal = showRealUnitLinkingModal;
window.executeRealUnitLinking = executeRealUnitLinking;

// دالة سريعة لاختبار ربط الوحدتين المحددتين
async function testLinkSTDMUnits() {
    console.log('🧪 اختبار ربط الوحدتين STDM080101 و STDM080124...');

    try {
        const result = await linkRealUnitsInSupabase('STDM080101', 'STDM080124');

        if (result.success) {
            console.log('✅ نجح اختبار ربط الوحدتين STDM');
            return result;
        } else {
            throw new Error(result.error);
        }

    } catch (error) {
        console.error('❌ فشل اختبار ربط الوحدتين STDM:', error);
        return { success: false, error: error.message };
    }
}

// دالة للتحقق من حالة الربط الحالية
async function checkLinkingStatus() {
    console.log('🔍 فحص حالة ربط الوحدات...');

    try {
        if (!supabaseClient) {
            throw new Error('Supabase غير متصل');
        }

        // فحص الوحدتين المحددتين
        const { data: units, error } = await supabaseClient
            .from('properties')
            .select('unit_number, property_name, tenant_name, contract_number, rent_value')
            .in('unit_number', ['STDM080101', 'STDM080124'])
            .order('unit_number');

        if (error) {
            throw new Error(`خطأ في جلب البيانات: ${error.message}`);
        }

        if (!units || units.length !== 2) {
            throw new Error('لم يتم العثور على الوحدتين');
        }

        const unit1 = units[0];
        const unit2 = units[1];

        // التحقق من حالة الربط
        const isLinked = unit1.tenant_name === unit2.tenant_name &&
                        unit1.contract_number === unit2.contract_number &&
                        unit1.tenant_name && unit1.contract_number;

        const statusMessage = `📊 حالة ربط الوحدات:

🏠 الوحدة الأولى: ${unit1.unit_number}
👤 المستأجر: ${unit1.tenant_name || 'فارغ'}
📄 العقد: ${unit1.contract_number || 'فارغ'}
💰 الإيجار: ${unit1.rent_value ? parseFloat(unit1.rent_value).toLocaleString() + ' ريال' : 'غير محدد'}

🏠 الوحدة الثانية: ${unit2.unit_number}
👤 المستأجر: ${unit2.tenant_name || 'فارغ'}
📄 العقد: ${unit2.contract_number || 'فارغ'}
💰 الإيجار: ${unit2.rent_value ? parseFloat(unit2.rent_value).toLocaleString() + ' ريال' : 'غير محدد'}

🔗 حالة الربط: ${isLinked ? '✅ مربوطتان' : '❌ غير مربوطتين'}

${isLinked ? '🎉 الوحدتان مربوطتان بنجاح ولهما نفس البيانات!' : '💡 يمكنك ربطهما باستخدام زر "ربط وحدات حقيقية" من الإعدادات'}`;

        alert(statusMessage);
        console.log('📊 حالة الربط:', { isLinked, unit1, unit2 });

        return { success: true, isLinked, units: [unit1, unit2] };

    } catch (error) {
        console.error('❌ خطأ في فحص حالة الربط:', error);
        alert(`❌ خطأ في فحص حالة الربط: ${error.message}`);
        return { success: false, error: error.message };
    }
}

// إضافة الدوال للنطاق العام
window.testLinkSTDMUnits = testLinkSTDMUnits;
window.checkLinkingStatus = checkLinkingStatus;

// دالة اختبار سريعة للدالة المحسنة linkUnitToGroup
async function testImprovedLinkUnitToGroup() {
    console.log('🧪 اختبار الدالة المحسنة linkUnitToGroup...');

    try {
        // التحقق من المتطلبات
        if (!window.allData || !Array.isArray(window.allData)) {
            throw new Error('بيانات allData غير متوفرة');
        }

        // البحث عن وحدة فارغة للاختبار
        let testUnit = window.allData.find(unit =>
            !unit['اسم المستأجر'] || unit['اسم المستأجر'].trim() === ''
        );

        if (!testUnit) {
            // إنشاء وحدة اختبار مؤقتة
            testUnit = {
                'رقم  الوحدة ': `TEST-IMPROVED-${Date.now()}`,
                'اسم العقار': 'عقار اختبار محسن',
                'المدينة': 'الرياض',
                'اسم المستأجر': '',
                'رقم العقد': '',
                'قيمة  الايجار ': 0,
                'المساحة': 100,
                'نوع العقد': 'سكني'
            };

            window.allData.push(testUnit);
            console.log('📝 تم إنشاء وحدة اختبار مؤقتة');
        }

        // إنشاء وحدة أساسية مع بيانات
        const primaryUnit = {
            'رقم  الوحدة ': `PRIMARY-${Date.now()}`,
            'اسم العقار': testUnit['اسم العقار'],
            'المدينة': 'الرياض',
            'اسم المستأجر': 'مستأجر اختبار محسن',
            'رقم العقد': `CONTRACT-IMPROVED-${Date.now()}`,
            'قيمة  الايجار ': 3500,
            'المساحة': 150,
            'نوع العقد': 'سكني',
            'تاريخ البداية': '01/01/2024',
            'تاريخ النهاية': '31/12/2024',
            'المالك': 'مالك اختبار',
            'رقم الصك': `DEED-${Date.now()}`,
            'السجل العيني ': `REG-${Date.now()}`
        };

        window.allData.push(primaryUnit);

        // تعيين البيانات المطلوبة للاختبار
        window.currentPrimaryUnit = primaryUnit;
        window.currentEditingUnits = [primaryUnit];

        console.log(`🔗 اختبار ربط الوحدة ${testUnit['رقم  الوحدة ']} مع الوحدة الأساسية ${primaryUnit['رقم  الوحدة ']}...`);

        // أولاً، إنشاء الوحدات في Supabase
        if (supabaseClient) {
            console.log('📝 إنشاء الوحدات في Supabase للاختبار...');

            // إنشاء الوحدة الأساسية
            const primaryData = {
                unit_number: primaryUnit['رقم  الوحدة '],
                property_name: primaryUnit['اسم العقار'],
                city: primaryUnit['المدينة'],
                tenant_name: primaryUnit['اسم المستأجر'],
                contract_number: primaryUnit['رقم العقد'],
                rent_value: primaryUnit['قيمة  الايجار '],
                area: primaryUnit['المساحة'],
                contract_type: primaryUnit['نوع العقد'],
                owner: primaryUnit['المالك'],
                deed_number: primaryUnit['رقم الصك'],
                real_estate_registry: primaryUnit['السجل العيني ']
            };

            const { data: createdPrimary, error: primaryError } = await supabaseClient
                .from('properties')
                .insert([primaryData])
                .select();

            if (primaryError) {
                throw new Error(`فشل في إنشاء الوحدة الأساسية: ${primaryError.message}`);
            }

            // إنشاء الوحدة الفارغة
            const testData = {
                unit_number: testUnit['رقم  الوحدة '],
                property_name: testUnit['اسم العقار'],
                city: testUnit['المدينة'],
                tenant_name: '',
                contract_number: '',
                rent_value: 0,
                area: testUnit['المساحة'],
                contract_type: testUnit['نوع العقد']
            };

            const { data: createdTest, error: testError } = await supabaseClient
                .from('properties')
                .insert([testData])
                .select();

            if (testError) {
                throw new Error(`فشل في إنشاء الوحدة الاختبار: ${testError.message}`);
            }

            console.log('✅ تم إنشاء الوحدات في Supabase بنجاح');
        }

        // اختبار دالة linkUnitToGroup المحسنة
        await linkUnitToGroup(testUnit['رقم  الوحدة ']);

        // التحقق من النتيجة في Supabase
        if (supabaseClient) {
            console.log('🔍 التحقق من النتيجة في Supabase...');

            const { data: verifyData, error: verifyError } = await supabaseClient
                .from('properties')
                .select('*')
                .eq('unit_number', testUnit['رقم  الوحدة '])
                .single();

            if (verifyError) {
                throw new Error(`فشل في التحقق: ${verifyError.message}`);
            }

            if (verifyData.tenant_name === primaryUnit['اسم المستأجر'] &&
                verifyData.contract_number === primaryUnit['رقم العقد']) {

                const successMessage = `🎉 نجح اختبار الدالة المحسنة!

✅ تم ربط الوحدة بنجاح في Supabase
🔗 الوحدة المربوطة: ${testUnit['رقم  الوحدة ']}
👤 المستأجر: ${verifyData.tenant_name}
📄 العقد: ${verifyData.contract_number}
💰 الإيجار: ${verifyData.rent_value} ريال

🎯 الدالة المحسنة تعمل بشكل مثالي!`;

                alert(successMessage);
                showToast('🎉 نجح اختبار الدالة المحسنة!', 'success');
                console.log('✅ نجح اختبار الدالة المحسنة linkUnitToGroup');

                return { success: true, verifyData };
            } else {
                throw new Error('البيانات في Supabase لا تطابق البيانات المتوقعة');
            }
        }

    } catch (error) {
        console.error('❌ فشل اختبار الدالة المحسنة:', error);

        const errorMessage = `❌ فشل اختبار الدالة المحسنة!

الخطأ: ${error.message}

💡 تحقق من:
• اتصال Supabase
• وجود البيانات المطلوبة
• صلاحيات قاعدة البيانات`;

        alert(errorMessage);
        showToast('❌ فشل اختبار الدالة المحسنة', 'error');

        return { success: false, error: error.message };
    }
}

// إضافة الدالة للنطاق العام
window.testImprovedLinkUnitToGroup = testImprovedLinkUnitToGroup;

// إضافة الدوال المفقودة للنافذة العامة
window.fullDataRecovery = fullDataRecovery;
window.recoverDeletedData = recoverDeletedData;
window.testEnhancedUnitLinking = testEnhancedUnitLinking;
window.testPropertyNameEdit = testPropertyNameEdit;
window.testPropertyNameUpdateWithoutDuplication = testPropertyNameUpdateWithoutDuplication;
window.testFilterResetOnLogin = testFilterResetOnLogin;
window.resetFiltersToDefault = resetFiltersToDefault;
window.quickUnitLinkingTest = quickUnitLinkingTest;
window.fixUnitLinkingIssues = fixUnitLinkingIssues;

// تم حذف مستمع شاشة التحميل المتأخر لتجنب التأخير
// شاشة التحميل تظهر الآن فوراً من المستمع الرئيسي



// إضافة دالة اختبار عرض اسم العقار للنطاق العام
window.testMobilePropertyNameDisplay = function() {
    console.log('🧪 اختبار دالة عرض اسم العقار');
    console.log('currentProperty:', currentProperty);
    console.log('currentCountry:', currentCountry);
    console.log('عرض النافذة:', window.innerWidth);
    updateMobilePropertyName();
};

// إضافة دالة لإجبار إظهار اسم العقار للاختبار
window.forceShowPropertyName = function() {
    console.log('🔧 إجبار إظهار اسم العقار للاختبار');

    const propertyHeaderContainer = document.getElementById('mobilePropertyHeader');
    const propertyTextElement = document.getElementById('mobilePropertyText');

    if (propertyHeaderContainer && propertyTextElement) {
        propertyTextElement.textContent = 'الرياض - عمارة النخيل (اختبار)';
        propertyHeaderContainer.style.display = 'flex';
        propertyHeaderContainer.style.visibility = 'visible';
        propertyHeaderContainer.style.opacity = '1';
        console.log('✅ تم إجبار إظهار اسم العقار');
    } else {
        console.error('❌ لم يتم العثور على عناصر عرض اسم العقار');
    }
};

// دالة اختبار ميزة الإجمالي الدائم
window.testPermanentTotal = function() {
    console.log('🧪 اختبار ميزة الإجمالي الدائم');

    // البحث عن عقار للاختبار
    const testProperty = properties.find(p => p['اسم المستأجر'] && p['اسم المستأجر'].trim() !== '');

    if (testProperty) {
        console.log('🏠 عقار الاختبار:', testProperty['رقم  الوحدة '], testProperty['اسم المستأجر']);
        console.log('💰 الإجمالي الحالي:', testProperty['الاجمالى']);

        // تجربة تعيين إجمالي جديد
        const originalTotal = testProperty['الاجمالى'];
        testProperty['الاجمالى'] = 99999;

        console.log('✅ تم تعيين إجمالي تجريبي: 99999');
        console.log('🔄 إعادة عرض البيانات...');

        renderData();
        updateTotalStats();

        // رسالة توضيحية
        console.log('📝 الآن جرب تعديل الأقساط في هذا العقار - الإجمالي يجب أن يبقى 99999');
        console.log(`📝 الإجمالي الأصلي كان: ${originalTotal}`);
        console.log('✅ يجب أن ترى الإجمالي 99999 فوراً بدون reload!');
    } else {
        console.warn('⚠️ لم يتم العثور على عقار للاختبار');
    }
};

// دالة لاختبار التحديث الفوري
window.testInstantUpdate = function() {
    console.log('⚡ اختبار التحديث الفوري للإجمالي');

    const testProperty = properties.find(p => p['اسم المستأجر'] && p['اسم المستأجر'].trim() !== '');

    if (testProperty) {
        console.log('🏠 عقار الاختبار:', testProperty['رقم  الوحدة ']);
        console.log('💰 الإجمالي قبل التغيير:', testProperty['الاجمالى']);

        // تغيير الإجمالي
        const newTotal = Math.floor(Math.random() * 100000) + 50000;
        testProperty['الاجمالى'] = newTotal;

        console.log(`💰 الإجمالي الجديد: ${newTotal}`);

        // تحديث فوري
        renderData();
        updateTotalStats();

        console.log('✅ تم التحديث فوراً! تحقق من البطاقة في الواجهة');
    } else {
        console.warn('⚠️ لم يتم العثور على عقار للاختبار');
    }
};

// دوال السحب والإفلات للأزرار
function handleDragOver(event) {
    event.preventDefault();
    event.stopPropagation();
    const button = event.currentTarget;
    button.classList.add('drag-over');
}

function handleDragEnter(event) {
    event.preventDefault();
    event.stopPropagation();
    const button = event.currentTarget;
    button.classList.add('drag-over');
}

function handleDragLeave(event) {
    event.preventDefault();
    event.stopPropagation();
    const button = event.currentTarget;
    // التحقق من أن المؤشر خرج من الزر فعلاً وليس من عنصر فرعي
    if (!button.contains(event.relatedTarget)) {
        button.classList.remove('drag-over');
    }
}

function handleDrop(event, inputId) {
    event.preventDefault();
    event.stopPropagation();

    const button = event.currentTarget;
    button.classList.remove('drag-over');

    const files = event.dataTransfer.files;
    if (files.length > 0) {
        // العثور على حقل الإدخال المخفي
        const fileInput = document.getElementById(inputId);
        if (fileInput) {
            // تعيين الملفات للحقل المخفي
            fileInput.files = files;

            // تشغيل حدث التغيير لمعالجة الملفات
            const changeEvent = new Event('change', { bubbles: true });
            fileInput.dispatchEvent(changeEvent);

            console.log(`✅ تم إسقاط ${files.length} ملف على زر الإرفاق`);
        } else {
            console.error(`❌ لم يتم العثور على حقل الإدخال: ${inputId}`);
        }
    }
}

// دوال الناف بار السفلي للجوال
function toggleMobileCities() {
    console.log('🏙️ فتح نافذة المدن من الناف بار');

    // إزالة التفعيل من جميع العناصر
    clearAllNavActive();

    // تفعيل عنصر المدن
    const navCities = document.getElementById('navCities');
    navCities.classList.add('active');

    // فتح نافذة المدن مباشرة (نفس الوظيفة من القائمة)
    if (typeof showCountrySelection === 'function') {
        showCountrySelection();
        console.log('✅ تم فتح نافذة المدن');
    } else {
        console.error('❌ وظيفة showCountrySelection غير متوفرة');
    }
}

function toggleMobileProperties() {
    console.log('🏢 فتح قائمة العقارات من الناف بار');

    // إزالة التفعيل من جميع العناصر
    clearAllNavActive();

    // تفعيل عنصر العقارات
    const navProperties = document.getElementById('navProperties');
    navProperties.classList.add('active');

    // فتح نافذة العقارات المنفصلة
    showMobilePropertiesModal();
}

function toggleMobileAttachments() {
    console.log('📎 فتح إدارة المرفقات من الناف بار');

    // إزالة التفعيل من جميع العناصر
    clearAllNavActive();

    // تفعيل عنصر المرفقات
    const navAttachments = document.getElementById('navAttachments');
    navAttachments.classList.add('active');

    // فتح إدارة المرفقات مباشرة (نفس الوظيفة من القائمة)
    if (typeof showAttachmentsManagerFromDropdown === 'function') {
        showAttachmentsManagerFromDropdown();
        console.log('✅ تم فتح إدارة المرفقات');
    } else {
        console.error('❌ وظيفة showAttachmentsManagerFromDropdown غير متوفرة');
    }
}

function scrollToTop() {
    console.log('⬆️ التمرير لأعلى الشاشة من الناف بار');

    // إزالة التفعيل من جميع العناصر
    clearAllNavActive();

    // تفعيل الزر المركزي مؤقتاً
    const navMain = document.getElementById('navMain');
    navMain.classList.add('active');

    // البحث عن حقل البحث العام
    const globalSearch = document.getElementById('globalSearch');
    const searchSection = document.getElementById('searchSection');

    if (globalSearch) {
        // التمرير السلس إلى حقل البحث
        globalSearch.scrollIntoView({
            behavior: 'smooth',
            block: 'start',
            inline: 'nearest'
        });

        // تركيز على حقل البحث بعد التمرير
        setTimeout(() => {
            globalSearch.focus();
            console.log('✅ تم التمرير وتركيز حقل البحث');
        }, 500);

    } else if (searchSection) {
        // التمرير إلى قسم البحث إذا لم يوجد حقل البحث
        searchSection.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
        });
        console.log('✅ تم التمرير إلى قسم البحث');

    } else {
        // التمرير إلى أعلى الصفحة كحل احتياطي
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
        console.log('✅ تم التمرير إلى أعلى الصفحة');
    }

    // إزالة التفعيل بعد التمرير
    setTimeout(() => {
        navMain.classList.remove('active');
    }, 1000);
}

function toggleMobileStatistics() {
    console.log('📊 فتح الإحصائيات من الناف بار');

    // إزالة التفعيل من جميع العناصر
    clearAllNavActive();

    // تفعيل عنصر الإحصائيات
    const navStatistics = document.getElementById('navStatistics');
    navStatistics.classList.add('active');

    // فتح قائمة الإحصائيات المنفصلة
    showMobileStatistics();
}

function showMobileStatistics() {
    console.log('📊 إظهار قائمة الإحصائيات المنفصلة...');

    const statisticsMenu = document.getElementById('mobileStatisticsMenu');
    if (!statisticsMenu) {
        console.error('❌ عنصر قائمة الإحصائيات غير موجود');
        return;
    }

    // إظهار القائمة
    statisticsMenu.classList.add('active');
    document.body.style.overflow = 'hidden';

    // تحديث محتوى الإحصائيات
    updateStatisticsDisplay();

    console.log('✅ تم إظهار قائمة الإحصائيات');
}

function closeMobileStatistics() {
    console.log('📊 إغلاق قائمة الإحصائيات...');

    const statisticsMenu = document.getElementById('mobileStatisticsMenu');
    if (statisticsMenu) {
        statisticsMenu.classList.remove('active');
        document.body.style.overflow = '';
    }

    // إزالة التفعيل من الناف بار
    clearAllNavActive();

    console.log('✅ تم إغلاق قائمة الإحصائيات');
}

function updateStatisticsDisplay() {
    console.log('📊 تحديث عرض الإحصائيات...');

    // تحديث عنوان العقار المحدد
    updateStatisticsPropertyHeader();

    // تحديث الإحصائيات
    updateStatisticsTotals();

    // تحديث الفلاتر النشطة
    updateStatisticsActiveFilters();
}

function updateStatisticsPropertyHeader() {
    const propertyHeader = document.getElementById('statisticsPropertyHeader');
    const propertyText = document.getElementById('statisticsPropertyText');

    if (!propertyHeader || !propertyText) return;

    if (currentProperty && currentProperty !== 'الكل') {
        propertyHeader.style.display = 'flex';
        propertyText.textContent = currentProperty;
    } else {
        propertyHeader.style.display = 'none';
    }
}

function updateStatisticsTotals() {
    const statisticsTotals = document.getElementById('statisticsTotals');
    if (!statisticsTotals) return;

    // نسخ الإحصائيات من العنصر الأصلي
    const originalTotals = document.getElementById('mobileTotals');
    if (originalTotals && originalTotals.innerHTML.trim() !== '') {
        // نسخ المحتوى مع الحفاظ على الأنماط
        statisticsTotals.innerHTML = originalTotals.innerHTML;

        // التأكد من تطبيق الأنماط الصحيحة
        statisticsTotals.className = 'statistics-totals';

        // نسخ الأنماط من العناصر الفرعية
        const originalItems = originalTotals.querySelectorAll('.total-item');
        const statisticsItems = statisticsTotals.querySelectorAll('.total-item');

        originalItems.forEach((originalItem, index) => {
            if (statisticsItems[index]) {
                // نسخ جميع الكلاسات
                statisticsItems[index].className = originalItem.className;
            }
        });

        console.log('✅ تم نسخ الإحصائيات مع الأنماط');
    } else {
        // إنشاء الإحصائيات إذا لم تكن موجودة
        if (typeof renderMobileTotals === 'function' && properties) {
            console.log('📊 إنشاء الإحصائيات...');
            renderMobileTotals(properties);

            // نسخ المحتوى بعد الإنشاء
            setTimeout(() => {
                const updatedTotals = document.getElementById('mobileTotals');
                if (updatedTotals && updatedTotals.innerHTML.trim() !== '') {
                    statisticsTotals.innerHTML = updatedTotals.innerHTML;
                    statisticsTotals.className = 'statistics-totals';

                    // نسخ الأنماط
                    const originalItems = updatedTotals.querySelectorAll('.total-item');
                    const statisticsItems = statisticsTotals.querySelectorAll('.total-item');

                    originalItems.forEach((originalItem, index) => {
                        if (statisticsItems[index]) {
                            statisticsItems[index].className = originalItem.className;
                        }
                    });

                    console.log('✅ تم إنشاء ونسخ الإحصائيات');
                } else {
                    // إنشاء إحصائيات أساسية إذا فشل كل شيء
                    createBasicStatistics(statisticsTotals);
                }
            }, 200);
        } else {
            // إنشاء إحصائيات أساسية
            createBasicStatistics(statisticsTotals);
        }
    }
}

function createBasicStatistics(container) {
    console.log('📊 إنشاء إحصائيات أساسية...');

    if (!properties || !Array.isArray(properties)) {
        container.innerHTML = `
            <div class="total-item units-stat">
                <div class="total-label">إجمالي الوحدات</div>
                <div class="total-value">0</div>
            </div>
            <div class="total-item empty-stat">
                <div class="total-label">وحدات فارغة</div>
                <div class="total-value">0</div>
            </div>
        `;
        return;
    }

    // حساب الإحصائيات الأساسية
    let filteredData = properties;

    // تطبيق الفلاتر
    if (currentCountry && currentCountry !== 'الكل') {
        filteredData = filteredData.filter(item => item.المدينة === currentCountry);
    }

    if (currentProperty && currentProperty !== 'الكل') {
        filteredData = filteredData.filter(item => item['اسم العقار'] === currentProperty);
    }

    const totalUnits = filteredData.length;
    const occupiedUnits = filteredData.filter(item =>
        item['اسم المستأجر'] && item['اسم المستأجر'].trim() !== ''
    ).length;
    const emptyUnits = totalUnits - occupiedUnits;

    const totalRent = filteredData.reduce((sum, item) => {
        const rent = parseFloat(item['قيمة الإيجار']) || 0;
        return sum + rent;
    }, 0);

    container.innerHTML = `
        <div class="total-item units-stat">
            <div class="total-label">إجمالي الوحدات</div>
            <div class="total-value">${totalUnits}</div>
        </div>
        <div class="total-item active-stat">
            <div class="total-label">وحدات مؤجرة</div>
            <div class="total-value">${occupiedUnits}</div>
        </div>
        <div class="total-item empty-stat">
            <div class="total-label">وحدات فارغة</div>
            <div class="total-value">${emptyUnits}</div>
        </div>
        <div class="total-item taxable-base-stat">
            <div class="total-label">إجمالي الإيجارات</div>
            <div class="total-value">${totalRent.toLocaleString()} ريال</div>
        </div>
    `;

    console.log('✅ تم إنشاء الإحصائيات الأساسية');
}

// تم نقل هذه الدالة إلى مكان آخر - استخدم updateStatisticsActiveFilters الجديدة

function clearAllNavActive() {
    // إزالة التفعيل من جميع عناصر الناف بار
    const navItems = document.querySelectorAll('.mobile-bottom-nav .nav-item');
    navItems.forEach(item => {
        item.classList.remove('active');
    });
}

// دالة إنشاء نافذة العقارات المنفصلة للناف بار
function showMobilePropertiesModal() {
    console.log('🏢 إنشاء نافذة العقارات المنفصلة...');

    // إغلاق أي نافذة مفتوحة
    closeModal();

    // الحصول على العقارات حسب المدينة المحددة
    let filteredProperties = properties;
    if (currentCountry && currentCountry !== 'الكل') {
        filteredProperties = properties.filter(property => property.المدينة === currentCountry);
    }

    // الحصول على أسماء العقارات الفريدة
    const propertyNames = [...new Set(filteredProperties.map(p => p['اسم العقار']).filter(name => name && name.trim() !== ''))];

    // إضافة العقارات من التعريفات إذا كانت متوفرة
    if (typeof propertyDefinitions !== 'undefined' && propertyDefinitions) {
        Object.keys(propertyDefinitions).forEach(cityName => {
            if (!currentCountry || currentCountry === 'الكل' || cityName === currentCountry) {
                if (propertyDefinitions[cityName] && Array.isArray(propertyDefinitions[cityName])) {
                    propertyDefinitions[cityName].forEach(propName => {
                        if (propName && propName.trim() !== '' && !propertyNames.includes(propName)) {
                            propertyNames.push(propName);
                        }
                    });
                }
            }
        });
    }

    // ترتيب العقارات
    propertyNames.sort();

    // تطبيق فلتر نوع العقار إذا كان نشطاً (مع مراعاة المدينة)
    let displayedPropertyNames = propertyNames;
    if (currentPropertyTypeFilter) {
        displayedPropertyNames = filterPropertiesByTypeLogic(propertyNames, currentPropertyTypeFilter, currentCountry);
    }

    // إنشاء HTML للنافذة
    const cityText = currentCountry && currentCountry !== 'الكل' ? currentCountry : 'جميع المدن';
    const filterText = currentPropertyTypeFilter === 'buildings' ? ' - المباني' :
                      currentPropertyTypeFilter === 'lands' ? ' - الأراضي' : '';

    // تحديد أبعاد النافذة حسب حجم الشاشة
    const screenHeight = window.innerHeight;
    const screenWidth = window.innerWidth;
    const isVerySmallScreen = screenHeight <= 700 && screenWidth <= 500;
    const isExtraSmallScreen = screenHeight <= 600 && screenWidth <= 500;

    let modalOverlayStyle = "display: flex; z-index: 10000;";
    let modalBoxStyle = "max-width: 500px; position: relative;";
    let propertiesListStyle = "max-height: 400px; overflow-y: auto; border: 1px solid #e9ecef; border-radius: 8px; padding: 10px;";

    if (isExtraSmallScreen) {
        modalOverlayStyle += " padding: 5px; align-items: flex-start; padding-top: 10px;";
        modalBoxStyle += " max-height: calc(100vh - 20px); min-height: calc(100vh - 20px); margin: 0; display: flex; flex-direction: column; border-radius: 8px;";
        propertiesListStyle = "flex: 1; overflow-y: auto; border: 1px solid #e9ecef; border-radius: 8px; padding: 10px; min-height: 250px;";
    } else if (isVerySmallScreen) {
        modalOverlayStyle += " padding: 10px; align-items: flex-start; padding-top: 20px;";
        modalBoxStyle += " max-height: calc(100vh - 40px); min-height: calc(100vh - 40px); margin: 0; display: flex; flex-direction: column;";
        propertiesListStyle = "flex: 1; overflow-y: auto; border: 1px solid #e9ecef; border-radius: 8px; padding: 10px; min-height: 300px;";
    } else {
        modalBoxStyle += " max-height: 80vh;";
    }

    let html = `
        <div class="modal-overlay" style="${modalOverlayStyle}">
            <div class="modal-box properties-modal" style="${modalBoxStyle}">

                <!-- زر الإغلاق في الأعلى للجوال -->
                <button onclick="closePropertiesModalDirect();" class="mobile-close-btn"
                        style="position: absolute; top: 15px; left: 15px; background: rgba(108, 117, 125, 0.1);
                               border: none; width: 40px; height: 40px; border-radius: 50%; cursor: pointer;
                               transition: all 0.3s ease; display: flex; align-items: center; justify-content: center;
                               z-index: 1000; color: #6c757d; font-size: 1.3rem; touch-action: manipulation;
                               box-shadow: 0 2px 8px rgba(0,0,0,0.1);"
                        onmouseover="this.style.background='rgba(108, 117, 125, 0.2)'; this.style.transform='scale(1.1)';"
                        onmouseout="this.style.background='rgba(108, 117, 125, 0.1)'; this.style.transform='scale(1)';"
                        ontouchstart="this.style.background='rgba(108, 117, 125, 0.3)';"
                        ontouchend="this.style.background='rgba(108, 117, 125, 0.1)';">
                    <i class="fas fa-times"></i>
                </button>

                <h3 style="display: flex; align-items: center; gap: 10px; margin-bottom: 20px; padding-left: 50px;">
                    <i class="fas fa-building" style="color: #007bff;"></i>
                    العقارات - ${cityText}${filterText}
                    <span class="badge" style="background: #007bff; color: white; padding: 4px 8px; border-radius: 12px; font-size: 0.8rem;">${displayedPropertyNames.length}</span>
                </h3>

                <!-- قسم الفلاتر النشطة -->
                <div id="propertiesActiveFilters" class="properties-active-filters" style="display: none; background: #f8f9fa; margin: 0 0 15px 0; border-radius: 10px; padding: 15px; border: 1px solid #e9ecef;">
                    <div class="properties-filters-title" style="font-weight: 600; color: #495057; margin-bottom: 10px; display: flex; align-items: center; gap: 8px;">
                        <i class="fas fa-filter" style="color: #ffc107;"></i>
                        الفلاتر النشطة:
                    </div>
                    <div class="properties-filters-list" id="propertiesFiltersList" style="margin-bottom: 15px;"></div>
                    <button class="clear-all-filters-btn" onclick="clearAllFiltersWithLoading(this); setTimeout(() => refreshPropertiesModal(), 1000);" style="background: linear-gradient(135deg, #dc3545, #c82333); color: white; border: none; padding: 10px 15px; border-radius: 8px; font-size: 0.9rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease; display: flex; align-items: center; justify-content: center; gap: 8px; width: 100%; position: relative; overflow: hidden;">
                        <i class="fas fa-times-circle"></i>
                        <span>مسح جميع الفلاتر</span>
                    </button>
                </div>

                <!-- فلاتر نوع العقار -->
                <div class="mobile-property-type-filters" style="display: flex; gap: 8px; margin-bottom: 15px;">
                    <button class="mobile-property-filter-btn buildings-filter" onclick="filterMobilePropertiesByType('buildings')"
                            style="flex: 1; padding: 10px 12px; border: 2px solid #007bff;
                                   background: ${currentPropertyTypeFilter === 'buildings' ? '#007bff' : 'white'};
                                   color: ${currentPropertyTypeFilter === 'buildings' ? 'white' : '#007bff'};
                                   border-radius: 8px; font-size: 0.9rem; font-weight: 600; cursor: pointer;
                                   transition: all 0.3s ease; display: flex; align-items: center; justify-content: center; gap: 6px;">
                        <i class="fas fa-building"></i> المباني
                    </button>
                    <button class="mobile-property-filter-btn lands-filter" onclick="filterMobilePropertiesByType('lands')"
                            style="flex: 1; padding: 10px 12px; border: 2px solid #28a745;
                                   background: ${currentPropertyTypeFilter === 'lands' ? '#28a745' : 'white'};
                                   color: ${currentPropertyTypeFilter === 'lands' ? 'white' : '#28a745'};
                                   border-radius: 8px; font-size: 0.9rem; font-weight: 600; cursor: pointer;
                                   transition: all 0.3s ease; display: flex; align-items: center; justify-content: center; gap: 6px;">
                        <i class="fas fa-mountain"></i> الأراضي
                    </button>
                </div>

                <div class="property-search-container" style="margin-bottom: 15px;">
                    <input type="text" id="mobilePropertiesSearch" placeholder="بحث في العقارات..."
                           style="width: 100%; padding: 12px; border: 2px solid #ddd; border-radius: 8px; font-size: 16px;">
                </div>

                <div id="mobilePropertiesList" style="${propertiesListStyle}">
    `;

    if (displayedPropertyNames.length === 0) {
        const filterText = currentPropertyTypeFilter === 'buildings' ? 'مباني' :
                          currentPropertyTypeFilter === 'lands' ? 'أراضي' : 'عقارات';
        html += `
            <div style="text-align: center; padding: 40px; color: #6c757d;">
                <i class="fas fa-building" style="font-size: 3rem; margin-bottom: 15px; opacity: 0.3;"></i>
                <p>لا توجد ${filterText} متاحة</p>
            </div>
        `;
    } else {
        displayedPropertyNames.forEach(propertyName => {
            const isActive = currentProperty === propertyName;
            const activeClass = isActive ? 'active' : '';
            const activeStyle = isActive ? 'background: #007bff; color: white;' : '';

            html += `
                <div class="mobile-property-item ${activeClass}" data-property="${propertyName}"
                     onclick="selectPropertyFromModal('${propertyName}')"
                     style="padding: 12px; margin: 8px 0; border-radius: 8px; cursor: pointer;
                            transition: all 0.3s ease; border: 1px solid #e9ecef; ${activeStyle}
                            display: flex; align-items: center; justify-content: space-between;">
                    <span style="font-weight: 500;">${propertyName}</span>
                    ${isActive ? '<i class="fas fa-check" style="color: white;"></i>' : '<i class="fas fa-building" style="color: #007bff;"></i>'}
                </div>
            `;
        });
    }

    html += `
                </div>
            </div>
        </div>
    `;

    document.body.insertAdjacentHTML('beforeend', html);

    // إضافة وظيفة البحث
    const searchInput = document.getElementById('mobilePropertiesSearch');
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase().trim();
            const propertyItems = document.querySelectorAll('.mobile-property-item');

            propertyItems.forEach(item => {
                const propertyName = item.dataset.property.toLowerCase();
                if (propertyName.includes(searchTerm)) {
                    item.style.display = 'flex';
                } else {
                    item.style.display = 'none';
                }
            });
        });
    }

    // إغلاق عند النقر خارج النافذة
    setTimeout(() => {
        const modalOverlay = document.querySelector('.modal-overlay:last-child');
        if (modalOverlay) {
            modalOverlay.addEventListener('click', function(e) {
                if (e.target === this) {
                    console.log('🔴 تم النقر خارج النافذة - إغلاق');
                    closePropertiesModalDirect();
                }
            });
            console.log('✅ تم ربط الإغلاق عند النقر خارج النافذة');
        }
    }, 50);

    // تحديث الفلاتر النشطة في نافذة العقارات
    updatePropertiesActiveFilters();

    // التحقق من وجود زر الإغلاق
    setTimeout(() => {
        const closeButton = document.querySelector('#propertiesCloseBtn');
        if (closeButton) {
            console.log('✅ تم العثور على زر الإغلاق مع onclick');
        } else {
            console.warn('⚠️ زر الإغلاق غير موجود');
        }
    }, 100);

    console.log('✅ تم إنشاء نافذة العقارات المنفصلة');
}

// دالة لحذف جميع الأرقام والفراغات القديمة من القائمة المحمولة
function cleanOldNumberingFromMenu() {
    console.log('🧹 تنظيف الترقيم والفراغات القديمة من القائمة المحمولة...');

    const menuList = document.querySelector('.mobile-dropdown-list');
    if (!menuList) {
        console.warn('⚠️ لم يتم العثور على قائمة الأزرار المحمولة');
        return;
    }

    const allButtons = menuList.querySelectorAll('li > button');
    let cleanedCount = 0;

    allButtons.forEach(button => {
        // إزالة عناصر الأرقام المضافة بـ JavaScript
        const existingNumbers = button.querySelectorAll('.menu-number');
        existingNumbers.forEach(num => {
            num.remove();
            cleanedCount++;
        });

        // إزالة أي أرقام في بداية النص
        const textNodes = Array.from(button.childNodes).filter(node => node.nodeType === Node.TEXT_NODE);
        textNodes.forEach(textNode => {
            // إزالة الأرقام والنقاط من بداية النص
            const cleanedText = textNode.textContent.replace(/^\s*\d+\.\s*/, '').trim();
            if (cleanedText !== textNode.textContent.trim()) {
                textNode.textContent = cleanedText;
                cleanedCount++;
            }
        });

        // تنظيف الفراغات الزائدة
        button.innerHTML = button.innerHTML.replace(/^\s+|\s+$/g, '').replace(/\s+/g, ' ');
    });

    console.log(`✅ تم تنظيف ${cleanedCount} عنصر من الترقيم والفراغات القديمة`);
}

// دالة لإضافة أرقام تسلسلية للأزرار الظاهرة فقط في القائمة المحمولة
function addNumbersToVisibleMenuItems() {
    console.log('🔢 بدء ترقيم الأزرار الظاهرة في القائمة المحمولة...');

    // أولاً تنظيف أي ترقيم قديم
    cleanOldNumberingFromMenu();

    const menuList = document.querySelector('.mobile-dropdown-list');
    if (!menuList) {
        console.warn('⚠️ لم يتم العثور على قائمة الأزرار المحمولة');
        return;
    }

    // الحصول على العناصر الظاهرة فقط
    const visibleItems = [];
    const allItems = menuList.querySelectorAll('li');

    allItems.forEach(item => {
        const button = item.querySelector('button');
        if (!button) return;

        // التحقق من أن العنصر ظاهر
        const isHidden = item.style.display === 'none' ||
                        getComputedStyle(item).display === 'none' ||
                        button.style.display === 'none' ||
                        getComputedStyle(button).display === 'none';

        if (!isHidden) {
            visibleItems.push({ item, button });
        }
    });

    // إضافة الأرقام للعناصر الظاهرة
    visibleItems.forEach((itemData, index) => {
        const { button } = itemData;
        const number = index + 1;

        // إنشاء عنصر الرقم
        const numberElement = document.createElement('span');
        numberElement.className = 'menu-number';
        numberElement.textContent = number + '. ';
        numberElement.style.cssText = `
            color: #007bff;
            font-weight: bold;
            font-size: 1.1em;
            margin-left: 8px;
            background: rgba(0, 123, 255, 0.1);
            padding: 2px 6px;
            border-radius: 50%;
            min-width: 24px;
            text-align: center;
            display: inline-block;
        `;

        // إضافة الرقم في بداية النص
        button.insertBefore(numberElement, button.firstChild);
    });

    console.log(`✅ تم ترقيم ${visibleItems.length} زر ظاهر في القائمة المحمولة`);
}

// دالة لحذف الأزرار الفارغة من القائمة المحمولة
function removeEmptyMenuButtons() {
    console.log('🗑️ حذف الأزرار الفارغة من القائمة المحمولة...');

    const menuList = document.querySelector('.mobile-dropdown-list');
    if (!menuList) {
        console.warn('⚠️ لم يتم العثور على قائمة الأزرار المحمولة');
        return;
    }

    const allItems = Array.from(menuList.querySelectorAll('li'));
    let removedCount = 0;

    allItems.forEach((item, index) => {
        const button = item.querySelector('button');

        // فحص إذا كان العنصر مخفي
        const isHidden = item.style.display === 'none' ||
                        getComputedStyle(item).display === 'none';

        if (isHidden) {
            console.log(`🗑️ حذف عنصر مخفي: ${index + 1}`);
            item.remove();
            removedCount++;
            return;
        }

        if (!button) {
            // إذا لم يكن هناك زر، احذف العنصر
            console.log(`🗑️ حذف عنصر بدون زر: ${index + 1}`);
            item.remove();
            removedCount++;
            return;
        }

        // فحص محتوى الزر
        const buttonText = button.textContent.trim();
        const buttonIcons = button.querySelectorAll('i, svg, img');

        // إزالة النصوص الفارغة أو التي تحتوي على أرقام فقط
        const cleanText = buttonText.replace(/^\d+\.\s*/, '').replace(/^\s*$/, '').trim();

        // فحص إذا كان الزر فارغ أو يحتوي على محتوى غير مفيد
        if (cleanText.length === 0 && buttonIcons.length === 0) {
            console.log(`🗑️ حذف زر فارغ: "${buttonText}" في الموضع ${index + 1}`);
            item.remove();
            removedCount++;
        } else if (buttonText.match(/^\s*\d+\s*\.?\s*$/) && buttonIcons.length === 0) {
            console.log(`🗑️ حذف زر يحتوي على أرقام فقط: "${buttonText}" في الموضع ${index + 1}`);
            item.remove();
            removedCount++;
        } else if (buttonText.trim() === '' && buttonIcons.length === 0) {
            console.log(`🗑️ حذف زر فارغ تماماً في الموضع ${index + 1}`);
            item.remove();
            removedCount++;
        }
    });

    console.log(`✅ تم حذف ${removedCount} زر فارغ من القائمة المحمولة`);
}

// دالة لإزالة الترقيم من القائمة المحمولة
function removeNumberingFromMenu() {
    console.log('🔢 إزالة الترقيم من القائمة المحمولة...');

    const menuList = document.querySelector('.mobile-dropdown-list');
    if (!menuList) {
        console.warn('⚠️ لم يتم العثور على قائمة الأزرار المحمولة');
        return;
    }

    // إذا كانت القائمة من نوع ol، حولها إلى ul لإزالة الترقيم
    if (menuList.tagName.toLowerCase() === 'ol') {
        const newUl = document.createElement('ul');
        newUl.className = menuList.className;
        newUl.id = menuList.id;

        // نقل جميع العناصر من ol إلى ul
        while (menuList.firstChild) {
            newUl.appendChild(menuList.firstChild);
        }

        // استبدال ol بـ ul
        menuList.parentNode.replaceChild(newUl, menuList);
        console.log('✅ تم تحويل القائمة من ol إلى ul لإزالة الترقيم');
    }

    // إزالة أي CSS يضيف ترقيم
    const style = document.createElement('style');
    style.textContent = `
        .mobile-dropdown-list {
            list-style: none !important;
            counter-reset: none !important;
        }
        .mobile-dropdown-list li {
            counter-increment: none !important;
        }
        .mobile-dropdown-list li::before {
            display: none !important;
            content: none !important;
        }
        .mobile-dropdown-list li::marker {
            display: none !important;
        }
    `;
    document.head.appendChild(style);

    console.log('✅ تم إزالة الترقيم من القائمة المحمولة');
}

// دالة منفصلة لتنظيف القائمة فقط بدون إضافة ترقيم جديد
function cleanMenuOnly() {
    console.log('🧹 تنظيف القائمة المحمولة من الترقيم والفراغات القديمة...');

    // أولاً إزالة الترقيم من القائمة
    removeNumberingFromMenu();

    // ثانياً حذف الأزرار الفارغة
    removeEmptyMenuButtons();

    // ثالثاً تنظيف الترقيم القديم من النصوص
    cleanOldNumberingFromMenu();

    console.log('✅ تم تنظيف القائمة بنجاح');
}

// دالة خاصة لإغلاق نافذة العقارات
function closePropertiesModal() {
    console.log('🔴 إغلاق نافذة العقارات...');

    // البحث عن نافذة العقارات
    const propertiesModal = document.querySelector('.modal-overlay .properties-modal');
    const modalOverlay = document.querySelector('.modal-overlay');

    if (propertiesModal && modalOverlay) {
        // إزالة النافذة
        modalOverlay.remove();
        console.log('✅ تم إغلاق نافذة العقارات');

        // إزالة التفعيل من الناف بار
        clearAllNavActive();
        console.log('✅ تم إزالة التفعيل من الناف بار');

        // إعادة تفعيل التمرير
        document.body.style.overflow = '';
        document.body.style.position = '';
        document.body.style.width = '';
        document.body.style.height = '';
        document.documentElement.style.overflow = '';

        return true;
    } else {
        console.warn('⚠️ نافذة العقارات غير موجودة');
        return false;
    }
}

// دالة مباشرة للإغلاق (تستدعى من onclick)
function closePropertiesModalDirect() {
    console.log('🔴 تم النقر على زر الإغلاق - إغلاق مباشر');

    try {
        // البحث عن النافذة وإزالتها مباشرة
        const modalOverlay = document.querySelector('.modal-overlay');
        if (modalOverlay) {
            modalOverlay.remove();
            console.log('✅ تم حذف النافذة');
        }

        // إزالة التفعيل من الناف بار
        if (typeof clearAllNavActive === 'function') {
            clearAllNavActive();
            console.log('✅ تم إزالة التفعيل من الناف بار');
        }

        // إعادة تفعيل التمرير
        document.body.style.overflow = '';
        document.body.style.position = '';
        document.body.style.width = '';
        document.body.style.height = '';
        document.documentElement.style.overflow = '';

        console.log('✅ تم إغلاق النافذة بنجاح');

    } catch (error) {
        console.error('❌ خطأ في إغلاق النافذة:', error);

        // محاولة بديلة
        const allModals = document.querySelectorAll('.modal-overlay');
        allModals.forEach(modal => modal.remove());
        clearAllNavActive();
    }
}

// دالة اختيار العقار من النافذة المنفصلة
function selectPropertyFromModal(propertyName) {
    console.log('🏢 اختيار العقار:', propertyName);

    // استخدام الدالة الأصلية لاختيار العقار
    if (typeof selectProperty === 'function') {
        selectProperty(propertyName);
    } else {
        // طريقة بديلة
        currentProperty = propertyName === 'الكل' ? null : propertyName;

        // تحديث العرض
        if (typeof renderData === 'function') {
            renderData();
        }

        // تحديث حالة الأزرار
        if (typeof updatePropertyButtonsState === 'function') {
            updatePropertyButtonsState();
        }
    }

    // إغلاق النافذة
    closeModal();
    clearAllNavActive();

    console.log('✅ تم اختيار العقار وإغلاق النافذة');
}

// دالة تحديث الفلاتر النشطة في نافذة العقارات
function updatePropertiesActiveFilters() {
    const activeFiltersContainer = document.getElementById('propertiesActiveFilters');
    const filtersList = document.getElementById('propertiesFiltersList');

    if (!activeFiltersContainer || !filtersList) return;

    // جمع الفلاتر النشطة
    const activeFilters = [];

    if (currentCountry && currentCountry !== 'الكل') {
        activeFilters.push(`المدينة: ${currentCountry}`);
    }

    if (currentProperty && currentProperty !== 'الكل') {
        activeFilters.push(`العقار: ${currentProperty}`);
    }

    if (currentStatus && currentStatus !== 'الكل') {
        activeFilters.push(`الحالة: ${currentStatus}`);
    }

    if (currentOwnerFilter && currentOwnerFilter !== 'الكل') {
        activeFilters.push(`المالك: ${currentOwnerFilter}`);
    }

    // إضافة فلاتر أخرى إذا كانت موجودة
    if (typeof window.currentDateFilter !== 'undefined' && window.currentDateFilter && window.currentDateFilter !== 'الكل') {
        activeFilters.push(`التاريخ: ${window.currentDateFilter}`);
    }

    if (typeof window.currentRentFilter !== 'undefined' && window.currentRentFilter && window.currentRentFilter !== 'الكل') {
        activeFilters.push(`الإيجار: ${window.currentRentFilter}`);
    }

    if (activeFilters.length > 0) {
        activeFiltersContainer.style.display = 'block';
        filtersList.innerHTML = activeFilters.map(filter =>
            `<span class="filter-tag" style="display: inline-block; background: #007bff; color: white; padding: 4px 8px; border-radius: 12px; font-size: 0.8rem; margin: 2px;">${filter}</span>`
        ).join('');

        // التأكد من إظهار زر مسح الفلاتر
        let clearButton = activeFiltersContainer.querySelector('.clear-all-filters-btn');
        if (clearButton) {
            clearButton.style.display = 'flex';
        }

        console.log(`🏢 عرض ${activeFilters.length} فلتر نشط في نافذة العقارات`);
    } else {
        activeFiltersContainer.style.display = 'none';
        console.log('🏢 لا توجد فلاتر نشطة في نافذة العقارات');
    }
}

// دالة تحديث نافذة العقارات بعد مسح الفلاتر
function refreshPropertiesModal() {
    console.log('🔄 تحديث نافذة العقارات...');

    // التحقق من وجود النافذة
    const propertiesModal = document.querySelector('.properties-modal');
    if (!propertiesModal) {
        console.log('ℹ️ نافذة العقارات غير مفتوحة');
        return;
    }

    // إغلاق النافذة الحالية وفتح نافذة جديدة
    closeModal();

    // فتح نافذة جديدة بعد تأخير قصير
    setTimeout(() => {
        showMobilePropertiesModal();
        console.log('✅ تم تحديث نافذة العقارات');
    }, 100);
}

// دالة فتح القائمة الرئيسية (بدون الإحصائيات)
function toggleMobileMainMenu() {
    console.log('☰ فتح القائمة الرئيسية من الناف بار');

    // إزالة التفعيل من جميع العناصر
    clearAllNavActive();

    // فتح القائمة الرئيسية
    const mobileMenuBtn = document.getElementById('mobileMenuBtn');
    if (mobileMenuBtn) {
        mobileMenuBtn.click();

        // إخفاء الإحصائيات من القائمة الرئيسية
        setTimeout(() => {
            hideMobileTotalsInMenu();
        }, 100);
    }
}

function hideMobileTotalsInMenu() {
    // إخفاء الإحصائيات من القائمة الجانبية عند فتحها من الناف بار
    const mobileTotals = document.querySelector('#mobileMenu #mobileTotals');
    const mobilePropertyHeader = document.querySelector('#mobileMenu #mobilePropertyHeader');

    if (mobileTotals) {
        mobileTotals.style.display = 'none';
    }

    if (mobilePropertyHeader) {
        mobilePropertyHeader.style.display = 'none';
    }

    console.log('✅ تم إخفاء الإحصائيات من القائمة الرئيسية');
}

function showMobileTotalsInMenu() {
    // إظهار الإحصائيات في القائمة الجانبية عند فتحها بالطريقة العادية
    const mobileTotals = document.querySelector('#mobileMenu #mobileTotals');
    const mobilePropertyHeader = document.querySelector('#mobileMenu #mobilePropertyHeader');

    if (mobileTotals) {
        mobileTotals.style.display = 'block';
    }

    if (mobilePropertyHeader && currentProperty && currentProperty !== 'الكل') {
        mobilePropertyHeader.style.display = 'flex';
    }

    console.log('✅ تم إظهار الإحصائيات في القائمة الرئيسية');
}

// دالة اختبار مسح الفلاتر للمستخدم السنيدي
function testClearAllFilters(button) {
    console.log('🧪 اختبار زر مسح الفلاتر للمستخدم السنيدي...');
    console.log('👤 المستخدم الحالي:', currentUser);

    if (currentUser === '1234') {
        console.log('✅ المستخدم السنيدي - تنفيذ مسح الفلاتر');

        // تغيير نص الزر مؤقتاً
        const originalText = button.innerHTML;
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> جاري المسح...';
        button.disabled = true;

        // تنفيذ مسح الفلاتر
        setTimeout(() => {
            try {
                clearAllFilters();
                console.log('✅ تم تنفيذ مسح الفلاتر بنجاح');

                // إعادة النص الأصلي
                setTimeout(() => {
                    button.innerHTML = originalText;
                    button.disabled = false;
                }, 1000);

            } catch (error) {
                console.error('❌ خطأ في مسح الفلاتر:', error);
                button.innerHTML = originalText;
                button.disabled = false;
                alert('حدث خطأ في مسح الفلاتر: ' + error.message);
            }
        }, 500);

    } else {
        console.log('❌ مستخدم غير مخول');
        alert('هذه الوظيفة مخصصة للمستخدم السنيدي فقط');
    }
}

// دالة مسح الفلاتر مع تأثير loading محسن
function clearAllFiltersWithLoading(button) {
    console.log('🗑️ مسح جميع الفلاتر مع loading محسن...');

    // إضافة تأثير loading لجميع أزرار مسح الفلاتر
    showClearFiltersLoading(true);

    // إضافة تأثير loading إضافي للزر المحدد
    if (button) {
        button.classList.add('loading');
        button.style.transform = 'scale(0.95)';
        button.style.transition = 'all 0.3s ease';
    }

    // تنفيذ مسح الفلاتر مع تأخير للتأثير البصري
    setTimeout(() => {
        // استدعاء دالة مسح الفلاتر الأصلية (التي تحتوي على loading بالفعل)
        clearAllFilters();

        // تحديث عرض الإحصائيات
        updateStatisticsDisplay();

        // إزالة تأثير loading الإضافي
        setTimeout(() => {
            if (button) {
                button.classList.remove('loading');
                button.style.transform = 'scale(1)';
                button.style.transition = 'all 0.3s ease';
            }

            // إظهار رسالة نجاح
            showMiniIconNotification('🗑️', '#28a745', 2000);

            console.log('✅ تم مسح جميع الفلاتر بنجاح');
        }, 800);

    }, 300);
}

// دالة محسنة لتحديث الفلاتر النشطة في قائمة الإحصائيات
function updateStatisticsActiveFilters() {
    const activeFiltersContainer = document.getElementById('statisticsActiveFilters');
    const filtersList = document.getElementById('statisticsFiltersList');

    if (!activeFiltersContainer || !filtersList) return;

    // جمع الفلاتر النشطة
    const activeFilters = [];

    if (currentCountry && currentCountry !== 'الكل') {
        activeFilters.push(`المدينة: ${currentCountry}`);
    }

    if (currentProperty && currentProperty !== 'الكل') {
        activeFilters.push(`العقار: ${currentProperty}`);
    }

    if (currentStatus && currentStatus !== 'الكل') {
        activeFilters.push(`الحالة: ${currentStatus}`);
    }

    if (currentOwnerFilter && currentOwnerFilter !== 'الكل') {
        activeFilters.push(`المالك: ${currentOwnerFilter}`);
    }

    // إضافة فلاتر أخرى إذا كانت موجودة
    if (typeof window.currentDateFilter !== 'undefined' && window.currentDateFilter && window.currentDateFilter !== 'الكل') {
        activeFilters.push(`التاريخ: ${window.currentDateFilter}`);
    }

    if (typeof window.currentRentFilter !== 'undefined' && window.currentRentFilter && window.currentRentFilter !== 'الكل') {
        activeFilters.push(`الإيجار: ${window.currentRentFilter}`);
    }

    if (activeFilters.length > 0) {
        activeFiltersContainer.style.display = 'block';
        filtersList.innerHTML = activeFilters.map(filter =>
            `<span class="filter-tag">${filter}</span>`
        ).join('');

        // التأكد من إظهار زر مسح الفلاتر (مشترك لجميع المستخدمين)
        let clearButton = activeFiltersContainer.querySelector('.clear-all-filters-btn');
        if (!clearButton) {
            // إنشاء زر مسح الفلاتر إذا لم يكن موجوداً
            clearButton = document.createElement('button');
            clearButton.className = 'clear-all-filters-btn';
            clearButton.onclick = function() { clearAllFiltersWithLoading(this); };
            clearButton.innerHTML = `
                <i class="fas fa-times-circle"></i>
                <span>مسح جميع الفلاتر</span>
            `;
            activeFiltersContainer.appendChild(clearButton);
            console.log('✅ تم إنشاء زر مسح الفلاتر في قائمة الإحصائيات');
        }
        clearButton.style.display = 'flex';

        console.log(`📊 عرض ${activeFilters.length} فلتر نشط في قائمة الإحصائيات`);
    } else {
        activeFiltersContainer.style.display = 'none';
        console.log('📊 لا توجد فلاتر نشطة في قائمة الإحصائيات');
    }
}

// إضافة مستمع لإزالة التفعيل عند إغلاق النوافذ
document.addEventListener('click', function(event) {
    // التحقق من إغلاق النوافذ
    if (event.target.classList.contains('modal-overlay') ||
        event.target.classList.contains('close') ||
        event.target.closest('.close') ||
        event.target.classList.contains('mobile-statistics-overlay')) {
        // إزالة التفعيل من الناف بار بعد تأخير قصير
        setTimeout(clearAllNavActive, 300);
    }
});

// دالة لاختبار التحسينات الجديدة
window.testNewDesign = function() {
    console.log('🎨 اختبار التحسينات الجديدة');
    console.log('👤 تمييز اسم المستأجر: تحقق من البطاقات - يجب أن ترى اسم المستأجر بخلفية ملونة جذابة');
    console.log('🗑️ حذف وصف الإجمالي: لن ترى "هذا الإجمالي يخص العام الحالي..." بعد الآن');
    console.log('✨ التحسينات تشمل:');
    console.log('   • خلفية متدرجة ملونة لاسم المستأجر');
    console.log('   • أيقونة مستخدم ذهبية متحركة');
    console.log('   • تأثيرات بصرية جذابة');
    console.log('   • تحسين للشاشات الصغيرة');

    // إعادة عرض البيانات لرؤية التحسينات
    renderData();
    updateTotalStats();

    console.log('🎉 تم تطبيق التحسينات! تحقق من البطاقات الآن');
};

